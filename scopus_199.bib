
@ARTICLE{Pecorelli2022,
author={Pecorelli, F. and Lujan, S. and Lenarduzzi, V. and Palomba, F. and De Lucia, A.},
title={On the adequacy of static analysis warnings with respect to code smell prediction},
journal={Empirical Software Engineering},
year={2022},
volume={27},
number={3},
doi={10.1007/s10664-022-10126-5},
art_number={64},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85126520334&doi=10.1007%2fs10664-022-10126-5&partnerID=40&md5=e40c0e839e1f2ff67ac13072e9c4ed3c},
affiliation={Tampere University, Tampere, Finland; LUT University, Lappeenranta, Finland; University of Oulu, Oulu, Finland; SeSa Lab, University of Salerno, Fisciano, Italy},
abstract={Code smells are poor implementation choices that developers apply while evolving source code and that affect program maintainability. Multiple automated code smell detectors have been proposed: while most of them relied on heuristics applied over software metrics, a recent trend concerns the definition of machine learning techniques. However, machine learning-based code smell detectors still suffer from low accuracy: one of the causes is the lack of adequate features to feed machine learners. In this paper, we face this issue by investigating the role of static analysis warnings generated by three state-of-the-art tools to be used as features of machine learning models for the detection of seven code smell types. We conduct a three-step study in which we (1) verify the relation between static analysis warnings and code smells and the potential predictive power of these warnings; (2) build code smell prediction models exploiting and combining the most relevant features coming from the first analysis; (3) compare and combine the performance of the best code smell prediction model with the one achieved by a state of the art approach. The results reveal the low performance of the models exploiting static analysis warnings alone, while we observe significant improvements when combining the warnings with additional code metrics. Nonetheless, we still find that the best model does not perform better than a random model, hence leaving open the challenges related to the definition of ad-hoc features for code smell prediction. © 2022, The Author(s).},
author_keywords={Code Smells;  Machine Learning;  Static Analysis Tools},
keywords={Codes (symbols);  Feature extraction;  Forecasting;  Machine learning;  Odors, Analysis tools;  Automated code;  Code smell;  Machine-learning;  Performance;  Prediction modelling;  Recent trends;  Software metrics;  Source codes;  Static analyse tool, Static analysis},
funding_details={Schweizerischer Nationalfonds zur Förderung der Wissenschaftlichen ForschungSchweizerischer Nationalfonds zur Förderung der Wissenschaftlichen Forschung, SNF, PZ00P2 186090},
funding_text 1={The authors would like to sincerely thank the Associate Editor and anonymous Reviewers for the insightful comments and feedback provided during the review process. Fabio acknowledges the support of the Swiss National Science Foundation through the SNF Project No. PZ00P2 186090 (TED).},
references={Abbes, M., Khomh, F., Gueheneuc, Y.G., Antoniol, G., An empirical study of the impact of two antipatterns, blob and spaghetti code, on program comprehension (2011) 2011 15Th European Conference on Software Maintenance and Reengineering. IEEE, pp. 181-190; Al-Shaaby, A., Aljamaan, H., Alshayeb, M., Bad smell detection using machine learning techniques: a systematic literature review (2020) Arab J Sci Eng, 45 (4), pp. 2341-2369; Amorim, L., Costa, E., Antunes, N., Fonseca, B., Ribeiro, M., Experience report: Evaluating the effectiveness of decision trees for detecting code smells (2015) 26Th International Symposium on Software Reliability Engineering (ISSRE), pp. 261-269; Arcelli Fontana, F., Zanoni, M., Code smell severity classification using machine learning techniques (2017) Know-Based Syst, 128 (C), pp. 43-58; Arcelli Fontana, F., Braione, P., Zanoni, M., Automatic detection of bad smells in code: an experimental assessment (2012) J Object Technol, 11 (2), pp. 1-5; Arcelli Fontana, F., Ferme, V., Zanoni, M., Yamashita, A., Automatic metric thresholds derivation for code smell detection (2015) 6Th International Workshop on Emerging Trends in Software Metrics. IEEE, pp. 44-53; Arcelli Fontana, F., Dietrich, J., Walter, B., Yamashita, A., Zanoni, M., Antipattern and code smell false positives: Preliminary conceptualization and classification (2016) In: 23Rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), Vol, 1, pp. 609-613. , (a); Arcelli Fontana, F., Mäntylä, M.V., Zanoni, M., Marino, A., Comparing and experimenting machine learning techniques for code smell detection (2016) Empirical Softw Engg, 21 (3), pp. 1143-1191; Azeem, M.I., Palomba, F., Shi, L., Wang, Q., Machine learning techniques for code smell detection: a systematic literature review and meta-analysis (2019) Inf Softw Technol, 108, pp. 115-138; Banker, R.D., Datar, S.M., Kemerer, C.F., Zweig, D., Software complexity and maintenance costs (1993) Commun ACM, 36 (11), pp. 81-95; Brown, W.J., Malveau, R.C., McCormick, H.W.I.I.I., Mowbray, T.J., (1998) Refactoring Software, Architectures, and Projects in Crisis; Carver, J.C., Juristo, N., Baldassarre, M.T., Vegas, S., (2014) Replications of Software Engineering Experiments; Catolino, G., Palomba, F., Arcelli Fontana, F., de Lucia, A., Zaidman, A., Ferrucci, F., Improving change prediction models with code smell-related information (2020) Empir Softw Eng, 25 (1); Chidamber, S.R., Kemerer, C.F., A metrics suite for object oriented design (1994) IEEE Trans Softw Eng, 20 (6), pp. 476-493; Cunningham, W., The wycash portfolio management system (1992) OOPSLA-92; Das, A.K., Yadav, S., Dhal, S., Detecting code smells using deep learning (2019) TENCON 2019-2019 IEEE Region 10 Conference (TENCON). IEEE, pp. 2081-2086; Di Nucci, D., Palomba, F., Tamburri, D., Serebrenik, A., de Lucia, A., (2018) Detecting Code Smells Using Machine Learning Techniques: Are We There Yet?, , (a), In, Int conf. on software analysis evolution, and reengineering; Di Nucci, D., Palomba, F., Tamburri, D.A., Serebrenik, A., de Lucia, A., Detecting code smells using machine learning techniques: Are we there yet? (2018) In: 26Th International Conference on Software Analysis, Evolution and Reengineering (SANER)., pp. 612-621; Emanuelsson, P., Nilsson, U., A comparative study of industrial static analysis tools (2008) Electronic Notes in Theoretical Computer Science, 217, pp. 5-21; Falessi, D., Russo, B., Mullen, K., (2017) What If I had No Smells? ESEM; Fowler, M., Beck, K., (1999) Refactoring: Improving the Design of Existing Code, , Addison-Wesley Longman Publishing Co Inc; Haiduc, S., Bavota, G., Oliveto, R., de Lucia, A., Marcus, A., Automatic query performance assessment during the retrieval of software artifacts (2012) Proceedings of the 27Th IEEE/ACM International Conference on Automated Software Engineering, pp. 90-99; I Tollin, F.A.F., Zanoni, M., Roveda, R., Change prediction through coding rules violations (2017) EASE’, 17, pp. 61-64; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don’t software developers use static analysis tools to find bugs (2013) In: 35Th International Conference on Software Engineering (ICSE). IEEE, pp. 672-681; Kaur, A., Jain, S., Goel, S., Dhiman, G., A review on machine-learning based code smell detection techniques in object-oriented software system (s) (2021) Recent Advances in Electrical & Electronic Engineering (Formerly Recent Patents on Electrical & Electronic Engineering), 14 (3), pp. 290-303; Khomh, F., Vaucher, S., Gueheneuc, Y.G., Sahraoui, H., A bayesian approach for the detection of code and design smells (2009) Int. Conf. on Quality Software (QSIC ’09), pp. 305-314. , IEE, Korea; Khomh, F., Vaucher, S., Guéhéneuc, Y.G., Sahraoui, H., Bdtex: A gqm-based bayesian approach for the detection of antipatterns (2011) J Syst Softw, 84 (4), pp. 559-572; Khomh, F., Di Penta, M., Guéhéneuc, Y.G., Antoniol, G., An exploratory study of the impact of antipatterns on class change-and fault-proneness (2012) Empir Softw Eng, 17 (3), pp. 243-275; Kreimer, J., Adaptive detection of design flaws (2005) Electronic Notes in Theoretical Computer Science, 141 (4), pp. 117-136. , Fifth Workshop on Language Descriptions Tools, and Applications (LDTA 2005; Lehman, M.M., Laws of software evolution revisited (1996) European Workshop on Software Process Technology, pp. 108-124. , Springer; Lenarduzzi, V., Lomio, F., Huttunen, H., Taibi, D., Are sonarqube rules inducing bugs? 27th International Conference on Software Analysis (2019) Evolution and Reengineering (SANER). Arxiv, , (a); Lenarduzzi, V., Martini, A., Taibi, D., Tamburri, D.A., Towards surgically-precise technical debt estimation: Early results and research roadmap (2019) 3Rd International Workshop on Machine Learning Techniques for Software Quality Evaluation, Maltesque, 2019, pp. 37-42. , (b); Lenarduzzi, V., Sillitti, A., Taibi, D., A survey on code analysis tools for software maintenance prediction (2020) 6Th International Conference in Software Engineering for Defence Applications, pp. 165-175. , Springer International Publishing; Lenarduzzi, V., Nikkola, V., Saarimäki, N., Taibi, D., Does code quality affect pull request acceptance? An empirical study (2021) J Syst Softw, p. 171; Liu, H., Jin, J., Xu, Z., Bu, Y., Zou, Y., Zhang, L., Deep learning based code smell detection (2019) IEEE Transactions on Software Engineering; Lujan, S., Pecorelli, F., Palomba, F., de Lucia, A., Lenarduzzi, V., A preliminary study on the adequacy of static analysis warnings with respect to code smell prediction (2020) Proceedings of the 4Th ACM SIGSOFT International Workshop on Machine-Learning Techniques for Software-Quality Evaluation, pp. 1-6; Lujan, S., Pecorelli, F., Palomba, F., de Lucia, A., Lenarduzzi, V., (2020) A Preliminary Study on the Adequacy of Static Analysis Warnings with Respect to Code Smell Prediction, pp. 1-6; Ma, W., Chen, L., Zhou, Y., Xu, B., Do we have a chance to fix bugs when refactoring code smells?. In: 2016 international conference on software analysis, testing and evolution (SATE) (2016) Pp 24–29; Maiga, A., Ali, N., Bhattacharya, N., Sabané, A., Guéhéneuc, Y., Aimeur, E., Smurf: A svm-based incremental anti-pattern detection approach (2012) 19Th Working Conference on Reverse Engineering, pp. 466-475; Maiga, A., Ali, N., Bhattacharya, N., Sabané, A., Guéhéneuc, Y., Antoniol, G., Aïmeur, E., Support vector machines for anti-pattern detection (2012) 27Th IEEE/ACM International Conference on Automated Software Engineering, pp. 278-281; Maiga, A., Ali, N., Bhattacharya, N., Sabané, A., Guéhéneuc, Y.G., Aimeur, E., Smurf: A svm-based incremental anti-pattern detection approach (2012) Working Conference on Reverse Engineering, pp. 466-475; McCabe, T.J., A complexity measure (1976) IEEE Transactions on software Engineering, (4), pp. 308-320; Moha, N., Gueheneuc, Y.G., Duchien, L., Le Meur, A.F., Decor: A method for the specification and detection of code and design smells (2009) IEEE Trans Softw Eng, 36 (1), pp. 20-36; Nemenyi, P., Distribution-free multiple comparisons (1962) Biometrics, International Biometric Soc 1441 I ST, NW, SUITE 700, WASHINGTON, DC 20005-2210, 18, p. 263; Oliveto, R., Gethers, M., Poshyvanyk, D., de Lucia, A., On the equivalence of information retrieval methods for automated traceability link recovery. In: 2010 IEEE 18th international conference on program comprehension (2010) IEEE, pp. 68-71; Palomba, F., Bavota, G., Di Penta, M., Oliveto, R., de Lucia, A., Do they really smell bad? A study on developers’ perception of bad code smells (2014) International Conference on Software Maintenance and Evolution. IEEE, pp. 101-110; Palomba, F., Bavota, G., Di Penta, M., Oliveto, R., Poshyvanyk, D., De Lucia, A., Mining version histories for detecting code smells (2014) IEEE Trans Softw Eng, 41 (5), pp. 462-489; Palomba, F., Di Nucci, D., Tufano, M., Bavota, G., Oliveto, R., Poshyvanyk, D., de Lucia, A., Landfill: An open dataset of code smells with public evaluation (2015) 2015 IEEE/ACM 12Th Working Conference on Mining Software Repositories, pp. 482-485; Palomba, F., Panichella, A., de Lucia, A., Oliveto, R., Zaidman, A., A textual-based technique for smell detection (2016) 24Th International Conference on Program Comprehension (ICPC). IEEE, pp. 1-10; Palomba, F., Zanoni, M., Fontana, F.A., De Lucia, A., Oliveto, R., Toward a smell-aware bug prediction model (2017) IEEE Trans Softw Eng, 45 (2), pp. 194-218; Palomba, F., Bavota, G., Di Penta, M., Fasano, F., Oliveto, R., De Lucia, A., On the diffuseness and the impact on maintainability of code smells: a large scale empirical investigation (2018) Empir Softw Eng, 23 (3), pp. 1188-1221; Palomba, F., Bavota, G., Penta, M.D., Fasano, F., Oliveto, R., Lucia, A.D., On the diffuseness and the impact on maintainability of code smells: a large scale empirical investigation (2018) Empir Softw Eng, 23 (3), pp. 1188-1221; Pascarella, L., Palomba, F., Bacchelli, A., Fine-grained just-in-time defect prediction (2019) J Syst Softw, 150, pp. 22-36; de Paulo Sobrinho, E.V., de Lucia, A., de Almeida Maia, M., A systematic literature review on bad smells—5 w’s: Which, when, what, who, where (2018) IEEE Transactions on Software Engineering; Pecorelli, F., Palomba, F., Di Nucci, D., de Lucia, A., Comparing heuristic and machine learning approaches for metric-based code smell detection (2019) 27Th International Conference on Program Comprehension (ICPC). IEEE, pp. 93-104; Pecorelli, F., Di Nucci, D., De Roover, C., De Lucia, A., A large empirical assessment of the role of data balancing in machine-learning-based code smell detection (2020) Journal of Systems and Software, , (, a; Pecorelli, F., Palomba, F., Khomh, F., de Lucia, A., Developer-driven code smell prioritization (2020) In: 17Th International Conference on Mining Software Repositories, MSR ’20, pp. 220-231. , (b); Pecorelli, F., Lujan, S., (2021) Lenarduzzi, V. , https://github-com.luisamigo.proxybk.com/sesalab/OnlineAppendices/tree/main/EMSE21-ASATsCodeSmell, Palomba F, De Lucia A, On the adequacy of static analysis warnings withrespect to code smell prediction - online appendix; Politowski, C., Khomh, F., Romano, S., Scanniello, G., Petrillo, F., Guéhéneuc, Y.G., Maiga, A., A large scale empirical study of the impact of spaghetti code and blob anti-patterns on program comprehension (2020) Inf Softw Technol, 122, p. 106278; Quinlan, J.R., Induction of decision trees (1986) Machine Learning, 1 (1), pp. 81-106; Shcherban, S., Liang, P., Tahir, A., Li, X., Automatic identification of code smell discussions on stack overflow: A preliminary investigation (2020) 14Th ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM), ESEM ’20; Sjøberg, D.I., Yamashita, A., Anda, B.C., Mockus, A., Dybå, T., Quantifying the effect of code smells on maintenance effort (2012) IEEE Transactions on Software Engineering, 39 (8), pp. 1144-1156; Soh, Z., Yamashita, A., Khomh, F., Guéhéneuc, Y.G., Do code smells impact the effort of different maintenance programming activities? (2016) In: 2016 IEEE 23Rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), Vol, 1, pp. 393-402; Taibi, D., Janes, A., Lenarduzzi, V., How developers perceive smells in source code: a replicated study (2017) Inf Softw Technol, 92, pp. 223-235; Tantithamthavorn, C., Hassan, A.E., An experience report on defect modelling in practice: Pitfalls and challenges (2018) Proceedings of the 40Th International Conference on Software Engineering: Software Engineering in Practice, pp. 286-295; Tufano, M., Palomba, F., Bavota, G., Di Penta, M., Oliveto, R., De Lucia, A., Poshyvanyk, D., There and back again: Can you compile that snapshot? (2017) Journal of Software: Evolution and Process, 29 (4); Vassallo, C., Panichella, S., Palomba, F., Proksch, S., Zaidman, A., Gall, H.C., Context is king: The developer perspective on the usage of static analysis tools (2018) 26Th International Conference on Software Analysis; Vassallo, C., Panichella, S., Palomba, F., Proksc, S., Gall, H., Zaidman, A., How developers engage with static analysis tools in different contexts (2019) Empirical Software Engineering; Wedyan, F., Alrmuny, D., Bieman, J.M., The effectiveness of automated static analysis tools for fault detection and refactoring prediction (2009) International Conference on Software Testing Verification and Validation, pp. 141-150; White, M., Tufano, M., Vendome, C., Poshyvanyk, D., Deep learning code fragments for code clone detection (2016) Int. Conf. on Automated Software Engineering (ASE), pp. 87-98; Wohlin, C., Runeson, P., Höst, M., Ohlsson, M., Regnell, B., Wesslén, A., (2000) Experimentation in Software Engineering: An Introduction; Yamashita, A., Moonen, L., Do code smells reflect important maintainability aspects? (2012) In: 2012 28Th IEEE International Conference on Software Maintenance (ICSM)., pp. 306-315; Yamashita, A., Moonen, L., Do developers care about code smells? An exploratory survey (2013) In: 2013 20Th Working Conference on Reverse Engineering (WCRE)., pp. 242-251; Ye, T., Kalyanaraman, S., A recursive random search algorithm for large-scale network parameter configuration (2003) Proceedings of the 2003 ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems, pp. 196-205},
correspondence_address1={Pecorelli, F.; Tampere UniversityFinland; email: fabiano.pecorelli@tuni.fi},
publisher={Springer},
issn={13823256},
coden={ESENF},
language={English},
abbrev_source_title={Empir Software Eng},
document_type={Article},
source={Scopus},
}

@ARTICLE{Li20225535,
author={Li, Z. and Li, X. and Wei, Y. and Lu, C. and Lin, Y. and Li, Z.},
title={Ground Fault Analysis and Grounding Method of Static Power Converters in Flexible AC Traction Power Supply Systems},
journal={IEEE Transactions on Power Electronics},
year={2022},
volume={37},
number={5},
pages={5535-5546},
doi={10.1109/TPEL.2021.3125739},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85124010198&doi=10.1109%2fTPEL.2021.3125739&partnerID=40&md5=9eb4a0760b521ee446955218fe6f3916},
affiliation={State Key Laboratory of Power System and Generation Equipment, Department of Electrical Engineering, Tsinghua University, Beijing, 100084, China; China Railway Electrification Engineering Group Co. Ltd., Beijing, 100036, China; China Railway Electric Industry Co. Ltd., Baoding, 071000, China},
abstract={Flexible traction power supply system (FTPSS) can eliminate neutral sections of all catenaries and improve the poor power quality of railway substations. The static power converter (SPC) is the key equipment of FTPSS and its internal faults must be quickly identified and cleared with minimal impact on catenaries to ensure the safety and reliability. This article investigates the two-stage fault characteristics in FTPSS. Before blocking, overcurrent and voltage distortion may result in a wide range of abnormal power supply. After blocking, capacitor overvoltage becomes the primary problem threatening the safety of faulty SPC because of the energy feeding from other SPCs. Equivalent circuits are established and applied to various fault conditions. The most serious fault case can be found through the comparison, so the complicated large-scale simulation scanning can be avoided. A T-shaped grounding method is proposed to solve the problem of fault current and capacitor overvoltage. Based on the calculation and simulation results of several typical fault cases, the dimensioning criterion of grounding circuit is provided for reference. Moreover, a comprehensive scheme of grounding protection is designed to detect and isolate serious faults. The theoretical fault analysis and the proposed grounding method are verified by simulations and experiments. © 1986-2012 IEEE.},
author_keywords={Fault analysis;  Flexible traction power supply system (FTPSS);  Grounding method;  Static power converter (SPC)},
keywords={Electric current collection;  Electric fault currents;  Electric grounding;  Electrolysis;  Equivalent circuits;  Overhead lines;  Power converters, Fault analysis;  Fault analysis methods;  Flexible traction power supply system;  Ground fault analysis;  Grounding methods;  Over-voltages;  Serious faults;  Static power converter;  Static power converters;  Traction power supply system, Static converters},
funding_details={20192001148},
funding_details={National Natural Science Foundation of ChinaNational Natural Science Foundation of China, NSFC, 51807105},
funding_details={National Key Research and Development Program of ChinaNational Key Research and Development Program of China, NKRDPC, 2017YFB1200801},
funding_text 1={This work was supported in part by the Major Science and Technology Projects of China Railway Electrification Engineering Group Co., Ltd., under Grant 20192001148, in part by the National Natural Science Foundation of China under Grant 51807105, and in part by the National Key Research and Development Program of China under Grant 2017YFB1200801.},
references={Mousavi Gazafrudi, S.M., Tabakhpour Langerudy, A., Fuchs, E.F., Al-Haddad, K., Power quality issues in railway electrification: A comprehensive perspective (2015) Ieee Trans. Ind. Electron., 62 (5), pp. 3081-3090. , May; Senini, S.T., Wolfs, P.J., Novel topology for correction of unbalanced load in single phase electric traction systems (2002) Proc Ieee 33rd Annu. Power Electron. Spec. Conf, 3, pp. 1208-1212. , Cairns, qld, Australia; Shu, Z., Xie, S., Li, Q., Single-phase back-to-back converter for active power balancing, reactive power compensation, and harmonic filtering in traction power system (2011) Ieee Trans. Power Electron., 26 (2), pp. 334-343. , Feb; Luo, A., Wu, C., Shen, J., Shuai, Z., Ma, F., Railway static power conditioners for high-speed train traction power supply systems using three-phase v/v transformers (2011) Ieee Trans. Power Electron., 26 (10), pp. 2844-2856. , Oct; Morimoto, H., Development of railway static power conditioner used at substation for Shinkansen (2002) Proc. Power Convers. Conf, 3, pp. 1108-1111. , Osaka, Japan; Glinka, M., Marquardt, R., A new AC/AC multilevel converter family (2005) Ieee Trans. Ind. Electron., 52 (3), pp. 662-669. , Jun; Akagi, H., Classification, terminology, and application of the modular multilevel cascade converter (MMCC) (2011) Ieee Trans. Power Electron., 26 (11), pp. 3119-3130. , Nov; Lesnicar, A., Marquardt, R., An innovative modular multilevel converter topology suitable for a wide power range (2003) Proc Ieee Bologna Power Tech Conf, 3, p. 6. , Bologna, Italy; Rodriguez, J., Multilevel converters: An enabling technology for high-power applications (2009) Proc Ieee, 97 (11), pp. 1786-1817. , Nov; Krastev, I., Tricoli, P., Hillmansen, S., Chen, M., Future of electric railways: Advanced electrification systems with static converters for ac railways (2016) Ieee Electrific. Mag., 4 (3), pp. 6-14. , Sep; Carminati, M., Ragaini, E., Tironi, E., DC and AC ground fault analysis in LVDC microgrids with energy storage systems (2015) Proc Ieee 15th Int. Conf. Environ. Elect. Eng, pp. 1047-1054. , Rome, Italy; Li, G., Liang, J., Ugalde-Loo, C.E., Ma, F., Liangand, H., Song, Z., Protection for submodule overvoltage caused by converter valve-side single-phase-to-ground faults in FB-MMC based bipolar HVDC systems (2020) Ieee Trans. Power Del., 35 (6), pp. 2641-2650. , Dec; Pashkovskiy, S.N., Vainstein, R.A., Yudin, S.M., Transformation of zero-sequence electric quantities for protection against line-to-ground fault in the networks with various neutral grounding modes (2016) Proc. 2nd Int. Conf. Ind. Eng., Appl. Manuf, pp. 1-5. , Chelyabinsk, Russia; El-Sherif, N., Kennedy, S.P., A design guide to neutral grounding of industrial power systems: The pros and cons of various methods (2019) Ieee Ind. Appl. Mag., 25 (1), pp. 25-36. , Jan./Feb; Wang, Y., Yu, Z., He, J., Chen, S., Zeng, R., Zhang, B., Performance of shipboard medium-voltage DC system of various grounding modes under monopole ground fault (2015) Ieee Trans. Ind. Appl., 51 (6), pp. 5002-5009. , Nov./Dec; Naghizadeh, M., Farjah, E., Ghanbari, T., Pourgharibshahi, H., Andani, M.T., Efficient grounding method forDCmicrogrid with multiple grounding points (2018) Proc. Clemson Univ. Power Syst. Conf, pp. 1-6. , Charleston, SC, USA; Skibinski, G.L., Liu, Z., VanLieshout, R.F., Weaver, M.D., Byman, B.A., Part II: Application guidelines for high-resistance grounding of low-voltage common AC-bus and common DC-bus PWM drive systems (2015) Ieee Trans. Ind. Appl., 51 (2), pp. 1385-1397. , Mar./Apr; Li, G., Liang, J., Ma, F., Ugalde-Loo, C.E., Liang, H., Analysis of single-phase-to-ground faults at the valve-side of HB-MMCs in HVDC systems (2019) Ieee Trans. Ind. Electron., 66 (3), pp. 2444-2453. , Mar; Zhang, W., Wei, T., Chen, Q., Cui, Y., Liu, W., Yang, J., Study on grounding modes of AC/DC hybrid distribution system (2019) Proc Ieee Int. Conf. Energy Internet, pp. 42-46. , Nanjing, China; Meghwani, A., Chakrabarti, S., Srivastava, S.C., Anand, S., Analysis of fault characteristics in DC microgrids for various converter topologies (2017) Proc Ieee Innov. Smart Grid Technol.-Asia, pp. 1-6. , Auckland, New Zealand; Yang, J., Fletcher, J.E., O'Reilly, J., Short-circuit and ground fault analyses and location in VSC-based DC network cables (2012) Ieee Trans. Ind. Electron., 59 (10), pp. 3827-3837. , Oct; Cui, S., Lee, H., Jung, J., Lee, Y., Sul, S., A comprehensive AC-side single-line-to-ground fault ride through strategyof an MMC-based HVDC system (2018) Ieee J. Emerg. Sel. Topics Power Electron., 6 (3), pp. 1021-1031. , Sep; Yang, J., Mao, S., Li, X., Xu, Z., Influence mechanism and suppression controlofthe MMConshort-circuit current underACfaults (2020) Ieee Access, 8, pp. 138307-138317; Zang, J., Wang, J., Zhang, J., Zhou, J., Grounding design and fault analysis of MMC based flexible interconnection device in future distribution networks (2018) Proc Ieee Int. Power Electron. Appl. Conf. Expo, pp. 1-6. , Shenzhen, China; Winkelnkemper, M., Korn, A., Steimer, P., A modular direct converter for transformerless rail interties (2010) Proc Ieee Int. Symp. Ind. Electron, pp. 562-567. , Bari, Italy; He, X., Advanced traction power supply system based on modular multilevel converters (2018) Proc. Asian Conf. Energy, Power Transp. Electrific, pp. 1-8. , Singapore; Han, P., Wang, Y., Peng, X., He, X., Shu, Z., Gao, S., Current-sharing performance of an advanced co-phase traction power substation system based on cascade-parallel converter (2017) Proc Ieee 3rd Int. Future Energy Electron. Conf. Ecce Asia, pp. 1932-1937. , Kaohsiung, Taiwan; Wei, Y., Jiang, Q., Pi, J., (2009) Unified Power Quality Controller Based on Series-Connected Split Transformer and Chain-Link Power Modules, , Chinese Patent, Jun; Gautam, S., Yadav, A.K., Gupta, R., AC/DC/AC converter based on parallel AC/DC and cascaded multilevel DC/AC converter (2012) Proc. Students Conf. Eng. Syst, pp. 1-6. , Allahabad, India; Plötz, T., Kirchner, I., Eckel, H., Short circuit current reduction in hybrid multilevel converters for traction applications (2018) Proc. 20th Eur. Conf. Power Electron. Appl. (Energy Convers. Conf. Exhib. Eur.), pp. P1-P9. , Riga, Latvia},
correspondence_address1={Li, X.; State Key Laboratory of Power System and Generation Equipment, China; email: lixq-dee@tsinghua.edu.cn; Wei, Y.; State Key Laboratory of Power System and Generation Equipment, China; email: wyd@tsinghua.edu.cn},
publisher={Institute of Electrical and Electronics Engineers Inc.},
issn={08858993},
coden={ITPEE},
language={English},
abbrev_source_title={IEEE Trans Power Electron},
document_type={Article},
source={Scopus},
}

@ARTICLE{Zhan2022,
author={Zhan, D. and Yu, X. and Zhang, H. and Ye, L.},
title={ErrHunter: Detecting Error-Handling Bugs in the Linux Kernel Through Systematic Static Analysis},
journal={IEEE Transactions on Software Engineering},
year={2022},
doi={10.1109/TSE.2022.3160155},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85126513771&doi=10.1109%2fTSE.2022.3160155&partnerID=40&md5=313648fe225d6675c4d1dec4e5cf2c3c},
affiliation={School of Cyberspace Science, Harbin Institute of Technology, 47822 harbin, heilongjiang, China, 150001; School of Cyberspace Science, Harbin Institute of Technology, 47822 Harbin, Heilongjiang, China; School of Cyberspace Science, Harbin Institute of Industry, 47822 Harbin, Heilongjiang, China},
abstract={Error handling is essential for operating systems, thus, there are many bugs in error-handling code, which could result in serious consequences. In this paper, we revisit the problem of error miss-handling bugs and analyze the root cause of the most common ones in the Linux kernel. Based on the analysis, we propose a systematic static taint-analysis-based approach, ErrHunter, to detect multiple kinds of error miss-handling bugs in the Linux kernel. An automated critical variable identification approach is proposed to identify critical variables in the error-handling paths. A static cross-control-flow taint analysis approach is proposed to construct critical-variable control flow graphs (CCFGs), which describe the processing of critical variables in separate control flows. Based on the CCFGs, ErrHunter can target the root cause of the most common error miss-handling bugs and detect the bugs in a systematic way. ErrHunter is designed for kernel bug detection, so it can handle many specific features of the Linux kernel, such as memory management mechanisms, etc. IEEE},
author_keywords={bug detection;  Codes;  Computer bugs;  cross-control-flow analysis;  Error handling bugs;  Kernel;  Linux;  Process control;  Static analysis;  static taint analysis;  Systematics},
keywords={Data flow analysis;  Error detection;  Flow graphs;  Program debugging;  Static analysis, Bug detection;  Code;  Computer bugs;  Control-flow analysis;  Cross control;  Cross-control-flow analyse;  Error handling;  Error handling bug;  Kernel;  Static taint analyse;  Systematic, Linux},
publisher={Institute of Electrical and Electronics Engineers Inc.},
issn={00985589},
coden={IESED},
language={English},
abbrev_source_title={IEEE Trans Software Eng},
document_type={Article},
source={Scopus},
}

@ARTICLE{Mendonça2022,
author={Mendonça, D.S. and Kalinowski, M.},
title={An empirical investigation on the challenges of creating custom static analysis rules for defect localization},
journal={Software Quality Journal},
year={2022},
doi={10.1007/s11219-021-09580-z},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85123640271&doi=10.1007%2fs11219-021-09580-z&partnerID=40&md5=7b5bceebcdcb8b5723716474e6f6ea08},
affiliation={(CEFET/RJ), Centro Federal de Educação Tecnológica Celso Suckow da Fonseca, Rio de Janeiro, Brazil; Pontifícia Universidade Católica Do Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil},
abstract={Custom static analysis rules, i.e., rules specific for one or more applications, have been successfully applied to perform corrective and preventive software maintenance. Pattern-driven maintenance (PDM) is a method designed to support the creation of such rules during software maintenance. However, as PDM was recently proposed, few maintainers have reported on its usage. Hence, the challenges and skills needed to apply PDM properly are unknown. In this paper, we investigate the challenges faced by maintainers on applying PDM for creating custom static analysis rules for defect localization. We conducted an observational study on novice maintainers creating custom static analysis rules by applying PDM. The study was divided into three tasks: (i) identifying a defect pattern, (ii) programming a static analysis rule to locate instances of the pattern, and (iii) verifying the located instances. We analyzed the efficiency and acceptance of maintainers on applying PDM and their comments on task challenges. We observed that previous knowledge on debugging, the subject software, and related technologies influenced the performance of maintainers as well as the time to learn the technology involved in rule programming. The results strengthen our confidence that PDM can help maintainers in producing custom static analysis rules for locating defects. However, a proper selection and training of maintainers is needed to apply PDM effectively. Also, using a higher level of abstraction can ease static analysis rule programming for novice maintainers. © 2021, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.},
author_keywords={Code defect patterns;  Custom static analysis rules;  Observational study;  Pattern-Driven Maintenance},
keywords={Application programs;  Corrective maintenance;  Defects;  Engineering education;  Preventive maintenance;  Program debugging, Analysis rules;  Code defect pattern;  Code defects;  Custom static analyse rule;  Defect localizations;  Defect patterns;  Empirical investigation;  Observational study;  Pattern-driven maintenance;  Performance, Static analysis},
funding_details={Conselho Nacional de Desenvolvimento Científico e TecnológicoConselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq, 141345/2015–2},
funding_text 1={This work was partially supported by the CNPq grant 141345/2015–2.},
references={Basili, V., Caldiera, G., Rombach, H.D., Goal question metric (GQM) paradigm (1994) In Encyclopedia of Software Engineering; Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the state of static analysis: A large-scale evaluation in open source software (2016) 2016 IEEE 23Rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), 1, pp. 470-481. , https://doi.org/10.1109/SANER.2016.105; Guide to the software engineering body of knowledge (SWEBOK (R)): Version 3.0 (2014) IEEE Computer Society Press; What developers want and need from program analysis: An empirical study (2016) ASE 2016 - Proceedings of the 31St IEEE/ACM International Conference on Automated Software Engineering, , https://doi.org/10.1145/2970276.297; SCPL: A markup language for source code patterns localization (2021) XXXV Simpósio Brasileiro De Engenharia De Software - Trilha De Ferramentas, p. 6. , https://doi.org/10.1145/3474624.3476017; Davis, F.D., Perceived usefulness, perceived ease of use, and user acceptance of information technology (1989) MIS Quarterly, pp. 319-340; (1995) Design Patterns: Elements of Reusable Object-Oriented Software Addison-Wesley, p. 1995. , Reading, MA; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Information and Software Technology, 53 (4), pp. 363-387; Inc, I., (2020), http://pmd-github-io;.luisamigo.proxybk.com Reporting experiments in software engineering. In Guide to advanced empirical software engineering, pp. 201-228; Jones, C., Bonsignour, O., The economics of software quality (2011); Mendonça, D., Kalinowski, M., (2020) Towards practical reuse of custom static analysis rules for defect localization, p. 10; Mendonça, D.S., da Silva, T.G., Ferreira De Oliveira, D., Sales Brandão, J., Lopes, H., Barbosa, S.D.J., Kalinowski, M., von Staa, A., Applying pattern-driven maintenance: a method to prevent latent unhandled exceptions in web applications ACM Reference format (2018) Proceedings of 12Th International Symposium on Empirical Software Engineering and Measurement, Oulu, Finland, October 2018 (ESEM’18), p. 10; Muske, T., Serebrenik, A., Survey of approaches for handling static analysis alarms (2016) Source Code Analysis and Manipulation (SCAM), 2016 IEEE 16Th International Working Conference On, pp. 157-166; Seaman, C.B., Qualitative methods in empirical studies of software engineering (1999) IEEE Transactions on Software Engineering, 25 (4), pp. 557-572; Shull, F., Carver, J., Travassos, G.H., An empirical methodology for introducing software processes (2001) ACM SIGSOFT Software Engineering Notes, 26 (5), pp. 288-296; SonarSource (2008) Sonarqube, , https://www-sonarqube-org.luisamigo.proxybk.com/; Tymchuk, Y., Ghafari, M., Nierstrasz, O., JIT feedback: What experienced developers like about static analysis (2018) Proceedings - International Conference on Software Engineering},
correspondence_address1={Mendonça, D.S.; (CEFET/RJ), Brazil; email: diogo.mendonca@cefet-rj.br},
publisher={Springer},
issn={09639314},
language={English},
abbrev_source_title={Softw. Qual. J.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Wang2021,
author={Wang, L.},
title={Static eccentricity fault analysis of surface-mounted permanent magnet electromotor with skewed slots based on 2d fea},
journal={World Electric Vehicle Journal},
year={2021},
volume={12},
number={4},
doi={10.3390/wevj12040176},
art_number={176},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85117079646&doi=10.3390%2fwevj12040176&partnerID=40&md5=70b62f0c74a3a1f6fa4aeea6f642552b},
affiliation={Henan Key Laboratory of Optoelectronic Sensing Integrated Application, College of Electronic and Electrical Engineering, Henan Normal University, Xinxiang, 453007, China},
abstract={It is of significance to analyze the performance of eccentric electromotor for the research on the electric vehicle wheel drive system’s operational reliabilities. We developed a fast equivalent algorithm in which the two-dimensional finite element calculation results are translated into three-dimensional calculation results. An electromotor with skewed slot was decomposed into straight-slot electromotor units that were series-wound. A prototype electromotor driven by square wave current under healthy and eccentric conditions was calculated, and the computation accuracy of the equivalent algorithm was analyzed. The air-gap magnetic field and induced electromotive force were calculated and contrasted. The study results indicate that the magnetic field distribution and the induced electromotive forces of winding elements with different axis positions were affected transparently by grievous eccentricity, yet the induced electromotive force of one phase winding and average value of torque remained virtually invariable. The reference to reliability analysis of electric vehicle wheel drive system is provided. © 2021 by the author. Li-censee MDPI, Basel, Switzerland.},
author_keywords={Electromotor;  Finite element;  Skew;  Static eccentricity},
keywords={Electric vehicles;  Electric windings;  Electromotive force;  Magnetic fields;  Permanent magnets;  Reliability analysis;  Traction motors;  Vehicle wheels;  Winding, Calculation results;  Drive systems;  Eccentricity faults;  Electromotor;  Equivalent algorithm;  Induced electromotive force;  Skew;  Skewed slots;  Static eccentricities;  Wheel drives, Finite element method},
funding_details={National Natural Science Foundation of ChinaNational Natural Science Foundation of China, NSFC, 21605039},
funding_text 1={Funding: This research was funded by National Natural Science Foundation of China, grant number 21605039.},
references={Zhang, X., Zhang, W., Liang, X., Lu, P., Performance analysis and comparison for two topologies of flux-switching permanent magnet machine (2020) China Electrotech. Soc. Trans. Electr. Mach. Syst, 4, pp. 190-197; Zhu, G., Liu, X., Li, L., Chen, H., Zhu, J., Coupled electromagnetic-thermal-fluidic analysis of permanent magnet synchronous machines with a modified model (2019) China Electrotech. Soc. Trans. Electr. Mach. Syst, 3, pp. 204-209; Li, W., Cheng, M., Investigation of influence of winding structure on reliability of permanent magnet machines (2020) China Electrotech. Soc. Trans. Electr. Mach. Syst, 4, pp. 87-95; Sun, T., Liu, X., Zou, Y., Huang, C., Liang, J., Design and optimization of a mechanical variable-leakage-flux interior permanent magnet machine with auxiliary rotatable magnetic poles (2021) China Electrotech. Soc. Trans. Electr. Mach. Syst, 5, pp. 21-29; Tong, W., Dai, S., Li, S., Li, J., Tang, R., Modeling and Analysis of Axial Flux Permanent Magnet Machines With Coexistence of Rotor Radial Deviation and Angular Eccentricity (2020) IEEE Trans. Energy Convers, 35, pp. 2181-2190; Wang, W., Zheng, P., Wang, M., Liu, Y., Fu, Z., Sui, Y., Demagnetization and Permanent-Magnet Minimization Analyses of Less-Rare-Earth Interior Permanent-Magnet Synchronous Machines Used for Electric Vehicles (2018) IEEE Trans. Magn, 54, pp. 1-5; Ciceo, S., Chauvicourt, F., Martis, J.G.C., PMASynRM system-level NVH model with eccentricity (2020) ITEC, pp. 82-86; Park, Y., Fernandez, D., Bin Lee, S., Hyun, D., Jeong, M., Kommuri, S.K., Cho, C., Briz, F., Online Detection of Rotor Eccentricity and Demagnetization Faults in PMSMs Based on Hall-Effect Field Sensor Measurements (2019) IEEE Trans. Ind. Appl, 55, pp. 2499-2509; Ojaghi, M., Mohammadi, M., Unified Modeling Technique for Axially Uniform and Nonuniform Eccentricity Faults in Three-Phase Squirrel Cage Induction Motors (2017) IEEE Trans. Ind. Electron, 65, pp. 5292-5301; Echeverria, J.J.R., Da Silva, P.V.V., Bortoni, E.D.C., Analysis of Orbital Eccentricity and UMP in Large Salient Pole Synchronous Machines (2019) IEEE Trans. Ind. Appl, 55, pp. 4715-4722; Lee, H.-K., Shin, K.-H., Bang, T.-K., Nah, J.-H., Choi, J.-Y., Experimental Verification and Analytical Study of Influence of Rotor Eccentricity on Electromagnetic Characteristics of Permanent Magnet Machine (2020) IEEE Trans. Appl. Supercond, 30, pp. 1-5; Kim, H., Posa, A., Nerg, J., Heikkinen, J., Sopanen, J.T., Analysis of Electromagnetic Excitations in an Integrated Centrifugal Pump and Permanent Magnet Synchronous Motor (2019) IEEE Trans. Energy Convers, 34, pp. 1759-1768; Lasjerdi, H., Nasiri-Gheidari, Z., Tootoonchian, F., Online Static/Dynamic Eccentricity Fault Diagnosis in Inverter-Driven Electrical Machines Using Resolver Signals (2020) IEEE Trans. Energy Convers, 35, pp. 1973-1980; Aggarwal, A., Allafi, I.M., Strangas, E.G., Agapiou, J.S., Off-Line Detection of Static Eccentricity of PMSM Robust to Machine Operating Temperature and Rotor Position Misalignment Using Incremental Inductance Approach (2021) IEEE Trans. Transp. Electrif, 7, pp. 161-169; Shin, J., Park, Y., Bin Lee, S., Flux-Based Detection and Classification of Induction Motor Eccentricity, Rotor Cage, and Load Defects (2021) IEEE Trans. Ind. Appl, 57, pp. 2471-2480; Wang, S., Hong, J., Sun, Y., Cao, H., Effect Comparison of Zigzag Skew PM Pole and Straight Skew Slot for Vibration Mitigation of PM Brush DC Motors (2019) IEEE Trans. Ind. Electron, 67, pp. 4752-4761; Shi, Z., Sun, X., Cai, Y., Yang, Z., Lei, G., Guo, Y., Zhu, J., Torque Analysis and Dynamic Performance Improvement of a PMSM for EVs by Skew Angle Optimization (2019) IEEE Trans. Appl. Supercond, 29, pp. 1-5; Ueda, Y., Takahashi, H., Transverse-Flux Motor Design With Skewed and Unequally Distributed Armature Cores for Reducing Cogging Torque (2017) IEEE Trans. Magn, 53, pp. 1-5; Jo, I.-H., Lee, H.-W., Jeong, G., Ji, W.-Y., Park, C.-B., A Study on the Reduction of Cogging Torque for the Skew of a Magnetic Geared Synchronous Motor (2019) IEEE Trans. Magn, 55, pp. 1-5; Wu, X., Zhu, Z.Q., Wu, Z., Liu, T., Li, Y., Analysis and Suppression of Rotor Eccentricity Effects on Fundamental Model Based Sensorless Control of Permanent Magnet Synchronous Machine (2020) IEEE Trans. Ind. Appl, 56, pp. 4896-4905; Tong, W., Li, S., Pan, X., Wu, S., Tang, R., Analytical Model for Cogging Torque Calculation in Surface-Mounted Permanent Magnet Motors With Rotor Eccentricity and Magnet Defects (2020) IEEE Trans. Energy Convers, 35, pp. 2191-2200; Hu, Y., Wei, H., Chen, H., Sun, W., Zhao, S., Li, L., Vibration Study of Permanent Magnet Synchronous Motor Base on Static Eccentricity Model (2019) ICEMS, pp. 1-5; Ito, F., Takeuchi, K., Kotsugai, T., Matsushita, M., A Study on Asymmetry of Electromagnetic Force Modes of Permanent Magnet Synchronous Motors With Rotor Eccentricity (2021) IEEE Trans. Magn, 57, pp. 1-6; Abdi, S., Abdi, E., Toshani, H., McMahon, R., Vibration Analysis of Brushless Doubly Fed Machines in the Presence of Rotor Eccentricity (2020) IEEE Trans. Energy Convers, 35, p. 1; De Gersem, H., D’Angelo, L.A.M., Modeling Skew by Single-and Multi-Slice 2-D Machine Models (2021) IEEE Trans. Magn, 57, pp. 1-4; Hong, C., Huang, W., Hu, Z., Performance Calculation of a Dual Stator Solid Rotor Axial Flux Induction Motor Using the Multi-Slice and Multi-Layer Method (2018) IEEE Trans. Magn, 55, pp. 1-9; Zhang, D., Liu, T., He, C., Wu, T., A New 2-D Multi-Slice Time-Stepping Finite Element Method and Its Application in Analyzing the Transient Characteristics of Induction Motors Under Symmetrical Sag Conditions (2018) IEEE Access, 6, pp. 47036-47046; Liu, T., Jiang, M., Zhang, D., Zhao, H., Shuang, F., Effect of Symmetrical Voltage Sag on Induction Motor Considering Phase-Angle Factors Based on a New 2-D Multi-Slice Time-Stepping Finite Element Method (2020) IEEE Access, 8, pp. 75946-75956},
correspondence_address1={Wang, L.; Henan Key Laboratory of Optoelectronic Sensing Integrated Application, China; email: 2014096@htu.edu.cn},
publisher={MDPI},
issn={20326653},
language={English},
abbrev_source_title={World Electr. Veh. J.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Rostami20212384,
author={Rostami, A. and Poursha, M.},
title={A lateral load distribution for the static analysis of base-isolated building frames under the effect of far-fault and near-fault ground motions},
journal={Structures},
year={2021},
volume={34},
pages={2384-2405},
doi={10.1016/j.istruc.2021.08.125},
note={cited By 1},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85114995331&doi=10.1016%2fj.istruc.2021.08.125&partnerID=40&md5=26649e4bdd3d959bc400bc96b87acf64},
affiliation={Faculty of Civil Engineering, Sahand University of Technology, Tabriz, Iran; Earthquake Engineering Research Centre, Sahand University of Technology, Tabriz, Iran},
abstract={This paper attempts to examine the effect of the scaling of ground motion records on the seismic responses of base-isolated buildings by using the three scaling methods including the ASCE 7–10, acceleration spectrum intensity, SIa, and the spectral acceleration corresponding to the effective period of the base-isolated structure at the design displacement, Sa(TD). The buildings had steel moment-resisting and X-braced systems and were isolated with lead rubber bearings (LRBs) at the base. Near-fault ground motions with Forward Directivity (FD), Fling-Step (FS) and No Pulse (No P.) characteristics as well as far-fault ground motion records were studied in this paper. The discrepancy in the seismic responses as well as the effect of the pulse period in the case of pulse-like ground motions was scrutinized for the three scaling methods. Also, the response spectrum analysis (RSA) and static method with the equivalent lateral force distribution prescribed in ASCE 7–10 were carried out. The results indicate that the RSA as well as the static analysis, prescribed in ASCE 7–10, underestimates the story shears of the base-isolated buildings. The underestimation increases in the case of the FF and No P. ground motions having a large amount of spectral acceleration in the higher modes region. Also, the underestimation increases with the increase in the height of the base-isolated buildings as well as in the case of the moment-resisting frames compared to the X-braced ones. Finally, by means of the results derived from the time history analyses, a formula was proposed to determine the lateral force distribution along the height of the base-isolated buildings with LRBs considering the characteristics of the isolator and the structure for different types of the ground motions. © 2021 Institution of Structural Engineers},
author_keywords={Base-isolated building;  Fling-Step;  Forward directivity;  Lateral load distribution;  Near-fault ground motions;  Scaling of the ground motions},
references={Naeim, F., Kelly, J.M., (1999) Design of Seismic Isolated Structures, , John Wiley & Sons, Inc. Hoboken, NJ, USA; York, K., Ryan, K.L., Distribution of lateral forces in base-isolated buildings considering isolation system nonlinearity (2008) J Earthquake Eng, 12 (7), pp. 1185-1204; Council, B.S.S., Prestandard and commentary for the seismic rehabilitation of buildings, FEMA-356 (2000), Federal Emergency Management Agency Washington, DC; Chao, S.H., Goel, S.C., Lee, S.S., A seismic design lateral force distribution based on inelastic state of structures (2007) Earthquake Spectra., 23 (3), pp. 547-569; (1991), Uniform Building Code “UBC-91”, International Conference of Building Officials, Chapter 23, Whittier, C.A, USA; (2010), American Society of Civil Engineers (ASCE), Minimum Design Loads for Buildings and Other Structures, ASCE 7-10, Reston; Kelly, J.M., (1997) Earthquake-Resistant Design with Rubber, pp. 161-189. , Springer London London; Andriono, T., Carr AJ., Reduction and distribution of lateral seismic inertia forces on base isolated multistorey structures. Bulletin of the New Zealand National Society for Earthquake Engineering. 1991; 24(3): 225-37; Lee, D.-G., Hong, J.-M., Kim, J., Vertical distribution of equivalent static loads for base isolated building structures (2001) Eng Struct, 23 (10), pp. 1293-1306; Tsai, C.S., Chen, B.-J., Chiang, T.-C., Experimental and computational verification of reasonable design formulae for base-isolated structures (2003) Earthquake Eng Struct Dyn, 32 (9), pp. 1389-1406; Khoshnoudian, F., Mehrparvar, B., Evaluation of IBC equivalent static procedure for base shear distribution of seismic isolated structures (2008) J Earthquake Eng, 12 (5), pp. 681-703; Cardone, D., Dolce, M., Gesualdi, G., Lateral force distributions for the linear static analysis of base-isolated buildings (2009) Bull Earthq Eng, 7 (3), pp. 801-834; Khoshnoudian, F., Nozadi, O., Effects of higher modes on vertical distribution of isolated structures under near field earthquakes. International (2013) Journal of Civil Engineering, 11 (2 A), pp. 115-124; Ryan, K.L., Button, M.R., Mayes, R.L., ASCE 7–16 Lateral Force Distribution Equations for Static Design of Seismically Isolated Buildings (2019) J Struct Eng, 145 (2), p. 04018258; Zinco, A., Fraternali, F., Benzoni, G., Martinelli, E., On the Distribution in Height of Base Shear Forces in Linear Static Analysis of Base-Isolated Structures (2020) Buildings, 10 (11), p. 197; Gioncu, V., Mazzolani, F., Earthquake engineering for structural design. 2010: CRC Press; Kalkan, E., Kunnath, S.K., Effects of fling step and forward directivity on seismic response of buildings (2006) Earthquake Spectra, 22 (2), pp. 367-390; Jangid, R.S., Kelly, J.M., Base isolation for near-fault motions (2001) Earthquake Eng Struct Dyn, 30 (5), pp. 691-707; Bray, J.D., Rodriguez-Marek, A., Characterization of forward-directivity ground motions in the near-fault region (2004) Soil Dyn Earthquake Eng, 24 (11), pp. 815-828; Somerville, P.G., Smith, N.F., Graves, R.W., Abrahamson, N.A., Modification of empirical strong ground motion attenuation relations to include the amplitude and duration effects of rupture directivity (1997) Seismol Res Lett, 68 (1), pp. 199-222; Pu, W., Liang, R., Distribution of shear coefficient of multi-story buildings subjected to near-fault ground motions (2018) KSCE J Civ Eng, 22 (9), pp. 3430-3442; Sharbatdar, M.K., Vaez, S.R.H., Amiri, G.G., Naderpour, H., Seismic response of base-isolated structures with LRB and FPS under near fault ground motions (2011) Procedia Eng, 14, pp. 3245-3251; Haseli, S., Puorsha, M., Investigation into the seismic responses of base-isolted buildings under the influence of near-field ground motions (2017) Amirkabir Journal of Civil Engineering, 50 (3), pp. 527-544. , (in Persian); Mazza, F., Seismic demand of base-isolated irregular structures subjected to pulse-type earthquakes (2018) Soil Dyn Earthquake Eng, 108, pp. 111-129; Habib, A., AL Houri, A., Yildirim, U., Comparative study of base-isolated irregular RC structures subjected to pulse-like ground motions with low and high PGA/PGV ratios (2021) Structures, 31, pp. 1053-1071; Nazarnezhad, T., Naderpour, H., Probabilistic damage evaluation of base-isolated reinforced concrete structures under near-fault pulse-like bidirectional seismic excitations (2021) Structures, 32, pp. 1156-1170; Bhagat, S., Wijeyewickrema, A.C., Subedi, N., Influence of Near-Fault Ground Motions with Fling-Step and Forward-Directivity Characteristics on Seismic Response of Base-Isolated Buildings (2021) J Earthquake Eng, 25 (3), pp. 455-474; Zheng, W.Z., Wang, H., Li, J., Shen, H.J., Parametric Study of SMA-based Friction Pendulum System for Response Control of Bridges under Near-Fault Ground Motions (2019) J Earthquake Eng, pp. 1-19; AISC, 360–10, Specification for Structural Steel Buildings, (ANSI/AISC 360–10). American Institute of Steel Construction (2010) Chicago-Illinois; AISC, 341–10, Seismic Provisions for Structural Steel Buildings (2010), American Institute of Steel Construction Chicago, IL; Naeim, F., Kelly, J.M., Design of seismic isolated structures, from theory to practice (1999), Wiley Chichester, UK; Cheng, F.Y., Jiang, H., Lou, H., Smart Structures: Innovative Systems for Seismic Response Control (2008), CRC Press Taylor and Francis Group; Faal, H.N., Poursha, M., Applicability of the N2, extended N2 and modal pushover analysis methods for the seismic evaluation of base-isolated building frames with lead rubber bearings (LRBs) (2017) Soil Dyn Earthquake Eng, 98, pp. 84-100; Somerville, P.G., (1998), Development of an improved representation of near fault ground motions. In SMIP98 Seminar on Utilization of Strong-Motion (Vol. 15); http:/peer.berkeley.edu; Michaud, D., Léger, P., Ground motions selection and scaling for nonlinear dynamic analysis of structures located in Eastern North America (2014) Can J Civ Eng, 41 (3), pp. 232-244; Ozdemir, G., Constantinou, M.C., Evaluation of equivalent lateral force procedure in estimating seismic isolator displacements (2010) Soil Dyn Earthquake Eng, 30 (10), pp. 1036-1042; Sextos, A.G., Katsanos, E.I., Manolis, G.D., EC8-based earthquake record selection procedure evaluation: Validation study based on observed damage of an irregular R/C building (2011) Soil Dyn Earthquake Eng, 31 (4), pp. 583-597; Daei, A., Poursha, M., Zarrin, M., Seismic performance evaluation of code-compliant RC moment resisting frame buildings subjected to near-fault pulse-like and non-pulse-like ground motions (2021) J Earthquake Eng; Daei, A., Poursha, M., On the accuracy of enhanced pushover procedures for seismic performance evaluation of code-conforming RC moment-resisting building frames subjected to pulse-like and non-pulse-like excitations (2021) Structures, 32, pp. 929-945; Alavi, B., Krawinkler, H., Behavior of moment-resisting frame structures subjected to near-fault ground motions (2004) Earthquake Eng Struct Dyn, 33 (6), pp. 687-706},
correspondence_address1={Poursha, M.; Faculty of Civil Engineering, Iran; email: poursha@sut.ac.ir},
publisher={Elsevier Ltd},
issn={23520124},
language={English},
abbrev_source_title={Structures},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Li20212183,
author={Li, Z. and Wang, J. and Sun, M. and Lui, J.C.S.},
title={MirChecker: Detecting Bugs in Rust Programs via Static Analysis},
journal={Proceedings of the ACM Conference on Computer and Communications Security},
year={2021},
pages={2183-2196},
doi={10.1145/3460120.3484541},
note={cited By 0; Conference of 27th ACM Annual Conference on Computer and Communication Security, CCS 2021 ; Conference Date: 15 November 2021 Through 19 November 2021;  Conference Code:174020},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85119355437&doi=10.1145%2f3460120.3484541&partnerID=40&md5=5b5cf88efa574f019c87642b90a8a7da},
affiliation={The Chinese University of Hong Kong, Shatin, Hong Kong; Baidu Security, Beijing, China},
abstract={Safe system programming is often a crucial requirement due to its critical role in system software engineering. Conventional low-level programming languages such as C and assembly are efficient, but their inherent unsafe nature makes it undesirable for security-critical scenarios. Recently, Rust has become a promising alternative for safe system-level programming. While giving programmers fine-grained hardware control, its strong type system enforces many security properties including memory safety. However, Rust's security guarantee is not a silver bullet. Runtime crashes and memory-safety errors still harass Rust developers, causing damaging exploitable vulnerabilities, as reported by numerous studies. In this paper, we present and evaluate MirChecker, a fully automated bug detection framework for Rust programs by performing static analysis on Rust's Mid-level Intermediate Representation (MIR). Based on the observation of existing bugs found in Rust codebases, our approach keeps track of both numerical and symbolic information, detects potential runtime crashes and memory-safety errors by using constraint solving techniques, and outputs informative diagnostics to users. We evaluate MirChecker on both buggy code snippets extracted from existing Common Vulnerabilities and Exposures (CVE) and real-world Rust codebases. Our experiments show that MirChecker can detect all the issues in our code snippets, and is capable of performing bug finding in real-world scenarios, where it detected a total of 33 previously unknown bugs including 16 memory-safety issues from 12 Rust packages (crates) with an acceptable false-positive rate. © 2021 ACM.},
author_keywords={abstract interpretation;  rust;  static analysis},
keywords={C (programming language);  Program debugging;  Safety engineering;  Software engineering, Abstract interpretations;  Crash safety;  Detecting bugs;  Low level programming;  Memory safety;  Runtimes;  Rust;  SAFER system;  Safety errors;  Security-critical, Static analysis},
funding_details={R4032-18},
funding_text 1={The work of John C.S. Lui is supported in part by the RGC R4032-18. We would also like to express our gratitude to our shepherd Prof. Erik van der Kouwe and anonymous reviewers for their constructive comments. Thanks to all the crate maintainers who responded to our bug reports.},
references={Anderson, B., Bergstrom, L., Goregaokar, M., Matthews, J., McAllister, K., Moffitt, J., Sapin, S., Engineering the servo web browser engine using rust (2016) Proceedings of the 38th International Conference on Software Engineering Companion (ICSE '16), pp. 81-89; Astrauskas, V., Müller, P., Poli, F., Summers, A.J., Leveraging rust types for modular specification and verification (2019) Proceedings of the ACM on Programming Languages 3, OOPSLA, pp. 1-30. , 2019; Fuzzing Authority, R., (2021) Trophy Case, , https://github-com.luisamigo.proxybk.com/rust-fuzz/trophycase; Baldoni, R., Coppa, E., Cono D'elia, D., Demetrescu, C., Finocchi, I., A survey of symbolic execution techniques (2018) Comput. Surveys, 51 (3), pp. 1-39. , 2018; Baranowski, M., He, S., Rakamaric, Z., Verifying rust programs with smack (2018) Proceedings of the 16th International Symposium on Automated Technology for Verification and Analysis (ATVA '18), , 528-535; Bourdoncle, F., Efficient chaotic iteration strategies with widenings (1993) Formal Methods in Programming and Their Applications, pp. 128-141; Brat, G., Navas, J.A., Shi, N., Venet, A., IKOS: A framework for static analysis based on abstract interpretation (2014) International Conference on Software Engineering and Formal Methods (SEFM '14), pp. 271-277; Cadar, C., Dunbar, D., Engler, D., KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs (2008) Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation (OSDI '08), pp. 209-224; Clarke, E., Kroening, D., Lerda, F., A tool for checking ansi-c programs (2004) International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS '04), pp. 168-176; (2017) CVE-2017-1000430, , https://cve-mitre-org.luisamigo.proxybk.com/cgi-bin/cvename.cgi?name=CVE-2017-1000430, CVE Contributors; (2019) CVE-2019-15552, , https://cve-mitre-org.luisamigo.proxybk.com/cgi-bin/cvename.cgi?name=CVE-2019-15552, CVE Contributors; (2019) CVE-2019-15553, , https://cve-mitre-org.luisamigo.proxybk.com/cgi-bin/cvename.cgi?name=CVE-2019-15553, CVE Contributors; (2019) CVE-2019-16140, , https://cve-mitre-org.luisamigo.proxybk.com/cgi-bin/cvename.cgi?name=CVE-2019-16140, CVE Contributors; (2021) CoRnucopia of ABstractions: A Language-agnostic Library for Abstract Interpretation, , https://github-com.luisamigo.proxybk.com/seahorn/crab, Crab Contributors; (2021) MIRAI: Rust Mid-level IR Abstract Interpreter, , https://github-com.luisamigo.proxybk.com/facebookexperimental/MIRAI, MIRAI Contributors; (2021) Miri: An Interpreter for Rust's Mid-level Intermediate Representation, , https://github-com.luisamigo.proxybk.com/rust-lang/miri, Miri Contributors; (2021) Redox OS, , https://www-redox-os-org.luisamigo.proxybk.com/, RedoxOS Contributors; Cousot, P., Cousot, R., Static determination of dynamic properties of programs (1976) Proceedings of the 2nd International Symposium on Programming (ISOP '76), , 106-130; Cousot, P., Cousot, R., Abstract interpretation: A unified lattice model for static analysis of programs by construction or approximation of fixpoints (1977) Proceedings of the 4th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages (POPL '77), pp. 238-252; Cousot, P., Cousot, R., Systematic design of program analysis frameworks (1979) Proceedings of the 6th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages (POPL '79), pp. 269-282; Cousot, P., Halbwachs, N., Automatic discovery of linear restraints among variables of a program (1978) Proceedings of the 5th ACM SIGACTSIGPLAN Symposium on Principles of Programming Languages (POPL '78), pp. 84-96; Cui, M., Chen, C., Xu, H., Zhou, Y., (2021) SafeDrop: Detecting Memory Deallocation Bugs of Rust Programs Via Static Data-Flow Analysis, , [cs. PL]; De Moura, L., Bjørner, N., Z3: An efficient SMT solver (2008) Tools and Algorithms for the Construction and Analysis of Systems (TACAS '08), pp. 337-340; DeLine, R., Leino, R., BoogiePL: A typed procedural language for checking object-oriented programs (2005) Technical Report MSR-TR-2005-70. 13; (2021) Rust for Linux, , https://github-com.luisamigo.proxybk.com/Rust-for-Linux, Rust For Linux Developers; Dewey, K., Roesch, J., Hardekopf, B., Fuzzing the rust typechecker using clp (2015) Proceedings of the 30th IEEE/ACM International Conference on Automated Software Engineering (ASE '15), pp. 482-493; Dillig, I., Dillig, T., Aiken, A., Static error detection using semantic inconsistency inference (2007) Proceedings of the 28th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '07), pp. 435-445; Engler, D., Yu Chen, D., Hallem, S., Chou, Y., Chelf, B., Bugs as deviant behavior: A general approach to inferring errors in systems code (2001) ACM SIGOPS Operating Systems Review, 35 (5), pp. 57-72. , 2001; Nora Evans, A., Campbell, B., Lou Soffa, M., Is rust used safely by software developers? (2020) Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering (ICSE '20), pp. 246-257; Garzella, J., Baranowski, M., He, S., Rakamaric, Z., Leveraging compiler intermediate representation for multi-and cross-language verification (2020) Proceedings of the 21st International Conference on Verification, Model Checking, and Abstract Interpretation (VMCAI '20), pp. 90-111; Girard, J., Linear logic: Its syntax and semantics (1995) Proceedings of the Workshop on Advances in Linear Logic, pp. 1-42; Granger, P., Static analysis of arithmetical congruences (1989) International Journal of Computer Mathematics, 30 (3-4), pp. 165-190. , 1989; Hahn, F., (2016) Rust2Viper: Building A Static Verifier for Rust, , Master's thesis. ETH Zürich; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) ACM SIGPLAN Notices, 39 (12), pp. 92-106. , 2004; Jeannet, B., Miné, A., Apron: A library of numerical abstract domains for static analysis (2009) International Conference on Computer Aided Verification (CAV '09), pp. 661-667; Kildall, G.A., A unified approach to global program optimization (1973) Proceedings of the 1st Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages (POPL '73), pp. 194-206; King, J.C., Symbolic execution and program testing (1976) Commun. ACM, 19 (7), pp. 385-394. , 1976; Lattner, C., Adve, V., LLVM: A compilation framework for lifelong program analysis & transformation (2004) Proceedings of the International Symposium on Code Generation and Optimization: Feedback-Directed and Runtime Optimization (CGO '04), pp. 75-86; Levy, A., Campbell, B., Ghena, B., Giffin, D.B., Pannuto, P., Dutta, P., Levis, P., Multiprogramming a 64kb computer safely and efficiently (2017) Proceedings of the 26th Symposium on Operating Systems Principles (SOSP '17), pp. 234-251; Li, Z., Wang, J., Sun, M., Lui, S.J.C., Securing the device drivers of your embedded systems: Framework and prototype (2019) Proceedings of the 14th International Conference on Availability, Reliability and Security (ARES '19), pp. 1-10; Lindner, M., Aparicius, J., Lindgren, P., No panic! verification of rust programs by symbolic execution (2018) 2018 IEEE 16th International Conference on Industrial Informatics (INDIN '18), pp. 108-114; Liu, P., Zhao, G., Huang, J., Securing unsafe rust programs with xrust (2020) Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering (ICSE '20), pp. 234-245; Miné, A., The octagon abstract domain (2006) Higher-Order and Symbolic Computation, 19 (1), pp. 31-100. , 2006; Møller, A., Schwartzbach, M.I., (2018) Static Program Analysis; Müller, P., Schwerhoff, M., Summers, A.J., Viper: A verification infrastructure for permission-based reasoning (2016) Proceedings of the 17th International Conference on Verification, Model Checking, and Abstract Interpretation-Volume 9583 (VMCAI '16), pp. 41-62; Nielson, F., Nielson, H.R., Hankin, C., (2010) Principles of Program Analysis, , Springer Publishing Company, Incorporated; Qin, B., Chen, Y., Yu, Z., Song, L., Zhang, Y., Understanding memory and thread safety practices and issues in real-world rust programs (2020) Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '20), pp. 763-779; Rakamaric, Z., Emmi, M., SMACK: Decoupling source language details from verifier implementations (2014) Proceedings of the 26th International Conference on Computer Aided Verification (CAV '14), pp. 106-113; Gordon Rice, H., Classes of recursively enumerable sets and their decision problems (1953) Trans. Amer. Math. Soc., 74 (2), pp. 358-366. , 1953; Toman, J., Pernsteiner, S., Torlak, E., Crust: A bounded verifier for rust (2015) 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE '15), pp. 75-80; Vander Stoep, J., Hines, S., (2021) Rust in the Android Platform, , https://security-googleblog-com.luisamigo.proxybk.com/2021/04/rust-in-android-platform.html; Wadler, P., Linear types can change the world! (1990) Programming Concepts and Methods; Xu, H., Chen, Z., Sun, M., Zhou, Y., Lyu, M., (2021) Memory-Safety Challenge Considered Solved? An In-Depth Study with All Rust CVEs, , [cs. PL]; Yu, Z., Song, L., Zhang, Y., (2019) Fearless Concurrency? Understanding Concurrent Programming Safety in Real-World Rust Software, , [cs. PL]},
sponsors={ACM Special Interest Group on Security, Audit and Control (ACM SIGSAC); Korea Institute of Information Security and Cryptology (KIISC)},
publisher={Association for Computing Machinery},
issn={15437221},
isbn={9781450384544},
language={English},
abbrev_source_title={Proc ACM Conf Computer Commun Secur},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Bolotnikov2021344,
author={Bolotnikov, I.V. and Borodin, A.E.},
title={Interprocedural Static Analysis for Finding Bugs in Go Programs},
journal={Programming and Computer Software},
year={2021},
volume={47},
number={5},
pages={344-352},
doi={10.1134/S0361768821050030},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85114877839&doi=10.1134%2fS0361768821050030&partnerID=40&md5=a1ec94b05acb6f177f648c498c8b67b4},
affiliation={Ivannikov Institute for System Programming, Russian Academy of Sciences, ul. Solzhenitsyna 25, Moscow, 119333, Russian Federation; Moscow State University, Moscow, 119991, Russian Federation},
abstract={Abstract: In recent years, the popularity of the Go programming language has been growing. However, currently, there are only lightweight static analyzers (linters) available for Go. We fill this gap by adapting the Svace static analyzer for Go programs. We implement an interprocedural and intermodular static analyzer that possesses both flow sensitivity and path sensitivity. To evaluate its performance, we use ten open source projects. The sixteen evaluated checkers emitted 6817 warnings with 76% true positive rate. © 2021, Pleiades Publishing, Ltd.},
keywords={Cotton;  Open source software;  Program debugging, Flow sensitivity;  Inter-procedural;  Open source projects;  Static analyzers;  True positive rates, Static analysis},
references={(2020) Golang-2019 Survey, , https://blog-golang-org.luisamigo.proxybk.com/survey2019-results, Accessed October 3; (2020), http://pypl-github-io.luisamigo.proxybk.com/PYPL; IEEE Spectrum’s Programming Languages Top., , https://spectrum-ieee-org.luisamigo.proxybk.com/static/interactive-the-top-programming-languages-2019; (2020) Staticcheck Main Page, , https://staticcheck-io.luisamigo.proxybk.com, Accessed October 10; (2020) Go-Critic Main Page, , https://github-com.luisamigo.proxybk.com/go-critic/go-critic, Accessed October 10; (2020) Errcheck Main Page, , https://github-com.luisamigo.proxybk.com/kisielk/errcheck, Accessed October 10; Borodin, A.E., Dudina, I.A., Intra-procedural analysis for error detection based on symbolic execution (2020) Tr. Inst. Sist. Program. Ross. Akad. Nauk (Proc. Inst. Syst. Program. Russ. Acad. Sci.), 32 (6), pp. 87-100. , https://doi.org/10.15514/ISPRAS-2020-32(6)-7; Borodin, A.E., Belevantsev, A.A., (2015) Proc. Inst. Syst. Program. Russ. Acad. Sci.), 27 (2), pp. 111-134. , https://doi.org/10.15514/ISPRAS-2015-27(6)-8, Svace static analyzer as a collection of analyzers of different levels of complexity, Tr. Inst. Sist. Program. Ross. Akad. Nauk (, vol, no, pp; Belevantsev, A., Design and development of Svace static analyzers (2018) Proc. Ivannikov Memorial Workshop (IVMEM), pp. 3-9; Ivannikov, V.P., Static analyzer Svace for finding defects in a source program code (2014) Program. Comput. Software, 40, pp. 265-275; Merkulov, A.P., Polyakov, S.A., Belevantsev, A.A., Analyzing Java programs in the Svace tool (2017) Proc. Inst. Syst. Program. Russ. Acad. Sci, 29 (3). , Tr. Inst. Sist. Program. Ross. Akad. Nauk; Borodin, A.E., Inter-procedural context-sensitive static analysis for error detection in the source code of programs in C and C++ (2016) Cand. Sci. (Phys.-Math.) Dissertation, , Moscow; (2017) Sist. Administrator, 7-8, pp. 135-139},
correspondence_address1={Bolotnikov, I.V.; Ivannikov Institute for System Programming, ul. Solzhenitsyna 25, Russian Federation; email: igor.bolotnikov@ispras.ru; Borodin, A.E.; Ivannikov Institute for System Programming, ul. Solzhenitsyna 25, Russian Federation; email: alexey.borodin@ispras.ru},
publisher={Pleiades journals},
issn={03617688},
language={English},
abbrev_source_title={Program. Comput. Softw.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Siavvas2021431,
author={Siavvas, M. and Kehagias, D. and Tzovaras, D. and Gelenbe, E.},
title={A hierarchical model for quantifying software security based on static analysis alerts and software metrics},
journal={Software Quality Journal},
year={2021},
volume={29},
number={2},
pages={431-507},
doi={10.1007/s11219-021-09555-0},
note={cited By 2},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85106207514&doi=10.1007%2fs11219-021-09555-0&partnerID=40&md5=b0ecf71985d4ef4c10438eabe73da349},
affiliation={Imperial College London, London, SW7 2AZ,, United Kingdom; Centre for Research and Technology Hellas, Thessaloniki, Greece; Institute of Theoretical & Applied Informatics, Polish Academy of Sciences, ul. Baltycka 5, Gliwice, 44100, Poland},
abstract={Despite the acknowledged importance of quantitative security assessment in secure software development, current literature still lacks an efficient model for measuring internal software security risk. To this end, in this paper, we introduce a hierarchical security assessment model (SAM), able to assess the internal security level of software products based on low-level indicators, i.e., security-relevant static analysis alerts and software metrics. The model, following the guidelines of ISO/IEC 25010, and based on a set of thresholds and weights, systematically aggregates these low-level indicators in order to produce a high-level security score that reflects the internal security level of the analyzed software. The proposed model is practical, since it is fully automated and operationalized in the form of a standalone tool and as part of a broader Computer-Aided Software Engineering (CASE) platform. In order to enhance its reliability, the thresholds of the model were calibrated based on a repository of 100 popular software applications retrieved from Maven Repository. Furthermore, its weights were elicited in a way to chiefly reflect the knowledge expressed by the Common Weakness Enumeration (CWE), through a novel weights elicitation approach grounded on popular decision-making techniques. The proposed model was evaluated on a large repository of 150 open-source software applications retrieved from GitHub and 1200 classes retrieved from the OWASP Benchmark. The results of the experiments revealed the capacity of the proposed model to reliably assess internal security at both product level and class level of granularity, with sufficient discretion power. They also provide preliminary evidence for the ability of the model to be used as the basis for vulnerability prediction. To the best of our knowledge, this is the first fully automated, operationalized and sufficiently evaluated security assessment model in the modern literature. © 2021, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.},
author_keywords={Security Assessment;  Software Quality Evaluation;  Software Security},
keywords={Application programs;  Benchmarking;  Computer aided software engineering;  Decision making;  Gages;  Hierarchical systems;  Open source software;  Open systems;  Risk assessment;  Software design;  Software reliability, Hierarchical model;  Internal security;  Quantitative security assessments;  Secure software development;  Security assessment;  Software applications;  Software products;  Software security, Static analysis},
funding_details={Horizon 2020 Framework ProgrammeHorizon 2020 Framework Programme, H2020, 780572},
funding_text 1={This work is partially funded by the European Union’s Horizon 2020 Research and Innovation Programme through SDK4ED project under Grant Agreement No. 780572.},
references={International Conference on Cyber Security (2012) Cyber Warfare and Digital Forensic, pp. 94-99; Alhazmi, O.H., Malaiya, Y.K., Ray, I., Measuring, analyzing and predicting security vulnerabilities in software systems (2007) Computers and Security, 26 (3), pp. 219-228; Security Metrics for Object-Oriented Designs (2010) In 2010 21St Australian Software Engineering Conference, pp. 55-64; Alshammari, B., Fidge, C., Corney, D., A Hierarchical Security Assessment Model for Object-Oriented Programs (2011) . 2011 11Th International Conference on Quality Software, pp. 218-227; Alshammari, B., Fidgeand, C., Corney, D., Security metrics for object-oriented class designs (2009) Proceedings - International Conference on Quality Software, pp. 11-20; Andress, J., (2014) The Basics of Information Security: Understanding the Fundamentals of Infosec in Theory and Practice, , Waltham, MA, Syngress; A phase-wise review of software security metrics (2018) In Networking Communication and Data Knowledge Engineering.; Baggen, R., Correia, J.P., Schill, K., Visser, J., Standardized code quality benchmarking for improving software maintainability (2012) Software Quality Journal, 20 (2), pp. 287-307; A probabilistic software quality model (2011) IEEE., pp. 243-252; Bansiya, J., Davis, C., A hierarchical model for object-oriented design quality assessment (2002) IEEE Transactions on Software Engineering, 28 (1), pp. 4-17; Basso, T., Silva, H., Moraes, R., On the use of quality models to characterize trustworthiness properties (2019) Software Engineering for Resilient Systems, , Springer; Bholanath, R., Analyzing the State of Static Analysis: A Large-Scale Evaluation in Open Source Software (2016) 2016 IEEE 23Rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), 1, pp. 470-481; Boland, T., Black, P.E., Juliet 1.1 C/C++ and java test suite (2012) Computer, 45 (10), pp. 88-90. , &; Carvalho, M., DeMott, J., Ford, R., Wheeler, D.A., Heartbleed 101 (2014) IEEE Security Privacy, 12 (4), pp. 63-67; Chess, B., McGraw, G., Static analysis for security (2004) Security & Privacy, IEEE, 2, pp. 76-79; Chidamber, S.R., Kemerer, C.F., A Metrics Suite for Object Oriented Design (1994) IEEE Transactions on Software Engineering, 20 (6), pp. 476-493; Chowdhury, I., Chan, B., Zulkernine, M., Security metrics for source code structures (2008) Proceedings of the Fourth International Workshop on Software Engineering for Secure Systems - SESS ’08; Can Complexity, Coupling, and Cohesion Metrics Be Used As Early Indicators of Vulnerabilities? (2010) In Proceedings of The, , ACM Symposium on Applied Comp; Chowdhury, I., Zulkernine, M., Using complexity, coupling, and cohesion metrics as early indicators of vulnerabilities (2011) Journal of Systems,. Architecture; Cohen, J., (2013) Statistical Power Analysis for the Behavioral Sciences, , Academic press; Colombo, R.T., Pessôa, M.S., Guerra, A.C., Filho, A.B., Gomes, C.C., Prioritization of software security intangible attributes (2012) ACM SIGSOFT Software Engineering Notes, 37 (6), p. 1; Cunningham, W., The wycash portfolio management system (1993) ACM SIGPLAN OOPS Messenger, 4 (2), pp. 29-30; Dam, H.K., Tran, T., Pham, T.T.M., Ng, S.W., Grundy, J., Ghose, A., Automatic feature learning for predicting vulnerable software components (2018) IEEE Transactions on Software Engineering; Dayanandan, U., Kalimuthu, V., Software architectural quality assessment model for security analysis using fuzzy analytical hierarchy process (fahp) method (2018) 3D Research, 9 (3). , &; Software quality models: Purposes, usage scenarios and requirements (2009) In Proc - International Conference on Software Engineering.; Demarco, T., (1986) Controlling Software Projects: Management, Measurement, and Estimates, , Upper Saddle River, NJ, USA: Prentice Hall PTR; The delta maintainability model: Measuring maintainability of fine-grained code changes (2019) 2019 IEEE/ACM International Conference on Technical Debt (Techdebt).; Dromey, R.G., A model for software product quality (1995) IEEE Transactions on Software Engineering, 21 (2), pp. 146-162; Edwards, W., Barron, F., SMARTS and SMARTER: Improved Simple Methods for Multiattribute Utility Measurement (1994) Organizational Behavior and Human Decision Processes, 60 (3), pp. 306-325; Security testing: A survey (2016) Advances in Computers, Volume, 101, pp. 1-51. , Elsevier; Challenging machine learning algorithms in predicting vulnerable javascript functions (2019) Proceedings of the 7Th International Workshop on Realizing Artificial Intelligence Synergies in Software Engineering; Goseva-Popstojanova, K., Perhinschi, A., On the capability of static code analysis to detect security vulnerabilities (2015) Information and Software Technology, 68, pp. 18-33; Securing your ics software with the attacksurface host analyzer (Aha) (2018) Proceedings of the 4Th Annual Industrial Control System Security Workshop.; Hatzivasilis, G., Papaefstathiou, I., Manifavas, C., Software security, privacy, and dependability: Metrics and measurement (2016) IEEE Software, 33 (4). , &; Heckman, S., Williams, L., A model building process for identifying actionable static analysis alerts (2009) Proceedings - 2Nd International Conference on Software Testing, Verification, and Validation, ICST 2009, pp. 161-170; A Comparative Evaluation of Static Analysis Actionable Alert Identification Techniques (2013) Proceedings of the 9Th International Conference on Predictive Models in Software Engineering, Pages, pp. 1-4; Heitlager, I., Kuipers, T., Visser, J., A Practical Model for Measuring Maintainability (2007) 6Th International Conference on the Quality of Information and Communications Technology; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) ACM SIGPLAN Notices, 39 (12), p. 92; Howard, M., (2003) Writing Secure Code, , Redmond, Wash, Microsoft Press; Howard, M., Corporation, M., Determining Relative Attack Surface. US patent 7299497 B2 (2007) Patent and Trademark Office; 24 Deadly Sins of Software Security (2010) Mcgraw-Hill.; Howard, M., Lipner, S., The Security Development Lifecycle: SDL: A Process for Developing Demonstrably More Secure Software (2006) Microsoft Press; Measuring relative attack surfaces (2005) Computer Security in the 21St Century, Pages, pp. 109-137. , Springer; ISO/IEC 25010 - Systems and software engineering - Systems and software Quality Requirements and Evaluation (SQuaRE) - System and software quality models (2011) ISO/IEC; ISO/IEC 27001:2013(en) Information technology Security techniques Information security management systems Requirements (2013) ISO/IEC; Leveraging secdevops to tackle the technical debt associated with cybersecurity attack tactics (2019) Proc. of the 2Nd International Conference on Technical Debt.; A position study to investigate technical debt associated with security weaknesses (2018) 2018 International Conference on Technical Debt.; Jankovic, M., Kehagias, D., Siavvas, M., Tsoukalas, D., Chatzigeorgiou, A., The SDK4ED Approach to Software Quality Optimization and Interplay Calculation (2019) 15Th China-Europe International Symposium on Software Engineering Education.; Jimenez, M., Papadakis, M., Le Traon, Y., Vulnerability prediction models: A case study on the linux kernel (2016) 2016 IEEE 16Th International Working Conference on Source Code Analysis and Manipulation (SCAM), pp. 1-10; Jimenez, M., Rwemalika, R., Papadakis, M., Sarro, F., Le Traon, Y., Harman, M., The importance of accounting for real-world labelling when predicting software vulnerabilities (2019) 27Th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering.; Jin, C., Jin, S.W., Software reliability prediction model based on support vector regression with improved estimation of distribution algorithms (2014) Applied Software Computing, 15, pp. 113-120; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don’t software developers use static analysis tools to find bugs? (2013) Proceedings of the 2013 International Conference on Software Engineering, pp. 672-681; Kalouptsoglou, I., Siavvas, M., Tsoukalas, D., Kehagias, D., Cross-project vulnerability prediction based on software metrics and deep learning (2020) In International Conference on Computational Science and Its Applications, pp. 877-893. , Springer; Kehagias, D., Jankovic, M., Siavvas, M., Gelenbe, E., Investigating the interaction between energy consumption, quality of service, reliability, security, and maintainability of computer systems and networks (2021) SN Computer Science, 2 (1), pp. 1-6; Khurshid, S., Shrivastava, A.K., (2019), Iqbal, J, Effort based software reliability model with fault reduction factor, change point and imperfect debugging. International Journal of Information Technology; Krsul, I., (1998) Software Vulnerability Analysis, , PhD thesis; Lai, S.T., An analyzer-based software security measurement model for enhancing software system security (2010) Proceedings - 2010 2Nd WRI World Congress on Software Engineering.; Li, B., Zhang, Y., Li, J., Yang, W., Gu, D., Appspear: Automating the hidden-code extraction and reassembling of packed android malware (2018) Journal of Systems and Software, 140, pp. 3-16; Luszcz, J., Apache struts 2: how technical and development gaps caused the equifax breach (2018) Network Security, 2018 (1), pp. 5-8; Manadhata, P.K., Wing, J.M., An attack surface metric (2011) IEEE Transactions on Software Engineering, 37 (3). , &; McGraw, G., (2006) Software Security: Building Security In, , Addison-Wesley Professional; McGraw, G., Automated code review tools for security (2008) Computer, 41 (12), pp. 108-111; Medeiros, N., Ivaki, N., Costa, P., Vieira, M., An approach for trustworthiness benchmarking using software metrics (2018) 2018 IEEE 23Rd Pacific Rim International Symposium on Dependable Computing (PRDC), pp. 84-93. , pages; Medeiros, N.P.D.S., Ivaki, N.R., Costa, P.N.D., Vieira, M.P.A., Towards an approach for trustworthiness assessment of software as a service (2017) In 2017 IEEE International Conference on Edge Computing (EDGE), Pages, pp. 220-223; Mohammed, N.M., Niazi, M., Alshayeb, M., Mahmood, S., (2016) Exploring Software Security Approaches in Software Development Lifecycle: A Systematic Mapping Study. Comp: Stand. & Interf; Morrison, P., Moye, D., Pandita, R., Williams, L., Mapping the field of software life cycle security metrics (2018) Information and Software Technology, 102 (May), pp. 146-159; Moshtari, S., Sami, A., Evaluating and comparing complexity, coupling and a new proposed set of coupling metrics in cross-project vulnerability prediction (2016) Proceedings of the 31St Annual ACM Symposium on Applied Computing - SAC, 16, pp. 1415-1421; Moshtari, S., Sami, A., Azimi, M., Using complexity metrics to improve software security (2013) Computer Fraud and Security, 2013 (5), pp. 8-17; Mumtaz, H., Alshayeb, M., Mahmood, S., Niazi, M., An empirical study to improve software security through the application of code refactoring (2018) Information and Software Technology, 96. , &; Munaiah, N., Camilo, F., Wigham, W., Meneely, A., Nagappan, M., Do bugs foreshadow vulnerabilities? An in-depth study of the chromium project (2017) Empirical Software Engineering, 22 (3). , &; Munaiah, N., Meneely, A., Beyond the Attack Surface: Assessing Security Risk with Random Walks on Call Graphs (2016) Proceedings of the 2016 ACM Workshop on Software Protection, pp. 3-14; Muske, T., Serebrenik, A., Survey of Approaches for Handling Static Analysis Alarms (2016) In 2016 IEEE 16Th International Working Conference on Source Code Analysis and Manipulation (SCAM), Pages, pp. 157-166; (2018) SP 800-160: Systems Security Engineering Considerations for a Multidisciplinary Approach in the Engineering of Trustworthy Secure Systems, , National Institute of Standards and Technology; Nunes, P., Medeiros, I., Fonseca, J., Neves, N., Correia, M., Vieira, M., An empirical study on combining diverse static analysis tools for web security vulnerabilities based on development scenarios (2019) Computing.; Online (Last Accessed 04/27/2020), , https://sites-google-com.luisamigo.proxybk.com/view/sec-model-supp, Supporting Material; Rindell, K., Bernsmed, K., Jaatun, M.G., Managing security in software: Or: How i learned to stop worrying and manage the security technical debt (2019) In Proceedings of the 14Th International Conference on Availability, Reliability and Security, ARES, 19; Rindell, K., Holvitie, J., Security risk assessment and management as technical debt (2019) International Workshop on Secure Software Engineering in Devops and Agile Development.; Roumani, Y., Nwankpa, J.K., Roumani, Y.F., Examining the relationship between firm financial records and security vulnerabilities (2016) International Journal of Information Management, 36 (6), pp. 987-994. , &; Saaty, T.L., Decision making with the analytic hierarchy process (2008) International Journal of Services Sciences; Scandariato, R., Walden, J., Hovsepyan, A., Joosen, W., Predicting vulnerable software components via text mining (2014) IEEE Transactions on Software Engineering, 40 (10), pp. 993-1006; Seacord, R.C., (2008) The CERT C Secure Coding Standard, , Pearson Education; Sentilles, S., Papatheocharous, E., Ciccozzi, F., What do we know about software security evaluation? A preliminary study (2018) 6Th International Workshop on Quantitative Approaches to Software Quality; Shin, W., Lee, J., Park, D., Chang, C., Design of authenticity evaluation metric for android applications (2014) In 2014 Fourth International Conference on Digital Information and Communication Technology and Its Applications (DICTAP), Pages, pp. 275-278; Shin, Y., Meneely, A., Williams, L., Osborne, J.A., Evaluating Complexity, Code Churn, and Developer Activity Metrics as Indicators of Software Vulnerabilities (2011) IEEE Transactions on Software Engineering, 37 (6), pp. 772-787; Shin, Y., Williams, L., Is Complexity Really the Enemy of Software Security., Proc. the 4th ACM Workshop on Quality of Protection, Alexandria, Virginia, USA (2008) Oct, , (a); Hin, Y., Williams, L.A., An empirical model to predict security vulnerabilities using code complexity metrics (2008) 2008 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement.; Siavvas, M., Chatzidimitriou, K., Symeonidis, A., QATCH - An adaptive framework for software product quality assessment (2017) . Expert Systems With,. Applications., , (a); Siavvas, M., Gelenbe, E., Kehagias, D., Tzovaras, D., Static analysis-based approaches for secure software development (2018) International ISCIS Security Workshop, pp. 142-157. , Springer; Siavvas, M., Jankovic, M., Kehagias, D., Tzovaras, D., Is Popularity an Indicator of Software Security? (2018) 2018 IEEE 9Th International Conference on Intelligent Systems (IS); Siavvas, M., Kehagias, D., Tzovaras, D., A preliminary study on the relationship among software metrics and specific vulnerability types (2017) International Conference on Computational Science and Computational Intelligence (CSCI), 2017, pp. 916-921; Siavvas, M., Tsoukalas, D., Jankovic, M., Kehagias, D., Tzovaras, D., Technical debt as an indicator of software security risk: a machine learning approach for software development enterprises (2020) Enterprise Information Systems, pp. 1-43. , &, (, a; Avvas, M., Tsoukalas, D., Jankovic, M., Kehagias, D., Tzovaras, D., Anicic, N., Gelenbe, E., An empirical evaluation of the relationship between technical debt and software security (2019) In 9Th International Conference on Information Society and Technology.; Siavvas, M., Tsoukalas, D., Marantos, C., Tsintzira, A.A., Jankovic, M., Soudris, D., Chatzigeorgiou, A., Kehagias, D., The sdk4ed platform for embedded software quality improvement-preliminary overview (2020) International Conference on Computational Science and Its Applications, pp. 1035-1050; Spearman, C., The proof and measurement of association between two things (1987) By C. Spearman, 1904. the American Journal of Psychology, 100 (3-4), pp. 441-471; Stuckman, J., Walden, J., Scandariato, R., The effect of dimensionality reduction on software vulnerability prediction models (2017) IEEE Transactions on Reliability, 66 (1), pp. 17-37; Sultana, K.Z., Deo, A., Williams, B.J., Correlation analysis among java nano-patterns and software vulnerabilities (2017) 2017 IEEE 18Th International Symposium on High Assurance Systems Engineering (HASE), pp. 69-76. , IEEE; Sultana, K.Z., Williams, B.J., Bhowmik, T., A study examining relationships between micro patterns and security vulnerabilities (2019) Software Quality Journal, 27 (1), pp. 5-41; Predicting Vulnerable Components via Text Mining or Software Metrics? An Effort-Aware Perspective (2015) Proceedings - 2015 IEEE International Conference on Software Quality, Reliability and Security, QRS, pp. Tang-27; Theisen, C., Munaiah, N., Al-Zyoud, M., Carver, J.C., Meneely, A., Williams, L., (2018) Attack surface definitions: A systematic literature review, , Information and Software Technology; Vale, G., Fernandes, E., Figueiredo, E., On the proposal and evaluation of a benchmark-based threshold derivation method (2019) Software Quality Journal, 27 (1), pp. 275-306; Verendel, V., Quantified security is a weak hypothesis (2009) Proceedings of The, p. page 37.; Wagner, S., (2013) Software Product Quality Control, , Springer; Wagner, S., Goeb, A., Heinemann, L., Kläs, M., Lampasona, C., Lochmann, K., Mayr, A., Trendowicz, A., Operationalised product quality models and assessment: The Quamoco approach (2015) Information and Software Technology, 62, pp. 101-123; Wagner, S., Lochmann, K., Heinemann, L., Klas, M., Trendowicz, A., Plosch, R., Seidi, A., Streit, J., The Quamoco product quality modelling and assessment approach (2012) 2012 34Th International Conference on Software Engineering (ICSE), Pages, pp. 1133-1142; Walden, J., Doyle, M., SAVI: Static-Analysis vulnerability indicator (2012) IEEE Security and Privacy; Walden, J., Doyle, M., Welch, G.A., Whelan, M., Security of open source web applications. 3rd International Symposium on Empirical Software Engineering and Measurement (2009) ESEM, p. 2009; Whitman, M.E., Mattord, H.J., Principles of information security (2011) Cengage Learning; Wolff, E., (2016) Microservices: Flexible Software Architecture, , Addison-Wesley; Xu, H., Heijmans, J., Visser, J., A practical model for rating software security (2013) . Proceedings - 7Th International Conference on Software Security and Reliability Companion, SERE-C, p. 2013; Zafar, S., Mehboob, M., Naveed, A., Malik, B., Security quality model: an extension of Dromey’s model (2015) Software Quality Journal, 23 (1). , &; Zhang, M., de Carnde Carnavalet, X., Wang, L., & Ragab, A (2019) Large-Scale Empirical Study of Important Features Indicative of Discovered Vulnerabilities to Assess Application Security. IEEE Transactions on Information Forensics and Security, 14 (9), pp. 2315-2330},
correspondence_address1={Siavvas, M.; Imperial College LondonUnited Kingdom; email: m.siavvas16@imperial.ac.uk},
publisher={Springer},
issn={09639314},
language={English},
abbrev_source_title={Softw. Qual. J.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Serban202126,
author={Serban, D. and Golsteijn, B. and Holdorp, R. and Serebrenik, A.},
title={SAW-BOT: Proposing Fixes for Static Analysis Warnings with GitHub Suggestions},
journal={Proceedings - 2021 IEEE/ACM 3rd International Workshop on Bots in Software Engineering, BotSE 2021},
year={2021},
pages={26-30},
doi={10.1109/BotSE52550.2021.00013},
art_number={9474413},
note={cited By 2; Conference of 3rd IEEE/ACM International Workshop on Bots in Software Engineering, BotSE 2021 ; Conference Date: 4 June 2021;  Conference Code:170795},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85104060816&doi=10.1109%2fBotSE52550.2021.00013&partnerID=40&md5=b46a3380d69686290b892d7523f57f3a},
affiliation={Eindhoven University of Technology, Netherlands; Philips Research, Netherlands},
abstract={In this experience report we present SAW-BOT, a bot proposing fixes for static analysis warnings. The bot has been evaluated with five professional software developers by means of a Wizard of Oz experiment, semi-structured interviews and the mTAM questionnaire. We have observed that developers prefer GitHub suggestions to two baseline operation modes. Our study indicates that GitHub suggestions are a viable mechanism for implementing bots proposing fixes for static analysis warnings. © 2021 IEEE.},
author_keywords={bot;  GitHub suggestions;  static analysis},
keywords={Botnet;  Software engineering;  Surveys, Experience report;  Operation mode;  Professional software;  Semi structured interviews;  Wizard of Oz, Static analysis},
references={Vassallo, C., Panichella, S., Palomba, F., Proksch, S., Gall, H.C., Zaidman, A., How developers engage with static analysis tools in different ctmnontexts (2020) Empir. Softw. Eng., 25 (2), pp. 1419-1457; Johnson, B., Song, Y., Murphy-Hill, E.R., Bowdidge, R.W., Why don't software developers use static analysis tools to find bugs (2013) 35th International Conference on Software Engineering, ICSE '13, pp. 672-681. , https://doi.org/10.1109/ICSE.2013.6606613, San Francisco, CA, USA, May 18-26, 2013, D. Notkin, B. H. C. Cheng, and K. Pohl, Eds. IEEE Computer Society; Marcilio, D., Furia, C.A., Bonifácio, R., Pinto, G., Spongebugs: Automatically generating fix suggestions in response to static code analysis warnings (2020) JSS, 168, p. 110671; Sadowski, C., Van Gogh, J., Jaspan, C., Söderberg, E., Winter, C., Tricorder: Building a program analysis ecosystem (2015) ICSE. IEEE, pp. 598-608; Adzemovic, H., (2020) A Template-based Approach to Automatic Program Repair of Sonarqube Static Warnings, , Master's thesis, KTH, EECS; Liu, K., Koyuncu, A., Kim, D., Bissyandé, T.F., AVATAR: Fixing semantic bugs with fix patterns of static analysis violations (2019) SANER. IEEE, pp. 456-467; Bavishi, R., Yoshida, H., Prasad, M.R., Phoenix: Automated datadriven synthesis of repairs for static analysis violations (2019) ESEC/FSE. ACM, pp. 613-624; Wyrich, M., Bogner, J., Towards an autonomous bot for automatic source code refactoring (2019) BotSE. IEEE, pp. 24-28; Urli, S., Yu, Z., Seinturier, L., Monperrus, M., How to design a program repair bot insights from the repairnator project (2018) ICSE-SEIP. ACM, pp. 95-104; Muske, T., Serebrenik, A., Survey of approaches for handling static analysis alarms (2016) SCAM. IEEE, pp. 157-166; Java Static Code Analysis Rules, , https://rules-sonarsource-com.luisamigo.proxybk.com/java; Lenarduzzi, V., Lomio, F., Huttunen, H., Taibi, D., Are sonarqube rules inducing bugs (2020) SANER, pp. 501-511; Gould, J.D., Conti, J., Hovanyecz, T., Composing letters with a simulated listening typewriter (1983) Commun. ACM, 26 (4), pp. 295-308. , Apr; Dahlbäck, N., Jönsson, A., Ahrenberg, L., Wizard of oz studies-why and how (1993) Knowledge-Based Systems, 6 (4), pp. 258-266; Fraser, N.M., Gilbert, G., SimuLating speech systems (1991) Computer Speech & Language, 5 (1), pp. 81-99; Zimmermann, T., Card-sorting (2016) Perspectives on Data Science for Software Engineering, pp. 137-141. , Academic Press; Lah, U., Lewis, J.R., Sumak, B., Perceived usability and the modified technology acceptance model (2020) International Journal of Human-Computer Interaction, 36 (13), pp. 1216-1230; Davis, F.D., Perceived usefulness, perceived ease of use, and user acceptance of information technology (1989) MIS Quarterly, 13 (3), pp. 319-340. , http://www-jstor-org.luisamigo.proxybk.com/stable/249008; Hudson, S., Fogarty, J., Atkeson, C., Avrahami, D., Forlizzi, J., Kiesler, S., Lee, J., Yang, J., Predicting human interruptibility with sensors: A wizard of oz feasibility study (2003) CHI. ACM, pp. 257-264; Wood, A., Rodeghero, P., Armaly, A., McMillan, C., Detecting speech act types in developer question/answer conversations during bug repair (2018) ESEC/FSE. ACM, pp. 491-502; Goforth, C., Using and Interpreting Cronbach's Alpha, , https://data-library-virginia-edu.luisamigo.proxybk.com/using-and-interpreting-cronbachs-alpha/; Brooke, J., SUS: A quick and dirty usability (1996) Usability Evaluation in Industry, p. 189; Bangor, A., Kortum, P., Miller, J., Determining what individual sus scores mean: Adding an adjective rating scale (2009) J. Usability Stud., 4, pp. 114-123; Serban, D., Golsteijn, B., Holdorp, R., Serebrenik, A., (2021) SAW-BOT: Proposing Fixes for Static Analysis Warnings with GitHub Suggestions, , https://doi.org/10.5281/zenodo.4599158, Mar},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781665444682},
language={English},
abbrev_source_title={Proc. - IEEE/ACM Int. Workshop Bots Softw. Eng., BotSE},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Flynn2021100,
author={Flynn, L. and Snavely, W. and Kurtz, Z.},
title={Test Suites as a Source of Training Data for Static Analysis Alert Classifiers},
journal={Proceedings - 2021 IEEE/ACM International Conference on Automation of Software Test, AST 2021},
year={2021},
pages={100-108},
doi={10.1109/AST52587.2021.00019},
art_number={9463045},
note={cited By 0; Conference of 2nd IEEE/ACM International Conference on Automation of Software Test, AST 2021 ; Conference Date: 20 May 2021 Through 21 May 2021;  Conference Code:171016},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85113723244&doi=10.1109%2fAST52587.2021.00019&partnerID=40&md5=434492b4cbb6bb65052d628b8e52a8c6},
affiliation={Carnegie Mellon University, Software Engineering Institute, Pittsburgh, United States},
abstract={Flaw-finding static analysis tools typically generate large volumes of code flaw alerts including many false positives. To save on human effort to triage these alerts, a significant body of work attempts to use machine learning to classify and prioritize alerts. Identifying a useful set of training data, however, remains a fundamental challenge in developing such classifiers in many contexts. We propose using static analysis test suites (i.e., repositories of "benchmark"programs that are purpose-built to test coverage and precision of static analysis tools) as a novel source of training data. In a case study, we generated a large quantity of alerts by executing various static analyzers on the Juliet C/C++ test suite, and we automatically derived ground truth labels for these alerts by referencing the Juliet test suite metadata. Finally, we used this data to train classifiers to predict whether an alert is a false positive. Our classifiers obtained high precision (90.2%) and recall (88.2%) for a large number of code flaw types on a hold-out test set. This preliminary result suggests that pre-training classifiers on test suite data could help to jumpstart static analysis alert classification in data-limited contexts. © 2021 IEEE.},
author_keywords={alert;  analysis;  classification;  Juliet;  precise;  rapid;  static;  test suite},
keywords={Automatic test pattern generation;  C++ (programming language);  Software testing;  Static analysis, Alert classification;  False positive;  High-precision;  Large volumes;  Pre-training;  Static analyzers;  Test coverage;  Training data, Classification (of information)},
funding_details={U.S. Department of DefenseU.S. Department of Defense, DOD, FA8702-15-D-0002},
funding_details={Carnegie Mellon UniversityCarnegie Mellon University, CMU},
funding_text 1={1Copyright 2021 IEEE. All Rights Reserved. This material is based upon work funded and supported by the Department of Defense under Contract No. FA8702-15-D-0002 with Carnegie Mellon University for the operation of the Software Engineering Institute, a federally funded research and development center. References herein to any specific commercial product, process, or service by trade name, trade mark, manufacturer, or otherwise, does not necessarily constitute or imply its endorsement, recommendation, or favoring by Carnegie Mellon University or its Software Engineering Institute. Carnegie Mellon® and CERT® are registered in the U.S. Patent and Trademark Office by Carnegie Mellon University. DM18-0144},
references={(2016) Prioritizing Alerts from Static Analysis to Find and Fix Code Flaws, , https://insights-sei-cmu-edu.luisamigo.proxybk.com/seiblog/2016/06/prioritizing-alerts-from-static-analysis-to-find-and-fix-code-flaws.html, Accessed: 2016-06-27; (2017) Prioritizing Security Alerts: A Dod Case Study, , https://insights-sei-cmu-edu.luisamigo.proxybk.com/seiblog/2017/01/prioritizing-security-alerts-a-dod-case-study.html, January; Ayewah, N., Pugh, W., The google findbugs fixit (2010) Proceedings of the 19th International Symposium on Software Testing and Analysis, pp. 241-252; Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the state of static analysis: A large-scale evaluation in open source software (2016) 2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), 1, pp. 470-481; Benameur, A., Evans, N.S., Elder, M.C., Minestrone: Testing the soup (2013) CSET; Bessey, A., Block, K., Chelf, B., Chou, A., Fulton, B., Hallem, S., Henri-Gros, C., Engler, D., A few billion lines of code later: Using static analysis to find bugs in the real world (2010) Communications of the ACM, 53 (2), pp. 66-75; Bright-tools Open Source Project on Github, , https://github-com.luisamigo.proxybk.com/bright-tools/ccsm, C code source metrics (ccsm); Cert C Coding Standard (Wiki), , https://wiki-sei-cmu-edu.luisamigo.proxybk.com/confluence/display/c/GCC; Delaitre, A., Okun, V., Fong, E., Of massive static analysis data (2013) Software Security and Reliability-Companion (SERE-C), 2013 IEEE 7th International Conference on, pp. 163-167; Delaitre, A., Stivalet, B., Fong, E., Okun, V., Evaluating bug finders-test and measurement of static code analyzers (2015) Complex Faults and Failures in Large Software Systems (COUFLESS), 2015 IEEE/ACM 1st International Workshop on, pp. 14-20; Flynn, L., McNeil, E., Sisk, M., Snavely, W., (2020) Open Dataset RC Data for Classifier Research, , https://wiki-sei-cmu-edu.luisamigo.proxybk.com/confluence/display/seccode/Open+Dataset+RCData+for+Classifier+Research, August; Juliet Test Suite C/c++ v1.2 User Guide, , https://samate-nist-gov.luisamigo.proxybk.com/SARD/resources/JulietTestSuitev1.2forCCpp-UserGuide.pdf, NSA Center for Assured Software; (2018) Sei Cert Coding Standards (Wiki), , https://wiki-sei-cmu-edu.luisamigo.proxybk.com/confluence/display/seccode, CERT Secure Coding group, Accessed March 9, 2018; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Information and Software Technology, 53 (4), pp. 363-387; Intelligence Advanced Research Projects Activity (IARPA), , https://samate-nist-gov.luisamigo.proxybk.com/SRD/view.phptsID=102, Iarpa stonesoup; Jing, X., Wu, F., Dong, X., Qi, F., Xu, B., Heterogeneous cross-company defect prediction by unified metric representation and cca-based transfer learning (2015) Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, pp. 496-507; (2018) Kaggle Website, , https://www-kaggle-com.luisamigo.proxybk.com, kaggle, Accessed March 19, 2018; Kremenek, T., Ashcraft, K., Yang, J., Engler, D., Correlation exploitation in error ranking (2004) ACM SIGSOFT Software Engineering Notes, 29, pp. 83-93; Kremenek, T., Engler, D., Z-ranking: Using statistical analysis to counter the impact of static analysis approximations (2003) International Static Analysis Symposium, pp. 295-315. , Springer; Larsen, G., Fong, E.K., Wheeler, D.A., Moorthy, R.S., (2014) State-of-the-art Resources (Soar) for Software Vulnerability Detection, Test, and Evaluation, , Technical report, INSTITUTE FOR DEFENSE ANALYSES ALEXANDRIA VA; Common Weakness Enumeration: A Community-developed Dictionary of Software Weakness Types, , https://cwe-mitre-org.luisamigo.proxybk.com, MITRE, Accessed June 22, 2016; (2018) Cwe-compatible Products and Services, , https://cwe-mitre-org.luisamigo.proxybk.com/compatible/compatible.html, MITRE, Accessed March 9, 2018; Nam, J., Kim, S., Clami: Defect prediction on unlabeled datasets (t) (2015) Automated Software Engineering (ASE), 2015 30th IEEE/ACM International Conference on, pp. 452-463; Sard Test Suites, , https://samate-nist-gov.luisamigo.proxybk.com/SRD/testsuite.php, National Institute of Standards and Technology (NIST); Plakosh, D., Seacord, R., Stoddard, R.W., Svoboda, D., Zubrow, D., (2014) Improving the Automated Detection and Analysis of Secure Coding Violations; Gnu Compiler Collection (Gcc), , https://gcc-gnu-org.luisamigo.proxybk.com, The GNU Project; Ruthruff, J.R., Penix, J., David Morgenthaler, J., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proceedings of the 30th International Conference on Software Engineering, pp. 341-350; Svoboda, D., Flynn, L., Snavely, W., Static analysis alert audits: Formal lexicon and rules (2016) Proceedings of the IEEE Cybersecurity Development (SecDev) 2016 IEEE; Cert Rosecheckers Static Analysis Tool for C Code, , http://rosecheckers-sourceforge-net.luisamigo.proxybk.com, CERT Secure Coding Team; (2021) Cppcheck Team. Cppcheck Static Source Code Analysis Tool for C and C++ Code, , https://sourceforge-net.luisamigo.proxybk.com/projects/cppcheck; Yin, T., Lizard, , https://github-com.luisamigo.proxybk.com/terryyin/lizard, accessed January 29, 2018; Zhang, F., Zheng, Q., Zou, Y., Hassan, A.E., Crossproject defect prediction using a connectivity-based unsupervised classifier (2016) Proceedings of the 38th International Conference on Software Engineering, pp. 309-320},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781665435673},
language={English},
abbrev_source_title={Proc. - IEEE/ACM Int. Conf. Autom. Softw. Test, AST},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Wang2021106,
author={Wang, S. and Li, H.},
title={Analysis of Electromagnetic Vibration of Permanent Magnet Synchronous Motor under Static and Dynamic Eccentricity Fault},
journal={2021 6th International Conference on Control and Robotics Engineering, ICCRE 2021},
year={2021},
pages={106-111},
doi={10.1109/ICCRE51898.2021.9435680},
art_number={9435680},
note={cited By 1; Conference of 6th International Conference on Control and Robotics Engineering, ICCRE 2021 ; Conference Date: 16 April 2021 Through 18 April 2021;  Conference Code:169191},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85107799559&doi=10.1109%2fICCRE51898.2021.9435680&partnerID=40&md5=f66fbdcdbe759c3e356567088f03a719},
affiliation={Tianjin University, School of Electrical and Information Engineering, Tianjin, China},
abstract={In order to study the influence of different eccentricity on the electromagnetic vibration of permanent magnet synchronous motor (PMSM), this paper takes a 48-slot 8-pole interior PMSM for electric vehicle as an example, establishes an analytical analysis model of radial electromagnetic force, and analyzes the variation laws of spatial order and time frequency of electromagnetic force under static and dynamic eccentric respectively. The differences between the effects of static and dynamic eccentricity on the electromagnetic vibration of the motor under different eccentricities are compared. The results show that with the increase of eccentricity, both static and dynamic eccentricity will aggravate the electromagnetic vibration of the motor. Static eccentricity will aggravate the electromagnetic vibration corresponding to the original vibration frequencies, but will not produce the new vibration frequencies. While dynamic eccentricity has little effect on the electromagnetic vibration at the original vibration frequencies, but introduces some new vibration frequencies, and the new frequencies are more likely to cause motor resonance. © 2021 IEEE.},
author_keywords={dynamic eccentricity;  electromagnetic vibration;  permanent magnet synchronous motor (PMSM);  static eccentricity},
keywords={Agricultural robots;  Permanent magnets;  Robotics;  Synchronous motors;  Traction motors, Analytical analysis;  Dynamic eccentricities;  Electromagnetic forces;  Electromagnetic vibrations;  Permanent Magnet Synchronous Motor;  Static and dynamic eccentricities;  Static eccentricities;  Vibration frequency, Vibration analysis},
funding_details={51877149},
funding_text 1={This work was supported in part by the Department of National Natural Science Foundation of China 51877149.},
references={Dang, L., Bernard, N., Bracikowski, N., Berthiau, G., Design optimization with flux weakening of high-speed pmsm for electrical vehicle considering the driving cycle (2017) IEEE Transactions on Industrial Electronics, 64 (12), pp. 9834-9843; Loro, J.A.R., Robust position control of sm-pmsm based on a sliding mode current observer (2020) International Journal O F Electrical and Electronic Engineering & Telecommunications, pp. 337-341; Jung, Y.-H., Asymmetric rotor design of ipmsm for vibration reduction under certain load condition (2020) IEEE Transactions on Energy Conversion, 35 (2), pp. 928-937; Mbadiwe, E.I., Sulaiman, E., Ahmad, Z.M., Soomro, H.A., Torque performance analysis of three-phase permanent magnet flux switching motor in out-runner segmented rotor for in-wheel propulsion (2019) International Journal O F Electrical and Electronic Engineering & Telecommunications, pp. 14-18; Qin, Y., He, C., Shao, X., Du, H., Xiang, C., Dong, M., Vibration mitigation for in-wheel switched reluctance motor driven electric vehicle with dynamic vibration absorbing structures (2018) Journal O F Sound and Vibration, 419, pp. 249-267; Zuo, S., Noise analysis, calculation, and reduction of external rotor permanent-magnet synchronous motor (2015) IEEE Transactions on Industrial Electronics, 62 (10), pp. 6204-6212; Salah, A.A., Dorrell, D.G., Guo, Y., A review of the monitoring and damping unbalanced magnetic pull in induction machines due to rotor eccentricity (2019) IEEE Transactions on Industry Applications, 55 (3), pp. 2569-2580; Chuan, H., Shek, J.K.H., Investigation of the unbalanced magnetic pull damping effect in squirrel cage induction machines (2019) IETElectric Power Applications, 13 (10), pp. 1565-1573; Zhu, Z.Q., Wu, L.J., Mohd Jamil, M.L., Influence of pole and slot number combinations on cogging torque in permanent-magnet machines with static and rotating eccentricities (2014) IEEE Transactions on Industry Applications, 50 (5), pp. 3265-3277; Song, J.Y., Unbalanced magnetic pull due to simultaneous existence of static and dynamic eccentricities and uneven magnetization in permanent magnet motors (2016) The 2016 Asia-Pacific Magnetic Recording Conference Digest (APMRC), , presented at; Di Bao C, X., Wang, H., Modeling and analysis of unbalanced magnetic pull in cage induction motors with curved dynamic eccentricity (2015) IEEE Transactions on Magnetics, 51 (8), pp. 1-7; Bai, Y., Yang, B., Li, H., Analysis of nonlinear vibration in permanent magnet synchronous motors under unbalanced magnetic pull (2018) Applied Sciences, 8 (1); Hu, Y., Wei, H., Chen, H., Sun, W., Zhao, S., Li, L., Vibration study of permanent magnet synchronous motor base on static eccentricity model (2019) The 2019 22nd International Conference on Electrical Machines and Systems (ICEMS), , presented at; Ma, C., Cui, H., Zheng, P., Zhang, Y., Gao, H., Influence of static eccentricity on unbalanced magnetic force of external rotor permanent magnet brushless direct current motor used as in-wheel motor (2019) IET Electric Power Applications, 13 (4), pp. 538-550; He, Y.-L., Stator vibration characteristic identification of turbogenerator among single and composite faults composed of static air-gap eccentricity and rotor interturn short circuit (2016) Shock and Vibration, pp. 1-14; Jia, S., Qu, R., Li, J., Fu, Z., Chen, H., Wu, L., Analysis of fscw spm servo motor with static, dynamic and mixed eccentricity in aspects of radial force and vibration (2014) The 2014 IEEE Energy Conversion Congress and Exposition (ECCE), , presented at; Zuo, S., Lin, F., Deng, W., Impact of rotor eccentricity on electromagnetic vibration and noise of permanent magnet synchronous motor (2018) Journal O F Vibroengineering, 20 (2), pp. 923-935; Wang, S., Li, H., Reduction of electromagnetic vibration and noise in permanent magnet motor for evs by optimizing design of rotor based on gpr-pso model (2020) Journal O F Electrical Engineering & Technology, 15 (3), pp. 1231-1243; Cheema, P., Alamdari, M.M., Vio, G.A., Zhang, F.L., Kim, C.W., Infinite mixture models for operational modal analysis: An automated and principled approach (2021) Journal O F Sound and Vibration, 491; Jordan, H., (1950) Electric Motor Silencer-Formation and Elimination O F the Noise in the Electric Motors, , Essen, Germany: W. Girardet; Zhu, H., Zhang, X., (1983) Vibration Testing-Instrumentation and Data Analysis, , Beijing: Mechanical Industry Press; Zhou, A., (2018) Research on Vibration Signal Extraction O F Motor and Its Correlation with Noise, , Harbin: Harbin Institute of Technology, (in Chinese)},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9780738126128},
language={English},
abbrev_source_title={Int. Conf. Control Robot. Eng., ICCRE},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Vojáčková2021,
author={Vojáčková, B. and Tippner, J. and Horáček, P. and Sebera, V. and Praus, L. and Mařík, R. and Brabec, M.},
title={The effect of stem and root-plate defects on the tree response during static loading—Numerical analysis},
journal={Urban Forestry and Urban Greening},
year={2021},
volume={59},
doi={10.1016/j.ufug.2021.127002},
art_number={127002},
note={cited By 5},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85100437540&doi=10.1016%2fj.ufug.2021.127002&partnerID=40&md5=aa74cd1e42ee02323f08c758784d4cd7},
affiliation={Department of Wood Science and Technology, Mendel University in Brno613 00, Czech Republic; Department of Water Operation and the Creation and Allocation of Biomass, CzechGlobe CAS603 00, Czech Republic; InnoRenew CoE, Izola, 6310, Slovenia; Department of Mathematics, Mendel University in Brno613 00, Czech Republic},
abstract={Despite continual development of the tree pulling test, there is no systematic study on the interaction of stem and root-plate stiffness in relation to tree assessment results. New methods involving numerical modelling and optical techniques provide tools for effective and deeper understanding of the interaction of stem and root-plate stiffness. Within this study, a finite element (FE) model of the tree response to static loading was developed, and the interaction between the stem and root-plate stiffness was analysed on three levels: longitudinal stem strains, root-plate inclinations and stem deflection curve. The model was validated at all three levels by comparison with experiment. Sensitivity analysis of the validated model showed a significant correlation of root-plate stiffness represented by the root volume and soil elastic modulus to the tree response. By analysing the defects in tree response, the importance of proper location for detection of strains and inclinations was demonstrated, especially regarding asymmetrical defects. A numerical estimate of the second derivative of displacement based on the Taylor approximation, was used to analyse the stem deflection curve. © 2021 The Author(s)},
author_keywords={Finite element method;  Pulling test;  Root-plate inclination;  Stem deflection;  Stem strain;  Taylor approximation;  Tree stability},
keywords={assessment method;  elastic modulus;  finite element method;  numerical model;  stem;  stiffness},
funding_details={1909},
funding_details={Horizon 2020 Framework ProgrammeHorizon 2020 Framework Programme, H2020, 739574},
funding_details={European CommissionEuropean Commission, EC},
funding_details={European Research CouncilEuropean Research Council, ERC},
funding_details={European Regional Development FundEuropean Regional Development Fund, FEDER},
funding_text 1={The authors gratefully acknowledge the Ministry of Education Youth and Sports in the Czech Republic [Grant Number #LL1909, ERC CZ]; the European Commission for funding the InnoRenew CoE project [Grant Agreement #739574] under the Horizon 2020 Widespread-Teaming program and the Republic of Slovenia (Investment funding of the Republic of Slovenia and the European Union of the European Regional Development Fund). Data for preliminary analyses which contributed to the presented work were measured during Biomechanical Week 2013 founded by International Society of Arboriculture and organized by a number of volunteers.},
funding_text 2={The authors gratefully acknowledge the Ministry of Education Youth and Sports in the Czech Republic [Grant Number #LL1909 , ERC CZ]; the European Commission for funding the InnoRenew CoE project [Grant Agreement #739574 ] under the Horizon 2020 Widespread-Teaming program and the Republic of Slovenia ( Investment funding of the Republic of Slovenia and the European Union of the European Regional Development Fund ). Data for preliminary analyses which contributed to the presented work were measured during Biomechanical Week 2013 founded by International Society of Arboriculture and organized by a number of volunteers.},
references={Bowles, J.E., Foundation Analysis and Design (1997), p. 1207 pp. , McGraw-Hill United States; Brudi, E., Van Wassenaer, P., Trees and Statics: Non-Destructive Failure Analysis (2001), pp. 1-17; Ciftci, C., Kane, B., Brena, S.F., Arwade, S.R., Loss in moment capacity of tree stems induced by decay (2014) Trees, 28, pp. 517-529; Coutts, M.P., Components of tree stability in sitka spruce on peaty gley soil (1986) Forestry, 59, pp. 173-197; Crook, M.J., Ennos, A.R., The anchorage mechanics of deep rooted larch, Larix europea x L-japonica (1996) J. Exp. Bot., 47, pp. 1509-1517; Dahle, G.A., James, K.R., Kane, B., Grabosky, J.C., Detter, A., A review of factors that affect the static load-bearing capacity of urban trees (2017) Arboric. Urban For., p. 43; Detter, V.A., Rust, S., (2013) Aktuelle Untersuchungsergebnisse zu zugversuchen, Findings of recent research on the pulling test method, 2013, pp. 87-100. , Jahrbuch der Baumpflege; Detter, A., Brudi, E., Bischoff, F., Treeconsult, P., Sinn, G., Statics Integrated Methods (2002), p. 7; Dupuy, L., Fourcaud, T., Stokes, A., A numerical investigation into the influence of soil type and root architecture on tree anchorage (2005) Plant Soil, 278, pp. 119-134; Dupuy, L.X., Fourcaud, T., Lac, P., Stokes, A., A generic 3D finite element model of tree anchorage integrating soil mechanics and real root system architecture (2007) Am. J. Bot., 94, pp. 1506-1514; Ellison, M., Quantified tress risk assessment used in the management of amenity trees (2005) J. Arboricult., 31, pp. 57-65; FAO, Guidelines for Soil Description (2006), p. 97pp. , Food and Agricultural Organization of the United Nations; Fourcaud, T., Ji, J.N., Zhang, Z.Q., Stokes, A., Understanding the impact of root morphology on overturning mechanisms: a modelling approach (2008) Ann. Bot., 101, pp. 1267-1280; Gaffrey, D., Kniemeyer, O., The elasto-mechanical behaviour of Douglas fir, its sensitivity to tree-specific properties, wind and snow loads, and implications for stability - a simulation study (2002) J. For. Sci., 48, pp. 49-69; Ghani, M.A., Stokes, A., Fourcaud, T., The effect of root architecture and root loss through trenching on the anchorage of tropical urban trees (Eugenia grandis Wight) (2009) Trees Struct. Funct., 23, pp. 197-209; Gross, D., Hauger, W., Schröder, J., Wall, W.A., Bonet, J., Engineering Mechanics 2. Mechanics of Materials (2011), p. 309 pp. , Springer-Verlag Berlin Heidelberg; Jonas, T., Lundström, T., STEMTRACK Digital Image Analysis As Tool to Detect the Stem Deflection in Tree Stability Experiments: Technical Annex. (2005); Jonsson, M.J., Foetzki, A., Kalberer, M., Lundström, T., Ammann, W., Stöckli, V., Root-soil rotation stiffness of Norway spruce (Picea abies (L.) Karst) growing on subalpine forested slopes (2006) Plant Soil, 285, pp. 267-277; Kamimura, K., Kitagawa, K., Saito, S., Mizunaga, H., Root anchorage of hinoki (Chamaecyparis obtuse (Sieb. Et Zucc.) Endl.) under the combined loading of wind and rapidly supplied water on soil : analyses based on tree-pulling experiments (2011) Eur. J. For. Res., 131, pp. 219-227; Khalilnejad, A., Ali, F.H., Hashim, R., Finite Element Simulation for the Impact of Root Morphology on Pulling-out Process (2012); Kolařík, J., Janíková, J., Krása, A., Mikita, T., Praus, L., Romanský, M., Šimek, P., Weberová, Š., Hodnocení stavu stromů SPPK A01 001:2018. Standardy péče o přírodu a krajinu – Arboristické standardy (2018), p. 56 pp.; Kretschmann, D.E., Wood Handbook (2010), Forest Service; Lavers, M.G., The Strength Properties of Timber (1983), 3rd ed. Building Research Establishment London; Lundström, T., Jonas, T., Stöckli, V., Ammann, W., Anchorage of mature conifers: resistive turning moment, root-soil plate geometry and root growth orientation (2007) Tree Physiol., 27, pp. 1217-1227; Mattheck, C., Breloer, H., The Body Language of Trees (2003), p. 239 pp. , 7th ed. The Stationery Office Norwich, England; Moore, J.R., Differences in maximum resistive bending moments of Pinus radiata trees grown on a range of soil types (2000) For. Ecol. Manage., 135, pp. 63-71; Mortimer, M.J., Kane, B., Hazard tree liability in the United States: uncertain risks for owners and professionals (2004) Urban For. Urban Green., 2, pp. 159-165; Neild, S.A., Wood, C.J., Estimating stem and root-anchorage flexibility in trees (1999) Tree Physiol., 19, pp. 141-151; Niklas, K.J., Plant Biomechanics: An Engineering Approach to Plant Form (1992), p. 607 pp. , The University of Chicago Press Chicago; Peltola, H.M., Mechanical stability of trees under static loads (2006) Am. J. Bot., 93, pp. 1501-1511; Rahardjo, H., Harnas, F.R., Indrawan, I.G.B., Leong, E.C., Tan, P.Y., Fong, Y.K., Ow, L.F., Understanding the stability of Samanea saman trees through tree pulling, analytical calculations and numerical models (2014) Urban For. Urban Green., 13, pp. 355-364; Riley, K.F., Hobson, M.P., Bence, S.J., Mathematical Methods for Physics and Engineering (2006), p. 1333 pp. , 3rd ed. Cambridge University Press Cambridge. UK; Sebera, V., Praus, L., Tippner, J., Kunecky, J., Cepela, J., Wimmer, R., Using optical full-field measurement based on digital image correlation to measure strain on a tree subjected to mechanical load (2014) Trees, 28, pp. 1173-1184; Sebera, V., Kunecký, J., Praus, L., Tippner, J., Horáček, P., Strain transfer from xylem to bark surface analyzed by digital image correlation (2016) Wood Sci. Technol., pp. 773-787; Sellier, D., Fourcaud, T., Crown structure and wood properties: influence on tree sway and response to high winds (2009) Am. J. Bot., 96, pp. 885-896; Simon, V., Weighand, B., Gomaa, H., Dimensional Analysis for Engineers. Mathematical Engineering (2017), Springer Nature Switzerland 134 pp; Smiley, E.T., Root pruning and stability of young willow oak (2008) Arboric. Urban For., 34 (2), pp. 123-128; Smiley, E.T., Kane, B., Wesley, R.A., Holmes, L., Sapwood cuts and their impact on tree stability (2012) Arboric. Urban For., 38 (6), pp. 287-292; Smiley, E.T., Holmes, L., Fraedrich, B.R., (2014) Arboric. Urban For., 40 (4), pp. 230-236; Spatz, H.C., Bruechert, F., Basic biomechanics of self-supporting plants: wind loads and gravitational loads on a Norway spruce tree (2000) For. Ecol. Manage., 135 (1-3), pp. 33-44; Štofko, P., Kodrík, M., Comparison of the root system architecture between windthrown and undamaged spruces growing in poorly drained sites (2008) J. For. Sci., 54, pp. 150-160; Sutton, M.A., Orteu, J.J., Schreier, H.W., Digital Image Correlation for Shape and Deformation Measurement Basic Concepts, Theory and Applications (2009), p. 322 pp. , Springer-Verlag Heidelberg; Szoradova, A., Praus, L., Kolarik, J., Evaluation of the root system resistance against failure of urban trees using principal component analysis (2013) Biosyst. Eng., 115, pp. 244-249; Tippner, J., Praus, L., Brabec, M., Sebera, V., Vojáčková, B., Milch, J., Using 3D digital image correlation in an identification of defects of trees subjected to bending (2019) Urban For. Urban Green., 46, pp. 1-10; Villaggio, P., The roots of trees (1998) Contin. Mech. Thermodyn., 10, pp. 233-240; Vojáčková, B., Tippner, J., Horáček, P., Praus, L., Sebera, V., Brabec, M., Numerical analysis of branch mechanical response to loading (2019) Arboric. Urban For., 45, pp. 120-131; Wessolly, L., Fracture diagnosis of trees, part 1: statics-integrated methods - measurement with tension test (1995) Stadt und Grün, 6, pp. 416-422; Wessolly, L., Stability of trees, explanation of the tipping process (1996) Stadt und Grün, 4, pp. 268-272; Wessolly, L., Erb, M., Tree Statics and Tree Inspection (2016), p. 288 pp. , Patzer Verlag Berlin – Hanover; Yang, M., Défossez, P., Danjon, F., Fourcaud, T., Tree stability under wind: simulating uprooting with root breakage using a finite element method (2014) Ann. Bot., 114, pp. 695-709; Young, W.C., Budynas, R.G., Roarks's Formulas for Stress and Strain (2002), p. 852 pp. , 7th ed. McGraw-Hill Professional},
correspondence_address1={Vojáčková, B.; Zemědělská 3Czech Republic; email: barbora.vojackova@mendelu.cz},
publisher={Elsevier GmbH},
issn={16188667},
language={English},
abbrev_source_title={Urban For. Urban Greening},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Yuksel2021294,
author={Yuksel, U. and Sozer, H.},
title={Dynamic Filtering and Prioritization of Static Code Analysis Alerts},
journal={Proceedings - 2021 IEEE International Symposium on Software Reliability Engineering Workshops, ISSREW 2021},
year={2021},
pages={294-295},
doi={10.1109/ISSREW53611.2021.00086},
note={cited By 0; Conference of 32nd IEEE International Symposium on Software Reliability Engineering Workshops, ISSREW 2021 ; Conference Date: 25 October 2021 Through 28 October 2021;  Conference Code:177291},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85127006986&doi=10.1109%2fISSREW53611.2021.00086&partnerID=40&md5=9ce39e82f88f2b55f92ae8d1abd21c5e},
affiliation={Vestel Electronics, Manisa, Turkey; Ozyegin University, Istanbul, Turkey},
abstract={We propose an approach for filtering and prioritizing static code analysis alerts while these alerts are being reviewed by the developer. We construct a Prolog knowledge base that captures the data flow information in the source code as well as the reported alerts, their properties and associations with the data flow. The knowledge base is updated as the developer reviews the listed alerts and decides whether they point at an actual fault or not. These updates provide useful information since some of the alerts of the same type can be related in terms of their root cause. Hence, dynamically updated knowledge base can be queried to eliminate or prioritize the remaining alerts in the review list. We present a motivating example to illustrate the approach and its automation by integrating a set of tools. © 2021 IEEE.},
author_keywords={code reviews;  processing alarms/warnings/alerts;  program analysis;  Prolog;  static code analysis},
keywords={Data transfer;  PROLOG (programming language), A-prolog;  Code review;  Data-flow information;  Dynamic filtering;  Prioritization;  Processing alarm/warning/alert;  Program analysis;  Prolog;  Source codes;  Static code analysis, Knowledge based systems},
references={Gosain, A., Sharma, G., (2015) Static Analysis: A Survey of Techniques and Tools, pp. 581-591. , New Delhi: Springer India; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Information and Software Technology, 53 (4), pp. 363-387; Muske, T., Serebrenik, A., Survey of approaches for handling static analysis alarms (2016) Proceedings of the 16th Ieee International Working Conference on Source Code Analysis and Manipulation, Raleigh, Nc, Usa, pp. 157-166; Li, M., Chen, Y., Wang, L., Xu, G., Dynamically validating static memory leak warnings (2013) Proceedings of the 2013 International Symposium on Software Testing and Analysis, pp. 112-122; Anderson, P., Measuring the value of static-analysis tool deployments (2012) Ieee Security and Privacy, 10 (3), pp. 40-47; Yuksel, U., Sozer, H., Automated classification of static code analysis alerts: A case study (2013) Proceedings of the 29th Ieee Conference on Software Maintenance, Eindhoven, Netherlands, pp. 532-535; Kremenek, T., Engler, D., Z-ranking: Using statistical analysis to counter the impact of static analysis approximations (2003) Proceedings of the 10th International Conference on Static Analysis, San Diego, Ca, Usa, pp. 295-315; Effective management of static analysis vulnerabilities and defects (2009) White Paper, Coverity Inc; Joshy, A.K., Chen, X., Steenhoek, B., Le, W., Validating static warnings via testing code fragments (2021) Proceedings of the 30th Acm Sigsoft International Symposium on Software Testing and Analysis, pp. 540-552; Sozer, H., Integrated static code analysis and runtime verification (2015) Software Practice and Experience, 45 (10), pp. 1359-1373; Yuksel, U., Sozer, H., Sensoy, M., Trust-based fusion of classifiers for static code analysis (2014) Information Fusion (FUSION 2014 17th International Conference On, Salamanca, Spain, pp. 1-6; Muske, T., Khedker, U., Cause points analysis for effective handling of alarms (2016) Proceedings of the 27th Ieee International Symposium on Software Reliability Engineering, pp. 173-184; Zhang, X., Grigore, R., Si, X., Naik, M., Effective interactive resolution of static analysis alarms," Proceedigns of the (2017) Acm Programming Languages, 1 (57), pp. 1-30; Muske, T., Talluri, R., Serebrenik, A., Repositioning of static analysis alarms (2018) Proceedings of the 27th Acm Sigsoft International Symposium on Software Testing and Analysis, pp. 187-197},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781665426039},
language={English},
abbrev_source_title={Proc. - IEEE Int. Symp. Softw. Reliab. Eng. Workshops, ISSREW},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Xu2021278,
author={Xu, W. and Ma, Y.},
title={A Static Analysis Framework for Detecting Bugs in Introductory Programs},
journal={Proceedings - 2021 IEEE International Symposium on Software Reliability Engineering Workshops, ISSREW 2021},
year={2021},
pages={278-279},
doi={10.1109/ISSREW53611.2021.00078},
note={cited By 0; Conference of 32nd IEEE International Symposium on Software Reliability Engineering Workshops, ISSREW 2021 ; Conference Date: 25 October 2021 Through 28 October 2021;  Conference Code:177291},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85126976034&doi=10.1109%2fISSREW53611.2021.00078&partnerID=40&md5=4fd5feac711ddbb126fed8edb87a8e17},
affiliation={Nanjing University, State Key Laboratory for Novel Software Technology, Department of Computer Science and Technology, Nanjing, China; Foreign Language School, Big Data Lab, Nanjing, China},
abstract={Introductory programming courses are crucial to students who begin to learn programming languages. However, current introductory program judgment systems only give a pass or fail by the percentage of passed test cases. This limitation hinders the learning progress because students may unaware of potential bugs hidden in their programs. Detecting and reporting these bugs can help them avoid introducing the same kinds of bugs in other programs. However, state-of-the-art bug detection methods focus on precision and scalability, but are usually costly to develop detection methods for various kinds of bugs. To simplify the development of bug detection while keeping a reasonable precision, this paper presents a static detection framework to detect software bugs. Then, we apply the method to introductory programs and successfully detect all bugs with a false positive rate of 28.57 %. © 2021 IEEE.},
author_keywords={Bug Detection;  Introductory Programming;  Static Analysis},
keywords={Program debugging;  Software testing;  Students, 'current;  Analysis frameworks;  Bug detection;  Detecting bugs;  Detection methods;  Introductory programming;  Introductory programming course;  Learn+;  Learning progress;  Test case, Static analysis},
references={Gao, F., Wang, L., Li, X., Bovinspector: Automatic inspection and repair of buffer overflow vulnerabilities (2016) Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering, pp. 786-791; Wang, Y., Wang, K., Gao, F., Wang, L., Learning semantic program embeddings with graph interval neural network (2020) Proceedings of the Acm on Programming Languages, 4, pp. 1-27. , no. oopsla; Wang, Y., Wang, L., Yu, T., Zhao, J., Li, X., Automatic detection and validation of race conditions in interrupt-driven embedded software (2017) Proceedings of the 26th Acm Sigsoft International Symposium on Software Testing and Analysis, pp. 113-124; Shi, Q., Xiao, X., Wu, R., Zhou, J., Fan, G., Zhang, C., Pinpoint: Fast and precise sparse value flow analysis for million lines of code (2018) Proceedings of the 39th Acm Sigplan Conference on Programming Language Design and Implementation, pp. 693-706; Gao, F., Chen, T., Wang, Y., Situ, L., Wang, L., Li, X., Carraybound: Static array bounds checking in c programs based on taint analysis (2016) Proceedings of the 8th Asia-Pacific Symposium on Internetware, pp. 81-90},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781665426039},
language={English},
abbrev_source_title={Proc. - IEEE Int. Symp. Softw. Reliab. Eng. Workshops, ISSREW},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Ngo2021327,
author={Ngo, K.-T. and Do, D.-T. and Nguyen, T.-T. and Vo, H.D.},
title={Ranking Warnings of Static Analysis Tools Using Representation Learning},
journal={Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
year={2021},
volume={2021-December},
pages={327-337},
doi={10.1109/APSEC53868.2021.00040},
note={cited By 0; Conference of 28th Asia-Pacific Software Engineering Conference, APSEC 2021 ; Conference Date: 6 December 2021 Through 9 December 2021;  Conference Code:177372},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85126187502&doi=10.1109%2fAPSEC53868.2021.00040&partnerID=40&md5=9205ee168d433675d810cc3e0428809e},
affiliation={Faculty of Information Technology, VNU University of Engineering and Technology, Viet Nam},
abstract={Static analysis tools are frequently used to detect potential vulnerabilities in software systems. However, an inevitable problem of these tools is their large number of warnings with a high false positive rate, which consumes time and effort for investigating. In this paper, we present DEFP, a novel method for ranking static analysis warnings. Based on the intuition that warnings which have similar contexts tend to have similar labels (true positive or false positive), DEFP is built with two BiLSTM models to capture the patterns associated with the contexts of labeled warnings. After that, for a set of new warnings, DEFP can calculate and rank them according to their likelihoods to be true positives (i.e., actual vulnerabilities). Our experimental results on a dataset of 10 real-world projects show that using DEFP, by investigating only 60% of the warnings, developers can find +90% of actual vulnerabilities. Moreover, DEFP improves the state-of-the-art approach 30% in both Precision and Recall. © 2021 IEEE.},
author_keywords={actual vulnerability;  false positive;  representation learning;  static analysis warnings;  warning context},
keywords={Actual vulnerability;  Analysis tools;  False positive;  False positive rates;  Novel methods;  Representation learning;  Software-systems;  Static analyse warning;  True positive;  Warning context, Static analysis},
funding_details={Trường Đại học Công nghệ, Đại học Quốc Gia Hà NộiTrường Đại học Công nghệ, Đại học Quốc Gia Hà Nội, VNU-UET, CN20.26},
funding_text 1={ACKNOWLEDGMENT This work has been supported by VNU University of Engineering and Technology under project number CN20.26.},
funding_text 2={In this work, Kien-Tuan Ngo was funded by Vingroup Joint Stock Company and supported by the Domestic Master/ PhD Scholarship Programme of Vingroup Innovation Foundation (VINIF), Vingroup Big Data Institute (VINBIGDATA), code VINIF.2020.ThS.04.},
references={Ayewah, N., Pugh, W., Hovemeyer, D., Morgenthaler, J.D., Penix, J., Using static analysis to find bugs (2008) IEEE Software, 25 (5), pp. 22-29; Nagappan, N., Ball, T., Static analysis tools as early indicators of prerelease defect density (2005) Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005. IEEE, pp. 580-586; SEI CERT Coding Standards (Wiki), , https://wiki-sei-cmu-edu.luisamigo.proxybk.com/confluence/display/seccode, C. S. C. Group; (2012) Guidelines for the Use of the C Language in Critical Systems, , M. The Motor Industry Software Reliability Association, 03; Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the state of static analysis: A large-scale evaluation in open source software (2016) 2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), 1, pp. 470-481; Flynn, L., Snavely, W., Svoboda, D., VanHoudnos, N., Qin, R., Burns, J., Zubrow, D., Marce-Santurio, G., Prioritizing alerts from multiple static analysis tools, using classification models (2018) 2018 IEEE/ACM 1st International Workshop on Software Qualities and Their Dependencies (SQUADE). IEEE, pp. 13-20; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don't software developers use static analysis tools to find bugs? (2013) 2013 35th International Conference on Software Engineering (ICSE). IEEE, pp. 672-681; Koc, U., Wei, S., Foster, J.S., Carpuat, M., Porter, A.A., An empirical assessment of machine learning approaches for triaging reports of A Java static analysis tool (2019) 2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST). IEEE, pp. 288-299; Ruthruff, J., Penix, J., Morgenthaler, J., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings (2008) 2008 ACM/IEEE 30th International Conference on Software Engineering. IEEE, pp. 341-350; Post, H., Sinz, C., Kaiser, A., Gorges, T., Reducing false positives by combining abstract interpretation and bounded model checking (2008) 2008 23rd IEEE/ACM International Conference on Automated Software Engineering. IEEE, pp. 188-197; Li, H., Kim, T., Bat-Erdene, M., Lee, H., Software vulnerability detection using backward trace analysis and symbolic execution (2013) 2013 International Conference on Availability, Reliability and Security. IEEE, pp. 446-454; Nguyen, T.T., Maleehuan, P., Aoki, T., Tomita, T., Yamada, I., Reducing false positives of static analysis for sei cert c coding standard (2019) 2019 IEEE/ACM Joint 7th International Workshop on Conducting Empirical Studies in Industry (CESI) and 6th International Workshop on Software Engineering Research and Industrial Practice (SER&IP). IEEE, pp. 41-48; Muske, T., Serebrenik, A., Survey of approaches for handling static analysis alarms (2016) 2016 IEEE 16th International Working Conference on Source Code Analysis and Manipulation (SCAM). IEEE, pp. 157-166; Yüksel, U., Sözer, H., Şensoy, M., Trust-based fusion of classifiers for static code analysis (2014) 17th International Conference on Information Fusion (FUSION). IEEE, pp. 1-6; Berman, M., Adams, S., Sherburne, T., Fleming, C., Beling, P., Active learning to improve static analysis (2019) 2019 18th IEEE International Conference on Machine Learning and Applications (ICMLA). IEEE, pp. 1322-1327; Lee, S., Hong, S., Yi, J., Kim, T., Kim, C.-J., Yoo, S., Classifying false positive static checker alarms in continuous integration using convolutional neural networks (2019) 2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST). IEEE, pp. 391-401; Mikolov, T., Chen, K., Corrado, G., Dean, J., Efficient estimation of word representations in vector space (2013) ICLR; Okun, V., Delaitre, A., Black, P.E., Report on the static analysis tool exposition (sate) IV (2013) NIST Special Publication, 500, p. 297; Software Assurance Reference Dataset, , https://samate-nist-gov.luisamigo.proxybk.com/SRD/index.php, N. I. of Standards and Technology; Chakraborty, S., Krishna, R., Ding, Y., Ray, B., Deep learning based vulnerability detection: Are we there yet (2021) IEEE Transactions on Software Engineering; DeFP, , https://tuanngokien-github-io.luisamigo.proxybk.com/DeFP/; Flawfinder, , https://dwheeler-com.luisamigo.proxybk.com/flawfinder/; Horwitz, S., Reps, T., Binkley, D., Interprocedural slicing using dependence graphs (1990) ACM Transactions on Programming Languages and Systems (TOPLAS), 12 (1), pp. 26-60; https://docs-joern-io.luisamigo.proxybk.com/home; Lin, G., Zhang, J., Luo, W., Pan, L., De Vel, O., Montague, P., Xiang, Y., Software vulnerability discovery via learning multi-domain knowledge bases (2019) IEEE Transactions on Dependable and Secure Computing; Hochreiter, S., Schmidhuber, J., Long short-term memory (1997) Neural Computation, 9 (8), pp. 1735-1780; Zhou, Y., Liu, S., Siow, J., Du, X., Liu, Y., (2019) Devign: Effective Vulnerability Identification by Learning Comprehensive Program Semantics Via Graph Neural Networks; Lin, G., Xiao, W., Zhang, J., Xiang, Y., Deep learning-based vulnerable function detection: A benchmark (2019) International Conference on Information and Communications Security, pp. 219-232. , Springer; http://cppcheck-sourceforge-net;.luisamigo.proxybk.com RATS-Rough Auditing Tool for Security, , https://github-com.luisamigo.proxybk.com/andrew-d/rough-auditing-tool-for-security; Dam, H.K., Pham, T., Ng, S.W., Tran, T., Grundy, J., Ghose, A., Kim, T., Kim, C.-J., Lessons learned from using A deep tree-based model for software defect prediction in practice (2019) 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR). IEEE, pp. 46-57; Nguyen, H.N., Teerakanok, S., Inomata, A., Uehara, T., The comparison of word embedding techniques in rnns for vulnerability detection (2021) International Conference on Information Systems Security and Privacy (ICISSP), pp. 109-120; Li, Z., Zou, D., Xu, S., Ou, X., Jin, H., Wang, S., Deng, Z., Zhong, Y., (2018) Vuldeepecker: A Deep Learning-based System for Vulnerability Detection; Baca, D., Petersen, K., Carlsson, B., Lundberg, L., Static code analysis to detect software security vulnerabilities-does experience matter? (2009) 2009 International Conference on Availability, Reliability and Security. IEEE, pp. 804-810; Muske, T., Datar, A., Khanzode, M., Madhukar, K., Efficient elimination of false positives using bounded model checking (2013) ISSRE, 15, pp. 2-5; Muske, T., Khedker, U.P., Efficient elimination of false positives using static analysis (2015) 2015 IEEE 26th International Symposium on Software Reliability Engineering (ISSRE). IEEE, pp. 270-280; Russell, R., Kim, L., Hamilton, L., Lazovich, T., Harer, J., Ozdemir, O., Ellingwood, P., McConley, M., Automated vulnerability detection in source code using deep representation learning (2018) 2018 17th IEEE International Conference on Machine Learning and Applications (ICMLA). IEEE, pp. 757-762; Li, Z., Zou, D., Xu, S., Jin, H., Zhu, Y., Chen, Z., Sysevr: A framework for using deep learning to detect software vulnerabilities (2021) IEEE Transactions on Dependable and Secure Computing},
sponsors={Academia Sinica; Foxconn Technology Group; Ministry of Science and Technology; PremiumSoft (Navicat); Taipei Medical University},
publisher={IEEE Computer Society},
issn={15301362},
isbn={9781665437844},
language={English},
abbrev_source_title={Proc. Asia Pac. Softw. Eng. Conf. APSEC},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Kashyap2021,
author={Kashyap, K.S. and Praveen Kumar, N. and Balakrishnan, P.},
title={Application of Machine Learning for Analysis of Static Eccentricity Fault in IPMSM using Finite Element Method},
journal={2021 National Power Electronics Conference, NPEC 2021},
year={2021},
doi={10.1109/NPEC52100.2021.9672469},
note={cited By 0; Conference of 2021 National Power Electronics Conference, NPEC 2021 ; Conference Date: 15 December 2021 Through 17 December 2021;  Conference Code:176424},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85125200861&doi=10.1109%2fNPEC52100.2021.9672469&partnerID=40&md5=723ca84a0870c81ab33b530bc717a57c},
affiliation={Amrita School Of Engineering Coimbatore, Amrita Vishwa Vidyapeetham, Department Of Electrical And Electronics Engieering, India},
abstract={Interior Permanent Magnet Synchronous Motor (IPMSM) is becoming good competitor of other electrical machines in both industrial and traction applications because of their better performance characteristics and high power density. Among all the faults occurring in IPMSM, the airgap eccentricity fault accounts nearly 5 to 10 percent. In motor fault diagnosis, the fault detection at early moment (incipient) is a challenging task. The analysis of static eccentricity fault in IPMSM is carried out in ANSYS Maxwell FEM (finite element modeling) platform. A 0.55 kW IPMSM is considered for the analysis of different static eccentricity fault severities from 10 to 40 percent. Electromagnetic parameters like stator phase current, speed, distribution of flux density over the machine and flux density around radial airgap are examined for normal and faulty conditions. Additional harmonics are added to the FFT spectrum (spatial) of flux density around airgap (radial component) based on severity of fault and asymmetry found in the flux density distribution over IPMSM. The data of stator phase current and airgap flux density (radial component) are obtained from ANSYS Maxwell FEA tool and analyzed using machine learning and in MATLAB. In machine learning Fine k - NN algorithm achieved 96.3 percent accuracy for predicting static eccentricity fault based on stator phase current data at incipient stage. © 2021 IEEE.},
author_keywords={FEM;  IPMSM;  Machine Learning;  Static Eccentricity Fault},
references={Vishnuvardhana, S.J., Balakrishnan, P., Isha, T.B., Performance analysis of surface mount permanent magnet synchronous machine under different rated speed (2018) International Conference on Recent Trends in Electronics, Information and Communication Technology (RTEICT-2018), , May; Kazmierkowski, M.P., Advanced electric drive vehicles book (2015) IEEE Industrial Electronics Magazine, 9 (4), pp. 65-68. , Dec; Sadeep, S., Isha, T.B., Comparison of the thermal characteristics of induction motor, switched reluctance motor and inset permanent magnet motor for electric vehicle application (2018) International Journal of Electrical and Computer Engineering, 12 (10), pp. 746-750; Chen, Y., Liang, S., Li, W., Liang, H., Wang, C., Faults and diagnosis methods of permanent magnet synchronous motors: A review (2019) Applied Sciences, 9 (10); Toliyat, H.A., Nandi, S., Choi, S., Meshgin-Kelk, H., (2012) Electric Machines: Modelling, Condition Monitoring and Fault Diagnosis, , CRC Press; Effect of wear and tear bearing fault in induction motor drives using FEM (2018) IEEE International Conference on Power Electronics, Drives and Energy Systems PEDES, pp. 1-6. , P. K. N. V. C. and I. T.B; Liang, X., Ali, M.Z., Zhang, H., Induction motors fault diagnosis using finite element method: A review (2020) IEEE Transactions on Industry Applications, 56 (2), pp. 1205-1217. , March-April; Tian, K., Zhang, T., Ai, Y., Zhang, W., Induction motors dynamic eccentricity fault diagnosis based on the combined use of WPD and EMD-simulation study (2018) Applied Sciences, 8 (10); Viswanath, S., Praveen Kumar, N., Isha, T.B., Static eccentricity fault in induction motor drive using finite element method Advances in Electrical and Computer Technologies, Lecture Notes in Electrical Engineering, 672, pp. 1291-1302. , Springer, Singapore; Hema Priya, B., Karthick, R., Lokprakash, B., Vasanth, S., Praveen Kumar, N., Static eccentricity fault analysis in inverter fed induction motor using finite element method (2020) IOP Conference Series: Materials Science and Engineering, 872 (1); Aggarwal, A., Strangas, E.G., Agapiou, J., Comparative study of offline detection methods of static eccentricity for interior permanent magnet synchronous machine (2019) IEEE 12th International Symposium on Diagnostics for Electrical Machines, Power Electronics and Drives (SDEMPED, pp. 75-81; Ebrahimi, B.M., Faiz, J., Roshtkhari, M.J., Static-, dynamic-, and mixed-eccentricity fault diagnoses in permanent-magnet synchronous motors (2009) IEEE Transactions on Industrial Electronics, 56 (11), pp. 4727-4739. , Nov; Wang, S., Li, H., Analysis of electromagnetic vibration of permanent magnet synchronous motor under static and dynamic eccentricity fault (2021) 6th International Conference on Control and Robotics Engineering (ICCRE, pp. 106-111; Galfarsoro, U., McCloskey, A., Zarate, S., Hernandez, X., Almandoz, G., Influence of manufacturing tolerances and eccentricities on the unbalanced magnetic pull in permanent magnet synchronous motors (2020) International Conference on Electrical Machines (ICEM, pp. 1363-1369; Sobra, J., Hruska, K., Laksar, J., Analysis of traction permanent magnet motor with static and dynamic eccentricities (2020) International Conference on Electrical Machines (ICEM, pp. 1294-1300; Da, Y., Shi, X., Krishnamurthy, M., A new approach to fault diagnostics for permanent magnet synchronous machines using electromagnetic signature analysis (2013) IEEE Transactions on Power Electronics, 28 (8), pp. 4104-4112. , Aug; Haddad, R.Z., Lopez, C.A., Foster, S.N., Strangas, E.G., A voltage-based approach for fault detection and separation in permanent magnet synchronous machines (2017) IEEE Transactions on Industry Applications, 53 (6), pp. 5305-5314. , Nov-Dec; Ebrahimi, B.M., Javan Roshtkhari, M., Faiz, J., Khatami, S.V., Advanced eccentricity fault recognition in permanent magnet synchronous motors using stator current signature analysis (2014) IEEE Transactions on Industrial Electronics, 61 (4), pp. 2041-2052. , April; Jeong, H., Kwak, S., Kim, N., Baek, J., Comparisons of flat and V-shaped IPMSM in electric vehicle compressor for high efficiency (2019) IEEE 89th Vehicular Technology Conference (VTC2019-Spring, pp. 1-4; Zhou, C., Huang, X., Fang, Y., Wu, L., Comparison of PMSMs with different rotor structures for EV application (2018) 2018 XIII International Conference on Electrical Machines (ICEM, pp. 609-614; Praveen Kumar, N., Isha, T.B., Application of empirical wavelet transform for analyzing inter-turn fault in FEM based closed loop speed controlled induction motor (2020) IEEE International Conference on Power Electronics, Drives and Energy Systems (PEDES, pp. 1-6; Senanayaka, J.S.L., Robbersmyr, K.G., Fault detection and classification of permanent magnet synchronous motor in variable load and speed conditions using order tracking and machine learning (2018) Journal of Physics: Conference Series, 1037 (3); Ali, M.Z., Shabbir, M.N.S.K., Zaman, S.M.K., Liang, X., Single-and multi-fault diagnosis using machine learning for variable frequency drive-fed induction motors (2020) IEEE Transactions on Industry Applications, 56 (3), pp. 2324-2337. , May-June; Lennartsson, A., Blomberg, M., (2021) Fault Detection in Permanent Magnet Synchronous Motors Using Machine Learning, , Dissertation},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781665410236},
language={English},
abbrev_source_title={Natl. Power Electron. Conf., NPEC},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Szekeres202133,
author={Szekeres, D. and Marussy, K. and Majzik, I.},
title={Tensor-based reliability analysis of complex static fault trees: Regular paper},
journal={Proceedings - 2021 17th European Dependable Computing Conference, EDCC 2021},
year={2021},
pages={33-40},
doi={10.1109/EDCC53658.2021.00012},
note={cited By 0; Conference of 17th European Dependable Computing Conference, EDCC 2021 ; Conference Date: 13 September 2021 Through 16 September 2021;  Conference Code:174433},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85123497818&doi=10.1109%2fEDCC53658.2021.00012&partnerID=40&md5=4758375b10385ac1f06a26b389ef9c09},
affiliation={Budapest Univ. of Technol. and Econ., Dept. of Meas. and Inform. Syst., Budapest, Hungary},
abstract={Fault Tree Analysis is widely used in the reliability evaluation of critical systems, such as railway and automotive systems, power grids, and nuclear power plants. While there are efficient algorithms for calculating the probability of failure in static fault trees, Mean Time to First Failure (MTFF) evaluation remains challenging due to state space explosion. Recently, structural and symmetry reduction methods were proposed to counteract this phenomenon. However, systems with a large number of different and highly interconnected components preclude the use of reduction techniques. Their MTFF analysis requires the solution of a system of linear equations whose size is exponential in the number of components in the system. In this paper, we propose a solution leveraging Tensor Trains as a compressed vector and matrix representation. We build upon Binary Decision Diagram-based techniques to avoid explicit state space enumeration and use linear equation solvers developed specifically for Tensor Trains to efficiently solve the arising linear systems. As a result, our novel approach complements the existing reduction-based techniques and makes some previously intractable models possible to analyze. We evaluate our approach on an industrial case study adapted from a railway system, and other openly available benchmark models. © 2021 IEEE.},
author_keywords={binary decision diagram;  fault tree analysis;  mean time to first failure;  reliability;  tensor train},
keywords={Binary trees;  Electric power transmission networks;  Linear equations;  Nuclear fuels;  Nuclear power plants;  Outages;  Railroads;  Reliability analysis;  Tensors, Binary decision;  Binary decision diagram;  Critical systems;  Decision diagram;  Fault tree analyses (FTA);  Fault-trees;  Mean time to first failure;  Railway system;  Reliability Evaluation;  Tensor trains, Fault tree analysis},
funding_details={Innovációs és Technológiai MinisztériumInnovációs és Technológiai Minisztérium},
funding_text 1={Acknowledgment: The research reported in this paper and carried out at the BME has been supported by the NRDI Fund based on the charter of bolster issued by the NRDI Office under the auspices of the Ministry for Innovation and Technology. During the development of the achievements, we took into consideration the goals set by the Balatonftired System Science Innovation Cluster and the plans of the "BME Balatonftired Knowledge Center", supported by EFOP 4.2.1-16-2017-00021.},
references={Ruijters, E., Stoelinga, M., Fault tree analysis: A survey of the state-of-the-art in modeling, analysis and tools (2015) Comput. Sci. Rew., 15, pp. 29-62; Rauzy, A., New algorithms for fault trees analysis (1993) Reliabil. Eng. Syst. Safety, 40 (3), pp. 203-211; Zang, Z., Sun, N., Trivedi, K.S., A BDD-based algorithm for reliability analysis of phased-mission systems (1994) IEEE Tran. Reliabil, (1), pp. 50-60; Reay, K.A., Andrews, J.D., A fault tree analysis strategy using binary decision diagrams (2002) Relia. Eng. Syst. Safety, 78 (1), pp. 45-56; Volk, M., Junges, S., Katoen, J.-P., Fast dynamic fault tree analysis by model checking techniques (2017) IEEE Tran. on Ind. Informat., 14 (1), pp. 370-379; Junges, S., Guck, D., Katoen, J.-P., Rensink, A., Stoelinga, M., Fault trees on a diet (2015) SETTA, pp. 3-18. , Springer; Boudali, H., Crouzen, P., Stoelinga, M., Dynamic fault tree analysis using input/output interactive Markov chains (2007) DSN; Buchholz, P., Exact and ordinary lumpability in finite markov chains (1995) Appl. Proh, 31 (1), pp. 59-75; Ghadhab, M., Junges, S., Katoen, J.-P., Kuntz, M., Volk, M., Safety analysis for vehicle guidance systems with dynamic fault trees (2019) Relia. Eng. Syst. Safety, 186, pp. 37-50; Kressner, D., MacEdo, F., Low-rank tensor methods for communicating Markov processes (2014) QEST, pp. 25-40. , Springer; Bolten, M., Kahl, K., Sokolovic, S., Multigrid methods for tensor structured Markov chains with low rank approximation (2016) S1AM J. Sci. Comput, 38 (2), pp. A649-A667; Buchholz, P., Dayar, T., Kriege, J., Orhan, M.C., On compact solution vectors in Kronecker-based Markovian analysis (2017) Perform. EvaL, 115, pp. 132-149; Robol, L., Masetti, G., (2019) Tensor Methods for the Computation of MTTA in Large Systems of Loosely Interconnected Components, , arXiv preprint; Oseledets, I.V., Dolgov, S., Solution of linear systems and matrix inversion in the TT-format (2012) S1AM J. Sci. Comput., 34 (5), pp. A2718-A2739; Dolgov, S.V., Savostyanov, D.V., Alternating minimal energy methods for linear systems in higher dimensions (2014) SIAMJ. Sci. Comput., 36 (5), pp. A2248-A2271; Ruijters, E., Budde, C.E., Nakhaee, M.C., Stoelinga, M.I.A., Bucur, D., Hiemstra, D., Schivo, S., Hiemstra, D., FFORT: A benchmark suite for fault tree analysis (2019) ESREL. Singapore: Res. Pub.; Dayar, T., Analyzing Markov chains based on kronecker products (2006) MAM, pp. 279-300; Marussy, K., Klenik, A., Molnar, V., Voros, A., Majzik, I., Telek, M., Efficient decomposition algorithm for stationary analysis of complex stochastic Petri net models (2016) PETRI NETS, pp. 281-300. , Springer; Grasedyck, L., Hierarchical singular value decomposition of tensors (2010) SIAMJ. Matrix Anal. Appl, 31 (4), pp. 2029-2054; Szekeres, D., Towards tensor-based reliability analysis of complex safety-critical systems (2019) Budapest Univ. Technol. Econ., Tech. Rep., , https://zenodo-org.luisamigo.proxybk.com/record/4665613, [Online]; Stewart, W.J., (2009) Probability, Markov Chains, Queues, and Simulation: The Mathematical Basis of Performance Modeling, , Princeton U. P; Volk, M., Junges, S., Katoen, J.-P., Advancing dynamic fault tree analysis-get succinct state spaces fast and synthesise failure rates (2016) SAFECOMP, pp. 253-265. , Springer; Bouissou, M., Bruyer, F., Rauzy, A., BDD based fault tree processing: A comparison of variable ordering heuristics (1997) ESREL; Oseledets, I.V., Tensor-train decomposition (2011) SIAM J. Sci. Comput., 33 (5), pp. 2295-2317; Dolgov, S.V., TT-GMRES: Solution to a linear system in the structured tensor format (2013) Rus. J. Numer. Anal. Math. Model., 28 (2), pp. 149-172; Holtz, S., Rohwedder, T., Schneider, R., The alternating linear scheme for tensor optimisation in the TT format (2011) SIAM J. Sci. Comput., 32 (2), pp. A683-A713; Zhu, H., Zhou, S., Dugan, J.B., Sullivan, K.J., A benchmark for quantitative fault tree reliability analysis (2001) RAMS, pp. 86-93; Vesely, W.E., Goldberg, F.F., Roberts, N.H., Haasl, D.F., Fault tree handbook (1981) Nuclear Reg. Commiss, , Washington DC, Tech. Rep; Guck, D., Spel, J., Stoelinga, M., DFTCalc: Reliability centered maintenance via fault tree analysis (tool paper) (2015) ICFEM, pp. 304-311. , Springer; Dehnert, C., Junges, S., Katoen, J.-P., Volk, M., A Storm is coming: A modern probabilistic model checker (2017) CAV, pp. 592-600. , Springer},
sponsors={Fraunhofer IKS (Institute for Cognitive Systems); Intel Labs in Germany},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781665436717},
language={English},
abbrev_source_title={Proc. - Eur. Dependable Comput. Conf., EDCC},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Pereira20211,
author={Pereira, J.D. and Campos, J.R. and Vieira, M.},
title={Machine Learning to Combine Static Analysis Alerts with Software Metrics to Detect Security Vulnerabilities: An Empirical Study},
journal={Proceedings - 2021 17th European Dependable Computing Conference, EDCC 2021},
year={2021},
pages={1-8},
doi={10.1109/EDCC53658.2021.00008},
note={cited By 2; Conference of 17th European Dependable Computing Conference, EDCC 2021 ; Conference Date: 13 September 2021 Through 16 September 2021;  Conference Code:174433},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85123457917&doi=10.1109%2fEDCC53658.2021.00008&partnerID=40&md5=2611ac51277879ad847884ed8f350dd2},
affiliation={University of Coimbra, CISUC, DEI, Coimbra, Portugal},
abstract={Software developers can use diverse techniques and tools to reduce the number of vulnerabilities, but the effectiveness of existing solutions in real projects is questionable. For example, Static Analysis Tools (SATs) report potential vulnerabilities by analyzing code patterns, and Software Metrics (SMs) can be used to predict vulnerabilities based on high-level characteristics of the code. In theory, both approaches can be applied from the early stages of the development process, but it is well known that they fail to detect critical vulnerabilities and raise a large number of false alarms. This paper studies the hypothesis of using Machine Learning (ML) to combine alerts from SATs with SMs to predict vulnerabilities in a large software project (under development for many years). In practice, we use four ML algorithms, alerts from two SATs, and a large number of SMs to predict whether a source code file is vulnerable or not (binary classification) and to predict the vulnerability category (multiclass classification). Results show that one can achieve either high precision or high recall, but not both at the same time. To understand the reason, we analyze and compare snippets of source code, demonstrating that vulnerable and non-vulnerable files share similar characteristics, making it hard to distinguish vulnerable from non-vulnerable code based on SAT alerts and SMs. © 2021 IEEE.},
author_keywords={Security;  Software Metrics;  Static Code Analysis;  Vulnerability Detection},
keywords={Classification (of information);  Codes (symbols);  Forecasting;  Machine learning, Analysis tools;  Empirical studies;  Machine-learning;  Security;  Security vulnerabilities;  Software developer;  Software metrics;  Source codes;  Static code analysis;  Vulnerability detection, Static analysis},
funding_details={Fundação para a Ciência e a TecnologiaFundação para a Ciência e a Tecnologia, FCT, 2020.04503, POCI-01-0145-FEDER-032504, POCI-01-0247-FEDER-045907, SFRH/BD/140221/2018},
funding_details={European Regional Development FundEuropean Regional Development Fund, ERDF},
funding_text 1={As future work, we plan to create a prioritization mechanism to guide the analysis of the development team. This will help by reducing the number of items to be analyzed by the team, as they are most likely to be false alarms. Also, we will add more data to the dataset used (up-to-date vulnerabilities, reports from different SATs, and more projects). Experiments at a different code level (functions, classes) will be performed. ACKNOWLEDGMENT This work was partially funded by FCT grants 2020.04503.BD and SFRH/BD/140221/2018. This work has been partially supported by the project METRICS (reference POCI-01-0145-FEDER-032504), funded by the FCT. It is also partially supported by the project AIDA -Adaptive, Intelligent and Distributed Assurance Platform (reference POCI-01-0247-FEDER-045907) leading to this work is co-financed by the ERDF and COMPETE 2020 and by the FCT under CMU Portugal. REFERENCES},
references={Neves, N., Antunes, J., Correia, M., Verissimo, P., Neves, R., Using attack injection to discover new vulnerabilities (2006) International Conference on Dependable Systems and Networks (DSN'06), pp. 457-466; (2020) Cost of a Data Breach Report 2020 by Ponemon Institute, , https://www-ibm-com.luisamigo.proxybk.com/security/data-breach, IBM, accessed: 2021-02-26; Ventura, F., (2021) Exclusivo: Vazamento Que Expôs 220 Milhões de Brasileiros é Pior Do Que Se Pensava, , https://tecnoblog-net.luisamigo.proxybk.com/404838/exclusivo-vazamento-que-expos-220-milhoes-de-brasileiros-e-pior-do-que-se-pensava, accessed: 2021-03-01; Belli, L., (2021) The Largest Personal Data Leakage in Brazilian History, , https://www-opendemocracy-net.luisamigo.proxybk.com/en/largest-personal-data-leakage-brazilian-history, accessed: 2021-03-01; Liu, B., Shi, L., Cai, Z., Li, M., Software Vulnerability Discovery Techniques: A Survey (2012) 2012 Fourth International Conference on Multimedia Information Networking and Security, pp. 152-156; Chidamber, S.R., Kemerer, C.F., A metrics suite for object oriented design (1994) IEEE Transactions on Software Engineering, 20 (6), pp. 476-493. , June; Shin, Y., Meneely, A., Williams, L., Osborne, J.A., Evaluating complexity, code churn, and developer activity metrics as indicators of software vulnerabilities (2011) IEEE Transactions on Software Engineering, 37 (6), pp. 772-787; Walden, J., Stuckman, J., Scandariato, R., Predicting Vulnerable Components: Software Metrics vs Text Mining (2014) 2014 IEEE 25th International Symposium on Software Reliability Engineering, pp. 23-33. , Nov; Alves, H., Fonseca, B., Antunes, N., Software metrics and security vulnerabilities: Dataset and exploratory study (2016) 2016 12th European Dependable Computing Conference (EDCC), pp. 37-44. , Sep; Alves, H., Fonseca, B., Antunes, N., Experimenting Machine Learning Techniques to Predict Vulnerabilities (2016) 2016 Seventh Latin-American Symposium on Dependable Computing (LADC), pp. 151-156. , Oct; D'Abruzzo Pereira, J., Vieira, M., On the Use of Open-Source C/C++ Static Analysis Tools in Large Projects (2020) 2020 16th European Dependable Computing Conference (EDCC), pp. 97-102; Marjamäki, D., (2007) Cppcheck-A Tool for Static C/C++ Code Analysis, , http://cppcheck-sourceforge-net.luisamigo.proxybk.com, Accessed: 2019-08-30. [Online]; Wheeler, D.A., (2001) Flawfinder, , https://dwheeler-com.luisamigo.proxybk.com/flawfinder, Accessed: 2019-08-30. [Online]; Coleman, D., Ash, D., Lowther, B., Oman, P., Using metrics to evaluate software system maintainability (1994) Computer, 27 (8), pp. 44-49; Gaffney, J.E., Metrics in Software Quality Assurance (1981) Proceedings of the ACM '81 Conference, Ser. ACM '81, pp. 126-130. , New York, NY, USA: Association for Computing Machinery; Chess, B., West, J., (2007) Secure Programming with Static Analysis, 1st Ed, , Addison-Wesley Professional; Freitez, W.R.J., Mammar, A., Cavalli, A.R., Software vulnerabilities, prevention and detection methods: A review (2009) SEC-MDA 2009: Security in Model Driven Architecture, pp. 1-11; Gosain, A., Sharma, G., Static analysis: A survey of techniques and tools (2015) Intelligent Computing and Applications, pp. 581-591. , D. Mandal, R. Kar, S. Das, and B. K. Panigrahi, Eds. Springer India; Arusoaie, A., Ciobâca, S., Craciun, V., Gavrilut, D., Lucanu, D., A Comparison of Open-Source Static Analysis Tools for Vulnerability Detection in C/C++ Code (2017) 2017 19th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing (SYNASC), pp. 161-168. , Sep; D'Abruzzo Pereira, J., Campos, J.R., Vieira, M., An Exploratory Study on Machine Learning to Combine Security Vulnerability Alerts from Static Analysis Tools (2019) 2019 9th Latin-American Symposium on Dependable Computing (LADC), pp. 1-10; Nunes, P., Medeiros, I., Fonseca, J., Neves, N., Correia, M., Vieira, M., On Combining Diverse Static Analysis Tools for Web Security: An Empirical Study (2017) 2017 13th European Dependable Computing Conference (EDCC), pp. 121-128. , Sep; Nunes, P., Medeiros, I., Fonseca, J.C., Neves, N., Correia, M., Vieira, M., Benchmarking Static Analysis Tools for Web Security (2018) IEEE Transactions on Reliability, 67 (3), pp. 1159-1175; Algaith, A., Nunes, P.J.C., Jose, F.D.R.S., Gashi, I., Vieira, M., Finding SQL Injection and Cross Site Scripting Vulnerabilities with Diverse Static Analysis Tools (2018) 2018 14th European Dependable Computing Conference (EDCC, pp. 57-64; (2011) SciTools Understand-Metrics. SciTools, , https://scitools-com.luisamigo.proxybk.com/feature/metrics, SciTools, Accessed: 2020-04-03. [Online]; Medeiros, N., Ivaki, N., Costa, P., Vieira, M., Vulnerable Code Detection Using Software Metrics and Machine Learning (2020) IEEE Access, 8, pp. 219174-219198; Stock Der, A.Van, Glas, B., Smithline, N., Gigler, T., (2017) OWASP Top 10-2017-The Ten Most Critical Web Application Security Risks, , https://www-owasp-org.luisamigo.proxybk.com/images/7/72/OWASPTop10-2017%28en%29.pdf.pdf, accessed: 2019-05-04; Campos, J.R., Vieira, M., Costa, E., Propheticus: Machine Learning Framework for the Development of Predictive Models for Reliable and Secure Software (2019) 2019 IEEE 30th International Symposium on Software Reliability Engineering (ISSRE), , IEEE, Oct; Pedregosa, F., Varoquaux, G., Gramfort, A., Michel, V., Thirion, B., Grisel, O., Blondel, M., Dubourg, V., Scikit-learn: Machine learning in python (2011) Journal of Machine Learning Research, 12, pp. 2825-2830. , no. Oct; Alpaydin, E., (2014) Introduction to Machine Learning, , The MIT Press; Ferri, C., Hernández-Orallo, J., Modroiu, R., An experimental comparison of performance measures for classification (2009) Pattern Recognition Letters, 30 (1), pp. 27-38},
sponsors={Fraunhofer IKS (Institute for Cognitive Systems); Intel Labs in Germany},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781665436717},
language={English},
abbrev_source_title={Proc. - Eur. Dependable Comput. Conf., EDCC},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Akremi2021702,
author={Akremi, A.},
title={Software Security Static Analysis False Alerts Handling Approaches},
journal={International Journal of Advanced Computer Science and Applications},
year={2021},
volume={12},
number={11},
pages={702-711},
doi={10.14569/IJACSA.2021.0121180},
note={cited By 1},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85121280676&doi=10.14569%2fIJACSA.2021.0121180&partnerID=40&md5=8a87bb3cf9c32a8bdc0b8d07051adf74},
affiliation={College of Computer and Information Systems, Umm Al-Qura University (UQU), Makkah, Saudi Arabia},
abstract={False Positive Alerts (FPA), generated by Static Analyzers Tools (SAT), reduce the effectiveness of the automatic code review, letting them be underused in practice. Researchers conduct a lot of tests to improve SAT accuracy while keeping FPA at a lower rate. They use different simulated and production datasets to validate their proposed methods. This paper surveys recent approaches dealing with FPA filtering; it compares them and discusses their usefulness. It also studies the used datasets to validate the identified methods and show their effectiveness to cover most program defects. This study focuses mainly on the security bugs covered by the datasets and handled by the existing methods. © 2021. All Rights Reserved.},
author_keywords={false alert reduction;  security bugs;  Software security;  source code dataset;  static analysis},
keywords={Program debugging, Alert reduction;  Automatic codes;  Code review;  False alert reduction;  False positive;  Security bugs;  Software security;  Source code dataset;  Source codes;  Static analyzers, Static analysis},
references={Copeland, P., Google's innovation factory: Testing, culture, and infrastructure (2010) 2010 Third International Conference on Software Testing, Verification and Validation, pp. 11-14. , [1] in IEEE; Seacord, R. C., Plakosh, D., Lewis, G. A., (2003) Modernizing legacy systems: software technologies, engineering processes, and business practices, , [2] Addison-Wesley Professional; Heo, K., Oh, H., Yi, K., Machine-learning-guided selectively unsound static analysis (2017) 2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE), pp. 519-529. , [3] in IEEE; Cheirdari, F., Karabatis, G., Analyzing false positive source code vulnerabilities using static analysis tools (2018) 2018 IEEE International Conference on Big Data (Big Data), pp. 4782-4788. , [4] in IEEE; Elberzhager, F., Munch, J., Nha, V. T. N., A systematic mapping study on the combination of static and dynamic quality assurance techniques (2012) Information and Software Technology, 54 (1), pp. 1-15. , [5]; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Information and Software Technology, 53 (4), pp. 363-387. , [6]; de Mendonca, V. R. L., Rodrigues, C. L., de MN Soares, F. A. A., Vincenzi, A. M. R., Static analysis techniques and tools: A systematic mapping study (2013) ICSEA, , [7]; Muske, T., Serebrenik, A., Survey of approaches for handling static analysis alarms (2016) 2016 IEEE 16th International Working Conference on Source Code Analysis and Manipulation (SCAM), pp. 157-166. , [8] in IEEE; Aloraini, B., Nagappan, M., German, D. M., Hayashi, S., Higo, Y., An empirical study of security warnings from static application security testing tools (2019) Journal of Systems and Software, 158, p. 110427. , [9]; Herter, J., Kastner, D., Mallon, C., Wilhelm, R., Benchmarking static code analyzers (2019) Reliability Engineering & System Safety, 188, pp. 336-346. , [10]; Nunes, P., Medeiros, I., Fonseca, J. C., Neves, N., Correia, M., Vieira, M., Benchmarking static analysis tools for web security (2018) IEEE Transactions on Reliability, 67 (3), pp. 1159-1175. , [11]; Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the state of static analysis: A large-scale evaluation in open source software (2016) 2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), 1, pp. 470-481. , [12] in IEEE; Arusoaie, A., Ciobaca, S., Craciun, V., Gavrilut, D., Lucanu, D., A comparison of open-source static analysis tools for vulnerability detection in c/c++ code (2017) 2017 19th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing (SYNASC), pp. 161-168. , [13] in IEEE; Heckman, S., Williams, andL., A model building process for identifying actionable static analysis alerts (2009) 2009 International Conference on Software Testing Verification and Validation, pp. 161-170. , [14] in IEEE; Koc, U., Saadatpanah, P., Foster, J. S., Porter, A. A., Learning a classifier for false positive error reports emitted by static code analysis tools (2017) Proceedings of the 1st ACM SIGPLAN International Workshop on Machine Learning and Programming Languages, pp. 35-42. , [15] in; Yoon, J., Jin, M., Jung, andY., Reducing false alarms from an industrialstrength static analyzer by svm (2014) 2014 21st Asia-Pacific Software Engineering Conference, 2, pp. 3-6. , [16] in IEEE; Lee, W., Lee, W., Kang, D., Heo, K., Oh, H., Yi, K., Sound nonstatistical clustering of static analysis alarms (2017) ACM Transactions on Programming Languages and Systems (TOPLAS), 39 (4), pp. 1-35. , [17]; Heo, K., Oh, H., Yang, H., Learning a variable-clustering strategy for octagon from labeled data generated by a static analysis (2016) International Static Analysis Symposium, pp. 237-256. , [18] in Springer; Ribeiro, A., Meirelles, P., Lago, N., Kon, F., Ranking warnings from multiple source code static analyzers via ensemble learning (2019) Proceedings of the 15th International Symposium on Open Collaboration, pp. 1-10. , [19] in; Flynn, L., Snavely, W., Svoboda, D., VanHoudnos, N., Qin, R., Burns, J., Zubrow, D., Marce-Santurio, G., Prioritizing alerts from multiple static analysis tools, using classification models (2018) 2018 IEEE/ACM 1st International Workshop on Software Qualities and their Dependencies (SQUADE), pp. 13-20. , [20] in IEEE; Yan, H., Sui, Y., Chen, S., Xue, J., Machine-learning-guided typestate analysis for static use-after-free detection (2017) Proceedings of the 33rd Annual Computer Security Applications Conference, pp. 42-54. , [21] in; Alikhashashneh, E. A., Raje, R. R., Hill, J. H., Using machine learning techniques to classify and predict static code analysis tool warnings (2018) 2018 IEEE/ACS 15th International Conference on Computer Systems and Applications (AICCSA), pp. 1-8. , [22] in IEEE; Lee, S., Hong, S., Yi, J., Kim, T., Kim, C.-J., Yoo, S., Classifying false positive static checker alarms in continuous integration using convolutional neural networks (2019) 2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST), pp. 391-401. , [23] in IEEE; Rooney, J. J., Heuvel, L. N. V., Root cause analysis for beginners (2004) Quality progress, 37 (7), pp. 45-56. , [24]; Park, J., Lim, I., Ryu, S., Battles with false positives in static analysis of javascript web applications in the wild (2016) 2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C), pp. 61-70. , [25] in IEEE; Muske, T., Khedker, U. P., Cause points analysis for effective handling of alarms (2016) 2016 IEEE 27th International Symposium on Software Reliability Engineering (ISSRE), pp. 173-184. , [26] in IEEE; Muske, T., Talluri, R., Serebrenik, A., Repositioning of static analysis alarms (2018) Proceedings of the 27th ACM SIGSOFT international symposium on software testing and analysis, pp. 187-197. , [27] in; Baier, C., Katoen, J.-P., (2008) Principles of model checking, , [28] MIT press; Valdiviezo, M., Cifuentes, C., Krishnan, P., A method for scalable and precise bug finding using program analysis and model checking (2014) Asian Symposium on Programming Languages and Systems, pp. 196-215. , [29] in Springer; Ball, T., Bounimova, E., Kumar, R., Levin, V., Slam2: Static driver verification with under 4% false alarms (2010) Formal Methods in Computer Aided Design, pp. 35-42. , [30] in IEEE; Chimdyalwar, B., Darke, P., Chavda, A., Vaghani, S., Chauhan, A., Eliminating static analysis false positives using loop abstraction and bounded model checking (2015) International Symposium on Formal Methods, pp. 573-576. , [31] in Springer; Nguyen, T. T., Maleehuan, P., Aoki, T., Tomita, T., Yamada, I., Reducing false positives of static analysis for sei cert c coding standard (2019) 2019 IEEE/ACM Joint 7th International Workshop on Conducting Empirical Studies in Industry (CESI) and 6th International Workshop on Software Engineering Research and Industrial Practice (SER&IP), pp. 41-48. , [32] in IEEE; Muske, T., Khedker, U. P., Efficient elimination of false positives using static analysis (2015) 2015 IEEE 26th International Symposium on Software Reliability Engineering (ISSRE), pp. 270-280. , [33] in IEEE; Kim, Y., Lee, J., Han, H., Choe, K.-M., Filtering false alarms of buffer overflow analysis using smt solvers (2010) Information and Software Technology, 52 (2), pp. 210-219. , [34]; Bharati, M., Ramageri, M., (2010) Data mining techniques and applications, , [35]; Hand, D. J., Principles of data mining (2007) Drug safety, 30 (7), pp. 621-622. , [36]; Dua, S., Du, X., (2016) Data mining and machine learning in cybersecurity, , [37] CRC press; Zhang, D., Jin, D., Xing, Y., Zhang, H., Gong, Y., Automatically mining similar warnings and warning combinations (2013) 2013 10th International Conference on Fuzzy Systems and Knowledge Discovery (FSKD), pp. 783-788. , [38] in IEEE; Cheirdari, F., Karabatis, G., On the verification of software vulnerabilities during static code analysis using data mining techniques (2017) OTM Confederated International Conferences” On the Move to Meaningful Internet Systems, pp. 99-106. , [39] in Springer; Nam, J., Wang, S., Xi, Y., Tan, L., Designing bug detection rules for fewer false alarms (2018) Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings, p. 315316. , [40] in; Yang, J., Tan, L., Peyton, J., Duer, K. A., Towards better utilizing static application security testing (2019) 2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP), pp. 51-60. , [41] in IEEE; Euzenat, J., Shvaiko, P., (2007) Ontology matching, 18. , [42] Springer; Zhang, X., Grigore, R., Si, X., Naik, M., Effective interactive resolution of static analysis alarms (2017) Proceedings of the ACM on Programming Languages, 1, pp. 1-30. , [43] OOPSLA; Kastner, D., Mauborgne, L., Wilhelm, S., Ferdinand, C., High-precision sound analysis to find safety and cybersecurity defects (2020) 10th European Congress on Embedded Real Time Software and Systems (ERTS 2020), , [44] in; Wang, H., Zhou, M., Cheng, X., Chen, G., Gu, M., Which defect should be fixed first? semantic prioritization of static analysis report (2018) International Conference on Software Analysis, Testing, and Evolution, pp. 3-19. , [45] in Springer; Weiser, M., (1979) Program slices: formal, psychological, and practical investigations of an automatic program abstraction method, , [46] PhD thesis, University of Michigan; Korel, B., Laski, J., Dynamic slicing of computer programs (1990) Journal of Systems and Software, 13 (3), pp. 187-195. , [47]; Agrawal, H., Horgan, J. R., Dynamic program slicing (1990) ACM SIGPlan Notices, 25 (6), pp. 246-256. , [48]; Chebaro, O., Kosmatov, N., Giorgetti, A., Julliand, J., Program slicing enhances a verification technique combining static and dynamic analysis (2012) Proceedings of the 27th Annual ACM Symposium on Applied Computing, pp. 1284-1291. , [49] in; Thome, J., Shar, L. K., Bianculli, D., Briand, L., Security slicing for auditing common injection vulnerabilities (2018) Journal of Systems and Software, 137, pp. 766-783. , [50]; Ribeiro, A., Meirelles, P., Lago, N., Kon, F., Ranking source code static analysis warnings for continuous monitoring of floss repositories (2018) IFIP International Conference on Open Source Systems, pp. 90-101. , [51] in Springer; Mozafari, B., Sarkar, P., Franklin, M., Jordan, M., Madden, S., Scaling up crowd-sourcing to very large datasets: a case for active learning (2014) Proceedings of the VLDB Endowment, 8 (2), pp. 125-136. , [52]},
correspondence_address1={Akremi, A.; College of Computer and Information Systems, Saudi Arabia},
publisher={Science and Information Organization},
issn={2158107X},
language={English},
abbrev_source_title={Intl. J. Adv. Comput. Sci. Appl.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Siavvas2021289,
author={Siavvas, M. and Kalouptsoglou, I. and Tsoukalas, D. and Kehagias, D.},
title={A Self-adaptive Approach for Assessing the Criticality of Security-Related Static Analysis Alerts},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2021},
volume={12955 LNCS},
pages={289-305},
doi={10.1007/978-3-030-87007-2_21},
note={cited By 1; Conference of 21st International Conference on Computational Science and Its Applications, ICCSA 2021 ; Conference Date: 13 September 2021 Through 16 September 2021;  Conference Code:265069},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85116048484&doi=10.1007%2f978-3-030-87007-2_21&partnerID=40&md5=b225afaeb5b88a5c4c97273fa2b2f240},
affiliation={Centre for Research and Technology Hellas, Thessaloniki, Greece},
abstract={Despite the acknowledged ability of automated static analysis to detect software vulnerabilities, its adoption in practice is limited, mainly due to the large number of false alerts (i.e., false positives) that it generates. Although several machine learning-based techniques for assessing the actionability of the produced alerts and for filtering out false positives have been proposed, none of them have demonstrated sufficient results, whereas limited attempts focus on assessing the criticality of the alerts from a security viewpoint. To this end, in the present paper we propose an approach for assessing the criticality of security-related static analysis alerts. In particular, we develop a machine learning-based technique for prioritizing and classifying security-related static analysis alerts based on their criticality, by considering information retrieved from the alerts themselves, vulnerability prediction models, and user feedback. The concept of retraining is also adopted to enable the model to correct itself and adapt to previously unknown software products. The technique has been evaluated through a case study, which revealed its capacity to effectively assess the criticality of alerts of previously unknown projects, as well as its ability to dynamically adapt to the characteristics of the new project and provide more accurate assessments through retraining. © 2021, Springer Nature Switzerland AG.},
author_keywords={Automated static analysis;  Self-adaptive systems;  Software quality;  Software security;  Vulnerability prediction},
keywords={Classification (of information);  Computer software selection and evaluation;  Criticality (nuclear fission);  Machine learning;  Quality control, Actionability;  Automated static analyse;  False positive;  Model feedback;  Prediction modelling;  Self-adaptive approaches;  Self-adaptive system;  Software security;  Software vulnerabilities;  Vulnerability prediction, Static analysis},
funding_details={Horizon 2020 Framework ProgrammeHorizon 2020 Framework Programme, H2020, 952684},
funding_text 1={Acknowledgements. This work is partially funded by the European Union’s Horizon 2020 Research and Innovation Programme through IoTAC project under Grant Agreement No. 952684.},
references={Luszcz, J., Apache struts 2: How technical and development gaps caused the equifax breach (2018) Netw. Secur., 2018 (1), pp. 5-8; Siavvas, M., Gelenbe, E., Kehagias, D., Tzovaras, D.: Static analysis-based approaches for secure software development. In: Gelenbe, E., et al. (eds.) Euro-CYBERSEC 2018. CCIS, vol. 821, pp. 142–157. Springer, Cham (2018). https://doi.org/10.1007/978-3-319-95189-8 13; Mohammed, N.M., Niazi, M., Alshayeb, M., Mahmood, S., Exploring software security approaches in software development lifecycle: A systematic mapping study (2016) Comp. Stand. Interf., 50, pp. 107-115; Baca, D., Identifying security relevant warnings from static code analysis tools through code tainting (2010) 2010 International Conference on Availability, Reliability and Security, Pp. 386–390. IEEE; Yang, J., Ryu, D., Baik, J., Improving vulnerability prediction accuracy with secure coding standard violation measures (2016) 2016 International Conference on Big Data and Smart Computing (Bigcomp), pp. 115-122. , pp., IEEE; McGraw, G., Software security (2012) Datenschutz Und Datensicherheit-Dud; Howard, M., Lipner, S., (2006) The Security Development Lifecycle: SDL: A Process for Developing Demonstrably More Secure Software, , Microsoft Press; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don’t software developers use static analysis tools to find bugs? (2013) 2013 35Th International Conference on Software Engineering (ICSE), pp. 672-681. , pp., IEEE; Vassallo, C., Panichella, S., Palomba, F., Proksch, S., Gall, H.C., Zaidman, A., How developers engage with static analysis tools in different contexts (2019) Empirical Softw. Eng., 25 (2), pp. 1419-1457. , https://doi.org/10.1007/s10664-019-09750-5; Muske, T., Serebrenik, A., Survey of approaches for handling static analysis alarms (2016) 2016 IEEE 16Th International Working Conference on Source Code Analysis and Manipulation (SCAM). Pp. 157–166. IEEE; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Inf. and Soft, Tech; Yang, X., Chen, J., Yedida, R., Yu, Z., Menzies, T., Learning to recognize actionable static code warnings (2021) Empirical Softw. Eng., 26, p. 56. , https://doi.org/10.1007/s10664-021-09948-6; Munaiah, N., Camilo, F., Wigham, W., Meneely, A., Nagappan, M., Do bugs foreshadow vulnerabilities? An in-depth study of the chromium project (2017) Empirical Softw. Eng., 22 (3), pp. 1305-1347; Heckman, S., Williams, L., A comparative evaluation of static analysis actionable alert identification techniques (2013) Proceedings of the 9Th International Conference on Predictive Models in Software Engineering, pp. 1-10. , pp; Misra, S.: A step by step guide for choosing project topics and writing research papers in ICT related disciplines. In: ICTA 2020. CCIS, vol. 1350, pp. 727–744. Springer, Cham (2021). https://doi.org/10.1007/978-3-030-69143-1 55; Heckman, S., Williams, L., A model building process for identifying actionable static analysis alerts (2009) International Conference on Software Testing Verification and Validation, pp. 161-170. , pp., 2009; Heckman, S.S., Adaptively ranking alerts generated from automated static analysis (2007) XRDS: Crossroads. ACM Mag. Stud., 14 (1), pp. 1-11; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proceedings of the 30Th International Conference on Software Engineering. ICSE 2008. Association for Computing Machinery, New York, Pp. 341–350; Kremenek, T., Ashcraft, K., Yang, J., Engler, D., Correlation exploitation in error ranking (2004) Proceedings of the 12Th ACM SIGSOFT Twelfth International Symposium on Foundations of Software Engineering. SIGSOFT 2004/FSE-12, pp. 83-93. , Association for Computing Machinery, New York, pp; Tripp, O., Guarnieri, S., Pistoia, M., Aravkin, A., ALETHEIA: Improving the usability of static security analysis (2014) Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security; Heckman, S., Williams, L., On establishing a benchmark for evaluating static analysis alert prioritization and classification techniques (2008) 2Nd International Symposium on Empirical Software Engineering and Measurement; Younis, A.A., Malaiya, Y.K., Ray, I., Using attack surface entry points and reach-ability analysis to assess the risk of software vulnerability exploitability (2014) 15Th International Symposium on High-Assurance Systems Engineering; Younis, A.A., Malaiya, Y.K., Using software structure to predict vulnerability exploitation potential (2014) 8Th International Conference on Software Security and Reliability-Companion, pp. 13-18. , pp; Siavvas, M., Kehagias, D., Tzovaras, D., Gelenbe, E., A hierarchical model for quantifying software security based on static analysis alerts and software metrics (2021) Softw. Qual. J., 29 (2), pp. 431-507. , https://doi.org/10.1007/s11219-021-09555-0; Kalouptsoglou, I., Siavvas, M., Tsoukalas, D., Kehagias, D.: Cross-project vulnerability prediction based on software metrics and deep learning. In: Gervasi, O., et al. (eds.) ICCSA 2020. LNCS, vol. 12252, pp. 877–893. Springer, Cham (2020). https://doi.org/10.1007/978-3-030-58811-3 62; Filus, K., Siavvas, M., Domańska, J., Gelenbe, E., The random neural network as a bonding model for software vulnerability prediction (2021) Modelling, Analysis, and Simulation of Computer and Telecommunication Systems; Filus, K., Boryszko, P., Domańska, J., Siavvas, M., Gelenbe, E., Efficient feature selection for static analysis vulnerability prediction (2021) Sensors, 21 (4), p. 1133; Siavvas, M.G., Chatzidimitriou, K.C., Symeonidis, A.L., QATCH-an adaptive framework for software product quality assessment (2017) Expert Syst. Appl., 86, pp. 350-366; Siavvas, M., Kehagias, D., Tzovaras, D., A preliminary study on the relationship among software metrics and specific vulnerability types (2017) 2017 International Conference on Computational Science and Computational Intelligence; Mateos, C., Zunino, A., Misra, S., Anabalon, D., Flores, A.: Migration from COBOL to SOA: measuring the impact on web services interfaces complexity. In: Damaševičius, R., Mikašytė, V. (eds.) ICIST 2017. CCIS, vol. 756, pp. 266–279. Springer, Cham (2017). https://doi.org/10.1007/978-3-319-67642-5 22; Mateos, C., Zunino, A., Flores, A., Misra, S., Cobol systems migration to SOA: Assessing antipatterns and complexity (2019) Inf. Technol. Control, 48 (71-89)},
correspondence_address1={Siavvas, M.; Centre for Research and Technology HellasGreece; email: siavvasm@iti.gr},
editor={Gervasi O., Murgante B., Misra S., Garau C., Blecic I., Taniar D., Apduhan B.O., Rocha A.M., Tarantino E., Torre C.M.},
publisher={Springer Science and Business Media Deutschland GmbH},
issn={03029743},
isbn={9783030870065},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{LeGrow2021216,
author={LeGrow, J.T. and Hutchinson, A.},
title={(Short Paper) Analysis of a Strong Fault Attack on Static/Ephemeral CSIDH},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2021},
volume={12835 LNCS},
pages={216-226},
doi={10.1007/978-3-030-85987-9_12},
note={cited By 0; Conference of 16th International Workshop on Security, IWSEC 2021 ; Conference Date: 8 September 2021 Through 10 September 2021;  Conference Code:264589},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85115268833&doi=10.1007%2f978-3-030-85987-9_12&partnerID=40&md5=067e6d224baacdefc2ec667acf677e03},
affiliation={Department of Mathematics, University of Auckland, Auckland, New Zealand; Institute for Quantum Computing and Department of Combinatorics and Optimization, University of Waterloo, Waterloo, ON, Canada},
abstract={CSIDH is an isogeny-based post-quantum key establishment protocol proposed in 2018. In this work we analyze attacking implementations of CSIDH which use dummy isogeny operations using fault injections from a mathematical perspective. We detail an attack (implicit in prior works on implementations of CSIDH) by which a static private key can be learned (up to sign) by the attacker with certainty using ∑ ⌈ log2(bi) + 1 ⌉ faults using a binary search approach, where b is the bound vector defining the keyspace. A natural idea for a countermeasure to this attack is to randomly mix the real degree ℓj isogenies together with the dummy ones, so that binary search becomes ineffective. In this work we evaluate the efficacy of this idea as a fault attack countermeasure; in particular, we give bounds (as a function of the bound vector entries) on the number of fault injections (of a particular relatively strong, hypothetical type) required for an attacker to have a given success probability for guessing an unknown key, and present the results of simulated attacks on keys sampled from 6 keyspaces found in the literature. We find that the number of faults required to reach any constant success probability in guessing a static key is quadratic in the bound vector entries, rather than logarithmic as in the “real-then-dummy” setting—concretely, the number of faults required increases from a few hundred to tens of thousands. Broadly, this behaviour is reflected in our simulations. © 2021, Springer Nature Switzerland AG.},
author_keywords={CSIDH;  Fault attacks;  Isogeny-based cryptography;  Key exchange},
keywords={Security of data, Binary search;  Fault attack countermeasures;  Fault injection;  Post quantum;  Private key;  Simulated attacks, Software testing},
funding_details={Ministry of Business, Innovation and EmploymentMinistry of Business, Innovation and Employment, MBIE, UOAX1933},
funding_text 1={Jason T. LeGrow was funded in part by MBIE fund UOAX1933.},
references={Campos, F., Kannwischer, M.J., Meyer, M., Onuki, H., Stöttinger, M., Trouble at the CSIDH: Protecting CSIDH with dummy-operations against fault injection attacks (2020) 2020 Workshop on Fault Detection and Tolerance in Cryptography (FDTC), Pages 57–65, Los Alamitos, CA, USA, September 2020. IEEE Computer Society; Castryck, W., Decru, T.: CSIDH on the Surface. In: Ding, J., Tillich, J.-P. (eds.) PQCrypto 2020. LNCS, vol. 12100, pp. 111–129. Springer, Cham (2020). https://doi.org/10.1007/978-3-030-44223-1 7; Castryck, W., Lange, T., Martindale, C., Panny, L., Renes, J.: CSIDH: an efficient post-quantum commutative group action. In: Peyrin, T., Galbraith, S. (eds.) ASI-ACRYPT 2018. LNCS, vol. 11274, pp. 395–427. Springer, Cham (2018). https://doi.org/10.1007/978-3-030-03332-3 15; Cervantes-Vázquez, D., Chenu, M., Chi-Domínguez, J.-J., De Feo, L., Rodríguez-Henríquez, F., Smith, B.: Stronger and Faster Side-Channel Protections for CSIDH. In: Schwabe, P., Thériault, N. (eds.) LATINCRYPT 2019. LNCS, vol. 11774, pp. 173–193. Springer, Cham (2019). https://doi.org/10.1007/978-3-030-30530-7 9; Chow, Y., Teicher, H.: Probability Theory: Independence, Interchangeability, Mar-tingales. Springer, New York (1997); Hoeffding, W., Probability inequalities for sums of bounded random variables (1963) J. Am. Stat. Assoc., 58 (301), pp. 13-30; Hutchinson, A., LeGrow, J., Koziel, B., Azarderakhsh, R.: Further optimizations of CSIDH: a systematic approach to efficient strategies, permutations, and bound vectors. In: Conti, M., Zhou, J., Casalicchio, E., Spognardi, A. (eds.) ACNS 2020. LNCS, vol. 12146, pp. 481–501. Springer, Cham (2020). https://doi.org/10.1007/978-3-030-57808-4 24; Marcinkiewicz, J., Zygmund, A., Sur les fonctions indépendantes (1937) Fundam. Math., 29 (1), pp. 60-90; Meyer, M., Campos, F., Reith, S.: On lions and elligators: an efficient constant-time implementation of CSIDH. In: Ding, J., Steinwandt, R. (eds.) PQCrypto 2019. LNCS, vol. 11505, pp. 307–325. Springer, Cham (2019). https://doi.org/10.1007/978-3-030-25510-7 17; Meyer, M., Reith, S.: A faster way to the CSIDH. In: Chakraborty, D., Iwata, T. (eds.) INDOCRYPT 2018. LNCS, vol. 11356, pp. 137–152. Springer, Cham (2018). https://doi.org/10.1007/978-3-030-05378-9 8; Moriya, T., Onuki, H., Takagi, T., How to construct CSIDH on edwards curves (2019) Cryptology Eprint Archive, 843 (2019). , Report; Onuki, H., Aikawa, Y., Yamazaki, T., Takagi, T.: (Short Paper) A Faster constant-time algorithm of CSIDH keeping two points. In: Attrapadung, N., Yagi, T. (eds.) IWSEC 2019. LNCS, vol. 11689, pp. 23–33. Springer, Cham (2019). https://doi-.luisamigo.proxybk.com org/10.1007/978-3-030-26834-3 2; Paley, R.E.A.C., Zygmund, A., On some series of functions, (3) (1932) Math. Proc. Cambridge Philos. Soc., 28 (2), pp. 190-205},
correspondence_address1={LeGrow, J.T.; Department of Mathematics, New Zealand; email: jason.legrow@auckland.ac.nz},
editor={Nakanishi T., Nojima R.},
publisher={Springer Science and Business Media Deutschland GmbH},
issn={03029743},
isbn={9783030859862},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Lavazza20211,
author={Lavazza, L. and Morasca, S. and Tosi, D.},
title={Comparing Static Analysis and Code Smells as Defect Predictors: An Empirical Study},
journal={IFIP Advances in Information and Communication Technology},
year={2021},
volume={624},
pages={1-15},
doi={10.1007/978-3-030-75251-4_1},
note={cited By 0; Conference of 17th IFIP WG 2.13 International Conference on Open Source Systems, OSS 2021 ; Conference Date: 12 May 2021 Through 13 May 2021;  Conference Code:259719},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85106148361&doi=10.1007%2f978-3-030-75251-4_1&partnerID=40&md5=db22e5d3804b44fd6c2ede9e3007f0cc},
affiliation={Università degli Studi dell’Insubria, Varese, Italy; Università degli Studi dell’Insubria, Como, Italy},
abstract={Background. Industrial software increasingly relies on open source software. Therefore, industrial practitioners need to evaluate the quality of a specific open source product they are considering for adoption. Automated tools greatly help assess open source software quality, by reducing the related costs, but do not provide perfectly reliable indications. Indications from tools can be used to restrict and focus manual code inspections, which are typically expensive and time-consuming, only on the code sections most likely to contain faults. Aim. We investigate the extent of the effectiveness of static analysis bug detectors by themselves and in combination with code smell detectors in guiding inspections. Method. We performed an empirical study, in which we used a bug detector (SpotBugs) and a code smell detector (JDeodorant). Results. Our results show that the selected bug detector is precise enough to justify inspecting the code it flags as possibly buggy. Applying the considered code smell detector makes predictions even more precise, but at the price of a rather low recall. Conclusions. Using the considered tools as inspection drivers proved quite useful. The relatively small size of our study does not allow us to draw universally valid conclusions, but our results should be applicable to source code of any kind, although they were obtained from open source code. © 2021, IFIP International Federation for Information Processing.},
author_keywords={Code smell;  Defect prediction;  Static analysis},
keywords={Computer software selection and evaluation;  Inspection;  Open systems;  Software quality;  Static analysis, Automated tools;  Code sections;  Empirical studies;  Industrial practitioners;  Industrial software;  Open source products;  Open-source code;  Source codes, Open source software},
references={(2020) Findbugs Website, , http://findbugs-sourceforge-net.luisamigo.proxybk.com/; JDeodorant website (2020). https://github-com.luisamigo.proxybk.com/tsantalis/JDeodorant; (2020) Spotbugs Documentation Website, , https://spotbugs-readthedocs-io.luisamigo.proxybk.com/en/latest/; SpotBugs website (2020). https://spotbugs-github-io.luisamigo.proxybk.com/; Ackerman, A.F., Buchwald, L.S., Lewski, F.H., Software inspections: An effective verification process (1989) IEEE Softw, 6 (3), pp. 31-36; Aurum, A., Petersson, H., Wohlin, C., State-of-the-art: Software inspections after 25 years (2002) Softw. Test. Verification Reliab., 12 (3), pp. 133-154; Ayewah, N., Pugh, W., Morgenthaler, J.D., Penix, J., Zhou, Y., (2007) Evaluating Static Analysis Defect Warnings on Production Software; Brown, W.H., Malveau, R.C., McCormick, H.W.S., Mowbray, T.J.: AntiPatterns: Refactoring Software, Architectures, and Projects in Crisis, 1st edn. Wiley, New York (1998); Codoban, M., Marinescu, C., Marinescu, R.: IProblems-an integrated instrument for reporting design flaws, vulnerabilities and defects (2011) 2011 18Th Working Conference on Reverse Engineering, Pp. 437–438. IEEE; Cohen, J., (1988) Statistical Power Analysis for the Behavioral Sciences. Lawrence Earl-Baum Associates Routledge, , New York; Danphitsanuphan, P., Suwantada, T., Code smell detecting tool and code smell-structure bug relationship (2012) 2012 Spring Congress on Engineering and Technology, Pp. 1–5. IEEE; Fagan, M.E., Design and code inspections to reduce errors in program development (1976) IBM Syst. J., 38, pp. 258-287; Fagan, M.E.: Advances in software inspections. In: Broy, M., Denert, E. (eds.) Pioneers and Their Contributions to Software Engineering, pp. 335–360. Springer, Heidelberg (2001). https://doi.org/10.1007/978-3-642-48354-7 14; Fokaefs, M., Tsantalis, N., Chatzigeorgiou, A., JDeodorant: Identification and removal of feature envy bad smells (2007) IEEE International Conference on Software Maintenance, pp. 519-520. , pp., 2007; Fokaefs, M., Tsantalis, N., Chatzigeorgiou, A., JDeodorant: Identification and removal of feature envy bad smells (2007) 2007 IEEE International Conference on Software Maintenance, Pp. 519–520. IEEE; Fowler, M., Beck, K., Brant, J., Opdyke, W., Roberts, D., (1999) Refactoring: Improving the Design of Existing Code, , Addison-Wesley Professional, Boston; Hall, T., Zhang, M., Bowes, D., Sun, Y., Some code smells have a significant but small effect on faults (2014) ACM Trans. Softw. Eng. Methodol. (TOSEM), 23 (4), pp. 1-39; Hernández-Orallo, J., Flach, P., Ferri, C., A unified view of performance metrics: Translating threshold choice into expected classification loss (2012) J. Mach. Learn. Res., 13, pp. 2813-2869; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) ACM SIGPLAN Not, 39 (12), pp. 92-106; Kaur, A., A systematic literature review on empirical analysis of the relationship between code smells and software quality attributes (2019) Arch. Comput. Methods Eng., 27, pp. 1267-1296; Kim, S., Ernst, M.D., Which warnings should I fix first? (2007) 6Th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 45-54. , pp; Lavazza, L., Software quality evaluation via static analysis and static measurement: An industrial experience (2020) The Fifteenth International Conference on Software Engineering Advances-Icsea 2020, pp. 55-60. , pp; Lavazza, L., Morasca, S., Tosi, D., An empirical study on the factors affecting software development productivity. E-Informatica (2018) Softw. Eng. J, 12 (1), pp. 27-49. , https://doi.org/10.5277/e-Inf180102; Lavazza, L., Tosi, D., Morasca, S.: An empirical study on the persistence of Spot-Bugs issues in open-source software evolution. In: Shepperd, M., Brito e Abreu, F., Rodrigues da Silva, A., Pérez-Castillo, R. (eds.) QUATIC 2020. CCIS, vol. 1266, pp. 144–151. Springer, Cham (2020). https://doi.org/10.1007/978-3-030-58793-2 12; Lenarduzzi, V., Taibi, D., Tosi, D., Lavazza, L., Morasca, S., Open source software evaluation, selection, and adoption: A systematic literature review (2020) 46Th Euromicro Conference on Software Engineering and Advanced Applications (SEAA), pp. 437-444. , pp; Lenarduzzi, V., Tosi, D., Lavazza, L., Morasca, S.: Why do developers adopt open source software? past, present and future. In: In: Bordeleau F., Sillitti A., Meirelles P., Lenarduzzi V. (eds.) Open Source Systems. OSS 2019. IFIP International Conference on Open Source Systems, pp. 104–115. Springer, Cham (2019). https://doi.org/10.1007/978-3-030-20883-7 10; Marinescu, R., Detection strategies: Metrics-based rules for detecting design flaws (2004) 20Th IEEE International Conference on Software Maintenance, Pp. 350–359. IEEE; Moha, N., Gueheneuc, Y.G., Duchien, L., Le Meur, A.F., DECOR: A method for the specification and detection of code and design smells (2009) IEEE Trans. Softw. Eng., 36 (1), pp. 20-36; Murphy-Hill, E., Black, A.P., An interactive ambient visualization for code smells (2010) 5Th International Symposium on Software Visualization, pp. 5-14. , pp; Olbrich, S.M., Cruzes, D.S., Sjøberg, D.I., Are all code smells harmful? A study of god classes and brain classes in the evolution of three open source systems (2010) 2010 IEEE International Conference on Software Maintenance, pp. 1-10. , pp., IEEE; Palomba, F., Bavota, G., Di Penta, M., Fasano, F., Oliveto, R., de Lucia, A., On the diffuseness and the impact on maintainability of code smells: A large scale empirical investigation (2018) Empirical Softw. Eng., 23 (3), pp. 1188-1221; de Paulo Sobrinho, E.V., de Lucia, A., de Almeida Maia, M., A systematic literature review on bad smells—5 w’s: Which, when, what, who, where (2021) IEEE Trans. Softw. Eng., 47 (1), pp. 17-66; Piotrowski, P., Madeyski, L.: Software defect prediction using bad code smells: a systematic literature review. In: Poniszewska-Marańda, A., Kryvinska, N., Jarzabek; Powers, D.M., Evaluation: From precision, recall and F-measure to ROC, informed-ness (2011) Markedness and Correlation; Rahman, F., Khatri, S., Barr, E.T., Devanbu, P., Comparing static bug finders and statistical prediction (2014) 36Th International Conference on Software Engineering, pp. 424-434. , pp; Riel, A.J., (1996) Object-Oriented Design Heuristics, 335. , vol., Addison-Wesley, Reading; Santos, J.A.M., Rocha-Junior, J.B., Prates, L.C.L., Do Nascimento, R.S., Freitas, M.F., de Mendonça, M.G., A systematic review on the code smell effect (2018) J. Syst. Softw., 144, pp. 450-477; Schumacher, J., Zazworka, N., Shull, F., Seaman, C., Shaw, M., Building empirical support for automated code smell detection (2010) ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, pp. 1-10. , pp; Shen, H., Fang, J., Zhao, J., EFindbugs: Effective error ranking for findbugs (2011) 2011 Fourth IEEE International Conference on Software Testing, Verification and Validation, Pp. 299–308. IEEE; Sjøberg, D.I., Yamashita, A., Anda, B.C., Mockus, A., Dybå, T., Quantifying the effect of code smells on maintenance effort (2012) IEEE Trans. Softw. Eng., 39 (8), pp. 1144-1156; Thung, F., Lo, D., Jiang, L., Rahman, F., Devanbu, P.T., To what extent could we detect field defects? An extended empirical study of false negatives in static bug-finding tools (2015) Autom. Softw. Eng., 22 (4), pp. 561-602; Tsantalis, N., Chaikalis, T., Chatzigeorgiou, A., JDeodorant: Identification and removal of type-checking bad smells (2008) 2008 12Th European Conference on Software Maintenance and Reengineering, Pp. 329–331. IEEE; Tsantalis, N., Chatzigeorgiou, A., Identification of extract method refactoring opportunities for the decomposition of methods (2011) J. Syst. Softw., 84 (10), pp. 1757-1782; van Emden, E., Moonen, L., Java quality assurance by detecting code smells (2002) Ninth Working Conference on Reverse Engineering, Pp. 97–106. IEEE; Vestola, M., (2012) Evaluating and Enhancing Findbugs to Detect Bugs from Mature Software, , case study in valuatum; Vetrò, A., Morisio, M., Torchiano, M., An empirical validation of findbugs issues related to defects (2011) 15Th Annual Conference on Evaluation and Assessment in Software Engineering (EASE 2011), Pp. 144–153. IET; Vetrò, A., Torchiano, M., Morisio, M., Assessing the precision of FindBugs by mining java projects developed at a university (2010) 2010 7Th IEEE Working Conference on Mining Software Repositories (MSR 2010), pp. 110-113. , pp., IEEE; Yamashita, A., Assessing the capability of code smells to explain maintenance problems: An empirical study combining quantitative and qualitative data (2014) Empirical Softw. Eng., 19 (4), pp. 1111-1143; Yao, J., Shepperd, M.J., Assessing software defection prediction performance: why using the Matthews correlation coefficient matters (2020) Evaluation and Assessment in Software Engineering, EASE 2020, Trondheim, Norway, 15–17 April 2020, Pp. 120–129. ACM; Zazworka, N., Ackermann, C., CodeVizard: A tool to aid the analysis of software evolution (2010) Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, pp. 1-1. , pp; Zazworka, N., Izurieta, C., Wong, S., Cai, Y., Seaman, C., Shull, F., Comparing four approaches for technical debt identification (2014) Softw. Q. J., 22 (3), pp. 403-426; Zazworka, N., Spínola, R.O., Vetrò, A., Shull, F., Seaman, C., A case study on effectively identifying technical debt (2013) Proceedings of the 17Th International Conference on Evaluation and Assessment in Software Engineering, pp. 42-47. , pp},
correspondence_address1={Lavazza, L.; Università degli Studi dell’InsubriaItaly; email: luigi.lavazza@uninsubria.it},
editor={Taibi D., Lenarduzzi V., Kilamo T., Zacchiroli S.},
publisher={Springer Science and Business Media Deutschland GmbH},
issn={18684238},
isbn={9783030752507},
language={English},
abbrev_source_title={IFIP Advances in Information and Communication Technology},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Mendonça2020,
author={Mendonça, D.S. and Kalinowski, M.},
title={Towards Practical Reuse of Custom Static Analysis Rules for Defect Localization},
journal={ACM International Conference Proceeding Series},
year={2020},
doi={10.1145/3439961.3439985},
art_number={3439985},
note={cited By 1; Conference of 19th Brazilian Symposium on Software Quality, SQBS 2020 ; Conference Date: 1 December 2020 Through 4 December 2020;  Conference Code:167651},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85102892244&doi=10.1145%2f3439961.3439985&partnerID=40&md5=c4adc9b909d1e2abe2cf569fa34efaee},
affiliation={Federal Center for Technological Education of Rio de Janeiro (CEFET/RJ), Brazil; Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Brazil},
abstract={[Context] Several static analysis tools allow the development of custom rules for locating application-specific defects. Although this feature is powerful and commonly available, it is not well explored in practice. Custom static analysis rules can check design and policies that are shared between applications, allowing the reuse of rules. However, the benefits, scope, and concerns that software engineers should have on reusing custom static analysis rules are unknown. [Goal] In this preliminary study, we investigate the reuse of custom static analysis rules produced by applying Pattern-Driven Maintenance (PDM). PDM is a method to locate defect patterns in web applications that produces custom static analysis rules as output. [Method] We selected a set of rules produced by a previous usage of the PDM method and applied them to other three applications in two contexts, within the same company where the rules were produced, and in other companies. [Results] We successfully reused some rules in both scenarios with minor adjustments, finding new defects to be fixed the reuse of rules could discard from 58-90% of source code locations found by a naive search for the defects, reducing verification effort. However, the reused rules need adjustments to improve precision for defect localization, as precision ranged from 40-75%. Finally, we identified factors that have an impact on reusing custom rules. [Conclusions] We put forward that reusing customized static analysis rules can be beneficial, in particular when similarities in the architecture and programming style are observed. However, adjustment of the rules might be needed to enable effective reuse. We shared our insights and methodology on how to reuse custom static analysis rules properly. © 2020 ACM.},
author_keywords={Custom static analysis rules;  pattern-driven maintenance;  reuse},
keywords={Computer software selection and evaluation;  Defects, Application specific;  Defect localizations;  Defect patterns;  Programming styles;  Set of rules;  Source codes;  WEB application, Static analysis},
funding_details={Conselho Nacional de Desenvolvimento Científico e TecnológicoConselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq, 141345/2015-2},
funding_text 1={We specially thank Professor Arndt von Staa for his contribution in the beginning of this research with his insights and ideas. We also thank the system analysts of DTINF/CEFET-RJ for supporting this work. This work was partially supported by the CNPq grant 141345/2015-2.},
references={Ayewah, N., Hovemeyer, D., Morgenthaler, J.D., Penix, J., Pugh, W., 2008 Using Static Analysis to Find Bugs (2008) Ieee Software, 25 (5), pp. 22-29. , https://doi.org/10.1109/MS.2008.130; Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the State of Static Analysis: A Large-Scale Evaluation in Open Source Software (2016) 2016 Ieee 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER, 1, pp. 470-481. , https://doi.org/10.1109/SANER.2016.105; Bessey, A., Block, K., Chelf, B., Chou, A., Fulton, B., Hallem, S., Henri-Gros, C., Engler, D., A few billion lines of code later: Using static analysis to find bugs in the real world (2010) Commun Acm, 2010. , https://doi.org/10.1145/1646353.1646374; Christakis, M., Bird, C., What developers want and need from program analysis: An empirical study (2016) Ase 2016-Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering, , https://doi.org/10.1145/2970276.297; Darais, D., Might, M., Van Horn, D., Galois transformers and modular abstract interpreters reusable metatheory for program analysis (2015) Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications, Oopsla, , https://doi.org/10.1145/2814270.2814308; Gurgel, A., MacIa, I., Garcia, A., Von Staa, A., Mezini, M., Eichberg, M., Mitschke, R., Blending and reusing rules for architectural degradation prevention (2014) Proceedings of the 13th International Conference on Modularity-MODULARITY ?14, , https://doi.org/10.1145/2577080.2577087; Heckman, S., Williams, L., 2011 A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Information and Software Technology, 53 (4), pp. 363-387; InfoEther Inc. [n.d.] Pmd, , http://pmd-github-io.luisamigo.proxybk.com/; Mendonca, D.S., Silva Da, T.G., De Oliveira, D.F., Sales Brandao, J., Lopes, H., Barbosa, J.S.D., Kalinowski, M., Von Staa, A., Applying Pattern-Driven Maintenance: A Method to Prevent Latent Unhandled Exceptions in Web Applications ACM Reference format (2018) Proceedings of 12th International Symposium on Empirical Software Engineering and Measurement, Oulu, Finland, October 2018 (ESEM?18). Oulu, Finland, 10; Mey, J., Kuhn, T., Schone, R., Assmann, U., 2020 Reusing Static Analysis across Different Domain-Specific Languages using Reference Attribute Grammars (2020) The Art, Science, and Engineering of Programming, 4, p. 3. , https://doi.org/10.22152/programming-journal.org/2020/4/15, feb; Muske, T., Serebrenik, A., Survey of approaches for handling static analysis alarms (2016) Source Code Analysis and Manipulation (SCAM 2016 Ieee 16th International Working Conference On. Ieee, pp. 157-166; Shekhovtsov, V.A., Tomilko, Y., Godlevskiy, M.D., Facilitating Reuse of Code Checking Rules in Static Code Analysis (2009) Lecture Notes in Business Information Processing, pp. 91-102. , https://doi.org/10.1007/978-3-642-01112-2-10; SonarSource (2008) SonarQube, , https://www-sonarqube-org.luisamigo.proxybk.com/; The University of Maryland. [N.d.]. FindBugs, , http://findbugs-sourceforge-net.luisamigo.proxybk.com/; Tymchuk, Y., Ghafari, M., Nierstrasz, O., JIT feedback: What experienced developers like about static analysis (2018) Proceedings-International Conference on Software Engineering, , https://doi.org/10.1145/31963213196327},
publisher={Association for Computing Machinery},
isbn={9781450389235},
language={English},
abbrev_source_title={ACM Int. Conf. Proc. Ser.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Lujan20201,
author={Lujan, S. and Pecorelli, F. and Palomba, F. and De Lucia, A. and Lenarduzzi, V.},
title={A preliminary study on the adequacy of static analysis warnings with respect to code smell prediction},
journal={MaLTeSQuE 2020 - Proceedings of the 4th ACM SIGSOFT International Workshop on Machine-Learning Techniques for Software-Quality Evaluation, Co-located with ESEC/FSE 2020},
year={2020},
pages={1-6},
doi={10.1145/3416505.3423559},
note={cited By 1; Conference of 4th ACM SIGSOFT International Workshop on Machine-Learning Techniques for Software-Quality Evaluation, MaLTeSQuE 2020, co-located with the ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2020 ; Conference Date: 13 November 2020;  Conference Code:164672},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85097308081&doi=10.1145%2f3416505.3423559&partnerID=40&md5=3b7f138612836dbeb7ae45f6e765d686},
affiliation={Tampere University, Finland; University of Salerno, Italy; Lut University, Finland},
abstract={Code smells are poor implementation choices applied during software evolution that can affect source code maintainability. While several heuristic-based approaches have been proposed in the past, machine learning solutions have recently gained attention since they may potentially address some limitations of state-of-the-art approaches. Unfortunately, however, machine learning-based code smell detectors still suffer from low accuracy. In this paper, we aim at advancing the knowledge in the field by investigating the role of static analysis warnings as features of machine learning models for the detection of three code smell types. We first verify the potential contribution given by these features. Then, we build code smell prediction models exploiting the most relevant features coming from the first analysis. The main finding of the study reports that the warnings given by the considered tools lead the performance of code smell prediction models to drastically increase with respect to what reported by previous research in the field. © 2020 ACM.},
author_keywords={Code Smells;  Machine Learning;  Static Analysis Tools},
keywords={Computer software selection and evaluation;  Engineering education;  Forecasting;  Machine learning;  Predictive analytics;  Quality control, Code smell;  Machine learning models;  Prediction model;  Relevant features;  Software Evolution;  Source codes;  State-of-the-art approach, Static analysis},
references={Abbes, M., Khomh, F., Gueheneuc, Y.-G., Antoniol, G., An empirical study of the impact of two antipatterns, blob and spaghetti code, on program comprehension (2011) 2011 15th European Conference on Software Maintenance and Reengineering, pp. 181-190; Fontana, F.A., Mäntylä, M.V., Zanoni, M., Marino, A., Comparing and experimenting machine learning techniques for code smell detection (2016) Empirical Softw. Engg., 21 (3), pp. 1143-1191. , June 2016; Fontana, F.A., Zanoni, M., Code smell severity classif-cation using machine learning techniques (2017) Know.-Based Syst, pp. 43-58. , 2017; Azeem, M.I., Palomba, F., Shi, L., Wang, Q., Machine learning techniques for code smell detection: A systematic literature review and meta-Analysis (2019) Information and Software Technology, 108, pp. 115-138. , 2019; Brown, W.J., Malveau, R.C., III McCormick, H.W., Mowbray, T.J., (1998) Refactoring Software, Architectures, and Projects in Crisis; Catolino, G., Palomba, F., Fontana, F.A., De Lucia, A., Zaidman, A., Ferrucci, F., Improving change prediction models with code smell-related information (2020) Empirical Software Engineering, 25 (1). , 2020); Chidamber, S.R., Kemerer, C.F., A metrics suite for object oriented design (1994) Ieee Transactions on Software Engineering, 20 (6), pp. 476-493. , 1994; Cunningham, W., (1992) The WyCash Portfolio Management System (OOPSLA-92); Sobrinho Paulo De, E.Vicente, De Lucia, A., Maia Almeida, M.De, A systematic literature review on bad smells-5 w's: Which, when, what, who, where (2018) Ieee Transactions on Software Engineering, , 2018); Di Nucci, D., Palomba, F., Tamburri, D., Serebrenik, A., De Lucia, A., Detecting code smells using machine learning techniques: Are we there yet? (2018) Int. Conf. On Software Analysis, Evolution, and Reengineering; Di Nucci, D., Palomba, F., Tamburri, D.A., Serebrenik, A., De Lucia, A., Detecting code smells using machine learning techniques: Are we there yet? (2018) 26th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 612-621; Falessi, D., Russo, B., Mullen, K., What if i had no smells? (2017) Esem, , 2017); Fontana, F.A., Braione, P., Zanoni, M., Automatic detection of bad smells in code: An experimental assessment (2012) J. Object Technol., 11 (2), pp. 5-1. , 2012; Fontana, F.A., Dietrich, J., Walter, B., Yamashita, A., Zanoni, M., Antipattern and code smell false positives: Preliminary conceptualization and classifcation (2016) 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), 1, pp. 609-613; Fontana, F.A., Ferme, V., Zanoni, M., Yamashita, A., Automatic metric thresholds derivation for code smell detection (2015) 6th International Workshop on Emerging Trends in Software Metrics, pp. 44-53; Fowler, M., Beck, K., (1999) Refactoring: Improving the Design of Existing Code, , Addison-Wesley Longman Publishing Co., Inc. (1999); Arcelli Fontana, F., Tollin, I., Zanoni, M., Roveda, R., Change prediction through coding rules violations (2017) Int. Conf. On Evaluation and Assessment in Software Engineering, pp. 61-64; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don't software developers use static analysis tools to fnd bugs? (2013) 35th International Conference on Software Engineering (ICSE), pp. 672-681; Khomh, F., Di Penta, M., Guéhéneuc, Y.-G., Antoniol, G., An exploratory study of the impact of antipatterns on class change-And fault-proneness (2012) Empirical Software Engineering, pp. 243-275. , 2012; Khomh, F., Vaucher, S., Gueheneuc, Y.-G., Sahraoui, H., A bayesian approach for the detection of code and design smells (2009) Int. Conf. On Quality Software (QSIC '09), pp. 305-314. , IEE, Jeju, Korea; Khomh, F., Vaucher, S., Guéhéneuc, Y.-G., Sahraoui, H., Bdtex: A gqm-based bayesian approach for the detection of antipatterns (2011) Journal of Systems and Software, 84 (4), pp. 559-572. , 2011; Lehman, M.M., Laws of software evolution revisited (1996) European Workshop on Software Process Technology, pp. 108-124. , Springer; Lenarduzzi, V., Martini, A., Taibi, D., Tam-Burri, D.A., Towards surgically-precise technical debt estimation: Early results and research roadmap (2019) 3rd International Workshop on Machine Learning Techniques for Software Quality Evaluation (MaLTeSQuE 2019)., pp. 37-42; Lenarduzzi, V., Sillitti, A., Taibi, D., A survey on code analysis tools for software maintenance prediction (2020) 6th International Conference in Software Engineering for Defence Applications, pp. 165-175. , Springer International Publishing; Lujan, S., Pecorelli, F., Palomba, F., De Lucia, A., Lenarduzzi, V., (2020) A Preliminary Study on the Adequacy of Static Analysis Warnings with Respect to Code Smell Prediction-Online Appendix, , https://fgshare-com.luisamigo.proxybk.com/s/e84321efc42548a473b8; Maiga, A., Ali, N., Bhattacharya, N., Sabané, A., Guéhéneuc, Y.-G., Aimeur, E., Smurf: A svm-based incremental anti-pattern detection approach (2012) Working Conf. On Reverse Engineering., pp. 466-475; McCabe, T.J., A complexity measure (1976) Ieee Transactions on Software Engineering, 4, pp. 308-320. , 1976; Moha, N., Gueheneuc, Y.-G., Duchien, L., Le Meur, A.-F., Decor: A method for the specifcation and detection of code and design smells (2009) Ieee Transactions on Software Engineering, 36 (1), pp. 20-36. , 2009; Palomba, F., Bavota, G., Di Penta, M., Oliveto, R., De Lucia, A., Do they really smell bad? A study on developers' perception of bad code smells (2014) International Conference on Software Maintenance and Evolution, pp. 101-110; Palomba, F., Bavota, G., Di Penta, M., Oliveto, R., Poshyvanyk, D., De Lucia, A., Mining version histories for detecting code smells (2014) Ieee Transactions on Software Engineering, 41 (5), pp. 462-489. , 2014; Palomba, F., Bavota, G., Di Penta, M., Fasano, F., Oliveto, R., De Lucia, A., On the difuseness and the impact on maintainability of code smells: A large scale empirical investigation (2018) Empirical Software Engineering, 23 (3), pp. 1188-1221. , 01 Jun 2018; Palomba, F., Di Nucci, D., Tufano, M., Bavota, G., Oliveto, R., Poshyvanyk, D., De Lucia, A., Landfll: An open dataset of code smells with public evaluation (2015) 2015 IEEE/ACM 12th Working Conference on Mining Software Repositories, pp. 482-485; Palomba, F., Panichella, A., De Lucia, A., Oliveto, R., Zaidman, A., A textual-based technique for smell detection (2016) 24th International Conference on Program Comprehension (ICPC), pp. 1-10; Pecorelli, F., Di Nucci, D., De Roover, C., De Lucia, A., A large empirical assessment of the role of data balancing in machine-learning-based code smell detection (2020) Journal of Systems and Software, 2020, p. 110693; Pecorelli, F., Palomba, F., Di Nucci, D., De Lucia, A., Comparing heuristic and machine learning approaches for metric-based code smell detection (2019) 27th International Conference on Program Comprehension (ICPC), pp. 93-104; Pecorelli, F., Palomba, F., Khomh, F., De Lucia, A., Developer-driven code smell prioritization (2020) International Conference on Mining Software Repositories; Ross Quinlan, J., Induction of decision trees (1986) Machine Learning, 1 (1), pp. 81-106. , 1986; Sjøberg, D.I.K., Yamashita, A., Anda, B.C.D., Mockus, A., Dybå, T., Quantifying the efect of code smells on maintenance efort (2012) Ieee Transactions on Software Engineering, 39 (8), pp. 1144-1156. , 2012; Taibi, D., Janes, A., Lenarduzzi, V., How developers perceive smells in source code: A replicated study (2017) Information and Software Technology, 92, pp. 223-235. , 2017; Tantithamthavorn, C., Hassan, A.E., An experience report on defect modelling in practice: Pitfalls and challenges (2018) Proceedings of the 40th Int. Conf. On Software Engineering: Software Engineering in Practice., pp. 286-295; Lomio, F., Lenarduzzi, V., Huttunen, H., Taibi, D., Are sonarqube rules inducing bugs? (2019) 27th International Conference on Software Analysis, Evolution and Reengineering (SANER), , (preprint) (2019); Vassallo, C., Panichella, S., Palomba, F., Proksc, S., Gall, H.C., Zaidman, A., How developers engage with static analysis tools in diferent contexts (2019) Empirical Software Engineering, , 2019); Vassallo, C., Panichella, S., Palomba, F., Proksch, S., Zaidman, A., Gall, H.C., Context is king: The developer perspective on the usage of static analysis tools (2018) 26th International Conference on Software Analysis, Evolution and Reengineering (SANER) (2018); Wedyan, F., Alrmuny, D., Bieman, J.M., The efectiveness of automated static analysis tools for fault detection and refactoring prediction (2009) International Conference on Software Testing Verifcation and Validation., pp. 141-150; White, M., Tufano, M., Vendome, C., Poshyvanyk, D., Deep learning code fragments for code clone detection (2016) Int. Conf. On Automated Software Engineering (ASE)., pp. 87-98; Yamashita, A., Moonen, L., Do code smells refect important maintainability aspects? (2012) 2012 28th Ieee International Conference on Software Maintenance (ICSM), pp. 306-315; Yamashita, A., Moonen, L., Do developers care about code smells? An exploratory survey (2013) 20th Work. Conf. On Reverse Engineering, pp. 242-251},
editor={Khomh F., Salza P., Catolino G.},
sponsors={ACM SIGSOFT},
publisher={Association for Computing Machinery, Inc},
isbn={9781450381246},
language={English},
abbrev_source_title={MaLTeSQuE - Proc. ACM SIGSOFT Int. Workshop Mach.-Learn. Tech. Softw.-Qual. Eval., co-located ESEC/FSE},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Trautsch20205137,
author={Trautsch, A. and Herbold, S. and Grabowski, J.},
title={A longitudinal study of static analysis warning evolution and the effects of PMD on software quality in Apache open source projects},
journal={Empirical Software Engineering},
year={2020},
volume={25},
number={6},
pages={5137-5192},
doi={10.1007/s10664-020-09880-1},
note={cited By 3},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85091245352&doi=10.1007%2fs10664-020-09880-1&partnerID=40&md5=077dac4a9230c050eb6b28ff2c596d4c},
affiliation={Institute of Computer Science, University of Goettingen, Göttingen, Germany},
abstract={Automated static analysis tools (ASATs) have become a major part of the software development workflow. Acting on the generated warnings, i.e., changing the code indicated in the warning, should be part of, at latest, the code review phase. Despite this being a best practice in software development, there is still a lack of empirical research regarding the usage of ASATs in the wild. In this work, we want to study ASAT warning trends in software via the example of PMD as an ASAT and its usage in open source projects. We analyzed the commit history of 54 projects (with 112,266 commits in total), taking into account 193 PMD rules and 61 PMD releases. We investigate trends of ASAT warnings over up to 17 years for the selected study subjects regarding changes of warning types, short and long term impact of ASAT use, and changes in warning severities. We found that large global changes in ASAT warnings are mostly due to coding style changes regarding braces and naming conventions. We also found that, surprisingly, the influence of the presence of PMD in the build process of the project on warning removal trends for the number of warnings per lines of code is small and not statistically significant. Regardless, if we consider defect density as a proxy for external quality, we see a positive effect if PMD is present in the build configuration of our study subjects. © 2020, The Author(s).},
author_keywords={Quality evolution;  Software metrics;  Software quality;  Static code analysis},
keywords={Codes (symbols);  Computer software selection and evaluation;  Open source software;  Open systems;  Quality control;  Software design;  Software quality, Best practices;  Commit history;  Empirical research;  External quality;  Lines of code;  Long-term impacts;  Longitudinal study;  Open source projects, Static analysis},
funding_details={Deutsche ForschungsgemeinschaftDeutsche Forschungsgemeinschaft, DFG, 402774445},
funding_text 1={This work was partly funded by the German Research Foundation (DFG) through the project DEFECTS, grant 402774445. We also want to thank the GWDG Göttingen, as without the usage of their HPC-Cluster the data collection would have taken decades.},
references={Abdi, H., Bonferroni and Sidak corrections for multiple comparisons (2007) Encyclopedia of Measurement and Statistics, pp. 103-107. , Sage, Thousand Oaks, CA; Aloraini, B., Nagappan, M., German, D.M., Hayashi, S., Higo, Y., An empirical study of security warnings from static application security testing tools (2019) J Syst Softw, 158, p. 110427. , http://www-sciencedirect-com.luisamigo.proxybk.com/science/article/pii/S0164121219302018; Aversano, L., Canfora, G., Cerulo, L., Del Grosso, C., Di Penta, M., An empirical study on the evolution of design patterns (2007) Proceedings of the The 6Th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 385-394. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1287624.1287680, ACM, New York, NY, USA, ESEC-FSE ’07; Bakota, T., Hegedűs, P., Körtvélyesi, P., Ferenc, R., Gyimóthy, T., A probabilistic software quality model (2011) 2011 27Th IEEE International Conference on Software Maintenance (ICSM), pp. 243-252; Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the state of static analysis: A large-scale evaluation in open source software (2016) 2016 IEEE 23Rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), 1, pp. 470-481; The promises and perils of mining git (2009) 2009 6Th IEEE International Working Conference on Mining Software Repositories, pp. 1-10; Boehm, B.W., Brown, J.R., Lipow, M., Quantitative evaluation of software quality (1976) Proceedings of the 2Nd International Conference on Software Engineering, pp. 592-605. , http://dl-acm-org.luisamigo.proxybk.com/citation.cfm?id=800253.807736, IEEE Computer Society Press, Los Alamitos, CA, USA, ICSE ’76; Campbell, M.J., Gardner, M.J., Statistics in medicine: Calculating confidence intervals for some non-parametric analyses (1988) BMJ, 296 (6634), pp. 1454-1456. , https://www-bmj-com.luisamigo.proxybk.com/content/296/6634/1454.full.pdf, https://www-bmj-com.luisamigo.proxybk.com/content/296/6634/1454; What developers want and need from program analysis: An empirical study (2016) Proceedings of the 31St IEEE/ACM International Conference on Automated Software Engineering, ACM, New York, NY, USA, ASE 2016, pp. 332-343. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2970276.2970347; Cohen, J., (1988) Statistical Power Analysis for the Behavioral Sciences, , L. Erlbaum Associates; Devanbu, P., Zimmermann, T., Bird, C., Belief evidence in empirical software engineering (2016) 2016 IEEE/ACM 38Th International Conference on Software Engineering (ICSE), pp. 108-119; Digkas, G., Lungu, M., Avgeriou, P., Chatzigeorgiou, A., Ampatzoglou, A., How do developers fix issues and pay back technical debt in the apache ecosystem? (2018) 2018 IEEE 25Th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 153-163; Dijkstra, E.W., A note on two problems in connexion with graphs (1959) Numer Math, 1 (1), pp. 269-271; Distefano, D., Fähndrich, M., Logozzo, F., O’Hearn, P.W., Scaling static analyses at facebook (2019) Commun. ACM, 62 (8), pp. 62-70; Faragó, C., Hegedűs, P., Ferenc, R., Code ownership: Impact on maintainability (2015) Computational Science and Its Applications – ICCSA 2015, pp. 3-19. , Gervasi O, Murgante B, Misra S, Gavrilova ML, Rocha A M AC, Torre C, Taniar D, Apduhan BO, Springer International Publishing, Cham; Fenton, N., Bieman, J., (2014) Software metrics: A rigorous and practical approach, , 3rd edn., CRC Press, Inc., Boca Raton, FL, USA; Ferenc, R., Hegedűsyimóthy, Software product quality models (2014) Evolving Software Systems, Springer Berlin Heidelberg, Berlin, Heidelberg, pp. 65-100. , In: Mens T, Serebrenik A, Cleve A (eds), https://doi.org/10.1007/978-3-642-45398-4_3, (to appear in print); Ferenc, R., Tóth, Z., Ladányi, G., Siket, I., Gyimóthy, T., A public unified bug dataset for java and its assessment regarding metrics and bug prediction (2020) Softw Qual J, , (,),.,., https://doi.org/10.1007/s11219-020-09515-0; Fowler, M., (1999) Refactoring: Improving the design of existing code, , Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA; (2019) Sourcemeter, , https://www-sourcemeter-com.luisamigo.proxybk.com/; Habib, A., Pradel, M., How many of all bugs do we find? A study of static bug detectors (2018) Proceedings of the 33Rd ACM/IEEE International Conference on Automated Software Engineering, ACM, New York, NY, USA, ASE 2018, pp. 317-328. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/3238147.3238213; Hagberg, A.A., Schult, D.A., Swart, P.J., Exploring network structure, dynamics, and function using NetworkX (2008) Proceedings of the 7Th Python in Science Conference (Scipy2008), pp. 11-15. , Pasadena, CA USA; Heckman, S., Williams, L., A model building process for identifying actionable static analysis alerts (2009) 2009 International Conference on Software Testing Verification and Validation, pp. 161-170; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Inf. Softw. Technol., 53 (4), pp. 363-387; Herbold, S., Trautsch, A., Trautsch, F., (2019) Issues with szz: An empirical assessment of the state of practice of defect prediction data collection, , Article is currently in submission to IEEE Transactions on Software Engineering; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don't software developers use static analysis tools to find bugs? (2013) Proceedings of the 2013 International Conference on Software Engineering, IEEE Press, Piscataway, NJ, USA, ICSE ’13, pp. 672-681. , http://dl-acm-org.luisamigo.proxybk.com/citation.cfm?id=2486788.2486877; Jones, E., Oliphant, T., Peterson, P., (2001) Scipy: Open Source Scientific Tools for Python, , http://www-scipy-org.luisamigo.proxybk.com/, Online; accessed 17.09.2018; Kendall, M.G., (1955) Rank correlation methods, , Charles Griffin & Co. Ltd; Kim, S., Ernst, M.D., Prioritizing warning categories by analyzing software history (2007) Proceedings of the Fourth International Workshop on Mining Software Repositories, IEEE Computer Society, Washington, DC, USA, MSR ’07, p. 27. , https://doi.org/10.1109/MSR.2007.26, (to appear in print); Kim, S., Ernst, M.D., Which warnings should i fix first? (2007) Proceedings of the The 6Th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ACM, New York, NY, USA, ESEC-FSE ’07, pp. 45-54; Kitchenham, B., Pfleeger, S.L., Software quality: the elusive target [special issues section] (1996) IEEE Softw, 13 (1), pp. 12-21; Kitchenham, B.A., Dyba, T., Jorgensen, M., Evidence-based software engineering (2004) Proceedings of the 26Th International Conference on Software Engineering, IEEE Computer Society, Washington, DC, USA, ICSE ’04, pp. 273-281. , http://dl-acm-org.luisamigo.proxybk.com/citation.cfm?id=998675.999432; Kreyszig, E., (2000) Advanced engineering mathematics: Maple computer guide, , 8th edn., John Wiley & Sons, Inc., New York, NY, USA; Kruchten, P., Nord, R.L., Ozkaya, I., Technical debt: From metaphor to theory and practice (2012) IEEE Softw, 29 (6), pp. 18-21; Lehman, M.M., Laws of software evolution revisited (1996) Proceedings of the 5Th European Workshop on Software Process Technology, pp. 108-124. , http://dl-acm-org.luisamigo.proxybk.com/citation.cfm?id=646195.681473, Springer-Verlag, Berlin, Heidelberg, EWSPT ’96; Levene, H., Robust tests for equality of variances (1960) Contributions to Probability and Statistics, pp. 278-292. , Stanford Univ. Press, Stanford, Calif; Liu, K., Kim, D., Bissyande, T.F., Yoo, S., Le Traon, Y., Mining fix patterns for findbugs violations (2018) IEEE Trans Softw Eng, pp. 1-1. , https://doi.org/10.1109/TSE.2018.2884955; Malloy, B.A., Power, J.F., An empirical analysis of the transition from python 2 to python 3 (2019) Empir Softw Eng, 24 (2), pp. 751-778; Mann, H.B., Whitney, D.R., On a test of whether one of two random variables is stochastically larger than the other (1947) Ann Math Stat, 18 (1), pp. 50-60; Marcilio, D., Bonifácio, R., Monteiro, E., Canedo, E., Luz, W., Pinto, G., Are static analysis violations really fixed?: A closer look at realistic usage of sonarqube (2019) Proceedings of the 27Th International Conference on Program Comprehension, 19, pp. 209-219. , https://doi.org/10.1109/ICPC.2019.00040, IEEE Press, Piscataway, NJ, USA, ICPC; McCabe, T.J., A complexity measure (1976) IEEE Trans. Softw. Eng., 2 (4), pp. 308-320; McCall, J.A., Richards, P.K., Walters, G.F., Factors in software quality: Concept and definitions of software quality (1977) Rome Air Development Center, Air Force Systems Command, Griffiss Air Force Base, New York, 13; Panichella, S., Arnaoudova, V., Di Penta, M., Antoniol, G., Would static analysis tools help developers with code reviews? (2015) 2015 IEEE 22Nd International Conference on Software Analysis, Evolution, and Reengineering (SANER), pp. 161-170; Pedregosa, F., Varoquaux, G., Gramfort, A., Michel, V., Thirion, B., Grisel, O., Blondel, M., Duchesnay, E., Scikit-learn: Machine learning in Python (2011) J Mach Learn Res, 12, pp. 2825-2830; Penta, M.D., Cerulo, L., Aversano, L., The life and death of statically detected vulnerabilities: An empirical study (2009) Inf Softw Technol, 51 (10), pp. 1469-1484. , http://www-sciencedirect-com.luisamigo.proxybk.com/science/article/pii/S0950584909000500, Source Code Analysis and Manipulation, SCAM 2008; Plosch, R., Gruber, H., Hentschel, A., Pomberger, G., Schiffer, S., On the relation between external software quality and static code analysis (2008) In: 2008 32Nd Annual IEEE Software Engineering Workshop, pp. 169-174; Querel, L.-P., Rigby, P.C., Warningsguru: Integrating statistical bug models with static analysis to provide timely and specific bug warnings (2018) Proceedings of the 2018 26Th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, Association for Computing Machinery, New York, NY, USA, ESEC/FSE, 2018, pp. 892-895. , https://doi.org/10.1145/3236024.3264599; Rahman, F., Khatri, S., Barr, E.T., Devanbu, P., Comparing static bug finders and statistical prediction (2014) Proceedings of the 36Th International Conference on Software Engineering, ACM, New York, NY, USA, ICSE 2014, pp. 424-434. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2568225.2568269; Rosen, C., Grawi, B., Shihab, E., Commit guru: Analytics and risk prediction of software commits (2015) Proceedings of the 2015 10Th Joint Meeting on Foundations of Software Engineering, Association for Computing Machinery, New York, NY, USA, ESEC/FSE, 2015, pp. 966-969. , https://doi.org/10.1145/2786805.2803183; Sadowski, C., Aftandilian, E., Eagle, A., Miller-Cushon, L., Jaspan, C., Lessons from building static analysis tools at google (2018) Commun. ACM, 61 (4), pp. 58-66; Śliwerski, J., Zimmermann, T., Zeller, A., When do changes induce fixes? (2005) SIGSOFT Softw. Eng. Notes, 30 (4), pp. 1-5; Spearman, C., The proof and measurement of association between two things (1904) Am J Psychol, 15, pp. 88-103; Szóke, G., Antal, G., Nagy, C., Ferenc, R., Gyimóthy, T., Bulk fixing coding issues and its effects on software quality: Is it worth refactoring? (2014) 2014 IEEE 14Th International Working Conference on Source Code Analysis and Manipulation, pp. 95-104; Thung, F., Lucia, L.D., Jiang, L., Rahman, F., Devanbu, P.T., To what extent could we detect field defects? An empirical study of false negatives in static bug finding tools (2012) 2012 Proceedings of the 27Th IEEE/ACM International Conference on Automated Software Engineering, pp. 50-59; Trautsch, A., Herbold, S., Grabowski, J., (2020) A Longitudinal Study of Static Analysis Warning Evolution and the Effects of Pmd on Software Quality in Apache Open Source Projects - Online Appendix and Replication Kit, , http://www-user-informatik-uni-goettingen-de.luisamigo.proxybk.com/~trautsch2/emse2019; Trautsch, F., Herbold, S., Makedonski, P., Grabowski, J., Addressing problems with replicability and validity of repository mining studies through a smart data platform (2017) Empir Softw Eng, 23, pp. 1036-1083; Tufano, M., Palomba, F., Bavota, G., Penta, M.D., Oliveto, R., Lucia, A.D., Poshyvanyk, D., There and back again: Can you compile that snapshot? (2017) J Soft Evol Process, 29 (4). , http://dblp-uni-trier-de.luisamigo.proxybk.com/db/journals/smr/smr29.html#TufanoPBPOLP17; Vassallo, C., Panichella, S., Palomba, F., Proksch, S., Gall, H.C., Zaidman, A., How developers engage with static analysis tools in different contexts (2019) Empir Softw Eng, pp. 1419-1457. , https://doi.org/10.1007/s10664-019-09750-5; Vetro, A., Morisio, M., Torchiano, M., An empirical validation of findbugs issues related to defects (2011) 15Th Annual Conference on Evaluation Assessment in Software Engineering (EASE 2011), pp. 144-153; Wagner, S., Lochmann, K., Heinemann, L., Kläs, M., Trendowicz, A., Plösch, R., Seidl, A., Streit, J., The quamoco product quality modelling and assessment approach (2012) Proceedings of the 34Th International Conference on Software Engineering, IEEE Press, Piscataway, NJ, USA, ICSE ’12, pp. 1133-1142. , http://dl-acm-org.luisamigo.proxybk.com/citation.cfm?id=2337223.2337372; Wilk, M.B., Shapiro, S.S., An analysis of variance test for normality (complete samples) ‡ (1965) Biometrika, 52 (3-4), pp. 591-611; Wohlin, C., Runeson, P., Höst, M., Ohlsson, M.C., Regnell, B., Wesslén, A., (2000) Experimentation in software engineering: An introduction, , Kluwer Academic Publishers, Norwell, MA, USA; Zampetti, F., Scalabrino, S., Oliveto, R., Canfora, G., Penta, M.D., How open source projects use static code analysis tools in continuous integration pipelines (2017) 2017 IEEE/ACM 14Th International Conference on Mining Software Repositories (MSR), pp. 334-344; Zheng, J., Williams, L., Nagappan, N., Snipes, W., Hudepohl, J.P., Vouk, M.A., On the value of static analysis for fault detection in software (2006) IEEE Trans Softw Eng, 32 (4), pp. 240-253; Zimmermann, T., Premraj, R., Zeller, A., Predicting defects for eclipse (2007) Proceedings of the Third International Workshop on Predictor Models in Software Engineering, IEEE Computer Society, Washington, DC, USA, PROMISE ’07, p. 9. , https://doi.org/10.1109/PROMISE.2007.10},
correspondence_address1={Trautsch, A.; Institute of Computer Science, Germany; email: alexander.trautsch@cs.uni-goettingen.de},
publisher={Springer},
issn={13823256},
coden={ESENF},
language={English},
abbrev_source_title={Empir Software Eng},
document_type={Article},
source={Scopus},
}

@ARTICLE{Gao20202983,
author={Gao, F.-J. and Wang, Y. and Chen, T.-J. and Situ, L.-Y. and Wang, L.-Z. and Li, X.-D.},
title={Static Checking of Array Index out of Bounds Defects in C Programs Based on Taint Analysis [基于污点分析的数组越界缺陷的静态检测方法]},
journal={Ruan Jian Xue Bao/Journal of Software},
year={2020},
volume={31},
number={10},
pages={2983-3003},
doi={10.13328/j.cnki.jos.006063},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85092642441&doi=10.13328%2fj.cnki.jos.006063&partnerID=40&md5=5d44a85a37e9034981945dee07c45536},
affiliation={Department of Computer Science and Technology, Nanjing University, Nanjing, 210023, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, 210023, China},
abstract={During the rapid development of mobile computing, IoT, cloud computing, artificial intelligence, etc, many new programming languages and compilers are emerging. Even so, C/C++ language is still one of the most popular languages. And array is one of the most important data structures of C language. It is necessary to check whether the index is within the boundary of the array when using it to access the element of an array in a program. Otherwise, array index out-of-bounds will happen unexpectedly. When there are array index out-of-bounds defects existing in programs, some serious errors may occur during execution, such as system crash. It is even worse that array index out-of-bounds defects open the doors for attackers to take control of the server and execute arbitrary malicious code by carefully constructing input and intercepting the control flow of the programs. Existing static methods for array boundary checking cannot achieve high accuracy and deal with complex constraints and expressions, which lead to too many false positives. And it will increase the burden of developers. In this study, a static checking method is proposed based on taint analysis. First, a flow-sensitive, context-sensitive, and on-demand pointer analysis is proposed to analyze the range of array length. Then, an on-demand taint analysis is performed for all array indices and array length expressions. Finally, the rules are defined for checking array index out of bounds defects and the checking is realized based on backward data ﬂow analysis. During the analysis, in order to deal with complex constraints and expressions, it is proposed to check the satisfiability of the conditions by invoking the constraint solver. If none statement for avoiding array index out-of-bound is found in the program, an array index out-of-bound warning will be reported. An automatic static analysis tool, Carray bound have been implemented, and the experimental results show that Carraybound can work effectively and efficiently. © Copyright 2020, Institute of Software, the Chinese Academy of Sciences. All rights reserved.},
author_keywords={Array index out-of-bounds;  Buffer overflow;  Constraint solving;  Static analysis},
keywords={Artificial intelligence;  Defects;  Program compilers;  Static analysis, Automatic static analysis;  Complex constraints;  Constraint solvers;  Context sensitive;  Languages and compilers;  Malicious codes;  Pointer analysis;  Static checking, C++ (programming language)},
funding_details={Nanjing UniversityNanjing University, NJU},
funding_details={National Key Research and Development Program of ChinaNational Key Research and Development Program of China, NKRDPC, 2017YFA0700604},
funding_text 1={National Key Research and Development Program of China (2017YFA0700604); Program B for Outstanding PhD Candidate of Nanjing University; Postgraduate Research & Practice Innovation Program of Jiangsu Province of China.},
references={Improper validation of array index, , https://cwe-mitre-org.luisamigo.proxybk.com/data/definitions/129.html, CWE; Cowan, C, Pu, C, Maier, D, Walpole, J, Bakke, P, Beattie, S, Grier, A, Hinton, H., Stackguard: Automatic adaptive detection and prevention of buffer-overflow attacks (1998) Proc. of the USENIX Security Symp, 98, pp. 63-78; http://www-cvedetails-com.luisamigo.proxybk.com/vulnerabilities-by-types.php, CVE; Ye, T, Zhang, L, Wang, L, Li, X., An empirical study on detecting and fixing buffer overflow bugs (2016) Proc. of the IEEE Int'l Conf. on Software Testing, Verification and Validation (ICST), pp. 91-101. , IEEE; Gao, F, Wang, L, Li, X., BovInspector: Automatic inspection and repair of buffer overflow vulnerabilities (2016) Proc. of the 31st IEEE/ACM Int'l Conf. on Automated Software Engineering (ASE), pp. 786-791. , IEEE; Bao, T, Gao, F, Zhou, Y, Li, Y, Wang, L, Li, X., Automatically validating static buffer overflow warnings based on guided symbolic execution (2016) Journal of Cyber Security, (2), pp. 46-60. , (in Chinese with English abstract); Wang, L, Li, F, Li, L, Feng, XB., Principle and practice of taint analysis (2017) Ruan Jian Xue Bao/Journal of Software, 28 (4), pp. 860-882. , http://www-jos-org-cn.luisamigo.proxybk.com/1000-9825/5190.htm, (in Chinese with English abstract). [doi]; Chimdyalwar, B., Survey of array out of bound access checkers for C code (2012) Proc. of the 5th India Software Engineering Conf. ACM, pp. 45-48; Ming, J, Wu, D, Xiao, G, Wang, J, Liu, P., TaintPipe: Pipelined symbolic taint analysis (2015) Proc. of the 24th {USENIX} Security Symp. ({USENIX} Security 15), pp. 65-80; Newsome, J, Song, DX., Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software (2005) Proc. of the Network and Distributed System Security Symp. (NDSS), 5, pp. 3-4; Khedker, U, Sanyal, A, Sathe, B., (2009) Data Flow Analysis: Theory and Practice, , CRC Press; Kildall, GA., A unified approach to global program optimization (1973) Proc. of the 1st Annual ACM SIGACT-SIGPLAN Symp. on Principles of Programming Languages, pp. 194-206. , ACM; Galler, SJ, Aichernig, BK., Survey on test data generation tools (2014) Int'l Journal on Software Tools for Technology Transfer, 16 (6), pp. 727-751; De Moura, L, Bjørner, N., Z3: An efficient SMT solver (2008) Proc. of the Int'l Conf. on Tools and Algorithms for the Construction and Analysis of Systems, pp. 337-340. , Berlin, Heidelberg: Springer-Verlag; https://z3-codeplex-com.luisamigo.proxybk.com/, Z3 theorem prover; Gao, F, Chen, T, Wang, Y, Situ, L, Wang, L, Li, X., Carraybound: Static array bounds checking in C programs based on taint analysis (2016) Proc. of the 8th Asia-Pacific Symp. on Internetware, pp. 81-90. , ACM; Zhou, Y., Extensible framework for static vulnerability detection based on taint analysis (2017), [Ph.D. Thesis]. Nanjing: Nanjing University, (in Chinese with English abstract); http://cppcheck-net.luisamigo.proxybk.com/, Cppcheck; https://www-checkmarx-com.luisamigo.proxybk.com/, Checkmarx; https://www-microfocus-com.luisamigo.proxybk.com/en-us/products/static-code-analysis-sast/overview, Fortify static code analyzer; Costa, M, Crowcroft, J, Castro, M, Rowstron, A, Zhou, L, Zhang, L, Barham, P., Vigilante: End-to-end containment of Internet worms (2005) ACM SIGOPS Operating Systems Review, 39 (5), pp. 133-147; Crandall, JR, Su, Z, Wu, SF, Chong, FT., On deriving unknown vulnerabilities from zero-day polymorphic and metamorphic worm exploits (2005) Proc. of the 12th ACM Conf. on Computer and Communications Security (CCS), pp. 235-248. , ACM; Suh, GE, Lee, JW, Zhang, D, Devadas, S., Secure program execution via dynamic information flow tracking (2004) ACM SIGPLAN Notices, 39 (11), pp. 85-96; Wang, X, Jhi, YC, Zhu, S, Liu, P., Still: Exploit code detection via static taint and initialization analyses (2008) Proc. of the 2008 Annual Computer Security Applications Conf. (ACSAC), pp. 289-298. , IEEE; Ceara, D, Mounier, L, Potet, ML., Taint dependency sequences: A characterization of insecure execution paths based on input-sensitive cause sequences (2010) Proc. of the 3rd Int'l Conf. on Software Testing, Verification, and Validation Workshops, pp. 371-380. , IEEE; Andersen, LO., Program analysis and specialization for the C programming language (1994), [Ph.D. Thesis]. University of Cophenhagen; Steensgaard, B., Points-to analysis in almost linear time (1996) Proc. of the 23rd ACM SIGPLAN-SIGACT Symp. on Principles of Programming Languages, pp. 32-41. , ACM; Chen, C, Huo, W, Yu, H, Feng, X., A survey of optimization technology of inclusion-based pointer analysis (2011) Jisuanji Xuebao/Chinese Journal of Computers, 34 (7), pp. 1224-1238. , (in Chinese with English abstract); Pang, L, Su, X, Ma, P, Zhao, L., Research on flow sensitive demand driven alias analysis (2015) Journal of Computer Research and Development, 52 (7), pp. 1620-1630. , (in Chinese with English abstract); Emami, M, Ghiya, R, Hendren, LJ., Context-sensitive interprocedural points-to analysis in the presence of function pointers (1994) ACM SIGPLAN Notices, 29 (6), pp. 242-256; Wilson, RP, Lam, MS., Efficient context-sensitive pointer analysis for C programs (1995) ACM SIGPLAN Notices, 30 (6), pp. 1-12; Chase, DR, Wegman, MN, Zadeck, FK., Analysis of pointers and structures (1990) ACM SIGPLAN Notices, 39 (4), pp. 343-359; Xu, Z, Miller, BP, Reps, T., Safety checking of machine code (2000) ACM SIGPLAN Notices, 35 (5), pp. 70-82; Detlefs, DL, Leino, KRM, Nelson, G, Saxe, JB., (1998) Extended Static Checking, , [doi]; Leroy, X, Rouaix, F., Security properties of typed applets (1999) Secure Internet Programming, pp. 147-182. , Berlin, Heidelberg: Springer-Verlag; Kellogg, M, Dort, V, Millstein, S, Ernst, MD., Lightweight verification of array indexing (2018) Proc. of the 27th ACM SIGSOFT Int'l Symp. on Software Testing and Analysis (ISSTA), pp. 3-14. , ACM; Bodík, R, Gupta, R, Sarkar, V., ABCD: Eliminating array bounds checks on demand (2000) ACM SIGPLAN Notices, 35 (5), pp. 321-333; Venet, A, Brat, G., Precise and efficient static array bound checking for large embedded C programs (2004) ACM SIGPLAN Notices, 39 (6), pp. 231-242; Nguyen, TVN, Irigoin, F., Efficient and effective array bound checking (2005) ACM Trans. on Programming Languages and Systems (TOPLAS), 27 (3), pp. 527-570; Popeea, C, Xu, DN, Chin, WN., A practical and precise inference and specializer for array bound checks elimination (2008) Proc. of the 2008 ACM SIGPLAN Symp. on Partial Evaluation and Semantics-based Program Manipulation, pp. 177-187. , ACM; Wang, W, Lei, Y, Liu, D, Kung, D, Csallner, C, Zhang, D, Kacker, R, Kuhn, R., A combinatorial approach to detecting buffer overflow vulnerabilities (2011) Proc. of the 41st IEEE/IFIP Int'l Conf. on Dependable Systems & Networks (DSN), pp. 269-278. , IEEE; Dhurjati, D, Adve, V., Backwards-compatible array bounds checking for C with very low overhead (2006) Proc. of the 28th Int'l Conf. on Software Engineering (ICSE), pp. 162-171. , ACM; Loginov, A, Yong, SH, Horwitz, S, Reps, T., Debugging via run-time type checking (2001) Proc. of the Int'l Conf. on Fundamental Approaches to Software Engineering, pp. 217-232. , Berlin, Heidelberg: Springer-Verlag; Steffen, JL., Adding run-time checking to the portable C compiler (1992) Software: Practice and Experience, 22 (4), pp. 305-316; Austin, TM, Breach, SE, Sohi, GS., Efficient detection of all pointer and array access errors (1994) Proc. of the ACM SIGPLAN 1994 Conf. on Programming Language Design and Implementation (PLDI), pp. 290-301. , ACM; Hicks, M, Morrisett, G, Grossman, D, Jim, T., Experience with safe manual memory-management in cyclone (2004) Proc. of the 4th Int'l Symp. on Memory Management, pp. 73-84. , ACM; Wang, Y, Gao, F, Situ, L, Wang, L, Chen, B, Liu, Y, Zhao, J, Li, X., DangDone: Eliminating dangling pointers via intermediate pointers (2018) Proc. of the 10th Asia-Pacific Symp. on Internetware, p. 6. , ACM; Abadi, M, Budiu, M, Erlingsson, Ú, Ligatti, J., Control-flow integrity principles, implementations, and applications (2009) ACM Trans. on Information and System Security (TISSEC), 13 (1), p. 4; Sutton, M, Greene, A, Amini, P., (2007) Fuzzing: Brute Force Vulnerability Discovery, , Pearson Education; Godefroid, P, Kiezun, A, Levin, MY., Grammar-based whitebox fuzzing (2008) ACM SIGPLAN Notices, 43 (6), pp. 206-215; Godefroid, P, Levin, MY, Molnar, DA., Automated Whitebox fuzz testing (2008) Proc. of the Network and Distributed System Security Symp. (NDSS), 8, pp. 151-166; McNally, R, Yiu, K, Grove, D, Gerhardy, D., Fuzzing: The state of the art (2012) Defence Science and Technology Organisation Edinburgh, , http://citeseerx-ist-psu-edu.luisamigo.proxybk.com/viewdoc/download;jsessionid=15CF9A7FD272D62D76FB5ED26DA3808F?doi=10.1.1.461.4627&rep=rep1&type=pdf; Cadar, C, Ganesh, V, Pawlowski, PM, Dill, DL, Engler, DR., EXE: Automatically generating inputs of death (2008) ACM Trans. on Information and System Security (TISSEC), 12 (2), pp. 1-38; Godefroid, P, Klarlund, N, Sen, K., DART: Directed automated random testing (2005) ACM SIGPLAN Notices, 40 (6), pp. 213-223; Xu, RG, Godefroid, P, Majumdar, R., Testing for buffer overflows with length abstraction (2008) Proc. of the 2008 Int'l Symp. on Software Testing and Analysis (ISSTA), pp. 27-38. , ACM; Stephens, N, Grosen, J, Salls, C, Dutcher, A, Wang, R, Corbetta, J, Shoshitaishvili, Y, Vigna, G., Driller: Augmenting fuzzing through selective symbolic execution (2016) Proc. of the Network and Distributed System Security Symp. (NDSS), 16 (2016), pp. 1-16; Pak, BS., Hybrid fuzz testing: Discovering software bugs via fuzzing and symbolic execution (2012), [Ph.D. Thesis]. School of Computer Science, Carnegie Mellon University},
correspondence_address1={Wang, L.-Z.; Department of Computer Science and Technology, China; email: lzwang@nju.edu.cn},
publisher={Chinese Academy of Sciences},
issn={10009825},
coden={RUXUE},
language={Chinese},
abbrev_source_title={Ruan Jian Xue Bao},
document_type={Article},
source={Scopus},
}

@ARTICLE{Marcilio2020,
author={Marcilio, D. and Furia, C.A. and Bonifácio, R. and Pinto, G.},
title={SpongeBugs: Automatically generating fix suggestions in response to static code analysis warnings},
journal={Journal of Systems and Software},
year={2020},
volume={168},
doi={10.1016/j.jss.2020.110671},
art_number={110671},
note={cited By 7},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85085943235&doi=10.1016%2fj.jss.2020.110671&partnerID=40&md5=2ccaf1da93c43d927035cea150335f52},
affiliation={USI Università della Svizzera italiana, Lugano, Switzerland; University of Brasília, Brasília, Brazil; Federal University of Pará, Belém, Brazil},
abstract={Static code analysis tools such as FindBugs and SonarQube are widely used on open-source and industrial projects to detect a variety of issues that may negatively affect the quality of software. Despite these tools’ popularity and high level of automation, several empirical studies report that developers normally fix only a small fraction (typically, less than 10% (Marcilio et al., 2019) of the reported issues—so-called “warnings”. If these analysis tools could also automatically provide suggestions on how to fix the issues that trigger some of the warnings, their feedback would become more actionable and more directly useful to developers. In this work, we investigate whether it is feasible to automatically generate fix suggestions for common warnings issued by static code analysis tools, and to what extent developers are willing to accept such suggestions into the codebases they are maintaining. To this end, we implemented SpongeBugs, a Java program transformation technique that fixes 11 distinct rules checked by two well-known static code analysis tools (SonarQube and SpotBugs). Fix suggestions are generated automatically based on templates, which are instantiated in a way that removes the source of the warnings; templates for some rules are even capable of producing multi-line patches. Based on the suggestions provided by SpongeBugs, we submitted 38 pull requests, including 946 fixes generated automatically by our technique for various open-source Java projects, including Eclipse UI – a core component of the Eclipse IDE – and both SonarQube and SpotBugs. Project maintainers accepted 87% of our fix suggestions (97% of them without any modifications). We further evaluated the applicability of our technique on software written by students and on a curated collection of bugs. All results indicate that our approach to generating fix suggestions is feasible, flexible, and can help increase the applicability of static code analysis tools. © 2020 Elsevier Inc.},
author_keywords={Automatic fix suggestion;  Static code analysis},
keywords={Java programming language;  Open source software;  Open systems;  Program debugging, Analysis tools;  Core components;  Empirical studies;  Industrial projects;  Level of automations;  Quality of softwares;  Static code analysis;  Static code analysis tools, Quality control},
funding_details={Schweizerischer Nationalfonds zur Förderung der Wissenschaftlichen ForschungSchweizerischer Nationalfonds zur Förderung der Wissenschaftlichen Forschung, SNF, 200021_182060},
funding_details={Conselho Nacional de Desenvolvimento Científico e TecnológicoConselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq, 309032/2019-9, 406308/2016-0},
funding_text 1={We thank the maintainers for reviewing our patches; and the reviewers of SCAM and JSS for their helpful comments. This work was partially supported by CNPq, Brazil ( #406308/2016-0 and #309032/2019-9 ); and by the Swiss National Science Foundation (SNSF) grant Hi-Fi ( #200021_182060 ).},
references={Aftandilian, E., Sauciuc, R., Priya, S., Krishnan, S., Building useful program analysis tools using an extensible Java compiler (2012) 2012 IEEE 12th International Working Conference on Source Code Analysis and Manipulation, pp. 14-23; Aho, A.V., Lam, M.S., Sethi, R., Ullman, J.D., Compilers: Principles, Techniques, and Tools (2006), second ed. Addison-Wesley Longman Publishing Co., Inc. Boston, MA, USA; Ayewah, N., Pugh, W., Hovemeyer, D., Morgenthaler, J.D., Penix, J., Using static analysis to find bugs (2008) IEEE Softw., 25 (5), pp. 22-29; Bader, J., Scott, A., Pradel, M., Chandra, S., Getafix: Learning to fix bugs automatically (2019) Proc. ACM Program. Lang., 3 (OOPSLA); Barik, T., Song, Y., Johnson, B., Murphy-Hill, E., From quick fixes to slow fixes: Reimagining static analysis resolutions to enable design space exploration (2016) 2016 IEEE International Conference on Software Maintenance and Evolution (ICSME), pp. 211-221; Bavishi, R., Yoshida, H., Prasad, M.R., Phoenix: Automated data-driven synthesis of repairs for static analysis violations (2019) Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2019, pp. 613-624. , ACM New York, NY, USA; Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the state of static analysis: A large-scale evaluation in open source software (2016) 2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), vol. 1, pp. 470-481; Brito, A., Xavier, L., Hora, A., Valente, M.T., (2018), pp. 255-265. , Why and how Java developers break APIs. In: 25th International Conference on Software Analysis, Evolution and Reengineering (SANER); Carvalho, A., Luz, W., Marcílio, D., Bonifacio, R., Pinto, G., Canedo, E.D., (2020), C-3PR: A bot for fixing static analysis violations via pull requests. In: IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER); Cherem, S., Princehouse, L., Rugina, R., Practical memory leak detection using guarded value-flow analysis (2007) Proceedings of the 28th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI ’07, pp. 480-491. , ACM New York, NY, USA; Dantas, R., Carvalho, A., Marcílio, D., Fantin, L., Silva, U., Lucas, W., Bonifácio, R., Reconciling the past and the present: An empirical study on the application of source code transformations to automatically rejuvenate Java programs (2018) 2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 497-501; Digkas, G., Lungu, M., Avgeriou, P., Chatzigeorgiou, A., Ampatzoglou, A., How do developers fix issues and pay back technical debt in the apache ecosystem? (2018) 2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 153-163; Gazzola, L., Micucci, D., Mariani, L., Automatic software repair: A survey (2019) IEEE Trans. Softw. Eng., 45 (1), pp. 34-67; Georges, A., Buytaert, D., Eeckhout, L., Statistically rigorous Java performance evaluation (2007) Proceedings of the 22nd Annual ACM SIGPLAN Conference on Object-Oriented Programming Systems and Applications, OOPSLA ’07, pp. 57-76. , ACM New York, NY, USA; Habib, A., Pradel, M., How many of all bugs do we find? a study of static bug detectors (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, pp. 317-328. , ACM New York, NY, USA; Johnson, B., Song, Y., Murphy-Hill, E.R., Bowdidge, R.W., (2013), pp. 672-681. , 2013a. Why don't software developers use static analysis tools to find bugs? In: 35th International Conference on Software Engineering, ICSE ’13, San Francisco, CA, USA, May 18-26; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don't software developers use static analysis tools to find bugs? (2013) Proceedings of the 2013 International Conference on Software Engineering, ICSE ’13, pp. 672-681. , http://dl-acm-org.luisamigo.proxybk.com/citation.cfm?id=2486788.2486877, IEEE Press Piscataway, NJ, USA; Just, R., Jalali, D., Ernst, M.D., Defects4j: A database of existing faults to enable controlled testing studies for java programs (2014) Proceedings of the 2014 International Symposium on Software Testing and Analysis, ISSTA 2014, pp. 437-440. , ACM New York, NY, USA; Kalliamvakou, E., Gousios, G., Blincoe, K., Singer, L., German, D.M., Damian, D., An in-depth study of the promises and perils of mining GitHub (2015) Empir. Softw. Eng., 21 (5), pp. 2035-2071; Khedker, U., Sanyal, A., Karkare, B., Data Flow Analysis: Theory and Practice (2009), first ed. CRC Press, Inc. Boca Raton, FL, USA; Kim, J., Batory, D., Dig, D., Azanza, M., Improving refactoring speed by 10x (2016) 2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE), pp. 1145-1156; Kim, D., Nam, J., Song, J., Kim, S., Automatic patch generation learned from human-written patches (2013) Proceedings of the 2013 International Conference on Software Engineering, ICSE ’13, pp. 802-811. , IEEE Press; Klint, P., Van Der Storm, T., Vinju, J., Rascal: A domain specific language for source code analysis and manipulation (2009) 2009 Ninth IEEE International Working Conference on Source Code Analysis and Manipulation, pp. 168-177. , IEEE; Lenarduzzi, V., Lomio, F., Huttunen, H., Taibi, D., Are sonarqube rules inducing bugs? (2020) IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER); Liu, K., Kim, D., Bissyande, T.F., Yoo, S., Le Traon, Y., Mining fix patterns for FindBugs violations (2018) IEEE Trans. Softw. Eng., p. 1; Liu, K., Koyuncu, A., Kim, D., Bissyandè, T.F., AVATAR: Fixing semantic bugs with fix patterns of static analysis violations (2019) 2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 1-12; Liu, C., Yang, J., Tan, L., Hafiz, M., R2Fix: Automatically generating bug fixes from bug reports (2013) 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation, pp. 282-291; Long, F., Amidon, P., Rinard, M., Automatic inference of code transforms for patch generation (2017) Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2017, pp. 727-739. , Association for Computing Machinery New York, NY, USA; Long, F., Rinard, M., Automatic patch generation by learning correct code (2016) Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL ’16, pp. 298-312. , Association for Computing Machinery New York, NY, USA; Marcilio, D., Bonifácio, R., Monteiro, E., Canedo, E., Luz, W., Pinto, G., Are static analysis violations really fixed?: A closer look at realistic usage of SonarQube (2019) Proceedings of the 27th International Conference on Program Comprehension, ICPC ’19, pp. 209-219. , IEEE Press Piscataway, NJ, USA; Marcilio, D., Furia, C.A., Bonifácio, R., Pinto, G., Automatically generating fix suggestions in response to static code analysis warnings (2019) 19th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2019, Cleveland, USA, September 30-October 1, 2019, pp. 34-44. , IEEE Computer Society; Marginean, A., Bader, J., Chandra, S., Harman, M., Jia, Y., Mao, K., Mols, A., Scott, A., Sapfix: Automated end-to-end repair at scale (2019) 2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP), pp. 269-278; Martinez, M., Monperrus, M., Coming: A tool for mining change pattern instances from git commits (2019) 2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion), pp. 79-82; Monperrus, M., Automatic software repair: A bibliography (2018) ACM Comput. Surv., 51 (1), pp. 171-17:24; Nguyen, T.T., Nguyen, H.A., Pham, N.H., Al-Kofahi, J., Nguyen, T.N., Recurring bug fixes in object-oriented programs (2010) Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering - Vol. 1, ICSE ’10, pp. 315-324. , ACM New York, NY, USA; Nielson, F., Nielson, H.R., Hankin, C., Principles of Program Analysis (1999), Springer-Verlag Berlin, Heidelberg; Padioleau, Y., Lawall, J., Hansen, R.R., Muller, G., Documenting and automating collateral evolutions in linux device drivers (2008) SIGOPS Oper. Syst. Rev., 42 (4), pp. 247-260; Qi, Z., Long, F., Achour, S., Rinard, M., An analysis of patch plausibility and correctness for generate-and-validate patch generation systems (2015) Proceedings of the 2015 International Symposium on Software Testing and Analysis (ISSTA), pp. 24-36. , ACM; Ram, A., Sawant, A.A., Castelluccio, M., Bacchelli, A., What makes a code change easier to review: An empirical investigation on code change reviewability (2018) Proceedings of the 2018 ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/SIGSOFT FSE 2018, Lake Buena Vista, FL, USA, November 04-09, 2018, pp. 201-212; Rausch, T., Hummer, W., Leitner, P., Schulte, S., An empirical analysis of build failures in the continuous integration workflows of Java-based open-source software (2017) 2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR), , IEEE; Rolim, R., Soares, G., Gheyi, R., D'Antoni, L., Learning quick fixes from code repositories (2018) CoRR, abs/1803.03806; Sui, Y., Xue, J., SVF: Interprocedural static value-flow analysis in LLVM (2016) Proceedings of the 25th International Conference on Compiler Construction, CC 2016, pp. 265-266. , ACM New York, NY, USA; Tao, Y., Han, D., Kim, S., Writing acceptable patches: An empirical study of open source project patches (2014) 2014 IEEE International Conference on Software Maintenance and Evolution, pp. 271-280; Tómasdóttir, K.F., Aniche, M., van Deursen, A., Why and how JavaScript developers use linters (2017) 2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 578-589; Wei, Y., Pei, Y., Furia, C.A., Silva, L.S., Buchholz, S., Meyer, B., Zeller, A., Automated fixing of programs with contracts (2010) Proceedings of the 19th International Symposium on Software Testing and Analysis (ISSTA), pp. 61-72. , ACM; Weimer, W., Nguyen, T., Le Goues, C., Forrest, S., Automatically finding patches using genetic programming (2009) Proceedings of the IEEE 31st International Conference on Software Engineering, pp. 364-374; Yu, Y., Wang, H., Yin, G., Wang, T., Reviewer recommendation for pull-requests in GitHub: What can we learn from code review and bug assignment? (2016) Inf. Softw. Technol., 74, pp. 204-218; Zampetti, F., Scalabrino, S., Oliveto, R., Canfora, G., Penta, M.D., How open source projects use static code analysis tools in continuous integration pipelines (2017) 2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR), , IEEE},
correspondence_address1={Marcilio, D.; USI Università della Svizzera italianaSwitzerland; email: diego.marcilio@usi.ch},
publisher={Elsevier Inc.},
issn={01641212},
coden={JSSOD},
language={English},
abbrev_source_title={J Syst Software},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Aslanyan20203,
author={Aslanyan, H. and Arutunian, M. and Keropyan, G. and Kurmangaleev, S. and Vardanyan, V.},
title={BinSide: Static Analysis Framework for Defects Detection in Binary Code},
journal={Proceedings - 2020 Ivannikov Memorial Workshop, IVMEM 2020},
year={2020},
pages={3-8},
doi={10.1109/IVMEM51402.2020.00007},
art_number={9356991},
note={cited By 3; Conference of 2020 Ivannikov Memorial Workshop, IVMEM 2020 ; Conference Date: 25 September 2020 Through 26 September 2020;  Conference Code:167392},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85102314473&doi=10.1109%2fIVMEM51402.2020.00007&partnerID=40&md5=e1d110c6c2ccdabaf849b17bd4b43c94},
affiliation={Russian-Armenian University, System Programming Department, Yerevan, Armenia; Yerevan State University, Mathematics and Mechanics Department, Yerevan, Armenia; Programming of the Russian Academy of Sciences, Ivannikov Institute for System, System Programming Department, Moscow, Russian Federation},
abstract={Software developers make mistakes that can lead to failures of a software product. One approach to detect defects is static analysis: examine code without execution. Currently, various source code static analysis tools are widely used to detect defects. However, source code analysis is not enough. The reason for this is the use of third-party binary libraries, the unprovability of the correctness of all compiler optimizations. This paper introduces BinSide: binary static analysis framework for defects detection. It does interprocedural, context-sensitive and flow-sensitive analysis. The framework uses platform independent intermediate representation and provide opportunity to analyze various architectures binaries. The framework includes value analysis, reaching definition, taint analysis, freed memory analysis, constant folding, and constant propagation engines. It provides API (application programming interface) and can be used to develop new analyzers. Additionally, we used the API to develop checkers for classic buffer overflow, format string, command injection, double free and use after free defects detection. © 2020 IEEE.},
author_keywords={Binary static analysis;  defects detection;  value analysis},
keywords={Application programming interfaces (API);  Codes (symbols);  Defects, Analysis frameworks;  Compiler optimizations;  Constant propagation;  Flow-sensitive analysis;  Intermediate representations;  Platform independent;  Source code analysis;  Source code static analysis, Static analysis},
references={Misra, S.C., Bhavsar, V.C., Relationships between selected software measures and latent bug-density: Guidelines for improving quality (2003) International Conference on Computational Science and Its Applications, Iccsa, , Monreal, Canada; Ivannikov, V.P., Belevantsev, A.A., Borodin, A.E., Ignatiev, V.N., Zhurikhin, D.M., Avetisyan, A.I., Static analyzer svace for finding defects in a source program code (2014) Programming and Computer Software, 40 (5), pp. 265-275; Coverity scan Synopsys, , https://scan-coverity-com;.luisamigo.proxybk.com Ibm appscan Ibm, , https://www-ibm-com.luisamigo.proxybk.com/us-en/marketplace/ibm-Appscan-source; Fortify static code analyzer Micro Focus, , https://software-microfocus-com.luisamigo.proxybk.com/ru-ru/products/static-code-Analysis-sast/overview; Balakrishnan, G., Reps, T., Wysinwyx: What you see is not what you execute (2010) Acm Transactions on Programming Languages and Systems, 32 (6), pp. 1-84; Balakrishnan, G., Reps, T., Analyzing memory accesses in x86 executables (2004) Compiler Construction, pp. 5-23; Kinder, J., (2010) Static Analysis of x86 Executables», , Ph.D. thesis, Technische Universitat Darmstadt; Brumley, D., Jager, I., Avgerinos, T., Schwartz, E.J., A binary analysis platform (2011) Lecture Notes in Computer Science; Feist, J., Mounier, L., Potet, M.L., Statically detecting use after free on binary code (2014) Journal of Computer Virology and Hacking Techniques, 10 (3), pp. 211-217; CWE-416: Use after Free, , https://cwe-mitre-org.luisamigo.proxybk.com/data/definitions/416.html; Ida Pro Disassembler, , https://www.heX-rays.com/products/ida; Binnavi Zynamics, , https://www-zynamics-com.luisamigo.proxybk.com/binnavi.html; Reil-the reverse engineering intermediate language Zynamics, , https://www-zynamics-com.luisamigo.proxybk.com/binnavi/manual/html/reil-language.htm; Aho, A.V., Lam, M.S., Jeffrey, U.D., Sethi, R., (1986) Compilers: Principles, Techniques, and Tools; Aslanyan, H.K., (2019) Development of Static Analysis Methods for Finding Defects in Program Executable Code; Jeon, H., Mok, S., Cho, E., Automated crash filtering using interprocedural static analysis for binary codes (2017) 2017 Ieee 41st Annual Computer Software and Applications Conference (COMPSAC); Appel, A.W., Ginsburg, M., (2004) Modern Compiler Implementation in C, , Cambridge University Press; Ferrante, J., Ottenstein, K., Warren, J., The program dependence graph and its use in optimization (1987) Trans. On Prog. Lang. On Syst. (TOPLAS, pp. 319-349; Aslanyan, H.K., Effective and accurate binary clone detection (2017) Mathematical Problems of Computer Science, 48, pp. 64-73; Aslanyan, H.K., Kurmangaleev, S.F., Vardanyan, V.G., Arutunian, M.S., Sargsyan, S.S., Platform-independent and scalable tool for binary code clone detection (2016) Trudy Isp RAN/Proc. Isp Ras, 1 (2), pp. 215-226; Aslanyan, H., Avetisyan, A., Arutunian, M., Keropyan, G., Kurmangaleev, S., Vardanyan, V., Scalable framework for accurate binary code comparison (2017) 2017 Ivannikov Ispras Open Conference (ISPRAS), , Moscow; Arutunian, M., Aslanyan, H., Vardanyan, V., Sirunyan, V., Kurmangaleev, Sh., Gaissaryan, S., Analysis of program patches nature and searching (2019) 2019 Ivannikov Memorial Workshop (IVMEM); CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'), , https://cwe-mitre-org.luisamigo.proxybk.com/data/definitions/120.html; CWE-134: Use of Externally-Controlled Format String, , https://cwe-mitre-org.luisamigo.proxybk.com/data/definitions/134.html; CWE-77: Improper Neutralization of Special Elements Used in a Command ('Command Injection'), , https://cwe-mitre-org.luisamigo.proxybk.com/data/definitions/77.html; CWE-415: Double Free, , https://cwe-mitre-org.luisamigo.proxybk.com/data/definitions/415.html; Cheng, S., Yang, J., Wang, J., Wang, J., Jiang, F., Loongchecker: Practical summary-based semi-simulation to detect vulnerability in binary code (2011) 10th International Conference on Trust, Security and Privacy in Computing and Communications, , Changsha; https://samate-nist-gov.luisamigo.proxybk.com/SRD/testsuite.php},
editor={Prokhorov S.},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781728190884},
language={English},
abbrev_source_title={Proc. - Ivannikov Meml. Workshop, IVMEM},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Trautsch2020127,
author={Trautsch, A. and Herbold, S. and Grabowski, J.},
title={Static source code metrics and static analysis warnings for fine-grained just-in-time defect prediction},
journal={Proceedings - 2020 IEEE International Conference on Software Maintenance and Evolution, ICSME 2020},
year={2020},
pages={127-138},
doi={10.1109/ICSME46990.2020.00022},
art_number={9240701},
note={cited By 3; Conference of 36th IEEE International Conference on Software Maintenance and Evolution, ICSME 2020 ; Conference Date: 27 September 2020 Through 3 October 2020;  Conference Code:164655},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85096655109&doi=10.1109%2fICSME46990.2020.00022&partnerID=40&md5=f5967d8c2e8d4ed8d55e27a7bc57b02c},
affiliation={University of Goettingen, Institute of Computer Science, Germany; Karlsruhe Institute of Technology, Institute Aifb, Germany},
abstract={Software quality evolution and predictive models to support decisions about resource distribution in software quality assurance tasks are an important part of software engineering research. Recently, a fine-grained just-in-time defect prediction approach was proposed which has the ability to find bug-inducing files within changes instead of only complete changes. In this work, we utilize this approach and improve it in multiple places: data collection, labeling and features. We include manually validated issue types, an improved SZZ algorithm which discards comments, whitespaces and refactorings. Additionally, we include static source code metrics as well as static analysis warnings and warning density derived metrics as features. To assess whether we can save cost we incorporate a specialized defect prediction cost model. To evaluate our proposed improvements of the fine-grained just-in-time defect prediction approach we conduct a case study that encompasses 38 Java projects, 492,241 file changes in 73,598 commits and spans 15 years. We find that static source code metrics and static analysis warnings are correlated with bugs and that they can improve the quality and cost saving potential of just-in-time defect prediction models. © 2020 IEEE.},
author_keywords={Software metrics;  Software quality},
keywords={Computer programming languages;  Computer software maintenance;  Computer software selection and evaluation;  Cost benefit analysis;  Defects;  Forecasting;  Just in time production;  Predictive analytics;  Quality assurance;  Quality control;  Software quality, Cost modeling;  Cost saving potentials;  Data collection;  Defect prediction;  Defect prediction models;  Predictive models;  Resource distribution;  Static sources, Static analysis},
funding_details={Deutsche ForschungsgemeinschaftDeutsche Forschungsgemeinschaft, DFG, 402774445},
funding_text 1={This work was partly funded by the German Research Foundation (DFG) through the project DEFECTS, grant 402774445.},
references={Pascarella, L., Palomba, F., Bacchelli, A., Fine-grained just-in-time defect prediction (2019) Journal of Systems and Software, 150, pp. 22-36. , http://www-sciencedirect-com.luisamigo.proxybk.com/science/article/pii/S0164121218302656, [Online]; McIntosh, S., Kamei, Y., Are fix-inducing changes a moving target? a longitudinal case study of just-in-time defect prediction (2018) Ieee Transactions on Software Engineering, 44 (5), pp. 412-428. , May; Kondo, M., German, D.M., Mizuno, O., Choi, E.-H., The impact of context metrics on just-in-time defect prediction (2020) Empirical Software Engineering, 25 (1), pp. 890-939; Hoang, T., Khanh Dam, H., Kamei, Y., Lo, D., Ubayashi, N., Deepjit: An end-to-end deep learning framework for just-in-time defect prediction (2019) 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), pp. 34-45; Śliwerski, J., Zimmermann, T., Zeller, A., When do changes induce fixes? (2005) Sigsoft Softw. Eng. Notes, 30 (4), pp. 1-5. , May; Cabral, G.G., Minku, L.L., Shihab, E., Mujahid, S., Class imbalance evolution and verification latency in just-in-time software defect prediction 2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE), pp. 666-676. , May 2019; Kamei, Y., Shihab, E., Adams, B., Hassan, A.E., Mockus, A., Sinha, A., Ubayashi, N., A large-scale empirical study of just-in-time quality assurance (2013) Ieee Transactions on Software Engineering, 39 (6), pp. 757-773. , June; Tan, M., Tan, L., Dara, S., Mayeux, C., Online defect prediction for imbalanced data 2015 IEEE/ACM 37th Ieee International Conference on Software Engineering, 2, pp. 99-108. , May 2015; Yang, Y., Zhou, Y., Liu, J., Zhao, Y., Lu, H., Xu, L., Xu, B., Leung, H., Effort-aware just-in-time defect prediction: Simple unsupervised models could be better than supervised models (2016) Proceedings of the 2016 24th Acm Sigsoft International Symposium on Foundations of Software Engineering, Ser. Fse 2016, pp. 157-168. , https://doi.org/10.1145/2950290.2950353, New York, NY, USA: Association for Computing Machinery, [Online]; D'Ambros, M., Lanza, M., Robbes, R., Evaluating defect prediction approaches: A benchmark and an extensive comparison (2012) Empirical Softw. Engg., 17 (4-5), pp. 531-577. , http://dx-doi-org.luisamigo.proxybk.com/10.1007/s10664-011-9173-9, Aug., [Online]; Rahman, F., Khatri, S., Barr, E.T., Devanbu, P., Comparing static bug finders and statistical prediction (2014) Proceedings of the 36th International Conference on Software Engineering, Ser. Icse 2014, pp. 424-434. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2568225.2568269, New York, NY, USA: ACM, [Online]; Zheng, J., Williams, L., Nagappan, N., Snipes, W., Hudepohl, J.P., Vouk, M.A., On the value of static analysis for fault detection in software (2006) Ieee Transactions on Software Engineering, 32 (4), pp. 240-253. , April; Devanbu, P., Zimmermann, T., Bird, C., Belief evidence in empirical software engineering 2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE), May 2016, pp. 108-119; Panichella, S., Arnaoudova, V., Penta, M.D., Antoniol, G., Would static analysis tools help developers with code reviews? 2015 Ieee 22nd International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 161-170. , March 2015; Querel, L.-P., Rigby, P.C., Warningsguru: Integrating statistical bug models with static analysis to provide timely and specific bug warnings (2018) Proceedings of the 2018 26th Acm Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, Ser. ESEC/FSE 2018, pp. 892-895. , https://doi.org/10.1145/3236024.3264599, New York, NY, USA: Association for Computing Machinery, [Online]; Fan, Y., Alencar Da Costa, D., Lo, D., Hassan, A.E., Shanping, L., The impact of mislabeled changes by szz on just-in-time defect prediction Ieee Transactions on Software Engineering, 2020; Antoniol, G., Ayari, K., Di Penta, M., Khomh, F., Guéhéneuc, Y.-G., Is it a bug or an enhancement?: A text-based approach to classify change requests (2008) Proceedings of the 2008 Conference of the Center for Advanced Studies on Collaborative Research: Meeting of Minds, Ser. Cascon '08, pp. 23304-23318. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1463788.1463819, New York, NY, USA: ACM, [Online]; Herzig, K., Just, S., Zeller, A., It's not a bug, it's a feature: How misclassification impacts bug prediction (2013) Proceedings of the International Conference on Software Engineering, Ser. Icse '13, pp. 392-401. , http://dl-acm-org.luisamigo.proxybk.com/citation.cfm?id=2486788.2486840, Piscataway, NJ, USA: IEEE Press, [Online]; Herbold, S., Trautsch, A., Trautsch, F., Ledel, B., Issues with szz: An empirical study of the state of practice of defect prediction data collection (2020) Submitted To: Empirical Software Engineering, , https://arxiv-org.luisamigo.proxybk.com/abs/1911.08938, [Online]; Neto, E.C., Da Costa, D.A., Kulesza, U., The impact of refactoring changes on the szz algorithm: An empirical study 2018 Ieee 25th International Conference on Software Analysis, Evolution and Reengineering (SANER), March 2018, pp. 380-390; Herbold, S., On the costs and profit of software defect prediction (2019) Ieee Transactions on Software Engineering, pp. 1-1; Huang, Q., Xia, X., Lo, D., Supervised vs unsupervised models: A holistic look at effort-aware just-in-time defect prediction (2017) 2017 Ieee International Conference on Software Maintenance and Evolution (ICSME), pp. 159-170; Jiang, T., Tan, L., Kim, S., Personalized defect prediction 2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE), Nov 2013, pp. 279-289; Rahman, F., Devanbu, P., How, and why, process metrics are better 2013 35th International Conference on Software Engineering (ICSE), May 2013, pp. 432-441; Rosen, C., Grawi, B., Shihab, E., Commit guru: Analytics and risk prediction of software commits (2015) Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, Ser. ESEC/FSE 2015, pp. 966-969. , https://doi.org/10.1145/2786805.2803183, New York, NY, USA: Association for Computing Machinery, [Online]; McCabe, T.J., A complexity measure (1976) Ieee Trans. Softw. Eng., 2 (4), pp. 308-320. , Jul; Chidamber, S.R., Kemerer, C.F., A metrics suite for object oriented design (1994) Ieee Trans. Softw. Eng., 20 (6), pp. 476-493. , Jun; Hosseini, S., Turhan, B., Gunarathna, D., A systematic literature review and meta-analysis on cross project defect prediction (2017) Ieee Transactions on Software Engineering, PP (99), pp. 1-1; Hall, T., Beecham, S., Bowes, D., Gray, D., Counsell, S., A systematic literature review on fault prediction performance in software engineering (2012) Ieee Transactions on Software Engineering, 38 (6), pp. 1276-1304. , Nov; Breiman, L., Random forests (2001) Mach. Learn., 45 (1), pp. 5-32. , http://dx-doi-org.luisamigo.proxybk.com/10.1023/A:1010933404324, Oct., [Online]; Kreyszig, E., (2000) Advanced Engineering Mathematics: Maple Computer Guide 8th Ed, , New York NY USA: John Wiley & Sons, Inc; Tan, M., Tan, L., Dara, S., Mayeux, C., Online defect prediction for imbalanced data (2015) Proceedings of the 37th International Conference on Software Engineering-Volume 2, Ser. Icse '15, pp. 99-108. , Piscataway, NJ, USA: IEEE Press; Herbold, S., Autorank: A python package for automated ranking of classifiers (2020) Journal of Open Source Software, 5 (48), p. 2173. , https://doi.org/10.21105/joss.02173, [Online]; Demšar, J., Statistical comparisons of classifiers over multiple data sets (2006) J. Mach. Learn. Res., 7, pp. 1-30. , Dec; Tukey, J.W., Comparing individual means in the analysis of variance (1949) Biometrics, 5 (2), pp. 99-114. , http://www-jstor-org.luisamigo.proxybk.com/stable/3001913, [Online]; Friedman, M., A comparison of alternative tests of significance for the problem of m rankings (1940) The Annals of Mathematical Statistics, 11 (1), pp. 86-92; Nemenyi, P., (1963) Distribution-free Multiple Comparison, , Ph.D. dissertation, Princeton University; Cohen, J., (1988) Statistical Power Analysis for the Behavioral Sciences, , L. Erlbaum Associates; Cliff, N., Dominance statistics: Ordinal analyses to answer ordinal questions (1993) Psychological Bulletin, 114 (3), p. 494; Abdi, H., Bonferroni and Sidak corrections for multiple comparisons (2007) Encyclopedia of Measurement and Statistics, pp. 103-107. , Sage, Thousand Oaks, CA; Trautsch, F., Herbold, S., Makedonski, P., Grabowski, J., Addressing problems with replicability and validity of repository mining studies through a smart data platform (2017) Empirical Software Engineering, , Aug; Spadini, D., Aniche, M., Bacchelli, A., PyDriller: Python framework for mining software repositories (2018) Proceedings of the 2018 26th Acm Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering-ESEC/FSE 2018, pp. 908-911. , http://dl-acm-org.luisamigo.proxybk.com/citation.cfm?doid=3236024.3264598, New York, New York, USA: ACM Press, [Online]; Huang, Q., Xia, X., Lo, D., Revisiting supervised and unsupervised models for effort-aware just-in-time defect prediction (2018) Empirical Software Engineering, pp. 1-40; Yang, X., Lo, D., Xia, X., Sun, J., Tlel: A two-layer ensemble learning approach for just-in-time defect prediction (2017) Information and Software Technology, 87, pp. 206-220. , http://www-sciencedirect-com.luisamigo.proxybk.com/science/article/pii/S0950584917302501, [Online]; Fenton, N., Bieman, J., Metrics, S., (2014) A Rigorous and Practical Approach, Third Edition, 3rd Ed, , Boca Raton, FL, USA: CRC Press, Inc; Wohlin, C., Runeson, P., Höst, M., Ohlsson, M.C., Regnell, B., Wesslén, A., (2000) Experimentation in Software Engineering: An Introduction, , Norwell MA USA: Kluwer Academic Publishers; Da Costa, D.A., McIntosh, S., Shang, W., Kulesza, U., Coelho, R., Hassan, A.E., A framework for evaluating the results of the szz approach for identifying bug-introducing changes (2017) Ieee Transactions on Software Engineering, 43 (7), pp. 641-657},
sponsors={IEEE Computer Society},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781728156194},
language={English},
abbrev_source_title={Proc. - IEEE Int. Conf. Softw. Maint. Evol., ICSME},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Ghaleb2020415,
author={Ghaleb, A. and Pattabiraman, K.},
title={How effective are smart contract analysis tools? evaluating smart contract static analysis tools using bug injection},
journal={ISSTA 2020 - Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis},
year={2020},
pages={415-427},
doi={10.1145/3395363.3397385},
note={cited By 10; Conference of 29th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2020 ; Conference Date: 18 July 2020 Through 22 July 2020;  Conference Code:161847},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85088916678&doi=10.1145%2f3395363.3397385&partnerID=40&md5=338f118585969b2e949714ce869c099c},
affiliation={University of British Columbia, Canada},
abstract={Security attacks targeting smart contracts have been on the rise, which have led to financial loss and erosion of trust. Therefore, it is important to enable developers to discover security vulnerabilities in smart contracts before deployment. A number of static analysis tools have been developed for finding security bugs in smart contracts. However, despite the numerous bug-finding tools, there is no systematic approach to evaluate the proposed tools and gauge their effectiveness. This paper proposes SolidiFI, an automated and systematic approach for evaluating smart contracts' static analysis tools. SolidiFI is based on injecting bugs (i.e., code defects) into all potential locations in a smart contract to introduce targeted security vulnerabilities. SolidiFI then checks the generated buggy contract using the static analysis tools, and identifies the bugs that the tools are unable to detect (false-negatives) along with identifying the bugs reported as false-positives. SolidiFI is used to evaluate six widely-used static analysis tools, namely, Oyente, Securify, Mythril, SmartCheck, Manticore and Slither, using a set of 50 contracts injected by 9369 distinct bugs. It finds several instances of bugs that are not detected by the evaluated tools despite their claims of being able to detect such bugs, and all the tools report many false positives. © 2020 ACM.},
author_keywords={bug injection;  Ethereum;  Ethereum security;  fault injection;  smart contracts;  smart contracts analysis;  smart contracts dataset;  smart contracts security;  solidity code analysis;  static analysis tools evaluation},
keywords={Losses;  Security of data;  Software testing;  Static analysis, Analysis tools;  Bug finding tools;  False negatives;  False positive;  Financial loss;  Security attacks;  Security bugs;  Security vulnerabilities, Program debugging},
funding_details={Intel CorporationIntel Corporation},
funding_details={Natural Sciences and Engineering Research Council of CanadaNatural Sciences and Engineering Research Council of Canada, NSERC},
funding_text 1={This work was partially supported by the Natural Sciences and Engineering Research Council of Canada (NSERC), and a research gift from Intel. We thank Julia Rubin, Sathish Gopalakrishnan, Konstantin Beznosov, and the anonymous reviewers of ISSTA’20 for their helpful comments about this work.},
references={(2016) Analysis of the DAO Exploit, , https://hackingdistributed-com.luisamigo.proxybk.com/2016/06/18/analysis-of-the-dao-exploit; (2017) History of Ethereum Security Vulnerabilities, Hacks, and Their Fixes, , https://applicature-com.luisamigo.proxybk.com/blog/blockchain-technology/history-ofethereum-security-vulnerabilities-hacks-and-their-fixes; (2017) The Parity Wallet Breach, , https://bitcoinexchangeguide-com.luisamigo.proxybk.com/parity-walletbreach; (2017) Remix-Solidity IDE, , http://remix-ethereum-org;.luisamigo.proxybk.com (2018) Eth-mutants, , https://github-com.luisamigo.proxybk.com/federicobond/eth-mutants; (2018) New BatchOverflow Bug in Multiple ERC20 Smart Contracts (CVE-2018-10299), , https://medium-com.luisamigo.proxybk.com/@peckshield/alert-new-batchoverflow-bugin-multiple-erc20-smart-contracts-cve-2018-10299-511067db6536; (2020) CVE-2018-10299 Detail, , https://nvd-nist-gov.luisamigo.proxybk.com/vuln/detail/CVE-2018-10299; (2020) INFURA, , https://infura-io;.luisamigo.proxybk.com (2020) MetaMask, , https://metamask-io;.luisamigo.proxybk.com (2020) Solidity-security-blog, , https://github-com.luisamigo.proxybk.com/sigp/solidity-security-blog; Akca, S., Rajan, A., Peng, C., Solanalyser: A framework for analysing and testing smart contracts (2019) 2019 26th Asia-Pacific Software Engineering Conference (APSEC). IEEE, pp. 482-489; Amani, S., Begel, M., Bortin, M., Staples, M., Towards verifying ethereum smart contract bytecode in Isabelle/HOL (2018) Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs. ACM, pp. 66-77; Atzei, N., Bartoletti, M., Cimoli, T., A survey of attacks on ethereum smart contracts (sok) (2017) Principles of Security and Trust., pp. 164-186. , Springer; Bhargavan, K., Delignat-Lavaud, A., Fournet, C., Gollamudi, A., Gonthier, G., Kobeissi, N., Kulatova, N., Swamy, N., Formal verification of smart contracts: Short paper (2016) Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security. ACM, pp. 91-96; Bonett, R., Kafle, K., Moran, K., Nadkarni, A., Poshyvanyk, D., Discovering flaws in security-focused static analysis tools for Android using systematic mutation (2018) 27th {USENIX} Security Symposium ({USENIX} Security 18), pp. 1263-1280; Brent, L., Jurisevic, A., Kong, M., Liu, E., Gauthier, F., Gramoli, V., Holz, R., Scholz, B., (2018) Vandal: A Scalable Security Analysis Framework for Smart Contracts, , arXiv preprint; Buterin, V., (2014) Ethereum: A Next-generation Smart Contract and Decentralized Application Platform, , https://github-com.luisamigo.proxybk.com/ethereum/wiki/wiki/%5BEnglish%5D-White-Paper7, (2014); Chan, W.K., Jiang, B., Fuse: An architecture for smart contract fuzz testing service (2018) 2018 25th Asia-Pacific Software Engineering Conference (APSEC). IEEE, pp. 707-708; Clack, C.D., Bakshi, V.A., Braine, L., (2016) Smart Contract Templates: Foundations, Design Landscape and Research Directions, , arXiv preprint; Echdina, , https://github-com.luisamigo.proxybk.com/crytic/echidna; Dannen, C., (2017) Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners, , Springer; De Moura, L., Bjurner, N., Z3: An efficient SMT solver (2008) Proceedings of the Theory and Practice of Software, 14th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS'08/ETAPS'08), pp. 337-340; Dolan-Gavitt, B., Hulin, P., Kirda, E., Leek, T., Mambretti, A., Robertson, W., Ulrich, F., Whelan, R., Lava: Large-scale automated vulnerability addition (2016) 2016 IEEE Symposium on Security and Privacy (SP). IEEE, pp. 110-121; Durieux, T., Ferreira, J.F., Abreu, R., Cruz, P., (2019) Empirical Review of Automated Analysis Tools on 47, 587 Ethereum Smart Contracts, , arXiv preprint; Etherscan, , https://etherscan-io;.luisamigo.proxybk.com Feist, J., Grieco, G., Groce, A., Slither: A static analysis framework for smart contracts (2019) 2019 IEEE/ACM 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB). IEEE, pp. 8-15; Feng, Y., Torlak, E., Bodik, R., (2019) Precise Attack Synthesis for Smart Contracts, , http://arxiv-org.luisamigo.proxybk.com/abs/1902.06067, CoRR abs/1902. 06067 (2019); Grishchenko, I., Maffei, M., Schneidewind, C., A semantic framework for the security analysis of ethereum smart contracts (2018) International Conference on Principles of Security and Trust, pp. 243-269. , Springer; Hildenbrandt, E., Saxena, M., Zhu, X., Rodrigues, N., Daian, P., Guth, D., Rosu, G., (2017) Kevm: A Complete Semantics of the Ethereum Virtual Machine, , Technical Report; Hirai, Y., Defining the ethereum virtual machine for interactive theorem provers (2017) International Conference on Financial Cryptography and Data Security, pp. 520-535. , Springer; Jiang, B., Liu, Y., Chan, W.K., Contractfuzzer: Fuzzing smart contracts for vulnerability detection (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering. ACM, pp. 259-269; Krupp, J., Rossow, C., Teether: Gnawing at ethereum to automatically exploit smart contracts (2018) 27th {USENIX} Security Symposium ({USENIX} Security 18), pp. 1317-1333. , {USENIX Association}; Luu, L., Chu, D., Olickel, H., Saxena, P., Hobor, A., Making smart contracts smarter (2016) Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, pp. 254-269; Mathieu, F., Mathee, R., (2017) Blocktix: Decentralized Event Hosting and Ticket Distribution Network, , https://www-cryptoground-com.luisamigo.proxybk.com/storage/files/1527588859-blocktix-wp-draft.pdf; Mossberg, M., Manzano, F., Hennenfent, E., Groce, A., Grieco, G., Feist, J., Brunson, T., Dinaburg, A., Manticore: A userfriendly symbolic execution framework for binaries and smart contracts (2019) 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, pp. 1186-1189; Mueller, B., Smashing ethereum smart contracts for fun and real profit (2018) HITB SECCONF Amsterdam (2018); Parizi, R.M., Dehghantanha, A., Raymond Choo, K., Singh, A., Empirical vulnerability analysis of automated smart contracts security testing on blockchains (2018) Proceedings of the 28th Annual International Conference on Computer Science and Software Engineering, pp. 103-113. , IBM Corp; Peng, C., Akca, S., Rajan, A., Sif: A framework for solidity contract instrumentation and analysis (2019) 2019 26th Asia-Pacific Software Engineering Conference (APSEC). IEEE, pp. 466-473; Perez, D., Livshits, B., (2019) Smart Contract Vulnerabilities: Does Anyone Care?, , (2019); Pewny, J., Holz, T., EvilCoder: Automated bug insertion (2016) Proceedings of the 32nd Annual Conference on Computer Security Applications. ACM, pp. 214-225; Thung, F., Lo, D., Jiang, L., Rahman, F., Devanbu, P.T., To what extent could we detect field defects? An empirical study of false negatives in static bug finding tools (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering. ACM, pp. 50-59; Tikhomirov, S., Voskresenskaya, E., Ivanitskiy, I., Takhaviev, R., Marchenko, E., Alexandrov, Y., (2018) SmartCheck: Static Analysis of Ethereum Smart Contracts, , (2018); Tsankov, P., Dan, A., Drachsler-Cohen, D., Gervais, A., Buenzli, F., Vechev, M., Securify: Practical security analysis of smart contracts (2018) Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security., pp. 67-82; Wang, X., Wu, H., Sun, W., Zhao, Y., Towards generating cost-effective test-suite for ethereum smart contract (2019) 2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEE, pp. 549-553; Wu, H., Wang, X., Xu, J., Zou, W., Zhang, L., Chen, Z., (2019) Mutation Testing for Ethereum Smart Contract, , arXiv preprint (2019)},
editor={Khurshid S., Pasareanu C.S.},
sponsors={ACM SIGSOFT},
publisher={Association for Computing Machinery, Inc},
isbn={9781450380089},
language={English},
abbrev_source_title={ISSTA - Proc. ACM SIGSOFT Int. Symp. Softw. Test. Anal.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Priya2020,
author={Priya, B.H. and Karthick, R. and Lokprakash, B. and Vasanth, S. and Praveen, N.K.},
title={Static Eccentricity Fault Analysis in Inverter Fed Induction Motor using Finite Element Method},
journal={IOP Conference Series: Materials Science and Engineering},
year={2020},
volume={872},
number={1},
doi={10.1088/1757-899X/872/1/012049},
art_number={012049},
note={cited By 3; Conference of 2nd International Conference on Materials Science and Manufacturing Technology 2020, ICMSMT 2020 ; Conference Date: 9 April 2020 Through 10 April 2020;  Conference Code:161397},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85088422049&doi=10.1088%2f1757-899X%2f872%2f1%2f012049&partnerID=40&md5=d876c2be3745c67ecadabd447318f8c9},
affiliation={Department of Electrical and Electronics Engineering, Amrita School of Engineering, Amrita Vishwa Vidyapeetham, Coimbatore, 641112, India},
abstract={One of the common faults encountered in three phase induction motors (IM) is the eccentricity fault. In this work, a study on the electromagnetic characteristics of open-loop voltage source inverter fed IM is carried out for healthy and static eccentricity fault condition with the assistance of Finite Element Analysis. The importance of electromagnetic field analysis is it contains the data about the position of stator, rotor and mechanical parameters of IM. Thus the strategy of monitoring airgap magnetic fields and current are often used for the diagnosis of faults in IM. Detection of eccentricity fault at the incipient stage is difficult because the changes that the fault would introduce in the motor terminal quantities are negligible unless the severity is very high. A comparative study is carried out for healthy and eccentric fault motor with the help of ANSYS Maxwell Finite Element Analysis tool. Electromagnetic field parameters such as speed, current, flux distribution over the machine and in the air gap are analysed for healthy and faulty motor. © Published under licence by IOP Publishing Ltd.},
references={Faiz, J., Ebrahimi, M.B., Akin, B., Toliyat, H.A., Comprehensive eccentricity fault diagnosis in induction motors using finite element method/EEE (2009) Transactions on Magnetics, 45 (3), pp. 1764-1767; Ojaghi, M., Mohammadi, M., (2016) Iecon 2016 - 42nd Annual Conference of the Ieee Industrial Electronics Society, pp. 1524-1529; Sobra, J., Kavalir, T., Krizek, M., Skala, B., (2018) International Conference on Mechatronics - Mechatronika (ME), pp. 1-5; Benbouzid, M.E., A review of induction motors signature analysis as a medium for faults detectionIEEE (2000) Transactions on Industrial Electronics, 47 (5), pp. 984-993; Polat, A., Erturul, Y.D., Ergene, L.T., (2015) Sdemped 2015 Ieee 10th International Symposium on Diagnostics for Electric Machines, Power Electronics and Drives, pp. 284-288; Stoll, R.L., Simple computational model for calculating the unbalanced magnetic pull on a two-pole turbo generator due to eccentricity (1997) Ieee Proc. Elect. Power Appl., 144 (4), pp. 263-270; Praveen Kumar, N., Isha, T.B., Balakrishnan, P., (2016) Biennial International Conference on Power and Energy Systems: Towards Sustainable Energy (PESTSE), pp. 1-6; Praveen Kumar, N., Isha, T.B., FEM based electromagnetic signature analysis of winding inter-turn short-circuit fault in inverter fed induction motor (2019) Ces Transactions on Electrical Machines and Systems, 3 (3), pp. 309-315; Prasob, K., Kumar, N.P., Isha, T.B., (2017) International Conference on Circuit, Power and Computing Technologies (ICCPCT), pp. 1-6; Praveen Kumar, N., Isha, T.B., (2016) Ieee International Conference on Power Electronics, Drives and Energy Systems (PEDES), pp. 1-6; Praveen, K.N., Isha, T.B., Electromagnetic signature study of a closed loop speed controlled three-phase induction motor under broken rotor bar fault using finite element method (2019) Journal of Engineering Science and Technology, 14, pp. 2731-2745; Praveen Kumar, N., Vinothraj, C., Isha, T.B., (2018) Ieee International Conference on Power Electronics, Drives and Energy Systems (PEDES), pp. 1-6},
correspondence_address1={Priya, B.H.; Department of Electrical and Electronics Engineering, India; email: bhemapriya248@gmail.com},
editor={Muthusamy R.},
publisher={Institute of Physics Publishing},
issn={17578981},
language={English},
abbrev_source_title={IOP Conf. Ser. Mater. Sci. Eng.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Wang2020,
author={Wang, M.-L. and Zhang, Y.-N. and Li, M.-Y. and Shao, S. and Liu, S.-R.},
title={Improving the Accuracy of Static Defect Analysis Based on Symbolic Execution [基于符号执行提高缺陷分析的准确性研究]},
journal={Beijing Ligong Daxue Xuebao/Transaction of Beijing Institute of Technology},
year={2020},
volume={40},
number={4},
pages={382-385 and 395},
doi={10.15918/j.tbit1001-0645.2017.383},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85084819307&doi=10.15918%2fj.tbit1001-0645.2017.383&partnerID=40&md5=3b93c0e708311be26ec5850653e192c2},
affiliation={China Information Technology Security Evaluation Center, Beijing, 100085, China; School of Computer Science, Beijing University of Posts and Telecommunications, Beijing, 100876, China},
abstract={Static analysis is an effective way of detecting defects and improving the quality of software codes. However, without running the programs, it can not collect runtime information, so the accuracy of its analysis result is low, i.e. there are false positives. Symbolic execution method can collect data flow information through simulating the execution of the target program, thereby increasing the accuracy of static analysis. In order to improve the accuracy of static analysis results, this paper designed and developed a defect detection tool ABAZER-SE, which was built on the GCC abstract syntax tree and combined symbolic execution and static analysis techniques. The tool was applied on the Toyota ITC benchmark and the experimental results show that it can improve the accuracy of static defect analysis. © 2020, Editorial Department of Transaction of Beijing Institute of Technology. All right reserved.},
author_keywords={Defects detection;  Infeasible path;  Static analysis;  Symbolic execution},
keywords={Data flow analysis;  Defects;  Model checking;  Static analysis;  Trees (mathematics), Abstract Syntax Trees;  Analysis techniques;  Data-flow information;  Defect detection;  Detecting defects;  Quality of softwares;  Run-time information;  Symbolic execution, Quality control},
references={Cadar, C., Dunbar, D., Engler, D.R., KLEE: unassisted and automatic generation of high-coverage tests for complex systems programs (2008), 8, pp. 209-224. , OSDI; Luo, Y., Static code analysis and defense for bugs in software (2007), Beijing: Chinese Academy of Sciences, Institute of Software; Brian, W., Kernighan, D.R., (1988) C Programming Language, , 2rd ed.[S.l.]: Prentice Hall; De Moura, L., Bjørner, N., Z3: An efficient SMT solver (2008) International Con-Ference on Tools and Algorithms for the Construction and Analysis of Systems, pp. 337-340. , Berlin Heidelberg: Springer; Toyota, I.T.C., Static analysis benchmark (2017), https://github-com.luisamigo.proxybk.com/regehr/itc-benchmarks; Zhang, Y., Clien, Z., Wang, J., Regular property guided dynamic symbolic execution (2015) Proceedings of the 37th International Conference on Software Engineering, 1, pp. 643-653. , [S.l.]: IEEE Press; Cui, H., Hu, G., Wu, J., Verifying systems rules using rule directed symbolic execution (2013) ACM SIGARCH Computer Architecture News, 41 (1), pp. 329-342; Ramos, D.A., Engler, D.R., Practical, low effort equivalence verification of real code (2011) Proceedings of the 23rd International Conference on Computer Aided Verification, pp. 669-685. , [S.l.]: CAV},
publisher={Beijing Institute of Technology},
issn={10010645},
coden={BLXUE},
language={Chinese},
abbrev_source_title={Beijing Ligong Daxue Xuebao},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Dang2020,
author={Dang, B.H.},
title={A practical approach for ranking software warnings from multiple static code analysis reports},
journal={Conference Proceedings - IEEE SOUTHEASTCON},
year={2020},
volume={2},
doi={10.1109/SoutheastCon44009.2020.9368277},
art_number={9368277},
note={cited By 1; Conference of 2020 IEEE SoutheastCon, SoutheastCon 2020 ; Conference Date: 28 March 2020 Through 29 March 2020;  Conference Code:164985},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85104013644&doi=10.1109%2fSoutheastCon44009.2020.9368277&partnerID=40&md5=859d1f772a60ed8d2192c1eea7772f38},
affiliation={Naval Surface Warfare Center, Philadelphia Division, Philadelphia, PA, United States},
abstract={Static analysis tools examine source code to look for software flaws and potential vulnerabilities. It is a common practice to use multiple tools so that we do not overlook code which truly has a problem. However, the problem of using multiple bugs finding tools is they not only detect similar software defects but also generate new warning messages. The excessive warnings make code analysis time consuming and expensive. In this paper, we describe our methods to merge software warning categories from different bugs finding tools from two popular programming languages such as Java and C++, and prioritize the files consolidated warning messages by building an analytical model using principal component analysis. Results have shown that files real software defects occupied top of the list, and false positives occupied the bottom slots. © 2020 IEEE},
author_keywords={Cybersecurity;  False positive;  Principal component analysis;  Software defect;  Static code analysis},
keywords={Computer software;  Data handling;  Defects;  Problem oriented languages;  Program debugging;  Static analysis, Code analysis;  False positive;  Multiple tools;  Real softwares;  Software defects;  Source codes;  Static code analysis;  Warning messages, C++ (programming language)},
funding_text 1={ACKNOWLEDGMENT This research was supported by the Naval Innovative Science and Engineering fund. I would like to thank Dr. Steven Mastro, Dorothy Kraynik, Tim Scherer, Kristen Bradshaw, Shannon Owens, Marissa Bayers, and Dawn Ware for their review and useful comments, and Sean Brennan and Stephanie Davidson for their supports of this project.},
references={Heckman, S.S., A systematic literature review of actionable alert identification techniques for automated static code analysis (2009) Journal Information and Software Technology, 53 (4), pp. 365-387. , Butterworth-Heinemann Newton, MA; Kim, S., Ernst, D.M., Which warnings should I fix first? (2007) Proceedings of the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 45-54. , Dubrovnik, Croatia; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rotherme, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proceedings of the 30th International Conference on Software Engineering, pp. 341-350. , Leipzig, Germany; Meng, N., Wang, Q., Wu, Q., Mei, H., An approach to merge results of multiple static analysis tools (short paper) (2008) Proceedings of the Eight International Conference on Quality Software, pp. 169-174. , Oxford, UK; Wang, D., Zhang, H., Liu, R., Lin, M., Wu, W., Predicting bugs' components via mining bug reports (2012) Journal of Software, 7 (5); Boland, F., Jr., Black, P.E., C/C++ and Java test suite the Juliet 1.1 (2012) Computer, 45 (10); FindBugs, , http://findbugs-sourceforge-net.luisamigo.proxybk.com/; Sharma, S., Principal component analysis (PCA) to rank countries on their readiness for e-tail (2008) Journal of Retail & Leisure Property, 7 (2), pp. 87-94; Moser, R., Pedrycz, W., Succi, G., A comparative analysis of the efficiency of change metrics and static code attributes for defect prediction (2008) Proceedings of the 30th International Conference on Software Engineering (ICSE '08), pp. 181-190. , https://doi.org/10.1145/1368088.1368114, ACM, New York, NY, USA; https://pmd-github-io.luisamigo.proxybk.com/; Smith, L.I., (2002) A Tutorial on Principal Component Analysis, , http://www-cs-otago-ac-nz.luisamigo.proxybk.com/cosc453/student_tutorials/principal_components.pdf, Retrieved January 11, 2018 from; Sharma, M., Bedi, P., Chaturvedi, K.K., Singh, V.B., Predicting the Priority of a Reported Bug using Machine Learning Techniques and Cross Project Validation (2012) 12th International Conference on Intelligent Systems Design and Application (ISDA), pp. 539-545; https://cwe-mitre-org.luisamigo.proxybk.com/; http://cppcheck-sourceforge-net.luisamigo.proxybk.com/; Understand, , https://scitools-com.luisamigo.proxybk.com/},
correspondence_address1={Dang, B.H.; Naval Surface Warfare Center, United States; email: dangbinh@yahoo.com},
publisher={Institute of Electrical and Electronics Engineers Inc.},
issn={07347502},
isbn={9781728168616},
coden={CPISD},
language={English},
abbrev_source_title={Conf Proc IEEE SOUTHEASTCON},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Trautsch2020107,
author={Trautsch, A. and Herbold, S. and Grabowski, J.},
title={A Longitudinal Study of Static Analysis Warning Evolution and the Effects of PMD on Software Quality in Apache Open Source Projects (Summary)},
journal={Lecture Notes in Informatics (LNI), Proceedings - Series of the Gesellschaft fur Informatik (GI)},
year={2020},
volume={P-310},
pages={107-108},
doi={10.18420/SE2021_41},
note={cited By 2; Conference of Fachtagung des GI-Fachbereichs Softwaretechnik, Software Engineering 2021 - Conference of the GI Software Engineering Section, SE 2021 ; Conference Date: 22 February 2021 Through 26 February 2021;  Conference Code:177561},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85126599681&doi=10.18420%2fSE2021_41&partnerID=40&md5=07c4d10f0d615912ea03cb77006cf7ef},
affiliation={Georg-August-Universität Göttingen, Institut für Informatik, Goldschmidtstrasse 7, Göttingen, 37077, Germany; Karlsruher Institut für Technologie, AIFB, Kaiserstr. 89, Karlsruhe, 76133, Germany},
abstract={This article summarizes our work originally published in the journal Empirical Software Engineering [THG20]. © 2020 Gesellschaft fur Informatik (GI). All rights reserved.},
author_keywords={Quality evolution;  Software metrics;  Software quality;  Static code analysis},
keywords={Computer software selection and evaluation;  Open systems;  Quality control;  Static analysis, Empirical Software Engineering;  Longitudinal study;  Open source projects;  Quality evolution;  Software metrics;  Software Quality;  Static code analysis, Open source software},
references={Trautsch, Alexander, Herbold, Steffen, Grabowski, Jens, A Longitudinal Study of Static Analysis Warning Evolution and the Effects of PMD on Software Quality in Apache Open Source Projects (2020) Empirical Software Engineering; Trautsch, Fabian, Herbold, Steffen, Makedonski, Philip, Grabowski, Jens, Addressing problems with replicability and validity of repository mining studies through a smart data platform (2017) Empirical Software Engineering, , August; Trautsch, Alexander, Trautsch, Fabian, Herbold, Steffen, Ledel, Benjamin, Grabowski, Jens, The SmartSHARK Ecosystem for Software Repository Mining (2020) Proceedings of the ACM/IEEE»2nd International Conference on Software Engineering: Companion Proceedings. ICSE'20, pp. 25-28. , Association for Computing Machinery, New York, NY, USA},
editor={Koziolek A., Schaefer I., Seidl C.},
sponsors={eck*cellent IT GmbH; IAV GmbH Ingenieurgesellschaft},
publisher={Gesellschaft fur Informatik (GI)},
issn={16175468},
isbn={9783885797043},
language={English},
abbrev_source_title={Lect. Notes Informatics (LNI), Proc. - Series Ges. Inform. (GI)},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Chai202054,
author={Chai, Z. and Zhao, C.},
title={Enhanced random forest with concurrent analysis of static and dynamic nodes for industrial fault classification},
journal={IEEE Transactions on Industrial Informatics},
year={2020},
volume={16},
number={1},
pages={54-66},
doi={10.1109/TII.2019.2915559},
art_number={8709808},
note={cited By 54},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85078272442&doi=10.1109%2fTII.2019.2915559&partnerID=40&md5=76fb2da9805701c873eff4ddb82bc80e},
affiliation={College of Control Science and Engineering, Zhejiang University, Hangzhou, 310027, China},
abstract={In recent years, machine learning algorithms have been successfully applied to industrial processes. However, the concurrent analysis of static and dynamic representations has not been comprehensively addressed for industrial process fault classification. In this paper, an enhanced random forest algorithm with a concurrent analysis of static and dynamic nodes is proposed to address this issue for fault classification. First, the standard slow feature analysis is modified by designing a new slowness index that is more suitable for a supervised fault classification problem. Second, a feature ranking process is conducted to determine the significant features. These features, which substitute the raw variables in the nodes, are used to build the enhanced random forest. Using this scheme, the significant static and dynamic nodes are selected to enhance the discriminative ability and interpretation. Additionally, the slow features that are uncorrelated are more suitable for training the forest than the initial correlated variables, and the dynamic characteristics of industrial processes are thus comprehensively addressed. The application of the proposed method to fault classification is evaluated by both the Tennessee Eastman benchmark and a real-world three-phase flow process. The experimental results show that the proposed method outperforms the traditional learning algorithms with remarkable accuracy and F1 score that both exceed 70% for the 16-class Tennessee Eastman process and exceed 99% for the 4-class three-phase flow process. The selected significant features reveal that both the static and dynamic information play important roles in fault classification. © 2005-2012 IEEE.},
author_keywords={Fault diagnosis;  random forest;  slow feature analysis (SFA);  static and dynamic nodes},
keywords={Benchmarking;  Decision trees;  Failure analysis;  Learning algorithms;  Machine learning, Discriminative ability;  Dynamic characteristics;  Dynamic nodes;  Dynamic representation;  Random forest algorithm;  Random forests;  Slow Feature Analysis(SFA);  Tennessee Eastman process, Classification (of information)},
funding_details={2019C01048, 2019C03100},
funding_details={National Natural Science Foundation of ChinaNational Natural Science Foundation of China, NSFC, U1709211},
funding_details={Zhejiang UniversityZhejiang University, ZJU, ICT1900329},
funding_details={State Key Laboratory of Industrial Control TechnologyState Key Laboratory of Industrial Control Technology},
funding_text 1={Manuscript received November 28, 2018; revised February 26, 2019 and April 6, 2019; accepted May 4, 2019. Date of publication May 8, 2019; date of current version January 4, 2020. This work was supported in part by the Zhejiang Key Research and Development Project under Grant 2019C03100 and Grant 2019C01048, in part by the National Natural Science Foundation of China (NSFC)-Zhejiang Joint Fund for the Integration of Industrialization and Informatization under Grant U1709211, and in part by the Open Research Project of the State Key Laboratory of Industrial Control Technology, Zhejiang University, China, under Grant ICT1900329. Paper no.-TII-18-3140. (Corresponding author: Chunhui Zhao.) The authors are with the College of Control Science and Engineering, Zhejiang University, Hangzhou 310027, China (e-mail:, chaizheng@zju.edu.cn; chhzhao@zju.edu.cn).},
references={Song, B., Shi, H., Fault detection and classification using quality supervised double-layer method (2018) IEEE Trans. Ind. Electron., 65 (10), pp. 8163-8172. , Oct; Zhao, C., Gao, F., Fault subspace selection approach combined with analysis of relative changes for reconstruction modeling and multifault diagnosis (2016) IEEE Trans. Control Syst. Technol., 24 (3), pp. 928-939. , May; Zhao, S., Huang, B., Liu, F., Fault detection and diagnosis of multiplemodel systems with mismodeled transition probabilities (2015) IEEE Trans. Ind. Electron., 62 (8), pp. 5063-5071. , Aug; Jiang, Y., Yin, S., Recent advances in key-performance-indicator oriented prognosis and diagnosis with a MATLAB toolbox: Db-kit (2019) IEEE Trans. Ind. Inform., 15 (5), pp. 2849-2858. , May; Jiang, Y., Yin, S., Kaynak, O., Data-driven monitoring and safety control of industrial cyber-physical systems: Basics and beyond (2018) IEEE Access., 6, pp. 47374-47384; Li, W., Zhao, C., Gao, F., Linearity evaluation and variable subset partition based hierarchical process modeling and monitoring (2018) IEEE Trans. Ind. Electron., 65 (3), pp. 2683-2692. , Mar; Pilario, K.E.S., Cao, Y., Canonical variate dissimilarity analysis for process incipient fault detection (2018) IEEE Trans. Ind. Inform., 14 (12), pp. 5308-5315. , Dec; Zhao, C., Sun, H., Dynamic distributed monitoring strategy for largescale nonstationary processes subject to frequent varying conditions under closed-loop control (2019) IEEE Trans. Ind. Electron., 66 (6), pp. 4749-4758. , Jun; Deng, X., Tian, X., Chen, S., Harris, C.J., Nonlinear process fault diagnosis based on serial principal component analysis (2018) IEEE Trans. Neural Netw. Learn. Syst., 29 (3), pp. 560-572. , Mar; Ding, S.X., (2008) Model-Based Fault Diagnosis Techniques, , Berlin, Germany: Springer-Verlag; Doucet, A., Freitas, N., Gorden, N., (2001) Sequential Monte Carlo Methods in Practice, , New York, NY, USA: Springer-Verlag; Chu, Y.-H., Qin, S.J., Han, C., Fault detection and operation mode identification based on pattern classification with variable selection (2004) Eng. Chem. Res., 43 (7), pp. 1701-1710. , Mar; Chiang, L.H., Kotanchek, M.E., Kordon, A.K., Fault diagnosis based on Fisher discriminant analysis and support vector machines (2004) Comput. Chem. Eng., 28 (8), pp. 1389-1401. , Jul; Deng, F., Guo, S., Zhou, R., Chen, J., Sensor multifault diagnosis with improved support vectormachines (2017) IEEE Trans. Autom. Sci. Eng., 14 (2), pp. 1053-1063. , Apr; Gao, X., Hou, J., An improved SVM integrated GS-PCA fault diagnosis approach of Tennessee Eastman process (2016) Neurocomput., 174, pp. 906-911. , Jan; Zhao, C., Gao, F., A nested-loop fisher discriminant analysis algorithm (2015) Chemometrics Intell. Lab. Syst., 146, pp. 396-406. , Aug; Zhang, Y.W., Zhou, H., Qin, S.J., Chai, T., Decentralized fault diagnosis of large-scale processes using multiblock kernel partial least squares (2010) IEEE Trans. Ind. Inform., 6 (1), pp. 3-10. , Feb; Wang, G., Yin, S., Quality-related fault detection approach based on orthogonal signal correction and modified PLS (2015) IEEE Trans. Ind. Inform., 11 (2), pp. 398-405. , Apr; Jiang, Y., Yin, S., Recursive total principle component regression based fault detection and its application to vehicular cyber-physical systems (2018) IEEE Trans. Ind. Inform., 14 (4), pp. 1415-1423. , Apr; Yu, W., Zhao, C., Sparse exponential discriminant analysis and its application to fault diagnosis (2018) IEEE Trans. Ind. Electron., 65 (7), pp. 5931-5940. , Jul; Xiong, J., Zhang, Q., Sun, G., Zhu, X., Liu, M., Li, Z., An information fusion fault diagnosis method based on dimensionless indicators with static discounting factor and KNN (2016) IEEE Sens. J., 16 (7), pp. 2060-2069. , Apr; Wu, H., Zhao, J., Deep convolutional neural network model based chemical process fault diagnosis (2018) Comput. Chem. Eng., 115 (12), pp. 185-197. , Jul; Cerrada, M., Zurita, G., Cabrera, D., Sánchez, R.-V., Artés, M., Li, C., Fault diagnosis in spur gears based on genetic algorithm and random forest (2016) Mech. Syst. Signal Process., 70, pp. 87-103. , Mar; Yang, B.-S., Di, X., Han, T., Random forests classifier for machine fault diagnosis (2008) J. Mech. Sci. Technol., 22 (9), pp. 1716-1725. , Sep; Fernández-Delgado, M., Cernadas, E., Barro, S., Amorim, D., Do we need hundreds of classifiers to solve real world classification problems? (2014) J. Mach. Learn. Res., 15 (1), pp. 3133-3181. , Jan; Breiman, L., Random forests (2001) Mach. Learn., 45 (1), pp. 5-32. , Oct; Shevchik, S., Saeidi, F., Meylan, B., Wasmer, K., Prediction of failure in lubricated surfaces using acoustic time-frequency features and random forest algorithm (2017) IEEE Trans. Ind. Inform., 13 (4), pp. 1541-1553. , Aug; Gislason, P.O., Benediktsson, J.A., Sveinsson, J.R., Random forests for land cover classification (2006) Pattern Recognit. Lett., 27 (4), pp. 294-300. , Mar; Cheng, Y., Qiao, X., Wang, X., Yu, Q., Random forest classifier for zero-shot learning based on relative attribute (2018) IEEE Trans. Neural Netw. Learn. Syst., 29 (5), pp. 1662-1674. , May; Park, Y., Kweon, I., Ambiguous surface defect image classification of AMOLED displays in smartphones (2016) IEEE Trans. Ind. Inform., 12 (2), pp. 597-607. , Apr; Louppe, G., (2014) Understanding Random Forests: From Theory to Practice, , Ph.D. dissertation, Dept. Elect. Eng. Comput. Sci., Univ. Liege, Liege, Belgium Jul; Yu, J., Rashid, M.M., A novel dynamic Bayesian network-based networked process monitoring approach for fault detection, propagation identification, and root cause diagnosis (2013) AIChE J., 59 (7), pp. 2348-2365. , Jul; Cai, B., Huang, L., Xie, M., Bayesian networks in fault diagnosis (2017) IEEE Trans. Ind. Inform., 13 (5), pp. 2227-2240. , Oct; Strasser, S., Sheppard, J., Diagnostic alarm sequence maturation in timed failure propagation graphs (2011) Proc. IEEE AUTOTESTCON, National Harbor, MD, USA, pp. 158-165. , Sep; Mosterman, P., Biswas, G., Monitoring, prediction and fault isolation in dynamic physical systems (1997) Proc.Nat.Conf. Artif. Intell., Providence, RI, USA, pp. 100-105; Yu, W., Zhao, C., Online fault diagnosis in industrial processes using multimodel exponential discriminant analysis algorithm (2019) IEEE Trans. Control. Syst. Technol., 27 (3), pp. 1317-1325. , May; Ku, W., Storer, R.H., Georgakis, C., Disturbance detection and isolation by dynamic principal component analysis (1995) Chemometrics Intell. Lab. Syst., 30 (1), pp. 179-196. , Nov; Chen, J., Liu, K.-C., On-line batch process monitoring using dynamic PCA and dynamic PLS models (2002) Chem. Eng. Sci., 57 (1), pp. 63-75. , Jan; Odiowei, P.E.P., Cao, Y., Nonlinear dynamic processmonitoring using canonical variate analysis and kernel density estimations (2010) IEEE Trans. Ind. Inform., 6 (1), pp. 36-45. , Feb; Shang, C., Yang, F., Gao, X., Huang, X., Suykens, J.A., Huang, D., Concurrent monitoring of operating condition deviations and process dynamics anomalies with slow feature analysis (2015) AIChE J., 61 (11), pp. 3666-3682. , Nov; Zhang, S., Zhao, C., Slow feature analysis based batch process monitoring with comprehensive interpretation of operation condition deviation and dynamic anomaly (2019) IEEE Trans. Ind. Electron., 66 (5), pp. 3773-3783. , May; Zhang, S., Zhao, C., Huang, B., Simultaneous static and dynamic analysis for fine-scale identification of process operation statuses IEEE Trans. Ind. Inform., , to be published; Zhao, C., Huang, B., A full-condition monitoring method for nonstationary dynamic chemical processes with cointegration and slow feature analysis (2018) AIChE J., 64 (5), pp. 1662-1681. , May; Shang, C., Huang, B., Yang, F., Huang, D., Slow feature analysis for monitoring and diagnosis of control performance (2016) J. Process Control, 39, pp. 21-34. , Mar; Yu, W., Zhao, C., Recursive exponential slow feature analysis for fine-scale adaptive processes monitoring with comprehensive operation status identification IEEE Trans. Ind. Inform., , to be published; Wiskott, L., Sejnowski, T.J., Slow feature analysis: Unsupervised learning of invariances (2002) Neural Comput., 14 (4), pp. 715-770. , Apr; Downs, J.J., Vogel, E.F., A plant-wide industrial process control problem (1993) Comput. Chem. Eng., 17 (3), pp. 245-255. , Mar; Ruiz-Cárcel, C., Cao, Y., Mba, D., Lao, L., Samuel, R., Statistical process monitoring of a multiphase flow facility (2015) Control Eng. Pract., 42, pp. 74-88. , Sep; Breiman, L., Friedman, J., Stone, C.J., Olshen, R.A., (1984) Classification and Regression Trees, , Boca Raton, FL, USA: CRC Press; Breiman, L., Bagging predictors (1996) Mach. Learn., 24 (2), pp. 123-140. , Aug; Ho, T.K., The random subspace method for constructing decision forests (1998) IEEE Trans. Pattern Anal. Mach. Intell., 20 (8), pp. 832-844. , Aug; Chiang, L.H., Russell, E.L., Braatz, R.D., (2000) Fault Detection and Diagnosis in Industrial Systems, , London, U.K.: Springer-Verlag; Stehman, S.V., Selecting and interpreting measures of thematic classification accuracy (1997) Remote Sens. Environ., 62 (1), pp. 77-89. , Oct; Dietterich, T.G., An experimental comparison of three methods for constructing ensembles of decision trees: Bagging, boosting, and randomization (2000) Mach. Learn., 40 (2), pp. 139-157. , Aug; Cao, Y., (2015) A Benchmark Case for Statistical Process Monitoring-Cranfield Multiphase Flow Facility, , http://uk-mathworks-com.luisamigo.proxybk.com/matlabcentral/fileexchange/50938-a-benchmark-case-for-statistical-process-monitoring-cranfieldmultiphase-flow-facility},
correspondence_address1={Zhao, C.; College of Control Science and Engineering, China; email: chhzhao@zju.edu.cn},
publisher={IEEE Computer Society},
issn={15513203},
language={English},
abbrev_source_title={IEEE Trans. Ind. Inf.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Bai2020587,
author={Bai, J.-J. and Wang, Y.-P. and Lawall, J. and Hu, S.-M.},
title={DSAC: Effective static analysis of sleep-in-atomic-context bugs in kernel modules},
journal={Proceedings of the 2018 USENIX Annual Technical Conference, USENIX ATC 2018},
year={2020},
pages={587-599},
note={cited By 9; Conference of 2018 USENIX Annual Technical Conference, USENIX ATC 2018 ; Conference Date: 11 July 2018 Through 13 July 2018;  Conference Code:155411},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85064171264&partnerID=40&md5=fca0e6fab1b3ab867a8de933883cc388},
affiliation={Tsinghua University, China; Sorbonne Université, Inria, LIP6, France},
abstract={In a modern OS, kernel modules often use spinlocks and interrupt handlers to monopolize a CPU core to execute concurrent code in atomic context. In this situation, if the kernel module performs an operation that can sleep at runtime, a system hang may occur. We refer to this kind of concurrency bug as a sleep-in-atomic-context (SAC) bug. In practice, SAC bugs have received insufficient attention and are hard to find, as they do not always cause problems in real executions. In this paper, we propose a practical static approach named DSAC, to effectively detect SAC bugs and automatically recommend patches to help fix them. DSAC uses four key techniques: (1) a hybrid of flow-sensitive and -insensitive analysis to perform accurate and efficient code analysis; (2) a heuristics-based method to accurately extract kernel interfaces that can sleep at runtime; (3) a path-check method to effectively filter out repeated reports and false bugs; (4) a pattern-based method to automatically generate recommended patches to help fix the bugs. We evaluate DSAC on kernel modules (drivers, file systems, and network modules) of the Linux kernel, and on the FreeBSD and NetBSD kernels, and in total find 401 new real bugs. 272 of these bugs have been confirmed by the relevant kernel maintainers, and 43 patches generated by DSAC have been applied by kernel maintainers. © Proceedings of the 2018 USENIX Annual Technical Conference, USENIX ATC 2018. All rights reserved.},
keywords={Atoms;  Heuristic methods;  Program debugging;  Sleep research;  Static analysis, Code analysis;  Concurrency bugs;  File systems;  Flow sensitive;  Kernel modules;  Linux kernel;  Pattern based method;  Static approach, Linux},
references={Amani, S., Chubb, P., Donaldson, A.F., Legg, A., Ong, K.C., Ryzhyk, L., Zhu, Y., Automatic verification of active device drivers (2014) ACM SIGOPS Operating System Review, 48, pp. 106-118; Anderson, Z., Brewer, E., Condit, J., Ennals, R., Gay, D., Harren, M., Necula, G.C., Zhou, F., Beyond bug-finding: Sound program analysis for Linux (2007) Proceedings of the 11th International Workshop on Hot Topics in Operating Systems (HotOS), pp. 1-6; Bai, J.J., Liu, H.Q., Wang, Y.P., Hu, S.M., Runtime checking for paired functions in device drivers (2014) Proceedings of the 21st Asia-Pacific Software Engineering Conference (APSEC), pp. 407-414; Bai, J.J., Wang, Y.P., Liu, H.Q., Hu, S.M., Mining and checking paired functions in device drivers using characteristics fault injection (2016) Information and Software Technology, 73, pp. 122-133; Ball, T., Bounimova, E., Cook, B., Levin, V., Lichtenberg, J., McGarvey, C., Ondrusek, B., Ustuner, A., Thorough static analysis of device drivers (2006) Proceedings of the 1st European Conference on Computer Systems (EuroSys), pp. 73-85; Cadar, C., Dunbar, D., Engler, D., Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs (2008) Proceedings of the 8th International Conference on Operating Systems Design and Implementation (OSDI), pp. 209-224; Cai, Y., Zhang, J., Cao, L., Liu, J., A deployable sampling strategy for data race detection (2016) Proceedings of the 24th International Symposium on Foundations of Software Engineering (FSE), pp. 810-821; Chew, L., Lie, D., Kivati: Fast detection and prevention of atomic violations (2010) Proceedings of 5th European Conference on Computer Systems (EuroSys), pp. 307-320; Chou, A., Yang, J., Chelf, B., Hallem, S., Engler, D., An empirical study of operating systems errors (2001) Proceedings of the 18th International Symposium on Operating Systems Principles (SOSP), pp. 73-88; Corbet, J., Atomic context and kernel API design (2008) Linux Weekly News (LWN.Net), , https://lwn-net.luisamigo.proxybk.com/Articles/274695/; Corbet, J., Rubini, A., Hartman, G.K., Spinlocks and atomic context (2005) Linux Device Drivers, 3rd Edition, pp. 118-119; Cotroneo, D., Natella, R., Russo, S., Assessment and improvement of hang detection in the Linux operating system (2009) Proceedings of the 28th International Symposium on Reliable Distributed Systems (SRDS), pp. 288-294; Deligiannis, P., Donaldson, A.F., Rakamaric, Z., Fast and precise symbolic analysis of concurrency bugs in device drivers (2015) Proceedings of the 30th International Conference on Automated Software Engineering (ASE), pp. 166-177; Deshmukh, J., Emerson, E.A., Sankaranarayanan, S., Symbolic deadlock analysis in concurrent libraries and their clients (2009) Proceedings of the 24th International Conference on Automated Software Engineering (ASE), pp. 480-491; Engler, D., Ashcraft, K., RacerX: Effective, static detection of race conditions and deadlocks (2003) Proceedings of the 19th International Symposium on Operating Systems Principles (SOSP), pp. 237-252; Engler, D., Chelf, B., Chou, A., Hallem, S., Checking system rules using system-specific, programmer-written compiler extensions (2000) Proceedings of the 4th International Conference on Operating Systems Design and Implementation (OSDI), pp. 1-16; Erickson, J., Musuvathi, M., Burckhardt, S., Olynyk, K., Effective data-race detection for the kernel (2010) Proceedings of the 9th International Conference on Operating Systems Design and Implementation (OSDI), pp. 151-162; Fonseca, P., Rodrigues, R., Brandenburg, B.B., Ski: Exposing kernel concurrency bugs through systematic schedule exploration (2014) Proceedings of the 11th International Conference on Operating Systems Design and Implementation (OSDI), pp. 415-431; Fonseca, P., Li, C., Rodrigues, R., Finding complex concurrency bugs in large multi-threaded applications (2011) Proceedings of the 6th European Conference on Computer Systems (EuroSys), pp. 215-228; Ganapathy, V., Renzelmann, M.J., Balakrishnan, A., Swift, M.M., Jha, S., The design and implementation of microdrivers (2008) Proceedings of the 13th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), pp. 168-178; Gu, Z., Barr, E.T., Hamilton, D.J., Su, Z., Has the bug really been fixed? (2010) Proceedings of the 32nd International Conference on Software Engineering (ICSE), pp. 55-64; Kahlon, V., Bootstrapping: A technique for scalable flow and context-sensitive pointer alias analysis (2008) Proceedings of the 29th International Conference on Programming Language Design and Implementation (PLDI), pp. 249-259; LaRosa, C., Xiong, L., Mandelberg, K., Frequent pattern mining for kernel trace data (2008) Proceedings of the 23rd Annual ACM Symposium on Applied Computing (SAC), pp. 880-885; Lawall, J., Brunel, J., Palix, N., Hansen, R.R., Stuart, H., Muller, G., WYSiWIB: A declarative approach to finding API protocols and bugs in Linux code (2009) Proceedings of the 39th International Conference on Dependable Systems and Networks (DSN), pp. 43-53; Leslie, B., Chubb, P., Fitzroy-Dale, N., Götz, S., Gray, C., Macpherson, L., Potts, D., Heiser, G., User-level device drivers: Achieved performance (2005) Journal of Computer Science and Technology (JCST), 20 (5), pp. 654-664; Li, Q., Jiang, Y., Gu, T., Xu, C., Ma, J., Ma, X., Lu, J., Effectively manifesting concurrency bugs in Android apps (2016) Proceedings of the 23rd Asia-Pacific Software Engineering Conference (APSEC), pp. 209-216; Li, Z., Zhou, Y., PR-Miner: Automatically extracting implicit programming rules and detecting violations in large software code (2005) Proceedings of the 13th International Symposium on Foundations of Software Engineering (FSE), pp. 306-315; Liu, H., Li, G., Lukman, J.F., Li, J., Lu, S., Gunawi, H.S., Tian, C., DCatch: Automatically detecting distributed concurrency bugs in cloud systems (2017) Proceedings of the 22nd International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), pp. 677-691; Love, R., Interrupt context (2010) Linux Kernel Development, 3rd Edition, p. 122; Mao, J., Chen, Y., Xiao, Q., Shi, Y., RiD: Finding reference count bugs with inconsistent path pair checking (2016) Proceedings of the 21st International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), pp. 531-544; Min, C., Kashyap, S., Lee, B., Song, C., Kim, T., Crosschecking semantic correctness: The case of finding file system bugs (2015) Proceedings of the 25th Symposium on Operating Systems Principles (SOSP), pp. 361-377; Naik, M., Aiken, A., Whaley, J., Effective static race detection for Java (2006) Proceedings of the 27th International Conference on Programming Language Design and Implementation (PLDI), pp. 308-319; Padioleau, Y., Lawall, J., Hansen, R.R., Muller, G., Documenting and automating collateral evolutions in Linux device drivers (2008) Proceedings of the 3rd European Conference on Computer Systems (EuroSys), pp. 247-260; Palix, N., Thomas, G., Saha, S., Calvès, C., Muller, G., Lawall, J., Faults in Linux 2.6 (2014) ACM Transactions on Computer Systems (TOCS), 32 (2), pp. 41-440; Renzelmann, M.J., Swift, M.M., DeCAF: Moving device drivers to a modern language (2009) Proceedings of the 2009 Conference on USENIX Annual Technical Conference (USENIX ATC), pp. 1-14; Ryzhyk, L., Zhu, Y., Heiser, G., The case for active device drivers (2010) Proceedings of the 1st Aisa-Pacific Workshop on Systems (APSys), pp. 25-30; Saha, S., Lozi, J.P., Thomas, G., Lawall, J., Muller, G., Hector: Detecting resource-release omission faults in error-handling code for systems software (2013) Proceedings of the 43rd International Conference on Dependable Systems and Networks (DSN), pp. 1-12; Santhiar, A., Kanade, A., Static deadlock detection for asynchronous C# programs (2017) Proceedings of the 38th International Conference on Programming Language Design and Implementation (PLDI), pp. 292-305; Swift, M.M., Bershad, B.N., Levy, H.M., Improving the reliability of commodity operating systems (2003) Proceedings of the 19th International Symposium on Operating Systems Principles (SOSP), pp. 207-222; Tan, L., Zhou, Y., Padioleau, Y., Acomment: Mining annotations from comments and code to detect interrupt related concurrency bugs (2011) Proceedings of the 33rd International Conference on Software Engineering (ICSE), pp. 11-20; Vojdani, V., Apinis, K., Rõtov, V., Seidl, H., Vene, V., Vogler, R., Static race detection for device drivers: The Goblint approach (2016) Proceedings of the 31st International Conference on Automated Software Engineering (ASE), pp. 391-402; Weeratunge, D., Zhang, X., Sumner, W.N., Jagannathan, S., Analyzing concurrency bugs using dual slicing (2010) Proceedings of the 19th International Symposium on Software Testing and Analysis (ISSTA), pp. 253-264; Williams, A., Thies, W., Ernst, M.D., Static deadlock detection for Java libraries (2005) Proceedings of the 19th European Conference on Object-Oriented Programming (ECOOP), pp. 602-629; Witkowski, T., Blanc, N., Kroening, D., Weissenbacher, G., Model checking concurrent Linux device drivers (2007) Proceedings of the 22nd International Conference on Automated Software Engineering (ASE), pp. 501-504; Yang, J., Evans, D., Bhardwaj, D., Bhat, T., Das, M., Perracotta: Mining temporal API rules from imperfect traces (2006) Proceedings of 28th International Conference on Software Engineering (ICSE), pp. 282-291; Yu, H., Xue, J., Huo, W., Feng, X., Zhang, Z., Level by level: Making flow- And context-sensitive pointer analysis scalable for millions of lines of code (2010) Proceedings of the 8th International Symposium on Code Generation and Optimization (CGO), pp. 218-229; Yun, I., Min, C., Si, X., Jiang, Y., Kim, T., Naik, M., Apisan: Sanitizing API usages through semantic crosschecking (2016) Proceedings of the 25th USENIX Security Symposium, pp. 363-378; Zhu, Y., Li, Y., Xue, J., Tan, T., Shi, J., Shen, Y., Ma, C., What is system hang and how to handle it (2012) Proceedings of the 23rd International Symposium on Software Reliability Engineering (ISSRE), pp. 141-150; Clang Compiler, , http://clang-llvm-org.luisamigo.proxybk.com/; Linux Kernel Document for Memory Allocation, , https://www-kernel-org.luisamigo.proxybk.com/doc/htmldocs/kernel-api/APIkmalloc.html; LLVM Compiler Infrastructure, , https://llvm-org.luisamigo.proxybk.com/; MYSQL Database, , https://www-mysql-com.luisamigo.proxybk.com/; Syzkaller Tool, , https://github-com.luisamigo.proxybk.com/google/syzkaller/; Faults in Linux: Ten Years Later, , http://faultlinux-lip6-fr.luisamigo.proxybk.com/},
sponsors={et al.; Facebook; NetApp; NSF; Oracle; The USENIX Association},
publisher={USENIX Association},
isbn={9781939133021},
language={English},
abbrev_source_title={Proc. USENIX Annu. Tech. Conf., USENIX ATC},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Pereira2019,
author={Pereira, J.D. and Campos, J.R. and Vieira, M.},
title={An exploratory study on machine learning to combine security vulnerability alerts from static analysis tools},
journal={2019 9th Latin-American Symposium on Dependable Computing, LADC 2019 - Proceedings},
year={2019},
doi={10.1109/LADC48089.2019.8995685},
art_number={8995685},
note={cited By 6; Conference of 9th Latin-American Symposium on Dependable Computing, LADC 2019 ; Conference Date: 19 November 2019 Through 21 November 2019;  Conference Code:157857},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85081575794&doi=10.1109%2fLADC48089.2019.8995685&partnerID=40&md5=1f4fbb5a6c567fcc3ca4bd901e0220ad},
affiliation={Department of Informatics Engineering, University of Coimbra, Coimbra, Portugal},
abstract={Due to time-to-market needs and cost of manual validation techniques, software systems are often deployed with vulnerabilities that may be exploited to gain illegitimate access/ control, ultimately resulting in non-negligible consequences. Static Analysis Tools (SATs) are widely used for vulnerability detection, where the source code is analyzed without executing it. However, the performance of SATs varies considerably and a high detection rate usually comes with significant false alarms. Recent studies considered combining various SATs to improve the overall detection ability, but they do not allow exploring different performance trade-offs, as basic and rigid rules are normally followed. Machine Learning (ML) algorithms have shown promising results in several complex problems, due to their ability to fit specific needs. This paper presents an exploratory study on the combination of the output of SATs through ML algorithms to improve vulnerability detection while trying to reduce false alarms. The dataset consists of SQL Injection (SQLi) and Cross-Site Scripting (XSS) vulnerabilities detected by five different SATs in a large set of WordPress plugins developed in PHP. Results show that, for the case of SQLi, a false alarm reduction is possible without compromising the vulnerabilities detected, and that using ML allows trade-offs (e.g., reduction in false alarms at the expense of a few vulnerabilities) that are not possible with existing techniques. The paper also proposes a regression-based approach for ranking source code files considering estimates of vulnerabilities computed using the output of SATs. Results show that the approach allows creating a ranking of the source code files that largely overlaps the real ranking (based on real known vulnerabilities). © 2019 IEEE.},
author_keywords={Machine Learning;  Security;  Static Code Analysis;  Vulnerability Detection},
keywords={Access control;  Alarm systems;  Commerce;  Computer programming languages;  Economic and social effects;  Errors;  Large dataset;  Learning systems;  Static analysis, Cross-site scripting;  False alarm reductions;  High detection rate;  Performance trade-off;  Security;  Security vulnerabilities;  Static code analysis;  Vulnerability detection, Machine learning},
funding_details={Horizon 2020 Framework ProgrammeHorizon 2020 Framework Programme, H2020, 777154, POCI-01-0145-FEDER-032504},
funding_details={European CommissionEuropean Commission, EC},
funding_details={FundaÃ§Ã£o para a CiÃªncia e a TecnologiaFundaÃ§Ã£o para a CiÃªncia e a Tecnologia, FCT, SFRH/BD/140221/2018},
funding_text 1={This work was partially funded by FCT grant no. SFRH/BD/140221/2018, project ATMOSPHERE, funded by the European Commission under the Cooperation Programme, H2020 grant agreement no. 777154, and project METRICS, funded by the FCT - agreement no POCI-01-0145-FEDER-032504. We would like to thank Paulo Nunes for the support and for the datasets.},
funding_text 2={ACKNOWLEDGMENT This work was partially funded by FCT grant no. SFRH/BD/140221/2018, project ATMOSPHERE, funded by the European Commission under the Cooperation Programme, H2020 grant agreement no. 777154, and project METRICS, funded by the FCT – agreement no POCI-01-0145-FEDER-032504. We would like to thank Paulo Nunes for the support and for the datasets.},
references={Moore, S., Keen, E., (2018) Gartner Forecasts Worldwide Information Security Spending to Exceed $124 Billion in 2019, , https://www:gartner:com/en/newsroom/press-releases/2018-08-15-gartner-forecasts-worldwide-information-security-spending-to-exceed-124-billion-in-2019, accessed: 2019-06-03; Voigt, P., Bussche, A., (2017) The EU General Data Protection Regulation (GDPR): A Practical Guide, , 1st ed. Springer Publishing Company, Incorporated; Muscat, I., (2017) Cyber Threats Vs Vulnerabilities Vs Risks, , https://www:acunetix:com/blog/articles/cyber-threats-vulnerabilities-risks/, accessed: 2019-06-20; Liu, B., Shi, L., Cai, Z., Li, M., Software vulnerability discovery techniques: A survey (2012) 2012 Fourth International Conference on Multimedia Information Networking and Security, pp. 152-156. , Nov; Mead, N., Hough, E., Ii, T.S., (2005) Security Quality Requirements Engineering Technical Report, , http://resources.luisamigo.proxybk.com:sei:cmu:edu/library/assetview:cfm?AssetID=7657, Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, Tech. Rep. CMU/SEI-2005-TR-009; Turpin, K., (2010) OWASP Secure Coding Practices-Quick Reference Guide, , https://www:owasp:org/images/0/08/OWASPSCPQuickReferenceGuidev2:pdf, accessed: 2019-06-20; Chess, B., West, J., (2007) Secure Programming with Static Analysis, , 1st ed. Addison-Wesley Professional; Chess, B., McGraw, G., Static analysis for security (2004) IEEE Security Privacy, 2 (6), pp. 76-79. , Nov; Algaith, A., Nunes, P.J.C., Jose, F.D.R.S., Gashi, I., Vieira, M., Finding SQL injection and cross site scripting vulnerabilities with diverse static analysis tools (2018) 2018 14th European Dependable Computing Conference (EDCC), pp. 57-64; Russell, R.L., Kim, L.Y., Hamilton, L.H., Lazovich, T., Harer, J.A., Ozdemir, O., Ellingwood, P.M., McConley, M.W., (2018) Automated Vulnerability Detection in Source Code Using Deep Representation Learning, , CoRR abs/1807.04320; Walden, J., Stuckman, J., Scandariato, R., Predicting vulnerable components: Software metrics vs text mining (2014) 2014 IEEE 25th International Symposium on Software Reliability Engineering, pp. 23-33. , Nov; Alves, H., Fonseca, B., Antunes, N., Experimenting machine learning techniques to predict vulnerabilities (2016) 2016 Seventh Latin-American Symposium on Dependable Computing (LADC), pp. 151-156. , Oct; Nunes, P., Medeiros, I., Fonseca, J., Neves, N., Correia, M., Vieira, M., On combining diverse static analysis tools for web security: An empirical study (2017) 2017 13th European Dependable Computing Conference (EDCC), pp. 121-128. , Sep; Van Der Stock, A., Glas, B., Smithline, N., Gigler, T., (2017) OWASP Top 10-2017-The Ten Most Critical Web Application Security Risks, , https://www:owasp:org/images/7/72/OWASPTop10-2017%28en%29:pdf:pdf, accessed: 2019-05-04; Louridas, P., Static code analysis (2006) IEEE Software, 23 (4), pp. 58-61. , July; Austin, A., Holmgreen, C., Williams, L., A comparison of the efficiency and effectiveness of vulnerability discovery techniques (2013) Information and Software Technology, 55 (7), pp. 1279-1288; Ayewah, N., Pugh, W., Hovemeyer, D., Morgenthaler, J.D., Penix, J., Using static analysis to find bugs (2008) IEEE Software, 25 (5), pp. 22-29. , Sep; Kieyzun, A., Guo, P.J., Jayaraman, K., Ernst, M.D., Automatic creation of SQL injection and cross-site scripting attacks (2009) Proceedings of the 31st International Conference on Software Engineering, Ser. ICSE '09, pp. 199-209. , Washington, DC, USA: IEEE Computer Society; Nunes, P., Medeiros, I., Fonseca, J.C., Neves, N., Correia, M., Vieira, M., Benchmarking static analysis tools for web security (2018) IEEE Transactions on Reliability, 67 (3), pp. 1159-1175. , Sep; Antunes, N., Vieira, M., Comparing the effectiveness of penetration testing and static code analysis on the detection of SQL injection vulnerabilities in web services (2009) 2009 15th IEEE Pacific Rim International Symposium on Dependable Computing, pp. 301-306. , Nov; Scandariato, R., Walden, J., Joosen, W., Static analysis versus penetration testing: A controlled experiment (2013) 2013 IEEE 24th International Symposium on Software Reliability Engineering (ISSRE), pp. 451-460. , Nov; Austin, A., Williams, L., One technique is not enough: A comparison of vulnerability discovery techniques (2011) 2011 International Symposium on Empirical Software Engineering and Measurement, pp. 97-106. , Sep; Alpaydin, E., (2014) Introduction to Machine Learning, , The MIT Press; De Sá, J.M., (2001) Pattern Recognition, , 1st ed. Springer-Verlag Berlin Heidelberg; Chidamber, S.R., Kemerer, C.F., A metrics suite for object oriented design (1994) IEEE Transactions on Software Engineering, 20 (6), pp. 476-493. , June; (2014) WPScan Vulnerability Database, , https://wpvulndb.luisamigo.proxybk.com:com, WPScan accessed: 2019-06-13; Trego, M., (2017) Top 10 Programming Languages Used in Web Development, , https://blog.luisamigo.proxybk.com:stoneriverelearning:com/top-10-programminglanguages-used-in-web-development/, accessed: 2019-08-15; Nunes, P.J.C., Fonseca, J., Vieira, M., PhpSAFE: A security analysis tool for oop web application plugins (2015) 2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, pp. 299-306. , June; Dahse, J., Holz, T., Simulation of built-in php features for precise static code analysis (2014) Symposium on Network and Distributed System Security (NDSS), 01, pp. 23-26; Medeiros, I., Neves, N.F., Correia, M., Automatic detection and correction of web application vulnerabilities using data mining to predict false positives (2014) Proceedings of the 23rd International Conference on World Wide Web, Ser. WWW '14, pp. 63-74. , New York, NY, USA: ACM; Jovanovic, N., Kruegel, C., Kirda, E., Pixy: A static analysis tool for detecting Web application vulnerabilities (2006) 2006 IEEE Symposium on Security and Privacy (S P'06), pp. 6-263. , May; Hauzar, D., Kofron, J., Framework for static analysis of php applications (2015) 29th European Conference on Object-Oriented Programming (ECOOP 2015), Ser. Leibniz International Proceedings in Informatics (LIPIcs), J. T. Boyland, Ed, 37, pp. 689-711. , Dagstuhl, Germany: Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik; Campos, J.R., Vieira, M., Costa, E., Propheticus: Machine learning framework for the development of predictive models for reliable and secure software (2019) 2019 IEEE 30th International Symposium on Software Reliability Engineering (ISSRE). IEEE, , Oct; Pedregosa, F., Varoquaux, G., Gramfort, A., Michel, V., Thirion, B., Grisel, O., Blondel, M., Dubourg, V., Scikit-learn: Machine learning in python (2011) Journal of Machine Learning Research, 12, pp. 2825-2830. , Oct},
sponsors={Coordenacao de Aperfeioamento de Pessoal de Nivel Superior-Brasil (CAPES); IEEE; Instituto Metropole Digital (IMD); Sociedade Brasileira de Computacao (SBC); Universidade Federal do Rio Grande do Norte (UFRN)},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781728166223},
language={English},
abbrev_source_title={Latin-Am. Symp. Dependable Comput., LADC - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Afshar20191369,
author={Afshar, M. and Abdi, S. and Ebrahimi, M. and Abolfazl Mortazavizadeh, S.},
title={Static Eccentricity Fault Detection in Brushless Doubly-Fed Induction Machines based on Motor Current Signature Analysis},
journal={IECON Proceedings (Industrial Electronics Conference)},
year={2019},
volume={2019-October},
pages={1369-1374},
doi={10.1109/IECON.2019.8926698},
art_number={8926698},
note={cited By 5; Conference of 45th Annual Conference of the IEEE Industrial Electronics Society, IECON 2019 ; Conference Date: 14 October 2019 Through 17 October 2019;  Conference Code:155980},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85084054812&doi=10.1109%2fIECON.2019.8926698&partnerID=40&md5=671cf2a93fd426f438cf3277a50141f1},
affiliation={Isfahan University of Technology, Department of Electrical and Computer Engineering, Isfahan, Iran; School of Engineering, University of East Anglia, Norwich, United Kingdom},
abstract={In this paper a new rotor eccentricity fault detection method is proposed for the first time for brushless doubly-fed induction machines (BDFIMs). Due to the fact that BDFIMs are attractive alternatives to doubly-fed induction machines for wind power generation, paying attention to their fault detection is essential. Existing fault detection methods for conventional induction machines can not be directly applied to the BDFIM due to its special rotor structure and stator winding configurations as well as the complex magnetic fields. In this paper a new fault detection technique based on stator current harmonic analysis is proposed to detect rotor eccentricity faults in the BDFIM. The validity of the proposed fault detection method is verified by analytical winding function method and finite element analysis on a prototype D180 BDFIM. © 2019 IEEE.},
author_keywords={Brushless doubly-fed induction machines;  Finite element analysis;  Motor current signature analysis;  Nested-loop rotor slot harmonics;  Static eccentricity fault;  Winding function method},
keywords={Electric power generation;  Induction motors;  Industrial electronics;  Rotors (windings);  Stators;  Wind power;  Winding, Brushless doubly-fed induction machines;  Doubly fed induction machines;  Fault detection techniques;  Motor current signature analysis;  Static eccentricities;  Stator current harmonics;  Stator winding configurations;  Winding function methods, Fault detection},
references={McMahon, R.A., Wan, X., Abdi-Jalebi, E., Tavner, P.J., Roberts, P.C., Jagiela, M., The bdfm as a generator in wind turbines (2006) Power Electronics and Motion Control Conference, 2006. 12th International, pp. 1859-1865. , IEEE; Shao, S., Abdi, E., McMahon, R., Low-cost variable speed drive based on a brushless doubly-fed motor and a fractional unidirectional converter (2012) IEEE Transactions on Industrial Electronics, 59 (1), pp. 317-325; Ferreira, A., Stephan, R.M., Araujo, M.R., Compensating characteristics of a brushless doubly-fed machine (2003) IEEE International Symposium on Industrial Electronics, 1, pp. 375-378; Xiong, F., Wang, X., Design and performance analysis of a bdfim for stand-alone ship shaft generator systems (2011) International Conference on Electrical and Control Engineering, pp. 2114-2117; Oraee, A., Abdi, E., Abdi, S., McMahon, R., Tavner, P.J., Effects of rotor winding structure on the bdfm equivalent circuit parameters (2015) IEEE Transactions on Energy Conversion, 30 (4), pp. 1660-1669; Choudhary, A., Goyal, D., Shimi, S.L., Akula, A., Condition monitoring and fault diagnosis of induction motors: A review (2018) Archives of Computational Methods in Engineering, pp. 1-18; Sharifi, R., Ebrahimi, M., Detection of stator winding faults in induction motors using three-phase current monitoring (2011) ISA Transactions, 50 (1), pp. 14-20; Zhongming, Y., Bin, W., A review on induction motor online fault diagnosis (2000) Power Electronics and Motion Control Conference, 2000. Proceedings. The Third International, 3, pp. 1353-1358; Jung, J., Lee, J., Kwon, B., Online diagnosis of induction motors using mcsa (2006) IEEE Transactions on Industrial Electronics, 53 (6), pp. 1842-1852; Nandi, S., Ahmed, S., Toliyat, H.A., Detection of rotor slot and other eccentricity related harmonics in a three phase induction motor with different rotor cages (2001) IEEE Transactions on Energy Conversion, 16 (3), pp. 253-260; Thomson, W.T., Fenger, M., Current signature analysis to detect induction motor faults (2001) IEEE Industry Applications Magazine, 7 (4), pp. 26-34; Ebrahimi, B.M., Faiz, J., Roshtkhari, M.J., Static-, dynamic-, and mixed-eccentricity fault diagnoses in permanent-magnet synchronous motors (2009) IEEE Transactions on Industrial Electronics, 56 (11), pp. 4727-4739; Abdi, S., Abdi, E., McMahon, R., A study of unbalanced magnetic pull in brushless doubly fed machines (2015) IEEE Transactions on Energy Conversion, 30 (3), pp. 1218-1227; Choi, S., Toliyat, H.A., Robust condition monitoring and fault diagnosis of variable speed induction motor drives (2012) Ph.D. Dissertation, , PhD thesis/Seungdeog Choi.-College Station.-2010.-167 p; Roberts, P.C., A study of brushless doubly-fed (induction) machines contributions in machine analysis (2004) Design and Control; Toliyat, H.A., Arefeen, M.S., Parlos, A.G., A method for dynamic simulation of air-gap eccentricity in induction machines (1996) IEEE Transactions on Industry Applications, 32 (4), pp. 910-918; Abdi, S., Abdi, E., McMahon, R., A study of unbalanced magnetic pull in brushless doubly fed machines (2015) IEEE Transactions on Energy Conversion, 30 (3), pp. 1218-1227; Faiz, J., Ebrahimi, B.M., Akin, B., Toliyat, H.A., Comprehensive eccentricity fault diagnosis in induction motors using fe method (2009) IEEE Transactions on Magnetics, 45 (3), pp. 1764-1767; Gorginpour, H., Oraee, H., McMahon, R.A., Performance description of bdfim in its asynchronous and variable speed synchronous modes (2011) Journal of Electromagnetic Analysis and Applications, 3 (12), p. 490; Choqueuse, V., Benbouzid, M.E.H., Current frequency spectral subtraction and its contribution to induction machines bearings condition monitoring (2013) IEEE Transactions on Energy Conversion, 28 (1), pp. 135-144},
sponsors={IEEE; IEEE Industrial Electronics Society (IES)},
publisher={IEEE Computer Society},
isbn={9781728148786},
coden={IEPRE},
language={English},
abbrev_source_title={IECON Proc},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Imtiaz2019323,
author={Imtiaz, N. and Murphy, B. and Williams, L.},
title={How Do Developers Act on Static Analysis Alerts? An Empirical Study of Coverity Usage},
journal={Proceedings - International Symposium on Software Reliability Engineering, ISSRE},
year={2019},
volume={2019-October},
pages={323-333},
doi={10.1109/ISSRE.2019.00040},
art_number={8987507},
note={cited By 6; Conference of 30th IEEE International Symposium on Software Reliability Engineering, ISSRE 2019 ; Conference Date: 28 October 2019 Through 31 October 2019;  Conference Code:157630},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85081112010&doi=10.1109%2fISSRE.2019.00040&partnerID=40&md5=14e530889fd060d9d5581a3eaaab4d77},
affiliation={Department of Computer Science, North Carolina State University, United States; Microsoft Research, Cambridge, United Kingdom},
abstract={Static analysis tools (SATs) often fall short of developer satisfaction despite their many benefits. An understanding of how developers in the real-world act on the alerts detected by SATs can help improve the utility of these tools and determine future research directions. The goal of this paper is to aid researchers and tool makers in improving the utility of static analysis tools through an empirical study of developer action on the alerts detected by Coverity, a state-of-the-art static analysis tool. In this paper, we analyze five open source projects as case studies (Linux, Firefox, Samba, Kodi, and Ovirt-engine) that have been actively using Coverity over a period of at least five years. We investigate the alert occurrences and developer triage of the alerts from the Coverity database; identify the alerts that were fixed through code changes (i.e. actionable) by mining the commit history of the projects; analyze the time an alert remain in the code base (i.e. lifespan) and the complexity of code changes (i.e. fix complexity) in fixing the alert. We find that 27.4% to 49.5% (median: 36.7%) of the alerts are actionable across projects, a rate higher than previously reported. We also find that the fixes of Coverity alerts are generally low in complexity (2 to 7 lines of code changes in the affected file, median: 4). However, developers still take from 36 to 245 days (median: 96) to fix these alerts. Finally, our data suggest that severity and fix complexity may correlate with an alert's lifespan in some of the projects. © 2019 IEEE.},
author_keywords={Alerts;  Developer action;  Static analysis;  Tools;  Warnings},
keywords={Codes (symbols);  Computer operating systems;  Open source software;  Software reliability;  Tools, Alerts;  Commit history;  Developer action;  Empirical studies;  Future research directions;  Open source projects;  State of the art;  Warnings, Static analysis},
funding_details={National Science FoundationNational Science Foundation, NSF, 1451172},
funding_text 1={We thank the reviewers and the RealSearch group for their feedback; Sylvestre Ledru from Mozilla for his help throughout the research; the maintainers of the studied projects for giving us access to the data and replying to our queries. This material is based in part upon work supported by the National Science Foundation under grant number 1451172.},
references={https://named-data-net.luisamigo.proxybk.com/codebase/platform/documentation/ndn-platform-development-guidelines/cpp-code-guidelines/, C++, C, C#, Java and JavaScript code guidelines; https://clang-analyzer-llvm-org.luisamigo.proxybk.com/, Clang-static-analyzer; https://scan-coverity-com.luisamigo.proxybk.com/; http://findbugs-sourceforge-net.luisamigo.proxybk.com/; https://git-scm-com.luisamigo.proxybk.com/, Git-distributed-is-The-new-centralized; www-semmle-com;.luisamigo.proxybk.com https://www-sonarqube-org.luisamigo.proxybk.com/; https://travis-ci-com.luisamigo.proxybk.com/; www-veracode-com;.luisamigo.proxybk.com Almossawi, A., Lim, K., Sinha, T., (2006) Analysis Tool Evaluation: Coverity Prevent, pp. 7-11. , Pittsburgh, PA: Carnegie Mellon University; https://blog-parasoft-com.luisamigo.proxybk.com/what-is-The-shift-left-approach-tosoftware-testing, Parasoft Arthur Hicken, Cheif Evangelist. What is shift-left testing?; Ayewah, N., Pugh, W., Hovemeyer, D., Dmorgenthaler, J., Penix, J., Using static analysis to find bugs (2008) IEEE Software, 25 (5), pp. 22-29; Ayewah, N., Pugh, W., Morgenthaler, D.J., Penix, J., Yu Zhou, Q., Evaluating static analysis defect warnings on production software (2007) Proceedings of the 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, pp. 1-8. , ACM; Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the state of static analysis: A large-scale evaluation in open source software (2016) 2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), 1, pp. 470-481. , IEEE; Al Bessey, K.B., Chelf, B., Chou, A., Fulton, B., Hallem, S., Henri-Gros, C., Kamsky, A., Engler, D., A few billion lines of code later: Using static analysis to find bugs in the real world (2010) Communications of the ACM, 53 (2), pp. 66-75; Calcagno, C., Distefano, D., Infer: An automatic program verifier for memory safety of c programs (2011) NASA Formal Methods Symposium, pp. 459-465. , Springer; Cheirdari, F., Karabatis, G., Analyzing false positive source code vulnerabilities using static analysis tools (2018) 2018 IEEE International Conference on Big Data (Big Data), pp. 4782-4788. , IEEE; Chimdyalwar, B., Darke, P., Chavda, A., Vaghani, S., Chauhan, A., Eliminating static analysis false positives using loop abstraction and bounded model checking (2015) International Symposium on Formal Methods, pp. 573-576. , Springer; Christakis, M., Bird, C., What developers want and need from program analysis: An empirical study (2016) 2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 332-343. , IEEE; Jared Demott, Dr., Static Code Analysis: Scan All Your Code for Bugs, , https://www.youtube.com/watch?v=Heor8BVa4A0&t=641s; Monteiro, E., Canedo, E., Luz, W., Pinto, G., Marcilio, D., Bonifcio, R., Are static analysis violations really fixed? A closer look at realistic usage of sonarqube (2019) The 27th IEEE/ACM International Conference on Program Comprehension (ICPC2019); Emanuelsson, P., Nilsson, U., A comparative study of industrial static analysis tools (2008) Electronic Notes in Theoretical Computer Science, 217, pp. 5-21; https://enlyft-com.luisamigo.proxybk.com/tech/products/coverity, Companies using coverity; Esfahani, H., Fietz, J., Ke, Q., Kolomiets, A., Lan, E., Mavrinac, E., Schulte, W., Kandula, S., Cloudbuild: Microsoft's distributed and caching build service (2016) Proceedings of the 38th International Conference on Software Engineering Companion, pp. 11-20. , ACM; Fowler, J., Cohen, L., Jarvis, P., (2013) Practical Statistics for Field Biology, , John Wiley &Sons; Guo, P.J., Engler, D.R., Linux kernel developer responses to static analysis bug reports (2009) USENIX Annual Technical Conference, pp. 285-292; Heckman, S., Williams, L., On establishing a benchmark for evaluating static analysis alert prioritization and classification techniques (2008) Proceedings of the Second ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, pp. 41-50. , ACM; Heckman, S., Williams, L., A model building process for identifying actionable static analysis alerts (2009) 2009 International Conference on Software Testing Verification and Validation, pp. 161-170. , IEEE; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Information and Software Technology, 53 (4), pp. 363-387; Imtiaz, N., Rahman, A., Farhana, E., Williams, L., Challenges with responding to static analysis tool alerts (2019) Proceedings of the 16th International Conference on Mining Software Repositories, pp. 245-249. , IEEE Press; Imtiaz, N., Williams, L., A synopsis of static analysis alerts on open source software (2019) Proceedings of the 6th Annual Symposium on Hot Topics in the Science of Security, p. 12. , ACM; Johnson, B., Pandita, R., Smith, J., Ford, D., Elder, S., Murphy-Hill, E., Heckman, S., Sadowski, C., A crosstool communication study on program analysis tool notifications (2016) Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 73-84. , ACM; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don't software developers use static analysis tools to find bugs? (2013) Proceedings of the 2013 International Conference on Software Engineering, pp. 672-681. , IEEE Press; Kim, S., Ernst, M.D., Which warnings should i fix first? (2007) Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 45-54. , ACM; Li, F., Paxson, V., A large-scale empirical study of security patches (2017) Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, pp. 2201-2215. , ACM; Liu, K., Kim, D., Bissyande, T.F., Yoo, S., Traon, Y.L., Mining fix patterns for findbugs violations (2018) IEEE Transactions on Software Engineering; https://www-synopsys-com.luisamigo.proxybk.com/content/dam/synopsys/sig-assets/reports/SCAN-Report-2017.pdf,lastchecked=26.04.2019, Synopsys Mel Llaguno, Open Source Solution Manager. 2017 coverity scan report. open source softwarethe road ahead; (2016), https://news-ycombinator-com.luisamigo.proxybk.com/item?id=8810157, Hacker News. Twitter outage report; Post, H., Sinz, C., Kaiser, A., Gorges, T., Reducing false positives by combining abstract interpretation and bounded model checking (2008) 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, pp. 188-197. , IEEE; Sadowski, C., Aftandilian, E., Eagle, A., Miller-Cushon, L., Jaspan, C., (2018) Lessons from Building Static Analysis Tools at Google; Sadowski, C., Van Gogh, J., Jaspan, C., Soderberg, E., Winter, C., Tricorder: Building a program analysis ecosystem (2015) Proceedings of the 37th International Conference on Software Engineering, 1, pp. 598-608. , IEEE Press; https://en-wikipedia-org.luisamigo.proxybk.com/wiki/Coverity, Synopsys. Coverity; https://community-synopsys-com.luisamigo.proxybk.com/s/article/How-to-write-A-function-model-to\protect\discretionary{\char\hyphenchar\font}{}{}eliminate-A-false-positive-in-A-C-application, Synposis. How to write a function model to eliminate a false positive in a c application; (2014), https://www-synopsys-com.luisamigo.proxybk.com/blogs/software-security/apple-security-55471-aka-goto-fail/, Synopsys Editorial Team. Coverity report on the 'goto fail' bug February; Zampetti, F., Scalabrino, S., Oliveto, R., Canfora, G., Di Penta, M., How open source projects use static code analysis tools in continuous integration pipelines (2017) 2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR), pp. 334-344. , IEEE},
editor={Wolter K., Schieferdecker I., Gallina B., Cukier M., Natella R., Ivaki N., Laranjeiro N.},
sponsors={Bosch; Concordia; et al.; German Testing Board e.V.; iRights.Lab; Verteilte Intelligente Systeme e.V.},
publisher={IEEE Computer Society},
issn={10719458},
isbn={9781728149813},
coden={PSSRF},
language={English},
abbrev_source_title={Proc. Int. Symp. Softw. Reliab. Eng.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Johansson20197,
author={Johansson, B. and Papadopoulos, A.V. and Nolte, T.},
title={Concurrency defect localization in embedded systems using static code analysis: An evaluation},
journal={Proceedings - 2019 IEEE 30th International Symposium on Software Reliability Engineering Workshops, ISSREW 2019},
year={2019},
pages={7-12},
doi={10.1109/ISSREW.2019.00034},
art_number={8990266},
note={cited By 0; Conference of 30th IEEE International Symposium on Software Reliability Engineering Workshops, ISSREW 2019 ; Conference Date: 28 October 2019 Through 31 October 2019;  Conference Code:157721},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85080936338&doi=10.1109%2fISSREW.2019.00034&partnerID=40&md5=e04879ef9ba0e3708a55eca7a9e5f24a},
affiliation={ABB Industrial Automation, Process Control Platform, Västeras, Sweden; Mälardalen University, Västeras, Sweden},
abstract={Defects with low manifestation probability, such as concurrency defects, are difficult to find during testing. When such a defect manifests into an error, the low likelihood can make it time-consuming to reproduce the error and find the root cause. Static Code Analysis (SCA) tools have been used in the industry for decades, mostly for compliance checking towards guidelines such as MISRA. Today, these tools are capable of sophisticated data and execution flow analysis. Our work, presented in this paper, evaluates the feasibility of using SCA tools for concurrency defect detection and localization. Earlier research has categorized concurrency defects. We use this categorization and develop an object-oriented C++ based test suite containing defects from each category. Secondly, we use known and real defects in existing products' source code. With these two approaches, we perform the evaluation, using tools from some of the largest commercial actors in the field. Based on our results, we provide a discussion about how to use static code analysis tools for concurrency defect detection in complex embedded real-Time systems. © 2019 IEEE.},
author_keywords={Concurrency;  Defects;  Real Time;  RTOS;  SCA;  Static Code Analysis},
keywords={C++ (programming language);  Codes (symbols);  Compliance control;  Embedded systems;  Interactive computer systems;  Object oriented programming;  Real time systems;  Software reliability;  Technical presentations, Compliance checking;  Concurrency;  Defect localizations;  Embedded real time systems;  Real time;  RTOS;  Static code analysis;  Static code analysis tools, Defects},
funding_details={Stiftelsen för Strategisk ForskningStiftelsen för Strategisk Forskning, SSF},
funding_details={Stiftelsen för Kunskaps- och KompetensutvecklingStiftelsen för Kunskaps- och Kompetensutveckling, KKS},
funding_text 1={This work is funded by The Knowledge Foundation (KKS), project ARRAY, and by The Swedish Foundation for Strategic Research (SSF).},
references={Godefroid, P., Nagappan, N., Concurrency at Microsoft: An exploratory survey (2008) CAV Ws Expl. Conc. Efficiently and Correctly; Concurrency Test Suite and Tool Configuration, , https://github-com.luisamigo.proxybk.com/Burne77a/ConcurrencySCATestSuite, Accessed: 2019-06-26; Shousha, M., Labiche, Y., Briand, L.C., A UML/MARTE model analysis method for uncovering scenarios leading to starvation and deadlocks in concurrent systems (2010) IEEE Tr.Soft.Eng, 38; Fu, H., Wang, Z., Chen, X., Fan, X., A systematic survey on automated concurrency bug detection, exposing, avoidance, and fixing techniques (2018) Software Quality Journal, 26 (3), pp. 855-889; Wang, W., Wang, Z., Wu, C., Yew, P.-C., Shen, X., Yuan, X., Li, J., Guan, Y., Localization of concurrency bugs using shared memory access pairs (2014) 29th ACM/ IEEE ASE, pp. 611-622; Joshi, P., Park, C.-S., Sen, K., Naik, M., A randomized dynamic program analysis technique for detecting real deadlocks (2009) SIGPLAN Not, 44 (6), pp. 110-120; Asadollah, S.A., Sundmark, D., Eldh, S., Hansson, H., A runtime verification tool for detecting concurrency bugs in freertos embedded software (2018) 17th ISPDC, pp. 172-179; Zheng, J., Williams, L., Nagappan, N., Snipes, W., Hudepohl, J.P., Vouk, M.A., On the value of static analysis for fault detection in software (2006) IEEE Trans. Soft. Eng, 32 (4), pp. 240-253; Wagner, S., Deissenboeck, F., Aichner, M., Wimmer, J., Schwalb, M., An evaluation of two bug pattern tools for Java (2008) 1st Int. Conf. on Software Testing, Verification, and Validation, pp. 248-257; Arusoaie, A., Ciobaca, S., Craciun, V., Gavrilut, D., Lucanu, D., A comparison of open-source static analysis tools for vulnerability detection in C/C++ code (2017) 19th SYNASC, pp. 161-168; Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the state of static analysis: A large-scale evaluation in open source software (2016) IEEE 23rd SANER, 1, pp. 470-481; Manzoor, N., Munir, H., Moayyed, M., Comparison of static analysis tools for finding concurrency bugs (2012) IEEE 23rd ISSRE Wksp; Al Mamun, M.A., Khanam, A., Grahn, H., Feldt, R., Comparing four static analysis tools for Java concurrency bugs (2010) Third Swedish W. on Multi-Core Computing MCC-10; Kester, D., Mwebesa, M., Bradbury, J.S., How good is static analysis at finding concurrency bugs? (2010) 10th IEEE SCAM, pp. 115-124; Voung, J.W., Jhala, R., Lerner, S., Relay: Static race detection on millions of lines of code (2007) ESEC-FSE ?07, pp. 205-214; Dsilva, V., Kroening, D., Weissenbacher, G., A survey of automated techniques for formal software verification (2008) IEEE Tr.Comp.-Aided Design of Integrated Circuits and Sys, 27 (7); Emanuelsson, P., Nilsson, U., A comparative study of industrial static analysis tools (2008) E.Notes Theor. Comput. Sci, 217, pp. 5-21; Cousot, P., Cousot, R., Abstract interpretation: A unified lattice model for static analysis of programs by construction or approximation of fixpoints (1977) 4th ACM SIGPLAN-SIGACT POPL, pp. 238-252; Kästner, D., Mauborgne, L., Ferdinand, C., Detecting safety-And security-relevant programming defects by sound static analysis (2017) 2nd Int. Conf. on Cyber-Technologies and Cyber-Systems, 2; Mińe, A., Delmas, D., Towards an industrial use of sound static analysis for the verification of concurrent embedded avionics software (2015) 12th Int. Conf. on Emb. Soft., EMSOFT ?15, pp. 65-74; Dubey, A., Saha, K., Hudepohl, J., Reporting and assessment of static analysis policies in a globally distributed organization (2014) IEEE 9th Int. Conf. on Global Software Engineering, pp. 84-89; Shiraishi, S., Mohan, V., Marimuthu, H., Test suites for benchmarks of static analysis tools (2015) IEEE ISSREW, pp. 12-15; Lu, S., Li, Z., Qin, F., Tan, L., Zhou, P., Zhou, Y., Bugbench: Benchmarks for evaluating bug detection tools (2005) W. on the Evaluation of Software Defect Detection Tools; Cifuentes, C., Hoermann, C., Keynes, N., Li, L., Long, S., Mealy, E., Mounteney, M., Scholz, B., BegBunch: Benchmarking for C bug detection tools (2009) 2nd DEFECTS ?09, pp. 16-20; Static analysis tool study methodology (2011) Center for Assured Software (CSA), NSA; https://samate-nist-gov.luisamigo.proxybk.com/SRD, NIST. national institute of standards and technology samate reference dataset (srd) project Access: 2019-03-06; Codesonar, , https://www-grammatech-com.luisamigo.proxybk.com/products/codesonar, Accessed: 2019-04-12; Klocwork, , https://www-roguewave-com.luisamigo.proxybk.com/products-services/klocwork, Accessed: 2019-04-12; Parasoft C/C++ Test, , https://www-parasoft-com.luisamigo.proxybk.com/ctest/static-Analysis, Accessed: 2019-04-12; PolySpace Bug Finder, , https://se-mathworks-com.luisamigo.proxybk.com/products/polyspace.html, Accessed: 2019-03-06; Tan, L., Liu, C., Li, Z., Wang, X., Zhou, Y., Zhai, C., Bug characteristics in open source software (2014) Emp.Sw.Eng, 19 (6); Asadollah, S.A., Hansson, H., Sundmark, D., Eldh, S., Towards classification of concurrency bugs based on observable properties (2015) COUFLESS ?15, pp. 41-47},
editor={Wolter K., Schieferdecker I., Gallina B., Cukier M., Natella R., Ivaki N., Laranjeiro N.},
sponsors={Bosch; Concordia; et al.; German Testing Board e.V.; iRights.Lab; Verteilte Intelligente Systeme e.V.},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781728151380},
language={English},
abbrev_source_title={Proc. - IEEE Int. Symp. Softw. Reliab. Eng. Workshops, ISSREW},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{BinTarek20193223,
author={Bin Tarek, M.T. and Das, S. and Sozer, Y.},
title={Comparative analysis of static eccentricity faults of double stator single rotor axial flux permanent magnet motors},
journal={2019 IEEE Energy Conversion Congress and Exposition, ECCE 2019},
year={2019},
pages={3223-3228},
doi={10.1109/ECCE.2019.8913075},
art_number={8913075},
note={cited By 6; Conference of 11th Annual IEEE Energy Conversion Congress and Exposition, ECCE 2019 ; Conference Date: 29 September 2019 Through 3 October 2019;  Conference Code:155637},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85076781648&doi=10.1109%2fECCE.2019.8913075&partnerID=40&md5=6506ff9e3d1f302494e6b357cc9d6873},
affiliation={University of Akron, Dept. of Electrical Computer Engineering, Akron, United States},
abstract={This paper studies the impact of static eccentricity faults on a double stator single rotor (DSSR) axial flux interior permanent motors (AFIPMs) by using 3-D finite element (FE) analysis. Eccentricity in DSSR motors can lead to mechanical faults and vibrations. However, eccentricity fault detection method for DSSR AFIPMs have not been studied before. In this paper, three types of static eccentricity named angle, space and combination of angle and space eccentricity have been modeled in a DSSR AFIPM by using 3-D FE analysis. After that, the motor was simulated for different degrees of static eccentricity. Different performance parameters such as torque, air gap flux density and back electromotive force (BEMF) of the coils for all three types of static eccentricities have been analyzed for different eccentricity levels. This study indicates that the lower order harmonics of BEMF can be effectively used to identify and compare the types of static eccentricity present in the DSSR type AFIPMs. © 2019 IEEE.},
author_keywords={Axial flux permanent magnet (AFPM) motor;  Back electromotive force (EMF);  Double stator;  Finite element analysis.;  Static eccentricity (SE);  Torque},
references={Campbell, P., The magnetic circuit of an axial field D. C. electrical machine (1975) IEEE Transactions on Magnetics, 11 (5), pp. 1541-1543. , September; Leung, W.S., Chan, J.C.C., A new design approach for axial-field electrical machines (1980) IEEE Transactions on Power Apparatus and Systems, PAS-99 (4), pp. 1679-1685. , July; Giulii Capponi, F., De Donato, G., Caricchi, F., Recent advances in axial-flux permanent-magnet machine technology (2012) IEEE Transactions on Industry Applications, 48 (6), pp. 2190-2205. , Nov.-Dec; Aydin, M., Huang, S., Lipo, T., Axial flux permanent magnet disc machines: A re-view (2004) Proc. Of the 2004 SPEEDAM, pp. 61-71. , May; Yang, Y., Shih, G., Optimal design of an axial-flux permanent-magnet motor for an electric vehicle based on driving scenarios (2016) Energies, 9 (4), p. 285; Hua, W., Zhou, L., Investigation of a co-axial dual-mechanical ports flux-switching permanent magnet machine for hybrid electric vehicles (2015) Energies, 8 (12), pp. 14361-14379; Nguyen, T.D., Tseng, K., Zhang, S., Nguyen, H.T., A novel axial flux permanent-magnet machine for flywheel energy storage system: Design and analysis (2011) IEEE Transactions on Industrial Electronics, 58 (9), pp. 3784-3794. , Sept; Chalmers, B.J., Spooner, E., An axial-flux permanent-magnet generator for a gearless wind energy system (1999) IEEE Transactions on Energy Conversion, 14 (2), pp. 251-257. , June; Wang, Q., Chen, L., Chai, F., Gan, L., No-load magnetic field distribution in axial flux permanent magnet machine with static eccentricity (2017) 2017 20th International Conference on Electrical Machines and Systems (ICEMS), pp. 1-5. , Sydney, NSW; Guo, B., Huang, Y., A fast analytic model of axial flux permanent magnet machines with static/dynamic axis eccentricity (2016) Journal of Magnetics, 21 (4), pp. 554-560; Li, J., Qu, R., Cho, Y., Effect of unbalanced and inclined air-gap in double-stator inner-rotor axial flux permanent magnet machine (2014) 2014 International Conference on Electrical Machines (ICEM), pp. 502-508. , Berlin; Huang, Y., Guo, B., Guo, Y., Zhu, J., Hemeida, A., Sergeant, P., Analytical modeling of axial flux PM machines with eccentricities (2017) International Journal of Applied Electromagnetics and Mechanics, 53 (4), pp. 757-777; Marignetti, F., Vahedi, A., Mirimani, S., An analytical approach to eccentricity in axial flux permanent magnet synchronous generators for wind turbines (2015) Electric Power Components and Systems, 43 (8-10), pp. 1039-1050; Ajily, E., Ardebili, M., Abbaszadeh, K., Magnet defect and rotor eccentricity modeling in axial-flux permanent-magnet machines via 3-d field reconstruction method (2016) IEEE Transactions on Energy Conversion, 31 (2), pp. 486-495. , June; Huang, Y., Guo, B., Hemeida, A., Sergeant, P., Analytical modeling of static eccentricities in axial flux permanent-magnet machines with concentrated windings (2016) Energies, 9 (11), p. 892; Mirimani, S.M., Vahedi, A., Marignetti, F., Di Stefano, R., An online method for static eccentricity fault detection in axial flux machines (2015) IEEE Transactions on Industrial Electronics, 62 (3), pp. 1931-1942. , March; Mirimani, S.M., Vahedi, A., Marignetti, F., De Santis, E., Static eccentricity fault detection in single-stator-single-rotor axial-flux permanent-magnet machines (2012) IEEE Transactions on Industry Applications, 48 (6), pp. 1838-1845. , Nov.-Dec; Mirimani, S.M., Vahedi, A., Marignetti, F., Effect of inclined static eccentricity fault in single stator-single rotor axial flux permanent magnet machines (2012) IEEE Transactions on Magnetics, 48 (1), pp. 143-149. , Jan; Mirimani, S.M., Vahedi, A., Marignetti, F., Effect of static eccentricity in back-EMF of Axial Flux Permanent Magnet Machines (2012) International Symposium on Power Electronics Power Electronics, Electrical Drives, Automation and Motion, pp. 464-468. , Sorrento; Ogidi, O.O., Barendse, P.S., Khan, M.A., Detection of static eccentricities in axial-flux permanent-magnet machines with concentrated windings using vibration analysis (2015) IEEE Transactions on Industry Applications, 51 (6), pp. 4425-4434. , Nov.-Dec; Tekgun, B., Husain, T., Das, S., Sozer, Y., Hamdan, M., Design of a novel interior permanent magnet axial flux machine (2017) 2017 IEEE Energy Conversion Congress and Exposition (ECCE), pp. 314-320. , Cincinnati, OH; Gieras, Wang, R., Kamper, M., (2008) Axial Flux Permanent Magnet Brushless Machines, , 2nd ed. New York: Springer Science},
sponsors={IEEE Industry Application Society (IAS); IEEE Power Electronics Society (PELS)},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781728103952},
language={English},
abbrev_source_title={IEEE Energy Convers. Congr. Expo., ECCE},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Koti20193088,
author={Koti, H.N. and Chen, H. and Sun, Y. and Demerdash, N.A.O.},
title={On shortening the numerical transient in time-stepping finite element analysis of induction motors under static and dynamic eccentricity faults},
journal={2019 IEEE Energy Conversion Congress and Exposition, ECCE 2019},
year={2019},
pages={3088-3095},
doi={10.1109/ECCE.2019.8913269},
art_number={8913269},
note={cited By 2; Conference of 11th Annual IEEE Energy Conversion Congress and Exposition, ECCE 2019 ; Conference Date: 29 September 2019 Through 3 October 2019;  Conference Code:155637},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85076768931&doi=10.1109%2fECCE.2019.8913269&partnerID=40&md5=3a591a9f4d33fdf2c4d3b3d99a7980fe},
affiliation={Marquette University, Electrical and Computer Engineering Department, Milwaukee, United States},
abstract={Modeling induction motors under static and dynamic eccentricity faults, arising from bearing "wear and tear", through Time-Stepping Finite Element (TSFE) methods suffers from the resulting long numerical transient response before numerical convergence is achieved. In this paper, this lengthy transient phenomenon is substantially reduced through the so-called "Virtual Blocked Rotor (VBR)" approach implemented here. This approach starts with an initial calculation of the motor permeabilities and skin effect corresponding to the operating condition of the induction motor. Such calculations are performed in an FE Eddy-Current frequency-domain solver reflecting the voltage supply magnitude, value of slip, type and degree of eccentricity fault. The calculated permeabilities are imported into the TSFE simulation of the faulty induction motor and the performance characteristics of the faulty motor are extracted for further analysis. In this paper, static and dynamic eccentricities are applied to the induction motor under study. It is observed here that this approach successfully solves the problem of a lengthy numerical transient response and saves computational time in the analysis process. © 2019 IEEE.},
author_keywords={Dynamic eccentricity;  Induction motors;  Shortening numerical transients in finite element simulation;  Static eccentricity;  Time-stepping finite element analysis},
funding_details={Marine Technology SocietyMarine Technology Society, MTS},
funding_text 1={The funding sponsorship was provided in part by the SEMPEED Consortium at Marquette University through its member corporations, Motor Design Limited, Kollmorgen Corp, Regal Beloit America Inc, Grundfos Corp, and MTS System Corp, that are gratefully acknowledged by these authors. The authors would also like to acknowledge ANSYS Inc. for their support by providing access to Maxwell 2D/3D FEA simulation software.},
references={Dorrell, D.G., Calculation of unbalanced magnetic pull in small cage induction motors with skewed rotors and dynamic rotor eccentricity (1996) IEEE Trans. Energy Convers., 11 (3), pp. 483-488. , Sept; Williamson, S., Smith, A.C., Steady-state analysis of 3-phase cage motors with rotor-bar and end-ring faults (1982) IEE Proceedings B-Electric Power Applications., 129 (3), pp. 93-100. , May; Bossio, G., De Angelo, C., Solsona, J., Garcia, G., Valla, M.I., A 2-D model of the induction machine: An extension of the modified winding function approach (2004) IEEE Trans. Energy Convers., 19 (1), pp. 144-150. , March; Faiz, J., Ghasemi Bijan, M., Estimation of induction machine inductances using three-dimensional magnetic equivalent circuit (2015) IET Electr. Power Appl., 9 (2), pp. 117-127. , Feb; Faiz, J., Ebrahimi, B.M., Akin, B., Toliyat, H.A., Comprehensive eccentricity fault diagnosis in induction motors using finite element method (2009) IEEE Trans. Magn., 45 (3), pp. 1764-1777. , Mar; Tenhunen, A., Calculation of eccentricity harmonics of the air-gap flux density in induction machines by impulse method (2005) IEEE Trans. Magn., 41 (5), pp. 1904-1907. , May; Arkkio, A., (1987) Analysis of Induction Motors Based on the Numerical Solution of the Magnetic Field and Circuit Equations, (59). , Ph. D. thesis, Acta Polytechnica Scandinavica, Helsinki; Bangura, J.E., Demerdash, N.A., Comparison between characterization and diagnosis of broken bars/end-ring connectors and airgap eccentricities of induction motors in ASDs using a coupled finite element-state space method (2000) IEEE Trans. Energy Convers., 15 (1), pp. 48-56. , Mar; Nejadi Koti, H., Chen, H., Sun, Y., Demerdash, N.A.O., On the numerical transient in time-stepping finite element analysis of induction motors: Fundamental concepts (2019) Proc. IEEE IEMDC, , San Diego, CA. May; Ojaghi, M., Mohammadi, M., Unified modeling technique for axially uniform and nonuniform eccentricity faults in three-phase squirrel cage induction motors (2018) IEEE Trans. Ind. Electron., 65 (7), pp. 5292-5301. , Jul; Nejadi Koti, H., Chen, H., Sun, Y., Demerdash, N.A.O., On shortening the numerical transient in time-stepping finite element analysis of induction motors: Method implementation (2019) Proc. IEEE IEMDC, , San Diego, CA. May; Fitzgerald, A.E., Kingsley, C., Umans, S.D., (2003) Electric Machinery, , New York: McGraw-Hill},
sponsors={IEEE Industry Application Society (IAS); IEEE Power Electronics Society (PELS)},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781728103952},
language={English},
abbrev_source_title={IEEE Energy Convers. Congr. Expo., ECCE},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Dehina2019,
author={Dehina, W. and Boumehraz, M. and Kratz, F. and Fantini, J.},
title={Diagnosis and Comparison between Stator Current Analysis and Vibration Analysis of Static Eccentricity Faults in the Induction Motor},
journal={Proceedings - 2019 4th International Conference on Power Electronics and their Applications, ICPEA 2019},
year={2019},
doi={10.1109/ICPEA1.2019.8911193},
art_number={8911193},
note={cited By 5; Conference of 4th International Conference on Power Electronics and their Applications, ICPEA 2019 ; Conference Date: 25 September 2019 Through 27 September 2019;  Conference Code:155171},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85076383586&doi=10.1109%2fICPEA1.2019.8911193&partnerID=40&md5=7a4c332cad101fba50e2c5ec345df270},
affiliation={University of Biskra, Laboratory of Energy Systems Modeling (LMSE), Biskra, 07000, Algeria; University of Orléans, Laboratory PRISME (EA n4229), Cedex, Bourges, 18022, France},
abstract={This paper presents two diagnosis techniques currently very much answered by the analysis of the signature of the stator current and the analysis of vibration signal because they are primarily. These techniques are based on the motor current signature analysis (MCSA). The MCSA method was based on analyzing the Fast Fourier Transform (FFT) of the stator current to analyze the spectral content of the different signals. The precision of these techniques depends on the load and speed of the induction machine. The diagnosis and detection of the presence of static eccentricity faults by various techniques mentioned above, and it was performed analytically and practically. The purpose of this article is to compare two methods: analysis of the stator current (MCSA-FFT) and the vibration analysis method (MVSA-FFT) to access a valuable decision. © 2019 IEEE.},
author_keywords={Diagnosis;  FFT;  Induction motor;  Spectral analysis;  Static eccentricity;  Vibration analysis},
keywords={Diagnosis;  Fast Fourier transforms;  Fault detection;  Induction motors;  Power electronics;  Signal analysis;  Spectrum analysis;  Stators, Diagnosis techniques;  Induction machines;  Motor current signature analysis;  Spectral content;  Static eccentricities;  Stator currents;  Vibration signal, Vibration analysis},
references={Bessous, N., (2007) Contribution Au Diagnostic des Machines Asynchronies, , Magister in electrical engineering, University of Mentouri Constantine, Algeria; Dehina, W., Boumehraz, M., Kratz, F., Diagnosis of rotor and stator faults by fast fourier transform and discrete wavelet in induction machine (2018) 3rd International Conference on Electrical Sciences and Technologies in Maghreb (CISTEM'18)., pp. 1-6. , Algiers, Algeria, IEEE; Ameid, T., Menacer, A., Talhaoui, H., Harzelli, I., Broken rotor bar fault diagnosis using fast fourier transform applied to field-oriented control induction machine: Simulation and experimental study (2017) Int. J. Adv. Manuf. Technol, 92 (1-4), pp. 917-928; Talhaoui, H., Menacer, A., Kessal, A., Kechida, R., Fast fourier and discrete wavelet transforms applied to sensorless vector control induction motor for rotor bar faults diagnosis (2014) ISA Trans, 53 (5), pp. 1639-1649; Bessam, B., Menacer, A., Boumehraz, M., Cherif, H., Detection of broken rotor bar faults in induction motor at low load using neural network (2016) ISA Trans, 64, pp. 241-246; Said, M.S.N., Benbouzid, M.E.H., Benchaib, A., Detection of broken bars in induction motors using an extended kalman filter for rotor resistance sensorless estimation (2008) IEEE Trans. Energy Convers, 15 (1), pp. 66-70; Ameid, T., Menacer, A., Talhaoui, H., Harzelli, I., Rotor resistance estimation using extended kalman filter and spectral analysis for rotor bar fault diagnosis of sensorless vector control induction motor (2017) Measurement, 111, pp. 243-259; Sahraoui, M., (2010) Comparative Study of Diagnostic Methods of Asynchronous Machines, , Dissertation, University of Biskra; Puche-Panadero, R., Pineda-Sanchez, M., Riera-Guasp, M., Roger-Folch, J., Hurtado-Perez, Perez-Cruz, J., Improved resolution of the mcsa method via hilbert transform, enabling the diagnosis of rotor asymmetries at very low slip (2009) IEEE Trans. Energy Convers, 24 (1); Menacer, A., Champenois, G., Nait Said, M.S., Benakcha, A., Moreau, S., Hassaine, S., Rotor failures diagnosis of squirrel cage induction motors with different supplying sources (2009) J. Electr. Eng. Technol, 4 (2), pp. 219-228; Bessous, N., Eddine, Z.S., Detection of static and dynamic eccentricity faults in induction machines by mcsa method (2016) International Conference on Electrical Sciences and Technologies CISTEM, , Marrakesh; Alain, B., Christian, P., (2009) Quick Reference Machine Monitoring by Vibration Analysis, , Dunod Paris},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781728127262},
language={English},
abbrev_source_title={Proc. - Int. Conf. Power Electron. Appl., ICPEA},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Pathak2019145,
author={Pathak, A. and Sivakumar, K. and Haque, M. and Ganesan, P.},
title={Multi-cluster visualization and live reporting of static analysis security testing (SAST) warnings},
journal={Proceedings - 2019 IEEE Secure Development, SecDev 2019},
year={2019},
pages={145},
doi={10.1109/SecDev.2019.00028},
art_number={8901629},
note={cited By 0; Conference of 2019 IEEE Secure Development, SecDev 2019 ; Conference Date: 25 September 2019 Through 27 September 2019;  Conference Code:154803},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85075798786&doi=10.1109%2fSecDev.2019.00028&partnerID=40&md5=892112d4b96623ba364f4f2a1f59f54a},
affiliation={Cisco Systems, Inc., United States},
abstract={This short paper discusses a case study of multi cluster visualization of Static Analysis Security Testing (SAST) warnings in large clusters catering to a majority of Cisco products in hierarchical organizational and checker views. This serves as a one stop shop for real-time visualization of Static Analysis (SA) warning trends, chart, downloading reports, and to effectively address the potential security weaknesses detected. Presently leading SAST tools like Coverity, codesonar, Klocwork etc do not provide inter-cluster or enterprise-wide visualization to effectively address the SA warnings. © 2019 IEEE.},
author_keywords={Multi cluster visualization;  Organizational hierarchy based reporting;  Security;  Static analysis;  Static analysis cluster setup},
keywords={Visualization, Cluster visualization;  Inter clusters;  Large clusters;  Organizational hierarchy based reporting;  Real time visualization;  Security;  Security testing;  Security weakness, Static analysis},
sponsors={Cisco; IEEE Computer Society; National Science Foundation (NSF); ShiftLeft; VirginiaTech},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538672891},
language={English},
abbrev_source_title={Proc. - IEEE Secur. Dev., SecDev},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Marcilio201934,
author={Marcilio, D. and Furia, C.A. and Bonifacio, R. and Pinto, G.},
title={Automatically generating fix suggestions in response to static code analysis warnings},
journal={Proceedings - 19th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2019},
year={2019},
pages={34-44},
doi={10.1109/SCAM.2019.00013},
art_number={8930842},
note={cited By 3; Conference of 19th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2019 ; Conference Date: 30 September 2019 Through 1 October 2019;  Conference Code:155994},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85074296845&doi=10.1109%2fSCAM.2019.00013&partnerID=40&md5=7a9fa1b398e2f488283d705557ca7319},
affiliation={University of Brasília, Brasilia, Brazil; USI - Università della Svizzera Italiana, Lugano, Switzerland; Federal University of Pará, Belém, Brazil},
abstract={Static code analysis tools such as FindBugs and SonarQube are widely used on open-source and industrial projects to detect a variety of issues that may negatively affect the quality of software. Despite these tools' popularity and high level of automation, several empirical studies report that developers normally fix only a small fraction (typically, less than 10% [1]) of the reported issues - so-called 'warnings'. If these analysis tools could also automatically provide suggestions on how to fix the issues that trigger some of the warnings, their feedback would become more actionable and more directly useful to developers. In this work, we investigate whether it is feasible to automatically generate fix suggestions for common warnings issued by static code analysis tools, and to what extent developers are willing to accept such suggestions into the codebases they're maintaining. To this end, we implemented a Java program transformation technique that fixes 11 distinct rules checked by two well-known static code analysis tools (SonarQube and SpotBugs). Fix suggestions are generated automatically based on templates, which are instantiated in a way that removes the source of the warnings; templates for some rules are even capable of producing multi-line patches. We submitted 38 pull requests, including 920 fixes generated automatically by our technique for various open-source Java projects, including the Eclipse IDE and both SonarQube and SpotBugs tools. At the time of writing, project maintainers accepted 84% of our fix suggestions (95% of them without any modifications). These results indicate that our approach to generating fix suggestions is feasible, and can help increase the applicability of static code analysis tools. © 2019 IEEE.},
author_keywords={Program repair;  Program transformation;  Static analysis tools},
keywords={Java programming language;  Open source software;  Open systems;  Static analysis, Analysis tools;  Empirical studies;  Industrial projects;  Level of automations;  Program transformations;  Quality of softwares;  Static code analysis;  Static code analysis tools, Quality control},
funding_details={Conselho Nacional de Desenvolvimento Científico e TecnológicoConselho Nacional de Desenvolvimento Científico e Tecnológico, CNPq, 406308/2016-0},
funding_text 1={Acknowledgments. We thank the maintainers for reviewing our patches and the reviewersfor their helpful comments. This was is partially supported by CNPq (#406308/2016-0).},
references={Marcilio, D., Bonifácio, R., Monteiro, E., Canedo, E., Luz, W., Pinto, G., Are static analysis violations really fixed?: A closer look at realistic usage of SonarQube (2019) Proceedings of the 27th International Conference on Program Comprehension, Ser. ICPC '19, pp. 209-219. , https://doi.org/10.1109/ICPC.2019.00040, Piscataway, NJ, USA: IEEE Press; Habib, A., Pradel, M., How many of all bugs do we find? a study of static bug detectors (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, Ser. ASE 2018, pp. 317-328. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/3238147.3238213, New York, NY, USA: ACM; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don't software developers use static analysis tools to find bugs? (2013) Proceedings of the 2013 International Conference on Software Engineering, Ser. ICSE '13, pp. 672-681. , http://dl-acm-org.luisamigo.proxybk.com/citation.cfm?id=2486788.2486877, Piscataway, NJ, USA: IEEE Press; Liu, K., Koyuncu, A., Kim, D., Bissyandè, T.F., AVATAR: Fixing semantic bugs with fix patterns of static analysis violations (2019) 2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 1-12. , Feb; Barik, T., Song, Y., Johnson, B., Murphy-Hill, E., From quick fixes to slow fixes: Reimagining static analysis resolutions to enable design space exploration (2016) 2016 IEEE International Conference on Software Maintenance and Evolution (ICSME), pp. 211-221. , Oct; Tómasdóttir, K.F., Aniche, M., Van Deursen, A., Why and how JavaScript developers use linters (2017) 2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE), pp. 578-589. , Oct; Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the state of static analysis: A large-scale evaluation in open source software (2016) 2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), 1, pp. 470-481. , March; Ayewah, N., Pugh, W., Hovemeyer, D., Morgenthaler, J.D., Penix, J., Using static analysis to find bugs (2008) IEEE Software, 25 (5), pp. 22-29. , Sep; Nielson, F., Nielson, H.R., Hankin, C., (1999) Principles of Program Analysis, , Berlin, Heidelberg: Springer-Verlag; Aho, A.V., Lam, M.S., Sethi, R., Ullman, J.D., (2006) Compilers: Principles, Techniques, and Tools (2nd Edition), , Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc; Khedker, U., Sanyal, A., Karkare, B., (2009) Data Flow Analysis: Theory and Practice, 1st Ed, , Boca Raton, FL, USA: CRC Press, Inc; Cherem, S., Princehouse, L., Rugina, R., Practical memory leak detection using guarded value-flow analysis (2007) Proceedings of the 28th ACM SIGPLAN Conference on Programming Language Design and Implementation, Ser. PLDI '07, pp. 480-491. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1250734.1250789, New York, NY, USA: ACM; Sui, Y., Xue, J., SVF: Interprocedural static value-flow analysis in LLVM (2016) Proceedings of the 25th International Conference on Compiler Construction, Ser. CC 2016, pp. 265-266. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2892208.2892235, New York, NY, USA: ACM; Rausch, T., Hummer, W., Leitner, P., Schulte, S., An empirical analysis of build failures in the continuous integration workflows of Javabased open-source software (2017) 2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR), , https://doi.org/10.1109/msr.2017.54, IEEE, may; Zampetti, F., Scalabrino, S., Oliveto, R., Canfora, G., Penta, M.D., How open source projects use static code analysis tools in continuous integration pipelines (2017) 2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR), , https://doi.org/10.1109/msr.2017.2, IEEE, may; Liu, K., Kim, D., Bissyande, T.F., Yoo, S., Le Traon, Y., Mining fix patterns for FindBugs violations (2018) IEEE Transactions on Software Engineering, p. 1; Digkas, G., Lungu, M., Avgeriou, P., Chatzigeorgiou, A., Ampatzoglou, A., How do developers fix issues and pay back technical debt in the Apache ecosystem? (2018) 2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 153-163. , March; Just, R., Jalali, D., Ernst, M.D., Defects4J: A database of existing faults to enable controlled testing studies for Java programs (2014) Proceedings of the 2014 International Symposium on Software Testing and Analysis, Ser. ISSTA 2014, pp. 437-440. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2610384.2628055, New York, NY, USA: ACM; Aftandilian, E., Sauciuc, R., Priya, S., Krishnan, S., Building useful program analysis tools using an extensible Java compiler (2012) 2012 IEEE 12th International Working Conference on Source Code Analysis and Manipulation, pp. 14-23. , Sep; Nguyen, T.T., Nguyen, H.A., Pham, N.H., Al-Kofahi, J., Nguyen, T.N., Recurring bug fixes in object-oriented programs (2010) Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering-Volume 1, Ser. ICSE '10, pp. 315-324. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1806799.1806847, New York, NY, USA: ACM; Liu, C., Yang, J., Tan, L., Hafiz, M., R2fix: Automatically generating bug fixes from bug reports (2013) 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation, pp. 282-291. , March; Rolim, R., Soares, G., Gheyi, R., D'Antoni, L., Learning quick fixes from code repositories (2018) CoRR, , http://arxiv-org.luisamigo.proxybk.com/abs/1803.03806, abs/1803.03806; Gazzola, L., Micucci, D., Mariani, L., Automatic software repair: A survey (2019) IEEE Trans. Software Eng., 45 (1), pp. 34-67. , https://doi.org/10.1109/TSE.2017.2755013; Monperrus, M., Automatic software repair: A bibliography (2018) ACM Comput. Surv., 51 (1), pp. 171-1724. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/3105906, Jan; Johnson, B., Song, Y., Murphy-Hill, E.R., Bowdidge, R.W., Why don't software developers use static analysis tools to find bugs? (2013) 35th International Conference on Software Engineering, ICSE '13, pp. 672-681. , San Francisco, CA, USA, May 18-26, 2013; Brito, A., Xavier, L., Hora, A., Valente, M.T., Why and how Java developers break APIs (2018) 25th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 255-265; Klint, P., Van Der Storm, T., Vinju, J., Rascal: A domain specific language for source code analysis and manipulation (2009) 2009 Ninth IEEE International Working Conference on Source Code Analysis and Manipulation, pp. 168-177. , IEEE; Dantas, R., Carvalho, A., Marcílio, D., Fantin, L., Silva, U., Lucas, W., Bonifácio, R., Reconciling the past and the present: An empirical study on the application of source code transformations to automatically rejuvenate Java programs (2018) 2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 497-501. , March; Kalliamvakou, E., Gousios, G., Blincoe, K., Singer, L., German, D.M., Damian, D., An in-depth study of the promises and perils of mining GitHub (2015) Empirical Software Engineering, 21 (5), pp. 2035-2071. , https://doi.org/10.1007/s10664-015-9393-5, sep; Tao, Y., Han, D., Kim, S., Writing acceptable patches: An empirical study of open source project patches (2014) 2014 IEEE International Conference on Software Maintenance and Evolution, pp. 271-280. , Sep; Ram, A., Sawant, A.A., Castelluccio, M., Bacchelli, A., What makes a code change easier to review: An empirical investigation on code change reviewability (2018) Proceedings of the 2018 ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/SIGSOFT FSE 2018, pp. 201-212. , https://doi.org/10.1145/3236024.3236080, Lake Buena Vista, FL, USA, November 04-09, 2018; Georges, A., Buytaert, D., Eeckhout, L., Statistically rigorous Java performance evaluation (2007) Proceedings of the 22nd Annual ACM SIGPLAN Conference on Object-oriented Programming Systems and Applications, Ser. OOPSLA '07, pp. 57-76. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1297027.1297033, New York, NY, USA: ACM},
sponsors={IEEE Computer Society; IEEE Technical Council on Software Engineering (TCSE)},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781728149370},
language={English},
abbrev_source_title={Proc. - IEEE Int. Work. Conf. Source Code Anal. Manip., SCAM},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Imtiaz2019245,
author={Imtiaz, N. and Rahman, A. and Farhana, E. and Williams, L.},
title={Challenges with responding to static analysis tool alerts},
journal={IEEE International Working Conference on Mining Software Repositories},
year={2019},
volume={2019-May},
pages={245-249},
doi={10.1109/MSR.2019.00049},
art_number={8816730},
note={cited By 12; Conference of 16th IEEE/ACM International Conference on Mining Software Repositories, MSR 2019 ; Conference Date: 26 May 2019 Through 27 May 2019;  Conference Code:151481},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85072315205&doi=10.1109%2fMSR.2019.00049&partnerID=40&md5=4ca3c6f20da8e9da861dd4b6dc656daa},
affiliation={North Carolina State University, Raleigh, NC, United States},
abstract={Static analysis tool alerts can help developers detect potential defects in the code early in the development cycle. However, developers are not always able to respond to the alerts with their preferred action and may turn away from using the tool. In this paper, we qualitatively analyze 280 Stack Overflow (SO) questions regarding static analysis tool alerts to identify the challenges developers face in understanding and responding to these alerts. We find that the most prevalent question on SO is how to ignore and filter alerts, followed by validation of false positives. Our findings confirm prior researchers' findings related to notification communication theory as 44.6% of the SO questions that we analyzed indicate developers face communication challenges. © 2019 IEEE.},
author_keywords={Alerts;  Barrier;  Challenge;  Stack overflow;  Static analysis tool;  Warnings},
keywords={Filtration;  Information theory, Alerts;  Barrier;  Challenge;  Stack overflow;  Warnings, Static analysis},
funding_details={National Science FoundationNational Science Foundation, NSF, 1451172},
funding_text 1={This material is based in part upon work supported by the National Science Foundation under grant number 1451172.},
references={https://en-wikipedia-org.luisamigo.proxybk.com/wiki/Heartbleed, Accessed of Feb. 6, 2019; https://stackoverflow-com.luisamigo.proxybk.com/tags; Baltes, S., Treude, C., Diehl, S., Sotorrent: Studying the origin, evolution, and usage of stack overflow code snippets (2019) Proceedings of the 16th International Conference on Mining Software Repositories (MSR 2019); Barik, T., Song, Y., Johnson, B., Murphy-Hill, E., From quick fixes to slow fixes: Reimagining static analysis resolutions to enable design space exploration (2016) Software Maintenance and Evolution (ICSME), 2016 IEEE International Conference on, pp. 211-221. , IEEE; Bessey, A., Block, K., Chelf, B., Chou, A., Fulton, B., Hallem, S., Henri-Gros, C., Engler, D., A few billion lines of code later: Using static analysis to find bugs in the real world (2010) Communications of the ACM, 53 (2), pp. 66-75; Hartmann, B., MacDougall, D., Brandt, J., Klemmer, S.R., What would other programmers do: Suggesting solutions to error messages (2010) Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, pp. 1019-1028. , ACM; Heckman, S., Williams, L., A model building process for identifying actionable static analysis alertsi software testing verification and validation, 2009. ICST'09 (2009) International Conference on, pp. 161-170. , IEEE; Heckman, S., Williams, L., A comparative evaluation of static analysis actionable alert identification techniques (2013) Proceedings of the 9th International Conference on Predictive Models in Software Engineering, p. 4. , ACM; Johnson, B., Pandita, R., Smith, J., Ford, D., Elder, S., Murphy-Hill, E., Heckman, S., Sadowski, C., A crosstool communication study on program analysis tool notifications (2016) Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 73-84. , ACM; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don't software developers use static analysis tools to find bugs? (2013) Proceedings of the 2013 International Conference on Software Engineering, pp. 672-681. , IEEE Press; Richard Landis, J., Koch, G.G., The measurement of observer agreement for categorical data (1977) Biometrics, pp. 159-174; Meng, N., Nagy, S., Yao, D., Zhuang, W., Arango-Argoty, G., Secure coding practices in Java: Challenges and vulnerabilities (2018) 2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE), pp. 372-383. , IEEE; Nadeem, M., Williams, B.J., Allen, E.B., High false positive detection of security vulnerabilities: A case study (2012) Proceedings of the 50th Annual Southeast Regional Conference, pp. 359-360. , ACM; (2016), https://news-ycombinator-com.luisamigo.proxybk.com/item?id=8810157, Hacker News. Twitter outage report; Rahman, A., Partho, A., Morrison, P., Williams, L., What questions do programmers ask about configuration as code? (2018) Proceedings of the 4th International Workshop on Rapid Continuous Software Engineering, pp. 16-22. , ACM; Reynolds, Z.P., Jayanth, A.B., Koc, U., Porter, A.A., Raje, R.R., Hill, J.H., Identifying and documenting false positive patterns generated by static code analysis tools (2017) Software Engineering Research and Industrial Practice (SER&IP), 2017 IEEE/ACM 4th International Workshop on, pp. 55-61. , IEEE; Rosen, C., Shihab, E., What are mobile developers asking about? A large scale study using stack overflow (2016) Empirical Software Engineering, 21 (3), pp. 1192-1223; Sadowski, C., Aftandilian, E., Eagle, A., Miller-Cushon, L., Jaspan, C., Lessons from building static analysis tools at google (2018) Communications of the ACM, 61 (4), pp. 58-66; https://www-synopsys-com.luisamigo.proxybk.com/blogs/software-security/apple-security-55471-aka-goto-fail, Synopsys Editorial Team. Coverity report on the 'goto fail' bug. February 2014; https://www-synopsys-com.luisamigo.proxybk.com/blogs/software-security/detecting-heartbleed-with-static-analysis, Synopsys Editorial Team. On detecting heartbleed with static analysis. April 2014; Open Web Application Security Project user group. Source code analysis tools; Vassallo, C., Panichella, S., Palomba, F., Proksch, S., Zaidman, A., Gall, H.C., Context is king: The developer perspective on the usage of static analysis tools (2018) 2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 38-49. , IEEE; Viega, J., McGraw, G., Mutdosch, T., Felten, E.W., Statically scanning Java code: Finding security vulnerabilities (2000) IEEE Software, 17 (5), pp. 68-74},
sponsors={Association for Computing Machinery (ACM); IEEE Computer Society; Special Interest Group on Software Engineering (ACM SIGSOFT); Technical Council on Software Engineering (IEEE TCSE)},
publisher={IEEE Computer Society},
issn={21601852},
isbn={9781728134123},
language={English},
abbrev_source_title={IEEE Int. Working Conf. Min Softw. Repos.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Imtiaz2019,
author={Imtiaz, N. and Williams, L.},
title={A synopsis of static analysis alerts on open source software},
journal={ACM International Conference Proceeding Series},
year={2019},
doi={10.1145/3314058.3317295},
art_number={a12},
note={cited By 2; Conference of 6th Annual Symposium on Hot Topics in the Science of Security, HotSoS 2019 ; Conference Date: 1 April 2019 Through 3 April 2019;  Conference Code:149014},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85068790032&doi=10.1145%2f3314058.3317295&partnerID=40&md5=048c2c2536894e0a97b2fb35f886c7cc},
affiliation={North Carolina State University, United States},
references={Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the state of static analysis: A large-scale evaluation in open source software (2016) 2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), 1, pp. 470-481; Guo, P.J., Engler, D.R., Linux kernel developer responses to static analysis bug reports (2009) USENIX Annual Technical Conference, pp. 285-292; (2017) Coverity Scan Report. Open Source SoftwareâĂŤThe Road Ahead, , https://www-synopsys-com.luisamigo.proxybk.com/content/dam/synopsys/sig-assets/reports/SCAN-Report-2017.pdf, Open Source Solution Manager. n. d; Zampetti, F., Scalabrino, S., Oliveto, R., Canfora, G., Di Penta, M.-M., How open source projects use static code analysis tools in continuous integration pipelines (2017) 2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR), pp. 334-344},
sponsors={National Security Agency},
publisher={Association for Computing Machinery},
isbn={9781450371476},
language={English},
abbrev_source_title={ACM Int. Conf. Proc. Ser.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Liu2019456,
author={Liu, K. and Koyuncu, A. and Kim, D. and Bissyande, T.F.},
title={AVATAR: Fixing Semantic Bugs with Fix Patterns of Static Analysis Violations},
journal={SANER 2019 - Proceedings of the 2019 IEEE 26th International Conference on Software Analysis, Evolution, and Reengineering},
year={2019},
pages={456-467},
doi={10.1109/SANER.2019.8667970},
art_number={8667970},
note={cited By 43; Conference of 26th IEEE International Conference on Software Analysis, Evolution, and Reengineering, SANER 2019 ; Conference Date: 24 February 2019 Through 27 February 2019;  Conference Code:146154},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85064184157&doi=10.1109%2fSANER.2019.8667970&partnerID=40&md5=4cf88eb3abf629f43e724f6d4ec26df6},
affiliation={Interdisciplinary Centre for Security Reliability and Trust (SnT), University of Luxembourg, Luxembourg, Luxembourg},
abstract={Fix pattern-based patch generation is a promising direction in Automated Program Repair (APR). Notably, it has been demonstrated to produce more acceptable and correct patches than the patches obtained with mutation operators through genetic programming. The performance of pattern-based APR systems, however, depends on the fix ingredients mined from fix changes in development histories. Unfortunately, collecting a reliable set of bug fixes in repositories can be challenging. In this paper, we propose to investigate the possibility in an APR scenario of leveraging code changes that address violations by static bug detection tools. To that end, we build the AVATAR APR system, which exploits fix patterns of static analysis violations as ingredients for patch generation. Evaluated on the Defects4J benchmark, we show that, assuming a perfect localization of faults, AVATAR can generate correct patches to fix 34/39 bugs. We further find that AVATAR yields performance metrics that are comparable to that of the closely-related approaches in the literature. While AVATAR outperforms many of the state-of-The-Art pattern-based APR systems, it is mostly complementary to current approaches. Overall, our study highlights the relevance of static bug finding tools as indirect contributors of fix ingredients for addressing code defects identified with functional test cases. © 2019 IEEE.},
author_keywords={Automated program repair;  fix pattern.;  static analysis},
keywords={Defects;  Genetic algorithms;  Genetic programming;  Reengineering;  Repair;  Semantics, Bug detection;  Bug finding tools;  Development history;  fix pattern;  Functional test;  Mutation operators;  Performance metrics;  State of the art, Static analysis},
funding_details={Fonds National de la Recherche LuxembourgFonds National de la Recherche Luxembourg, FNR, FIXPATTERN C15/IS/9964569, RECOMMEND 15/IS/10449467},
funding_text 1={This work is supported by the Fonds National de la Recherche (FNR), Luxembourg, through RECOMMEND 15/IS/10449467 and FIXPATTERN C15/IS/9964569.},
references={Nguyen, H.D.T., Qi, D., Roychoudhury, A., Chandra, S., SemFix: Program repair via semantic analysis (2013) Proceedings of the 35th International Conference on Software Engineering, pp. 772-781; Weimer, W., Nguyen, T., Le Goues, C., Forrest, S., Automatically finding patches using genetic programming (2009) Proceedings of the 31st International Conference on Software Engineering, pp. 364-374. , ACM; Le Goues, C., Nguyen, T., Forrest, S., Weimer, W., GenProg: A generic method for automatic software repair (2012) IEEE Transactions on Software Engineering, 38 (1), p. 54; Kim, D., Nam, J., Song, J., Kim, S., Automatic patch generation learned from human-written patches (2013) Proceedings of the International Conference on Software Engineering, pp. 802-811. , ACM; Coker, Z., Hafiz, M., Program transformations to fix c integers (2013) Proceedings of the International Conference on Software Engineering, pp. 792-801. , IEEE; Ke, Y., Stolee, K.T., Le Goues, C., Brun, Y., Repairing programs with semantic code search (t) (2015) Proceedings of the 30th IEEE/ACM International Conference on Automated Software Engineering. IEEE, pp. 295-306; Mechtaev, S., Yi, J., Roychoudhury, A., Directfix: Looking for simple program repairs (2015) Proceedings of the 37th International Conference on Software Engineering, 1, pp. 448-458. , ACM; Long, F., Rinard, M., Staged program repair with condition synthesis (2015) Proceedings of the 10th Joint Meeting on Foundations of Software Engineering ACM, pp. 166-178; Le, X.-B.D., Le, Q.L., Lo, D., Le Goues, C., Enhancing automated program repair with deductive verification (2016) Proceedings of the International Conference on Software Maintenance and Evolution, pp. 428-432. , IEEE; Le, X.D., Lo, D., Le Goues, C., History driven program repair (2016) Proceedings of the 23rd IEEE International Conference on Software Analysis, Evolution, and Reengineering, . IEEE, pp. 213-224; Long, F., Rinard, M., Automatic patch generation by learning correct code (2016) ACM SIGPLAN Notices, 51 (1), pp. 298-312; Chen, L., Pei, Y., Furia, C.A., Contract-based program repair without the contracts (2017) Proceedings of the 32nd International Conference on Automated Software Engineering, pp. 637-647. , IEEE; Le, X.-B.D., Chu, D.-H., Lo, D., Le Goues, C., Visser, W., S3: Syntaxand semantic-guided repair synthesis via programming by examples (2017) Proceedings of the 11th Joint Meeting on Foundations of Software Engineering, pp. 593-604. , ACM; Long, F., Amidon, P., Rinard, M., Automatic inference of code transforms for patch generation (2017) Proceedings of the 11th Joint Meeting on Foundations of Software Engineering, pp. 727-739. , ACM; Xuan, J., Martinez, M., De Marco, F., Clement, M., Marcote, S.L., Durieux, T., Le Berre, D., Monperrus, M., Nopol: Automatic repair of conditional statement bugs in Java programs (2017) IEEE Transactions on Software Engineering, 43 (1), pp. 34-55; Xiong, Y., Wang, J., Yan, R., Zhang, J., Han, S., Huang, G., Zhang, L., Precise condition synthesis for program repair (2017) Proceedings of the 39th International Conference on Software Engineering, pp. 416-426. , ACM; Mechtaev, S., Nguyen, M.-D., Noller, Y., Grunske, L., Roychoudhury, A., Semantic program repair using a reference implementation (2018) Proceedings of the 40th International Conference on Software Engineering ACM, pp. 129-139; Smith, E.K., Barr, E.T., Le Goues, C., Brun, Y., Is the cure worse than the disease? Overfitting in automated program repair (2015) Proceedings of the 10th Joint Meeting on Foundations of Software Engineering ACM, pp. 532-543; Yang, J., Zhikhartsev, A., Liu, Y., Tan, L., Better test cases for better automated program repair (2017) Proceedings of the 11th Joint Meeting on Foundations of Software Engineering ACM, pp. 831-841; Jiang, J., Xiong, Y., Zhang, H., Gao, Q., Chen, X., Shaping program repair space with existing patches and similar code (2018) Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, pp. 298-309; Koyuncu, A., Liu, K., Bissyande, T.F., Kim, D., Klein, J., Monperrus, M., Le Traon, Y., (2018) Fixminer: Mining Relevant Fix Patterns for Automated Program Repair, , arXiv preprint arXiv 1810 01791; Monperrus, M., A critical review of automatic patch generation learned from human-written patches: Essay on the problem statement and the evaluation of automatic software repair (2014) Proceedings of the 36th International Conference on Software Engineering, pp. 234-242. , ACM; Martinez, M., Weimer, W., Monperrus, M., Do the fix ingredients already exist? An empirical inquiry into the redundancy assumptions of program repair approaches (2014) Proceedings of the 36th International Conference on Software Engineering-Companion, pp. 492-495. , ACM; Liu, K., Kim, D., Koyuncu, A., Li, L., Bissyande, T.F., Le Traon, Y., A closer look at real-world patches (2018) Proceedings of the 34th IEEE International Conference on Software Maintenance and Evolution. IEEE, pp. 275-286; Tufano, M., Watson, C., Bavota, G., Di Penta, M., White, M., Poshyvanyk, D., An empirical investigation into learning bug-fixing patches in the wild via neural machine translation (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering. ACM, pp. 832-837; Herzig, K., Zeller, A., The impact of tangled code changes (2013) Proceedings of the 10th Working Conference on Mining Software Repositories ACM, pp. 121-130; Heckman, S., Williams, L., On establishing a benchmark for evaluating static analysis alert prioritization and classification techniques (2008) Proceedings of the Second ACM-IEEE International Symposium on Empirical Software Engineering and Measurement. ACM, pp. 41-50; Avgustinov, P., Baars, A.I., Henriksen, A.S., Lavender, G., Menzel, G., De Moor, O., Schäfer, M., Tibble, J., Tracking static analysis violations over time to capture developer characteristics (2015) Proceedings of the 37th International Conference on Software Engineering ACM, pp. 437-447; Liu, K., Kim, D., Bissyande, T.F., Yoo, S., Traon, Y.L., Mining fix patterns for findbugs violations IEEE Transactions on Software Engineering, 2019 to Appear; Rolim, R., Soares, G., Gheyi, R., D'Antoni, L., (2018) Learning Quick Fixes from Code Repositories, , arXiv preprint arXiv 1803 03806; (2018) FindBugs, , http://findbugs-sourceforge-net.luisamigo.proxybk.com, last accessed: Oct; Habib, A., Pradel, M., How many of all bugs do we find? A study of static bug detectors (2018) Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering. ACM, pp. 317-328; (2018) SpotBugs, , https://spotbugs-github-io.luisamigo.proxybk.com, last accessed: Oct; (2018) Facebook Infer, , https://fbinfer-com.luisamigo.proxybk.com, last accessed: Oct; (2018) Google Error-Prone, , https://errorprone-info.luisamigo.proxybk.com, last accessed: Oct; Fontana, F.A., Mariani, E., Mornioli, A., Sormani, R., Tonello, A., An experience report on using code smells detection tools (2011) Proceedings of the Fourth International Conference on Software Testing, Verification and Validation Workshops, pp. 450-457. , IEEE; Moha, N., Gueheneuc, Y.-G., Duchien, A.-F., Decor: A method for the specification and detection of code and design smells (2010) IEEE Transactions on Software Engineering, 36 (1), pp. 20-36; Yamashita, A., Moonen, L., Do developers care about code smells? An exploratory survey (2013) Proceedings of the 20th Working Conference on Reverse Engineering, pp. 242-251. , IEEE; Tan, S.H., Yoshida, H., Prasad, M.R., Roychoudhury, A., Antipatterns in search-based program repair (2016) Proceedings of the 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering. ACM, pp. 727-738; Saha, R.K., Lyu, Y., Yoshida, H., Prasad, M.R., Elixir: Effective object-oriented program repair (2017) Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering. IEEE, pp. 648-659; Pan, K., Kim, S., Whitehead, E.J., Toward an understanding of bug fix patterns (2009) Empirical Software Engineering, 14 (3), pp. 286-315; Koyuncu, A., Bissyande, T., Kim, D., Klein, J., Monperrus, M., Le Traon, Y., Impact of tool support in patch construction (2017) Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, pp. 237-248; (2018) PMD, , https://pmd-github-io.luisamigo.proxybk.com, last accessed: Oct; (2018), https://www-splint-org.luisamigo.proxybk.com, Splint, last accessed: Oct; (2018), http://cppcheck-sourceforge-net.luisamigo.proxybk.com, cppcheck, last accessed: Oct; (2018) Clang Static Analyzer, , https://clang-Analyzer.llvm.org, last accessed: Oct; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) ACM Sigplan Notices, 39 (12), pp. 92-106; Copeland, T., (2005) Pmd Applied; Falleri, J.-R., Morandat, F., Blanc, X., Martinez, M., Monperrus, M., Fine-grained and accurate source code differencing (2014) Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering. ACM, pp. 313-324; Matsugu, M., Mori, K., Mitari, Y., Kaneda, Y., Subject independent facial expression recognition with robust face detection using a convolutional neural network (2003) Neural Networks, 16 (5-6), pp. 555-559; Campos, J., Riboira, A., Perez, A., Abreu, R., Gzoltar: An eclipse plug-in for testing and debugging (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering. ACM, pp. 378-381; Abreu, R., Van Gemund, A.J., Zoeteweij, P., On the accuracy of spectrum-based fault localization (2007) Testing: Academic and Industrial Conference Practice and Research Techniques-MUTATION (TAICPARTMUTATION) 2007 IEEE, pp. 89-98; Steimann, F., Frenkel, M., Abreu, R., Threats to the validity and value of empirical assessments of the accuracy of coverage-based fault locators (2013) Proceedings of the International Symposium on Software Testing and Analysis, pp. 314-324. , ACM; Xie, X., Chen, T.Y., Kuo, F.-C., Xu, B., A theoretical analysis of the risk evaluation formulas for spectrum-based fault localization (2013) ACM Transactions on Software Engineering and Methodology, 22 (4), p. 31; Xuan, J., Monperrus, M., Learning to combine multiple ranking metrics for fault localization (2014) Proceedings of the IEEE International Conference on Software Maintenance and Evolution. IEEE, pp. 191-200; Pearson, S., Campos, J., Just, R., Fraser, G., Abreu, R., Ernst, M.D., Pang, D., Keller, B., Evaluating and improving fault localization (2017) Proceedings of the 39th International Conference on Software Engineering. ACM, pp. 609-620; Martinez, M., Monperrus, M., Astor: A program repair library for Java (2016) Proceedings of the 25th International Symposium on Software Testing and Analysis, pp. 441-444. , ACM; Xin, Q., Reiss, S.P., Leveraging syntax-related code for automated program repair (2017) Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering. ACM, pp. 660-670; Wen, M., Chen, J., Wu, R., Hao, D., Cheung, S.-C., Context-Aware patch generation for better automated program repair (2018) Proceedings of the 40th International Conference on Software Engineering ACM, pp. 1-11; Liu, K., Anil, K., Kim, K., Kim, D., Bissyande, T.F., LSRepair: Live search of fix ingredients for automated program repair (2018) Proceedings of the 25th Asia-Pacific Software Engineering Conference, pp. 658-662. , IEEE; Just, R., Jalali, D., Ernst, M.D., Defects4J: A database of existing faults to enable controlled testing studies for Java programs (2014) Proceedings of the International Symposium on Software Testing and Analysis, pp. 437-440. , ACM; Sobreira, V., Durieux, T., Madeiral, F., Monperrus, M., Maia Almeida De, M., Dissection of a bug dataset: Anatomy of 395 patches from defects4j (2018) Proceedings of the 25th International Conference on Software Analysis, Evolution and Reengineering, pp. 130-140. , IEEE; Liu, K., Koyuncu, A., Bissyande, T.F., Kim, D., Klein, J., Le Traon, Y., You cannot fix what you cannot find! an investigation of fault localization bias in benchmarking automated program repair systems (2019) Proceedings of the 12th IEEE International Conference on Software Testing, Verification and Validation. IEEE; Xuan, J., Monperrus, M., Test case purification for improving fault localization (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering. ACM, pp. 52-63; Hua, J., Zhang, M., Wang, K., Khurshid, S., Towards practical program repair with on-demand candidate generation (2018) Proceedings of the 40th International Conference on Software Engineering ACM, pp. 12-23; Martinez, M., Durieux, T., Sommerard, R., Xuan, J., Monperrus, M., Automatic repair of real bugs in Java: A large-scale experiment on the defects4j dataset (2017) Empirical Software Engineering, 22 (4), pp. 1936-1964; Saha, R.K., Lyu, Y., Lam, W., Yoshida, H., Prasad, M.R., Bugs. Jar: A large-scale, diverse dataset of real-world Java bugs (2018) Proceedings of the 15th International Conference on Mining Software Repositories, pp. 10-13. , ACM; Pradel, M., Sen, K., Deepbugs: A learning approach to name-based bug detection (2018) PACMPL, 2, pp. 1471-14725. , OOPSLA; Liu, K., Kim, D., Bissyande, T.F., Kim, T., Kim, K., Koyuncu, A., Kim, S., Le Traon, Y., Learning to spot and refactor inconsistent method names (2019) Proceedings of the 41st ACM/IEEE International Conference on Software Engineering. IEEE},
editor={Shihab E., Lo D., Wang X.},
sponsors={IEEE Computer Society},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781728105918},
language={English},
abbrev_source_title={SANER - Proc. IEEE Int. Conf. Softw. Anal., Evol., Reengineering},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Sobra2019,
author={Sobra, J. and Kavalir, T. and Krizek, M. and Skala, B.},
title={Experimental Verification of the Finite Element Analysis of an Induction Machine with Implemented Static Eccentricity Fault},
journal={Proceedings of the 2018 18th International Conference on Mechatronics - Mechatronika, ME 2018},
year={2019},
art_number={8624785},
note={cited By 0; Conference of 18th International Conference on Mechatronics - Mechatronika, ME 2018 ; Conference Date: 5 December 2018 Through 7 December 2018;  Conference Code:144580},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85062715119&partnerID=40&md5=cae8d46286ca60f041cdac40469b8d70},
affiliation={Department of Electromechanics and Power Electronics, University of West Bohemia, Pilsen, Czech Republic; Regional Technological Institute, University of West Bohemia, Pilsen, Czech Republic; Regional Innovation Centre for Electrical Engineering, University of West Bohemia, Pilsen, Czech Republic},
abstract={The paper deals with the experimental verification of vibration frequency spectra of squirrel-cage induction machine having implemented static eccentricity fault. The measured data are compared to the theoretical presumptions and the transient finite element analysis of the measured machine. Measurement and finite element model are carried out for the machine in a perfect technical condition as well and those specify the reference point for the faulty machine. © 2018 Brno University of Technology.},
author_keywords={finite element analysis;  induction machine;  static eccentricity;  vibration analysis},
keywords={Asynchronous machinery;  Finite element method;  Squirrel cage motors;  Vibration analysis, Experimental verification;  Induction machines;  Reference points;  Squirrel-cage induction;  Static eccentricities;  Technical conditions;  Transient finite element analysis;  Vibration frequency spectrum, Electric machine theory},
funding_details={Západočeská Univerzita v PlzniZápadočeská Univerzita v Plzni, ZČU, SGS-2018-009},
funding_details={Ministerstvo Školství, Mládeže a TělovýchovyMinisterstvo Školství, Mládeže a Tělovýchovy, MŠMT, LO1607},
funding_text 1={The present contribution has been prepared under project LO1502 ‘Development of the Regional Technological Institute under the auspices of the National Sustainability Programme I of the Ministry of Education of the Czech Republic aimed to support research, experimental development and innovation. It was also supported by the Ministry of Education, Youth and Sports of the Czech Republic under the RICE – New Technologies and Concepts for Smart Industrial Systems, project No. LO1607 and by the funding program of University of West Bohemia under the number SGS-2018-009.},
references={Polat, A., Ertugrul, Y.D., Ergene, L.T., Static, dynamic and mixed eccentricity of induction motor (2015) 2015 IEEE 10th International Symposium on Diagnostics for Electrical Machines, Power Electronics and Drives (SDEMPED), pp. 284-288; Abdelli, R., Bouzida, A., Touhami, O., Ouadah, M., Static eccentricity fault modeling in permanent-magnet synchronous motors 2016 8th International Conference on Modelling, Identification and Control (ICMIC), 2016, pp. 364-368; Fernandez Gomez, A.J., Dziechciarz, A., Sobczyk, T.J., Mathematical modeling of eccentricities in induction machines by the mono-harmonic model (2013) 2013 9th IEEE International Symposium on Diagnostics for Electric Machines, Power Electronics and Drives (SDEMPED), pp. 317-322; Ebrahimi, B.M., Faiz, J., Magnetic field and vibration monitoring in permanent magnet synchronous motors under eccentricity fault (2012) IET Electr. Power Appl, 6 (1), p. 35; Finley, W.R., Hodowanec, M.M., Holter, W.G., An analytical approach to solving motor vibration problems (2000) IEEE Trans. Ind. Appl, 36 (5), pp. 1467-1480; ANSYSR Academic Research Mechanical and CFD, Release 19.1, , ANSYS, Inc; Kindl, V., Sika, J., Krizek, M., Byrtus, M., Kavalir, T., Methodology for experimental measurement of force acting on eccentric rotor of electric machine 2017 19th European Conference on Power Electronics and Applications (EPE?17 ECCE Europe), 2017, pp. P1-P7; Sobra, J., Kavalir, T., Sika, J., (2018) Comparison of Vibration and Noise Measurement of Induction Machine under Static Eccentricity, pp. 592-598. , Springer Cham},
editor={Maga D., Stefek A., Brezina T.},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9788021455443},
language={English},
abbrev_source_title={Proc. Int. Conf. Mechatronics - Mechatronika, ME},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Alikhashashneh2019,
author={Alikhashashneh, E.A. and Raje, R.R. and Hill, J.H.},
title={Using Machine Learning Techniques to Classify and Predict Static Code Analysis Tool Warnings},
journal={Proceedings of IEEE/ACS International Conference on Computer Systems and Applications, AICCSA},
year={2019},
volume={2018-November},
doi={10.1109/AICCSA.2018.8612819},
art_number={8612819},
note={cited By 1; Conference of 15th IEEE/ACS International Conference on Computer Systems and Applications, AICCSA 2018 ; Conference Date: 28 October 2018 Through 1 November 2018;  Conference Code:144442},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85061910929&doi=10.1109%2fAICCSA.2018.8612819&partnerID=40&md5=38a4f1eb52a9445fa7c029b60bb72ad8},
affiliation={Department of Computer and Information Science, Indiana University-Purdue University Indianapolis, Indianapolis, IN, United States},
abstract={This paper discusses our work on using software engineering metrics (i.e., source code metrics) to classify an error message generated by a Static Code Analysis (SCA) tool as a true-positive, false-positive, or false-negative. Specifically, we compare the performance of Support Vector Machine (SVM), K-Nearest Neighbor (KNN), Random Forests, and Repeated Incremental Pruning to Produce Error Reduction (RIPPER) over eight datasets. The performance of the techniques is assessed by computing the F-measure metric, which is defined as the weighted harmonic mean of the precision and recall of the predicted model. The overall results of the study show that the F-measure value of the predicted model, which is generated using Random Forests technique, ranges from 83% to 98%. Additionally, the Random Forests technique outperforms the other techniques. Lastly, our results indicate that the complexity and coupling metrics have the most impact on whether a SCA tool with generate a false-positive warning or not. © 2018 IEEE.},
author_keywords={Feature Selection;  K-Nearest Neighbor;  Machine Learning;  Random Forests;  Software Engineering Metrics;  Static Code Analysis;  Support Vector Machine},
keywords={Codes (symbols);  Couplings;  Decision trees;  Feature extraction;  Learning systems;  Machine learning;  Motion compensation;  Nearest neighbor search;  Object oriented programming;  Software engineering;  Support vector machines, K nearest neighbor (KNN);  K-nearest neighbors;  Machine learning techniques;  Random forests;  Software engineering metrics;  Static code analysis;  Static code analysis tools;  Weighted harmonic means, Learning algorithms},
funding_details={D15PC00169},
funding_details={U.S. Department of Homeland SecurityU.S. Department of Homeland Security, DHS},
funding_text 1={This paper was sponsored in part by grant KT-1600071C-IU Kestrel Technology and D15PC00169 from the Department of Homeland Security (DHS).},
references={Gomes, I., Morgado, P., Gomes, T., Moreira, R., (2010) An Overview on the Static Code Analysis Approach in Software Development; Alikhashashneh, E., Raje, R., Hill, J., Using software engineering metrics to evaluate the quality of static code analysis tools (2018) Proceedings of the 1st International Conference on Data Intelligence and Security; Velicheti, L.M.R., Feiock, D.C., Peiris, M., Raje, R., Hill, J.H., Toward modeling the behavior of static code analysis tools (2014) Proceedings of the 9th Cyber and Information Security Research Conference; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don't software developers use static analysis tools to find bugs? (2013) Proceedings of the 2013 International Conference on Software Engineering; Yuksel, U., Sözer, H., Automated classification of static code analysis alerts: A case study (2013) ICSM; Tripp, O., Guarnieri, S., Pistoia, M., Aravkin, Y.A., ALETHEIA: Improving the usability of static security analysis (2014) Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security; Juliet Test Suite v1. 1 for C/C++ User Guide., , Center for Assured Software, National Security Agency; Livny, M., Miller, B., The Case for An Open and Evolving Software Assurance Framework, , http://continuousassurance-org.luisamigo.proxybk.com/wp-content/uploads/2013/11/White-Paper-Evolving-Framework.pdf; Hernández, M., Stolfo, S., Real-world data is dirty: Data cleansing and the merge/purge problem (1998) Data Min. Knowl. Discov.; Hall, M., (1999) Correlation-based Feature Selection for Machine Learning, , Ph. D. dissertation, Department of Computer Science, University of Waikato, Hamilton, New Zealand; Steinwart, I., Christmann, A., (2008) Support Vector Machines, , Springer Publishing Company, Incorporated; Dasarathy, B., (1991) Nearest Neighbor (NN) Norms: Nn Pattern Classification Techniques, , IEEE Computer Society Press; Breiman, L., Random forests (2001) Mach. Learn., (1), pp. 5-32; Rajput, A., Aharwal, R.P., Dubey, M., Saxena, S., Raghuvanshi, M., J48 and jrip rules for e-governance data (2011) International Journal of Computer Science and Security (IJCSS); Benesty, J., Chen, J., Huang, Y., Cohen, I., (2009) Pearson Correlation Coefficient, pp. 1-4. , Springer Berlin Heidelberg; Ganganwar, V., An overview of classification algorithms for imbalanced datasets (2012) International Journal of Emerging Technology and Advanced Engineering; Chawla, N.V., Bowyer, K.W., Hall, L.O., Kegelmeyer, W.P., Smote: Synthetic minority over-sampling technique (2002) J. Artif. Int. Res.; Fernández, A., López, V., Galar, M., Del Jesus, M., Herrera, F., Analysing the classification of imbalanced data-sets with multiple classes: Binarization techniques and ad-hoc approaches (2013) Knowledge-Based Systems; Stone, M., Cross-validatory choice and assessment of statistical predictions (1974) Journal of the Royal Statistical Society; Elish, K.O., Elish, M.O., Predicting defect-prone software modules using support vector machines (2008) Journal of Systems and Software; Younis, A., Malaiya, Y., Anderson, C., Ray, I., To fear or not to fear that is the question: Code characteristics of a vulnerable functionwith an existing exploit (2016) Proceedings of the Sixth ACM Conference on Data and Application Security and Privacy; Ayewah, N., Hovemeyer, D., Morgenthaler, J.D., Penix, J., Pugh, W., Using static analysis to find bugs (2008) IEEE Software; The Common Weakness Enumeration (CWE) Initiative, , http://cwe-mitre-org.luisamigo.proxybk.com/, MITRE Corporation; Cwe-476: Null Pointer Dereference, , https://cwe-mitre-org.luisamigo.proxybk.com/data/definitions/476.html, accessed: 2017-09-15; https://scitools-com.luisamigo.proxybk.com/, accessed: 2018-03-15; Kotsiantis, S., Kanellopoulos, D., Pintelas, P., Handling imbalanced datasets: A review (2006) GESTS International Transactions on Computer Science and Engineering; Bekkar, M., Djemaa, H.K., Alitouche, T.A., Evaluation measures for models assessment over imbalanced data sets (2013) Journal of Information Engineering and Applications; Anderson, G., (2009) Random Relational Rules, , Ph. D. dissertation, Department of Computer Science, University of Waikato, Hamilton, New Zealand; Barstad, V., Goodwin, M., Gjø Sæter, T., Predicting source code quality with static analysis and machine learning (2014) Norsk Informatikkonferanse; Koc, U., Saadatpanah, P., Foster, J.S., Porter, A.A., Learning a classifier for false positive error reports emitted by static code analysis tools (2017) Workshop on Machine Learning and Programming Languages; Reynolds, Z.P., JayanthIndiana, A.B., Koc, U., Porter, A.A., Raje, R.R., Hill, J.H., Identifying and documenting false positive patterns generated by static code analysis tools (2017) Proceedings of the 4th International Workshop on Software Engineering Research and Industrial Practice},
publisher={IEEE Computer Society},
issn={21615322},
isbn={9781538691205},
language={English},
abbrev_source_title={Proc. IEEE/ACS Int. Conf. Comput. Syst. Appl., AICCSA},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Guo2019285,
author={Guo, P.J. and Engler, D.},
title={Linux kernel developer responses to static analysis bug reports},
journal={Proceedings of the 2009 USENIX Annual Technical Conference},
year={2019},
pages={285-292},
note={cited By 21; Conference of 2009 USENIX Annual Technical Conference ; Conference Date: 14 June 2009 Through 19 June 2009;  Conference Code:155394},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85077068139&partnerID=40&md5=cccc0a307bd19cacb40aee59759d19a5},
affiliation={Stanford University, United States},
abstract={We present a study of how Linux kernel developers respond to bug reports issued by a static analysis tool. We found that developers prefer to triage reports in younger, smaller, and more actively-maintained files (§2), first address easy-to-fix bugs and defer difficult (but possibly critical) bugs (§3), and triage bugs in batches rather than individually (§4). Also, although automated tools cannot find many types of bugs, they can be effective at directing developers' attentions towards parts of the codebase that contain up to 3X more user-reported bugs (§5). Our insights into developer attitudes towards static analysis tools allow us to make suggestions for improving their usability and effectiveness. We feel that it could be effective to run static analysis tools continuously while programming and before committing code, to rank reports so that those most likely to be triaged are shown to developers first, to show the easiest reports to new developers, to perform deeper analysis on more actively-maintained code, and to use reports as indirect indicators of code quality and importance.},
keywords={Linux;  Quality control;  Static analysis, Automated tools;  Bug reports;  Code quality;  Linux kernel;  Most likely, Program debugging},
funding_details={National Science FoundationNational Science Foundation, NSF, CCF-0424422},
funding_text 1={We thank David Maxwell for providing the Coverity dataset, Greg Little and Derek Rayside for help with questionnaire design, kernel developers who responded to our questionnaire, Joel Brandt, Cristian Cadar, Imran Haque, David Maxwell, Derek Rayside, and our shepherd George Candea for comments on this paper and its earlier drafts. This research was supported by NSF TRUST grant CCF-0424422 and the NDSEG fellowship.},
references={Sparse - A Semantic Parser for C, , http://www-kernel-org.luisamigo.proxybk.com/pub/software/devel/sparse/; Anvik, J., Hiew, L., Murphy, G.C., Who should fix this bug? (2006) ICSE'06: Proceedings of the 28th International Conference on Software Engineering, pp. 361-370. , May; Ayewah, N., Hovemeyer, D., Morgenthaler, J.D., Penix, J., Pugh, W., Using static analysis to find bugs (2008) IEEE Softw, 25 (5), pp. 22-29; Chou, A., Yang, J., Chelf, B., Hallem, S., Engler, D., An empirical study of operating systems errors (2001) SOSP'01: Proceedings of the Symposium on Operating Systems Principles, pp. 73-88; Coverity Scan Open Source Report 2008, , http://scan-coverity-com.luisamigo.proxybk.com/report/; Delvare, J., (2005) Email: Re: Do Not Misuse Coverity Please -, , http://lkml-org.luisamigo.proxybk.com/lkml/2005/3/27/131, Linux Kernel Mailing List Mar; Guo, P.J., (2008) Email: Research Questionnaire about Kernel Development, , http://lkml-org.luisamigo.proxybk.com/lkml/2008/8/7/98, - Linux Kernel Mailing List Aug; Guo, P.J., Using logistic regression to predict developer responses to Coverity Scan bug reports (2008) Tech. Rep. CSTR 2008-04, , Stanford Computer Systems Lab, Stanford, CA, July; Kim, S., Ernst, M.D., Which warnings should I fix first? (2007) ESEC-FSE'07: Proceedings of Symposium on the Foundations of Software Engineering, pp. 45-54; Kremenek, T., Ashcraft, K., Yang, J., Engler, D., Correlation exploitation in error ranking (2004) SIGSOFT Softw. Eng. Notes, 29 (6), pp. 83-93; Nagappan, N., Ball, T., Static analysis tools as early indicators of pre-release defect density (2005) ICSE'05: Proceedings of the 27th International Conference on Software Engineering, pp. 580-586; Phang, K.Y., Foster, J.S., Hicks, M., Sazawal, V., Path projection for user-centered static analysis tools (2008) PASTE '08: Proceedings of the 8th ACM Workshop on Program Analysis for Software Tools and Engineering; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) ICSE'08: Proceedings of the 30th International Conference on Software Engineering, pp. 341-350},
sponsors={et al.; Google; hp; Microsoft Research; The USENIX Association; VMware},
publisher={USENIX Association},
isbn={9781931971683},
language={English},
abbrev_source_title={Proc. USENIX Annu. Tech. Conf.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Bai2019255,
author={Bai, J.-J. and Lawall, J. and Chen, Q.-L. and Hu, S.-M.},
title={Effective static analysis of concurrency use-after-free bugs in Linux device drivers},
journal={Proceedings of the 2019 USENIX Annual Technical Conference, USENIX ATC 2019},
year={2019},
pages={255-268},
note={cited By 14; Conference of 2019 USENIX Annual Technical Conference, USENIX ATC 2019 ; Conference Date: 10 July 2019 Through 12 July 2019;  Conference Code:155412},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85077032598&partnerID=40&md5=69a4e6a12ac2acf63b8115dae3922e35},
affiliation={Tsinghua University, China; Sorbonne University, Inria, LIP6, France},
abstract={In Linux device drivers, use-after-free (UAF) bugs can cause system crashes and serious security problems. According to our study of Linux kernel commits, 42% of the driver commits fixing use-after-free bugs involve driver concurrency. We refer to these use-after-free bugs as concurrency use-after-free bugs. Due to the non-determinism of concurrent execution, concurrency use-after-free bugs are often more difficult to reproduce and detect than sequential use-after-free bugs. In this paper, we propose a practical static analysis approach named DCUAF, to effectively detect concurrency use-after-free bugs in Linux device drivers. DCUAF combines a local analysis analyzing the source code of each driver with a global analysis statistically analyzing the local results of all drivers, forming a local-global analysis, to extract the pairs of driver interface functions that may be concurrently executed. Then, with these pairs, DCUAF performs a summary-based lockset analysis to detect concurrency use-after-free bugs. We have evaluated DCUAF on the driver code of Linux 4.19, and found 640 real concurrency use-after-free bugs. We have randomly selected 130 of the real bugs and reported them to Linux kernel developers, and 95 have been confirmed. © Proceedings of the 2019 USENIX Annual Technical Conference, USENIX ATC 2019. All rights reserved.},
keywords={Program debugging;  Static analysis, Analysis approach;  Concurrent execution;  Driver interface;  Global analysis;  Local analysis;  Non Determinism;  Security problems;  System crashes, Linux},
references={Bai, J.-J., Linux Kernel Commit 2ff33d663739: Fix Some Concurrency Double-Free Bugs in the Isdn_tty Driver, , https://github-com.luisamigo.proxybk.com/torvalds/linux/commit/2ff33d663739; Bai, J.-J., Linux Kernel Commit 4f68ef64cd7f: Fix Some Concurrency Use-After-Free Bugs in the Cw1200 Driver, , https://github-com.luisamigo.proxybk.com/torvalds/linux/commit/4f68ef64cd7f; Bai, J.-J., Linux Kernel Commit 7418e6520f22: Fix A Concurrency Use-After-Free Bug in the Hfc_pci Driver, , https://github-com.luisamigo.proxybk.com/torvalds/linux/commit/7418e6520f22; Bai, J.-J., Wang, Y.-P., Lawall, J., Hu, S.M., DSAC: Effective static analysis of sleep-in-atomic-context bugs in kernel modules (2018) Proceedings of the 2018 USENIX Annual Technical Conference, pp. 587-600; Bai, J.-J., Wang, Y.-P., Liu, H.-Q., Hu, S.-M., Mining and checking paired functions in device drivers using characteristic fault injection (2016) Information and Software Technology, 73, pp. 122-133; Caballero, J., Grieco, G., Marron, M., Nappa, A., Undangle: Early detection of dangling pointers in use-after-free and double-free vulnerabilities (2012) Proceedings of the 2012 International Symposium on Software Testing and Analysis (ISSTA), pp. 133-143; Chen, H., Mao, Y., Wang, X., Zhou, D., Zel-Dovich, N., Kaashoek, M.F., Linux kernel vulnerabilities: State-of-the-art defenses and open problems (2011) Proceedings of the 2nd Asia-Pacific Workshop on Systems (APSys), pp. 1-5; Chen, Q.-L., Bai, J.-J., Jiang, Z.-M., Lawall, J., Hu, S.-M., Detecting data races caused by inconsistent lock protection in device drivers (2019) Proceedings of the 26th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 366-376; Clang Compiler, , http://clang-llvm-org.luisamigo.proxybk.com/; Corbet, J., (2008) Atomic Context and Kernel Api Design, , https://lwn-net.luisamigo.proxybk.com/Articles/274695/; Coverity, , https://scan-coverity-com;.luisamigo.proxybk.com Deligiannis, P., Donaldson, A.F., Rakamaric, Z., Fast and precise symbolic analysis of concurrency bugs in device drivers (2015) Proceedings of the 30th International Conference on Automated Software Engineering (ASE), pp. 166-177; Engler, D., Ashcraft, K., RacerX: Effective, static detection of race conditions and deadlocks (2003) Proceedings of the 19th International Symposium on Operating Systems Principles (SOSP), pp. 237-252; Engler, D., Chen, D.Y., Hallem, S., Chou, A., Chelf, B., Bugs as deviant behavior: A general approach to inferring errors in systems code (2001) Proceedings of the 18th International Symposium on Operating Systems Principles (SOSP), pp. 57-72; Erickson, J., Musuvathi, M., Burckhardt, S., Olynyk, K., Effective data-race detection for the kernel (2010) Proceedings of the 9th International Conference on Operating Systems Design and Implementation (OSDI), pp. 151-162; Heintze, N., Tardieu, O., Ultra-fast aliasing analysis using CLA: A million lines of C code in a second (2001) Proceedings of the 2001 International Conference on Programming Language Design and Implementation (PLDI), pp. 254-263; Hong, S., Kim, M., Effective pattern-driven concurrency bug detection for operating systems (2013) Journal of Systems and Software (JSS), 86 (2), pp. 377-388; Jiang, Y., Yang, Y., Xiao, T., Sheng, T., Chen, W., DRDDR: A lightweight method to detect data races in Linux kernel (2016) The Journal of Supercomputing, 72 (4), pp. 1645-1659; The Kernel Address Sanitizer, , https://www-kernel-org.luisamigo.proxybk.com/doc/html/latest/dev-tools/kasan.html; Detecting Data Races in Linux Kernel Modules by Collecting Runtime Information, , https://github-com.luisamigo.proxybk.com/euspectre/kernel-strider; Lal, A., Qadeer, S., Lahiri, S.K., A solver for reachability modulo theories (2012) Proceedings of the 2012 International Conference on Computer Aided Verification (CAV), pp. 427-443; Larosa, C., Xiong, L., Mandelberg, K., Frequent pattern mining for kernel trace data (2008) Proceedings of the 2008 ACM Symposium on Applied Computing, pp. 880-885; Lawall, J.L., Brunel, J., Palix, N., Hansen, R.R., Stuart, H., Muller, G., WYSiWIB: A declarative approach to finding API protocols and bugs in Linux code (2009) Proceedings of the 39th International Conference on Dependable Systems and Networks (DSN), pp. 43-52; Linux Driver Verification, , http://linuxtesting-org.luisamigo.proxybk.com/ldv; Lee, B., Song, C., Jang, Y., Wang, T., Kim, T., Lu, L., Lee, W., Preventing use-after-free with dangling pointers nullification (2015) Proceedings of the 2015 Network and Distributed System Security Symposium (NDSS); Li, Z., Zhou, Y., PR-Miner: Automatically extracting implicit programming rules and detecting violations in large software code (2005) Proceedings of the 13th International Symposium on Foundations of Software Engineering (FSE), pp. 306-315; Linux Kernel Source Tree, , https://github-com.luisamigo.proxybk.com/torvalds/linux; Lochmann, A., Schirmeier, H., Borghorst, H., Spinczyk, O., LockDoc: Trace-based analysis of locking in the Linux kernel (2019) Proceedings of the 14th European Conference on Computer Systems (EuroSys), pp. 1101-1115; Lu, S., Park, S., Hu, C., Ma, X., Jiang, W., Li, Z., Popa, R.A., Zhou, Y., MUVi: Automatically inferring multi-variable access correlations and detecting related semantic and concurrency bugs (2007) Proceedings of 21st International Symposium on Operating Systems Principles (SOSP), pp. 103-116; Padioleau, Y., Lawall, J., Hansen, R.R., Muller, G., Documenting and automating collateral evolutions in linux device drivers (2008) Proceedings of the 3rd European Conference on Computer Systems (EuroSys), pp. 247-260; Saha, S., Lozi, J.-P., Thomas, G., Lawall, J.L., Muller, G., Hector: Detecting resource-release omission faults in error-handling code for systems software (2013) Proceedings of the 43rd International Conference on Dependable Systems and Networks (DSN), pp. 1-12; Savage, S., Burrows, M., Nelson, G., Sobalvarro, P., Anderson, T., Eraser: A dynamic data race detector for multithreaded programs (1997) ACM Transactions on Computer Systems (TOCS), 15 (4), pp. 391-411; Serebryany, K., Bruening, D., Potapenko, A., Vyukov, D., Addresssanitizer: A fast address sanity checker (2012) Proceedings of the 2012 USENIX Annual Technical Conference, pp. 309-318; Syzkaller: An Unsupervised, Coverage-Guided Kernel Fuzzer, , https://github-com.luisamigo.proxybk.com/google/syzkaller; The USB Related Documentations in the Linux Kernel, , https://www-kernel-org.luisamigo.proxybk.com/doc/Documentation/usb/; Van Der Kouwe, E., Nigade, V., Giuffrida, C., Dangsan: Scalable use-after-free detection (2017) Proceedings of the 12th European Conference on Computer Systems (EuroSys), pp. 405-419; Vojdani, V., Apinis, K., Rõtov, V., Seidl, H., Vene, V., Vogler, R., Static race detection for device drivers: The Goblint approach (2016) Proceedings of the 31st International Conference on Automated Software Engineering (ASE), pp. 391-402; Voung, J.W., Jhala, R., Lerner, S., Relay: Static race detection on millions of lines of code (2007) Proceedings of the 2007 International Symposium on Foundations of Software Engineering (FSE), pp. 205-214; Weichbrodt, N., Kurmus, A., Pietzuch, P., Kapitza, R., AsyncShock: Exploiting synchronisation bugs in Intel SGX enclaves (2016) Proceedings of the 2016 European Symposium on Research in Computer Security (ESORICS), pp. 440-457; Xu, W., Li, J., Shu, J., Yang, W., Xie, T., Zhang, Y., Gu, D., From collision to exploitation: Unleashing use-after-free vulnerabilities in Linux kernel (2015) Proceedings of the 22nd International Conference on Computer and Communications Security (CCS), pp. 414-425; Yan, H., Sui, Y., Chen, S., Xue, J., Machine-learning-guided typestate analysis for static use-after-free detection (2017) Proceedings of the 33rd Annual Computer Security Applications Conference (ACSAC), pp. 42-54; Yan, H., Sui, Y., Chen, S., Xue, J., Spatiotemporal context reduction: A pointer-analysis-based static approach for detecting use-after-free vulnerabilities (2018) Proceedings of the 40th International Conference on Software Engineering (ICSE), pp. 327-337; Yang, J., Evans, D., Bhardwaj, D., Bhat, T., Das, M., Perracotta: Mining temporal API rules from imperfect traces (2006) Proceedings of 28th International Conference on Software Engineering (ICSE), pp. 282-291; Ye, J., Zhang, C., Han, X., UafChecker: Scalable static detection of use-after-free vulnerabilities (2014) Proceedings of the 21st International Conference on Computer and Communications Security (CCS), pp. 1529-1531; Younan, Y., Freesentry: Protecting against use-after-free vulnerabilities due to dangling pointers (2015) Proceedings of the 2015 Network and Distributed System Security Symposium (NDSS); Yun, I., Min, C., Si, X., Jang, Y., Kim, T., Naik, M., Apisan: Sanitizing API usages through semantic cross-checking (2016) Proceedings of the 2016 USENIX Security Symposium, pp. 363-378},
sponsors={Facebook; NSF; Nutanix; Oracle; The USENIX Association; VMware},
publisher={USENIX Association},
isbn={9781939133038},
language={English},
abbrev_source_title={Proc. USENIX Annu. Tech. Conf., USENIX ATC},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Gerasimov2018467,
author={Gerasimov, A.Y. and Kruglov, L.V. and Ermakov, M.K. and Vartanov, S.P.},
title={An Approach to Reachability Determination for Static Analysis Defects with the Help of Dynamic Symbolic Execution},
journal={Programming and Computer Software},
year={2018},
volume={44},
number={6},
pages={467-475},
doi={10.1134/S0361768818060051},
note={cited By 2},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85062565475&doi=10.1134%2fS0361768818060051&partnerID=40&md5=b6f1dad7879ce05e10236825a1707919},
affiliation={Institute for System Programming, Russian Academy of Sciences, ul. Solzhenitsyna 25, Moscow, Russian Federation},
abstract={Abstract: Program analysis methods for error detection are conventionally divided into two groups: static analysis methods and dynamic analysis methods. In this paper, we present a combined approach that allows one to determine reachability for defects found by static program analysis techniques through applying dynamic symbolic execution to a program. This approach is an extension of our previous approach to determining the reachability of specific program instructions by using dynamic symbolic execution. The approach is sequentially applied to several points in the program: a defect source point, a defect sink point, and additional intermediate conditional jumps related to a defect under analysis. Our approach can be briefly described as follows. First, static analysis of the program executable code is carried out to gather information about execution paths that guide dynamic symbolic execution to the source point of a defect. Then, dynamic symbolic execution is performed to generate an input dataset for reaching the defect source point and the defect sink point through intermediate conditional jumps. Dynamic symbolic execution is guided by the heuristic of the minimum distance from the previous path to the next defect trace point when selecting execution paths. The distance metric is computed using an extended call graph of the program, which combines its call graph and portions of its control flow graph that include all paths leading to the defect sink point. We evaluate our approach by using several open-source command line programs from Debian Linux. The evaluation confirms that the proposed approach can be used for classification of defects found by static program analysis. However, we found some limitations that prevent deploying this approach to industrial program analyzers. Mitigating these limitations is one of the possible directions for future research. © 2018, Pleiades Publishing, Ltd.},
keywords={Computer operating systems;  Data flow analysis;  Defects;  Flow graphs;  Model checking, Classification of defects;  Command line programs;  Control flow graphs;  Dynamic analysis method;  Dynamic symbolic executions;  Program instructions;  Static analysis method;  Static program analysis, Static analysis},
references={Vogelsang, A., Fehnker, A., Huuck, R., Reif, W., Software metrics in static program analysis (2010) Proc. 12Th Int. Conf. Formal Engineering Methods and Software Engineering, pp. 485-500. , Shanghai; Kim, Y., Kim, Y., Kim, T., Lee, G., Jang, Y., Kim, M., Automated unit testing of large industrial embedded software using concolic testing (2013) Proc. 28Th IEEE/ACM Int. Conf. Automated Software Engineering, Silicon Valley, pp. 519-528; Xie, Y., Chou, A., Engler, D., ARCHER: Using symbolic, path-sensitive analysis to detect memory access errors (2003) Proc. 9Th European Software Engineering Conf. Held Jointly with 11Th ACM Sigsoft Int. Symp. Foundations of Software Engineering (ESEC/FSE), pp. 327-336. , Helsinki; Bessey, A., Block, K., Chelf, B., Chow, A., Fulton, B., Hallem, S., Henri-Gros, C., Engler, D., A few billion lines of code later: Using static analysis to find bugs in the real world (2010) Commun. ACM, 53, pp. 66-75; Ivannikov, V.P., Belevantsev, A.A., Borodin, A.E., Ignat’ev, V.N., Zhurikhin, D.M., Avetisyan, A.I., Leonov, M.I., Static analyzer Svace for finding defects in source code of programs (2014) Tr. Inst. Sistemnogo Program. Ross. Akad. Nauk, 26, pp. 231-250; Engler, D., Chelf, B., Chou, A., Hallen, S., Checking system rules using system-specific, programmer-written compiler extensions (2000) Proc. 4Th Conf. Operating System Design and Implementation (OSDI), 4. , San-Diego; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don’t software developers use static analysis tools to find bugs? (2013) Proc. Int. Conf. Software Engineering (ICSE), San Francisco; Christakis, M., Muller, P., Wustholz, V., An experimental evaluation of deliberate unsoundness in a static program analyzer (2015) Proc. Int. Workshop Verification, Model Checking, and Abstract Interpretation (VMCAI), Springer, pp. 336-354; Livshits, B., Sridharan, M., Smaragdakis, Y., Lhotak, O., Amaral, J.N., Chang, B.-Y.E., Guyer, S.Z., Vardoulakis, D., In defense of soundness: A manifesto (2015) Commun. ACM, 58 (2); Cadar, C., Dunbar, D., Endger, D., KLEE: Unassisted and automatic generation of high-coverage tests for complex systems (2008) Proc. 8Th USENIX Conf. Operating Systems Design and Implementation (OSDI), pp. 209-224. , San Diego; Averginos, T., Cha, S.K., Revert, A., Schwartz, E.J., Woo, M., Brumley, D., Automatic exploit generation (2014) Commun. ACM, 57, pp. 74-84; Chipunov, V., Kuznetsov, V., Candea, G., The S2E platform: Design, implementation, and applications (2012) ACM Trans. Comput. Syst., 30 (1); Manevich, R., Sridharan, M., Adams, S., Das, M., Yang, Z., PSE: Explaining program failures via post-mortem static analysis (2004) Proc. 12Th ACM SIGSOFT Int. Symp. Foundations of Software Engineering, pp. 63-72. , New York; Song, D., Brumley, D., Yin, H., Caballero, J., Jager, I., Kang, M.G., Liang, Z., Saxena, P., BitBlaze: A new approach to computer security via binary analysis (2008) Proc. 4Th Int. Conf. Information Systems Security (ICISS), Hydarabad, India, pp. 1-25; Sen, K., Marinov, D., Agha, G., CUTE: A concolic unit testing engine for C (2005) Proc. 10Th European Software Engineering Conf. Held Jointly with 13Th ACM SIGSOFT Int. Symp. Foundations of Software Engineering (ESEC/FSE), pp. 263-272. , Lisbon; King, J.C., Symbolic execution and program testing (1976) Commun. ACM, 19, pp. 385-394; Cadar, C., Ganesh, V., Pawlowski, P., Dill, D.L., Engler, D.R., EXE: Automatically generating inputs of death (2006) Proc. 13Th ACM Conf. Computer and Communications Security (CCS), pp. 322-335. , Alexandria, USA; Schwartz, E.J., Averginos, T., Brumley, D., All you ever wanted to know about dynamic tait analysis and forward symbolic execution (But might have been afraid to ask) (2010) Proc. IEEE Symp. Security and Privacy (SP), Oakland, pp. 317-331; Csallner, C., Smaragdakis, Y., Check’N’Crash: Combining static checking and testing (2005) Proc. 27Th Int. Conf. Software Engineering (ICSE), St. Louis, pp. 422-431; Chebaro, O., Kosmatov, N., Giorgetti, A., Julliand, J., Programs slicing enhances a verification technique combining static and dynamic analysis (2012) Proc. 27Th Annual ACM Symp, pp. 1284-1291. , Applied Computing, Trento; Kim, T., Park, J., Kulinda, I., Jang, Y., Concolic testing framework for industrial embedded software (2014) Proc. 21St Asia-Pacific Software Engineering Conf. (APSEC), Jeju, South Korea, 2, pp. 7-10; Hanna, A., Ling, H.Z., Yang, X., Debbabi, M., A synergy between static and dynamic analysis or the detection of software security vulnerabilities (2009) Proc. Confederated Int. Congress Coopis, DOA, IS, and ADBASE on the Move to Meaningful Internet Systems: Part 2, Vilamoura, pp. 815-832; Csallner, C., Smaragdakis, Y., DSD-Crasher: A hybrid analysis tool for bug finding (2006) Proc. Int. Symp. Software Testing and Analysis (ISSTA), pp. 245-254. , Portland; Artho, C., Biere, A., Combined static and dynamic analysis (2005) Electron. Notes Theor. Comput. Sci., 131, pp. 3-14; Chebaro, O., Kostomarov, N., Giorgetti, A., Julliand, J., Combining static analysis and test generation for C program debugging (2010) Proc. 4Th Int. Conf. Tests and Proofs (TAP), Malaga, pp. 94-100; Schutte, J., Fedler, R., Tetze, D., ConDroid: Targeted dynamic analysis of Android applications (2015) Proc. 26Th IEEE Int. Conf. Advanced Information Networking and Applications (AINA), Gwangui, South Korea; Ge, X., Taneja, K., Xie, T., Tillmann, N., DyTa: Dynamic symbolic execution guided with static verification results (2011) Proc. 33Rd Int. Conf. Software Engineering (ICSE), Honolulu, pp. 992-994; Gerasimov, A.Y., Kruglov, L.V., Computation of input data to reach a particular function in a program by the method of iterative dynamic analysis (2016) Tr. Inst. Sistemnogo Program. Ross. Akad. Nauk, 28, pp. 159-174; Stallman, R.M., (2004) Using the GNU compiler collection: A GNU manual for GCC version 4.3.3; Isaev, I.K., Sidorov, D.V., The use of dynamic analysis for generation of input data that demonstrates critical bugs and vulnerabilities in programs (2010) Program. Comput. Software, 36, pp. 225-236; (2017), http://www-gnu-org.luisamigo.proxybk.com/software/binutils, Accessed November 1},
correspondence_address1={Gerasimov, A.Y.; Institute for System Programming, ul. Solzhenitsyna 25, Russian Federation; email: agerasimov@ispras.ru},
publisher={Pleiades Publishing},
issn={03617688},
language={English},
abbrev_source_title={Program. Comput. Softw.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Querel2018892,
author={Querel, L.-P. and Rigby, P.C.},
title={WarningsGuru: Integrating statistical bug models with static analysis to provide timely and specific bug warnings},
journal={ESEC/FSE 2018 - Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
year={2018},
pages={892-895},
doi={10.1145/3236024.3264599},
note={cited By 4; Conference of 26th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2018 ; Conference Date: 4 November 2018 Through 9 November 2018;  Conference Code:142072},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85058286979&doi=10.1145%2f3236024.3264599&partnerID=40&md5=9bcd27c6139e55707c733b0f6f2d2b8b},
affiliation={Department of Computer Science, Concordia University, Montreal, QC, Canada; Department of Software Engineering, Concordia University, Montreal, QC, Canada},
abstract={The detection of bugs in software systems has been divided into two research areas: Static code analysis and statistical modeling of historical data. Static analysis indicates precise problems on line numbers but has the disadvantage of suggesting many warning which are often false positives. In contrast, statistical models use the history of the system to suggest which files or commits are likely to contain bugs. These course-grained predictions do not indicate to the developer the precise reasons for the bug prediction. We combine static analysis with statistical bug models to limit the number of warnings and provide specific warnings information at the line level. Previous research was able to process only a limited number of releases, our tool, WarningsGuru, can analyze all commits in a source code repository and we currently have processed thousands of commits and warnings. Since we process every commit, we present developers with more precise information about when a warning is introduced allowing us to show recent warnings that are introduced in statistically risky commits. Results from two OSS projects show that CommitGuru's statistical model flags 25% and 29% of all commits as risky. When we combine this with static analysis in WarningsGuru the number of risky commits with warnings is 20% for both projects and the number commits with newwarnings is only 3% and 6%.We can drastically reduce the number of commits and warnings developers have to examine. © 2018 Association for Computing Machinery.},
author_keywords={Static Analysis;  Statistical Bug Models;  WarningsGuru},
keywords={Combines;  Program debugging;  Software engineering;  Statistics, Bug predictions;  False positive;  Historical data;  Software systems;  Source code repositories;  Static code analysis;  Statistical modeling;  WarningsGuru, Static analysis},
references={Ayewah, N., Pugh, W., David Morgenthaler, J., Penix, J., Zhou, Y.Q., Evaluating static analysis defect warnings on production software (2007) Proceedings of the 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering (PASTE '07), pp. 1-8. , ACM; Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the state of static analysis: A large-scale evaluation in open source software. (2016) 2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), 1, pp. 470-481; Couto, C., Eduardo Montandon, J., Silva, C., Tulio Valente, M., Static correspondence and correlation between field defects and warnings reported by a bug finding tool (2013) Software Quality Journal, 21 (2), pp. 241-257. , 2013; Hall, T., Beecham, S., Bowes, D., Gray, D., Counsell, S., A systematic literature review on fault prediction performance in software engineering (2012) IEEE Transactions on Software Engineering, 38 (6), pp. 1276-1304. , Nov 2012; Kamei, Y., Shihab, E., Adams, B., Hassan, A.E., Mockus, A., Sinha, A., Ubayashi, N., A large-scale empirical study of just-in-time quality assurance (2013) IEEE Trans. Softw. Eng., 39 (6), pp. 757-773. , June 2013; (2016) Blade Tool Output Integration Framework (TOIF), , http://www-kdmanalytics-com.luisamigo.proxybk.com/toif/, KDM Analytics; Koc, U., Saadatpanah, P., Foster, J.S., Porter, A.A., Learning a classifier for false positive error reports emitted by static code analysis tools (2017) Proceedings of the 1st ACM SIGPLAN International Workshop on Machine Learning and Programming Languages (MAPL 2017), pp. 35-42. , ACM; (2016) Common Weakness Enumeration (CWE), , https://cwe-mitre-org.luisamigo.proxybk.com/, MITRE Corporation; Rahman, F., Khatri, S., Barr, E.T., Devanbu, P., Comparing static bug finders and statistical prediction (2014) Proceedings of the 36th International Conference on Software Engineering (ICSE 2014), pp. 424-434. , ACM, New York, NY, USA; Rosen, C., Grawi, B., Shihab, E., Commit guru: Analytics and risk prediction of software commits (2015) Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2015), pp. 966-969. , ACM, New York, NY, USA; Tang, H., Lan, T., Hao, D., Zhang, L., Enhancing defect prediction with static defect analysis (2015) Proceedings of the 7th Asia-Pacific Symposium on Internetware (Internetware '15), pp. 43-51. , ACM, New York, NY, USA; (2016) Maven - POM Reference, , https://maven-apache-org.luisamigo.proxybk.com/pom.html, The Apache Software Foundation; Tripp, O., Guarnieri, S., Pistoia, M., Aravkin, A., ALETHEIA: Improving the usability of static security analysis (2014) Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (CCS '14), pp. 762-774. , ACM, NewYork, NY, USA},
correspondence_address1={Querel, L.-P.; Department of Computer Science, Canada; email: l_querel@encs.concordia.ca},
editor={Garci A., Pasareanu C.S., Leavens G.T.},
sponsors={ACM SIGSOFT},
publisher={Association for Computing Machinery, Inc},
isbn={9781450355735},
language={English},
abbrev_source_title={ESEC/FSE - Proc. ACM Jt. Meet. Eur. Softw. Eng. Conf. Symp. Found. Softw. Eng.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Gerasimov2018316,
author={Gerasimov, A.Y.},
title={Directed Dynamic Symbolic Execution for Static Analysis Warnings Confirmation},
journal={Programming and Computer Software},
year={2018},
volume={44},
number={5},
pages={316-323},
doi={10.1134/S036176881805002X},
note={cited By 4},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85053693540&doi=10.1134%2fS036176881805002X&partnerID=40&md5=70793c739627f796b9c5ced6048438cd},
affiliation={V.P. Ivannikov Institute for System Programming, Russian Academy of Sciences, ul. Solzhenitsyna 25, Moscow, 109004, Russian Federation},
abstract={Abstract: Currently, there is no doubt among experts in the field of program certification and quality assurance that automated program analysis methods should be used to find bugs that lead to program security vulnerabilities. The national standard for the secure software development requires the use of source code static analysis tools as one of the measures of software quality assurance at the development stage and the application of dynamic analysis and fuzz-testing of the source code at the qualification testing stage. Fundamental limitations of automated program analysis and testing methods make it impossible to carry out simultaneously exhaustive and precise analysis of programs for errors. Thereof, researches are nowadays carried out aimed at reducing the effect of fundamental limitations on the quality and productivity of automated software error detection methods. This paper discusses an approach that combines methods of source code static analysis and dynamic symbolic execution in order to increase the program error detection efficiency. © 2018, Pleiades Publishing, Ltd.},
keywords={Application programs;  Automation;  Bit error rate;  Codes (symbols);  Computer programming languages;  Computer software selection and evaluation;  Error detection;  Model checking;  Program debugging;  Quality assurance;  Quality control;  Software design;  Software testing;  Testing, Detection efficiency;  Dynamic symbolic executions;  Fundamental limitations;  Qualification testing;  Secure software development;  Software error detection;  Software quality assurance;  Source code static analysis, Static analysis},
references={Ayewah, N., Hovemeyer, D., Morgenthaler, J.D., Penix, J., Pugh, W., Experiences using static analysis to find bugs (2008) IEEE Software, 25, pp. 22-29; Calcagno, C., Distefano, D., Dubreil, J., Gabi, D., Hooimeijer, P., Luca, M., O’Hearn, P.W., Rodriguez, D., Moving fast with software verification (2015) Lect. Notes Comput. Sci., 9058, pp. 3-11; Calcagno, C., Distefano, D., Infer: An automatic program verifier for memory safety of C programs (2011) Lect. Notes Comput. Sci., 6617, pp. 459-465; Information protection. Secure software development (2016) General Requirements. – National Standard of Russian Federation; Turing, A.M., On computable numbers, with an application to the Entscheidungsproblem (1937) Proc. London Math. Soc., 42 (1), pp. 230-265; Belevantsev, A.A., (2017) Multilevel Static Analysis of Source Code for Program Quality Assurance, , Doctoral (Phys.–Math.) Dissertation, Moscow; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don’t software developers use static analysis tools to find bugs? (2013) Proc. of the 2013 Int. Conf. on Software Engineering, pp. 672-681. , San Francisco; Sadowski, C., Aftandilian, E., Eagle, A., Miller-Cushon, L., Jaspan, C., Lessons from building static analysis tools at Google (2018) Commun. ACM, 61, pp. 58-66; Boyer, R.S., Elspas, B., Levitt, K.N., SELECT—a formal system for testing and debugging programs by symbolic execution (1975) Proc. of the Int. Conf. on Reliable Software, Los Angeles, pp. 234-245; (2013), Guidelines for the Use of the C Language in Critical Systems, Warwickshire: MISRA; Seacord, R.C., Martin, R., (2009) MITRE CWE and CERT Secure Coding Standards, , Addison-Wesley Professional, Boston; King, J.C., Symbolic execution and program testing (1976) Commun. ACM, 19, pp. 385-394; Ganesh, V., Dill, D.L., A decision procedure for bit-vectors and arrays (2007) Proc. 19Th Int. Conf. on Computer Aided Verification, pp. 519-531. , Berlin; De Moura, L., Bjorner, N., Z3: An efficient SMT solver (2008) Lect. Notes Comput. Sci., 4963, pp. 337-340; Baldoni, R., Coppa, E., D’Elia, D.C., Demetrescu, C., Finocchi, I., A survey of symbolic execution techniques (2018) ACM Comput. Surv., 51 (3); Cha, S.K., Avgerinos, T., Rebert, A., Brumley, D., Unleashing mayhem on binary code (2012) Proc. 2012 IEEE Symp. on Security and Privacy, pp. 380-394. , San Francisco; Avgerinos, T., Cha, S.K., Rebert, A., Schwartz, E.J., Woo, M., Brumley, D., Automatic exploit generation (2014) Commun. ACM, 57, pp. 74-84; Macintyre, B., Gandy, M., Dow, S., Bolter, J.D., DART: A toolkit for rapid design exploration of augmented reality experiences (2004) Proc. 17Th Annual ACM Symp. on User Interface Software and Technology, pp. 197-206. , Santa Fe; Sen, K., Marinov, D., Agha, G., CUTE: A concolic unit testing engine for C (2005) Proc. 10Th European Software Engineering Conf. Held Jointly with 13Th ACM SIGSOFT Int. Symp. on Foundations of Software Engineering, pp. 263-272. , Lisbon; Cadar, C., Ganesh, V., Pawlowski, P.M., Dill, D.L., Engler, D.R., EXE: Automatically generating inputs of death (2008) ACM Trans. Inform. Syst. Secur., 12 (2); Godefroid, P., Levin, M.Y., Molnar, D., Automated whitebox fuzz testing (2008) Proc. 16Th Annual Network & Distributed System Security Symp, pp. 151-166. , San Diego; Cadar, C., Dunbar, D., Engler, D., KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs (2008) Proc. 8Th USENIX Conf. on Operating Systems Design and Implementation, pp. 209-224. , San Diego; Chipounov, V., Kuznetsov, V., Candea, G., S2E: A platform for in-vivo multi-path analysis of software systems (2011) Proc. 16Th Int. Conf. on Architectural Support for Programming Languages and Operating Systems, pp. 265-278. , Newport Beach; Taneja, K., Xie, T., Tillmann, N., de Halleux, J., Schulte, W., Guided path exploration for regression test generation (2011) Proc. 2011 Int. Symp. on Software Testing and Analysis, pp. 1-11. , Toronto; Yang, G., Person, S., Rungta, N., Khurshid, S., Directed incremental symbolic execution (2011) Proc. 32Nd ACM SIGPLAN Conf. on Programming Language Design and Implementation, San Jose, pp. 504-515; Zamfir, C., Candea, G., Execution synthesis: A technique for automated software debugging (2010) Proc. 5Th European Conf. on Computer Systems, pp. 321-334. , Paris; Ma, K.K., Phang, K.Y., Foster, J.S., Hicks, M., Directed symbolic execution (2011) Proc. 18Th Int. Conf. on Static Analysis, pp. 95-111. , Venice; Parvez, R., Ward, P.A.S., Ganesh, V., Combining static analysis and targeted symbolic execution for scalable bug-finding in application binaries (2016) Proc. 26Th Annual Int. Conf. on Computer Science and Software Engineering, pp. 116-127. , Toronto; Borodin, A.E., Interprocedural context-sensitive static analysis for finding defects in C/C++ program source code (2016) Cand. Sci. (Phys.–Math.), , Dissertation, Moscow; Gerasimov, A.Y., Survey on static program analysis results refinement approaches (2017) Tr. Inst. Sistemnogo Program. Ross. Akad. Nauk, 29, pp. 75-98; Gerasimov, A.Y., Kruglov, L.V., Ermakov, M.K., Vartanov, S.P., An approach of reachability determination for static analysis defects with help of dynamic symbolic execution (2017) Tr. Inst. Sistemnogo Program. Ross. Akad. Nauk, 29, pp. 111-134; Gerasimov, A.Y., On limitations of the classification method of program defects found by static program analysis methods using dynamic symbolic execution (2017) Trudy 60-I Vserosiiskoi Naychnoi Konferentsii MFTI (Proc. 60Th MPTI All-Russian Scientific Conf.), Moscow; Isaev, I.K., Sidorov, D.V., The use of dynamic analysis for generation of input data that demonstrates critical bugs and vulnerabilities in programs (2010) Program. Comput. Software, 36, pp. 225-236; Fedotov, A.N., Kaushan, V.V., Gaisaryan, S.S., Kurmangaleev, S.F., Building security predicates for some types of vulnerabilities (2017) Tr. Inst. Sistemnogo Program. Ross. Akad. Nauk, 29, pp. 151-162; Li, M., Chen, Y., Wang, L., Xu, G., Dynamically validating static memory leak warnings (2013) Proc. 2013 Int. Symp. on Software Testing and Analysis, pp. 112-122. , Lugano; Xu, R.-G., Godefroid, P., Majumdar, R., Testing for buffer overflows with length abstraction (2008) Proc. 2008 Int. Symp. on Software Testing and Analysis, pp. 27-38. , Seattle; (2018), https://software-microfocus-com.luisamigo.proxybk.com/en-us/solutions/application-security?jumpid=va_912rzvtnd7/, Cited May 15; Burnim, J., Sen, K., Heuristics for scalable dynamic test generation (2008) Proc. 2008 23Rd IEEE/ACM Int. Conf. on Automated Software Engineering, pp. 443-446; Cui, H., Hu, G., Wu, J., Yang, J., Verifying systems rules using rule-directed symbolic execution (2013) Proc. 18Th Int. Conf. on Architectural Support for Programming Languages and Operating Systems, pp. 329-342. , Houston; Neugschwandtner, M., Comparetti, P.M., Haller, I., Bos, H., The BORG: Nanoprobing binaries for buffer overreads (2015) Proc. 5Th ACM Conf. on Data and Application Security and Privacy, San Antonio, pp. 87-97; Ivannikov, V.P., Belevantsev, A.A., Borodin, A.E., Ignat’ev, V.N., Zhurikhin, D.M., Avetisyan, A.I., Leonov, M.I., Static analyzer Svace for finding defects in a source program code (2014) Tr. Inst. Sistemnogo Program. Ross. Akad. Nauk, 40, pp. 265-275; Gerasimov, A., Vartanov, S., Ermakov, M., Kruglov, L., Kutz, D., Novikov, A., Asryan, S., Anxiety: A dynamic symbolic execution framework (2017) Proc. 2017 Ivannikov ISPRAS Open Conf, pp. 16-22. , Moscow; Schwartz, E.J., Avgerinos, T., Brumley, D., All you ever wanted to know about dynamic taint analysis and forward symbolic execution (But might have been afraid to ask), Proc (2010) IEEE Symp. on Security and Privacy, Oakland, 2010, pp. 317-331; Ge, X., Taneja, K., Xie, T., Tillmann, N., DyTa: Dynamic symbolic execution guided with static verification results (2011) Proc. 33Rd Int. Conf. on Software Engineering, pp. 992-994. , Honolulu; Chebaro, O., Kosmatov, N., Giorgetti, A., Julliand, J., The sante tool: Value analysis (2011) Program Slicing and Test Generation for C Program Debugging, Proc. 5Th Int. Conf. on Tests and Proofs, pp. 78-83. , Zurich; Cuoq, P., Signoles, J., Baudin, P., Bonichon, R., Canet, G., Correnson, L., Monate, B., Puccetti, A., Experience report: Ocaml for an industrial-strength static analysis framework (2009) Proc. 14Th ACM SIGPLAN Int. Conf. on Functional Programming, pp. 281-286. , Edinburgh; Williams, N., Marre, B., Mouy, P., Roger, M., PathCrawler: Automatic generation of path tests by combining static and dynamic analysis (2005) Proc. 5Th European Conf. on Dependable Computing, pp. 281-292. , Budapest},
correspondence_address1={Gerasimov, A.Y.; V.P. Ivannikov Institute for System Programming, ul. Solzhenitsyna 25, Russian Federation; email: agerasimov@ispras.ru},
publisher={Pleiades Publishing},
issn={03617688},
language={English},
abbrev_source_title={Program. Comput. Softw.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Flynn201813,
author={Flynn, L. and Snavely, W. and Svoboda, D. and VanHoudnos, N. and Qin, R. and Burns, J. and Zubrow, D. and Stoddard, R. and Marce-Santurio, G.},
title={Prioritizing alerts from multiple static analysis tools, using classification models},
journal={Proceedings - International Conference on Software Engineering},
year={2018},
pages={13-20},
doi={10.1145/3194095.3194100},
note={cited By 11; Conference of ACM/IEEE 1st International Workshop on Software Qualities and Their Dependencies, SQUADE 2018, co-located with International Conference on Software Engineering, ICSE 2018 ; Conference Date: 28 May 2018;  Conference Code:138310},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85051504155&doi=10.1145%2f3194095.3194100&partnerID=40&md5=d5539f59ce65c6a610e5d288698e1072},
affiliation={Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States},
abstract={Static analysis (SA) tools examine code for flaws without executing the code, and produce warnings ("alerts") about possible flaws. A human auditor then evaluates the validity of the purported code flaws. The effort required to manually audit all alerts and repair all confirmed code flaws is often too much for a project's budget and schedule. An alert triaging tool enables strategically prioritizing alerts for examination, and could use classifier confidence. We developed and tested classification models that predict if static analysis alerts are true or false positives, using a novel combination of multiple static analysis tools, features from the alerts, alert fusion, code base metrics, and archived audit determinations. We developed classifiers using a partition of the data, then evaluated the performance of the classifier using standard measurements, including specificity, sensitivity, and accuracy. Test results and overall data analysis show accurate classifiers were developed, and specifically using multiple SA tools increased classifier accuracy, but labeled data for many types of flaws were inadequately represented (if at all) in the archive data, resulting in poor predictive accuracy for many of those flaws. © 2018 Association for Computing Machinery.},
author_keywords={Accurate;  Alert;  Classification;  Rapid;  Static analysis},
keywords={Budget control;  Classification (of information);  Codes (symbols);  Data handling;  Software engineering, Accurate;  Alert;  Alert fusions;  Classification models;  False positive;  Predictive accuracy;  Rapid;  Standard measurements, Static analysis},
funding_details={U.S. Department of DefenseU.S. Department of Defense, DOD},
funding_text 1={Copyright 2018 ACM. All Rights Reserved. This material is based upon work funded and supported by the Department of Defense under Contract No. FA8702-15-D-0002 with Carnegie Mellon University for the operation of the Software Engineering Institute, a federally funded research and development center. References herein to any specific commercial product, process, or service by trade name, trade mark, manufacturer, or otherwise, does not necessarily constitute or imply its endorsement, recommendation, or favoring by Carnegie Mellon University or its Software Engineering Institute. Carnegie Mellon® and CERT® are registered in the U.S. Patent and Trademark Office by Carnegie Mellon University. DM18-0147},
references={Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the state of static analysis: A large-scale evaluation in open source software (2016) 2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER, 1, pp. 470-481. , IEEE; Bessey, A., Block, K., Chelf, B., Chou, A., Fulton, B., Hallem, S., Henri-Gros, C., Engler, D., A few billion lines of code later: Using static analysis to find bugs in the real world (2010) Commun. ACM, 53 (2), pp. 66-75. , (2010; Delaitre, A., Stivalet, B., Fong, E., Okun, V., Evaluating bug finders-test and measurement of static code analyzers (2015) Complex Faults and Failures in Large Software Systems (COUFLESS), 2015 IEEE/ACM 1st International Workshop On. IEEE, pp. 14-20; Flynn, L., Svoboda, D., Snavely, W., Hands-on tutorial: Auditing static analysis alerts using a lexicon & rules (2017) Cybersecurity Development (SecDev), 2017 IEEE. IEEE, pp. 1-2; Flynn, L., Svoboda, D., Snavely, W., Presentation for hands-on tutorial: Auditing static analysis alerts using a lexicon & rules (2017) Software Engineering Institute, pp. 1-108. , https://resources-sei-cmu-edu.luisamigo.proxybk.com/library/asset-view.cfmassetID=505451; (2016), https://www-securecoding-cert-org.luisamigo.proxybk.com/confluence/display/seccode/SEI+CERT+Coding+Standards.([n.d.], CERT Secure Coding group. [n. d.]. SEI CERT Coding Standards (wiki). Accessed October 26; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Information and Software Technology, 53 (4), pp. 363-387. , (2011; Heckman, S.S., Adaptively ranking alerts generated from automated static analysis (2007) Crossroads, 14 (1), p. 7. , (2007; Kong, D., Zheng, Q., Chen, C., Shuai, J., Zhu, M., ISA: A source code static vulnerability detection system based on data fusion (2007) Proceedings of the 2nd International Conference on Scalable Information Systems. ICST (Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, p. 55; Kremenek, T., Ashcraft, K., Yang, J., Engler, D., Correlation exploitation in error ranking (2004) ACM SIGSOFT Software Engineering Notes, 29, pp. 83-93. , ACM; Kremenek, T., Engler, D., Z-ranking: Using statistical analysis to counter the impact of static analysis approximations (2003) International Static Analysis Symposium. Springer, pp. 295-315; Long, F., Mohindra, D., Seacord, R.C., Sutherland, D., Svoboda, D., The cert oracle secure coding standard for Java (2012) Pearson Education; Meng, N., Wang, Q., Wu, Q., Mei, H., An approach to merge results of multiple static analysis tools (short paper (2008) 2008 the Eighth International Conference on Quality Software. IEEE, pp. 169-174; https://cwe-mitre-org.luisamigo.proxybk.com, [n. d.]. Common Weakness Enumeration: A Community-Developed Dictionary of SoftwareWeakness Types ([n. d.]). Accessed June 22 2016; Nam, J., Kim, S., Clami: Defect prediction on unlabeled datasets (t (2015) Automated Software Engineering (ASE), 2015 30th IEEE/ACM International Conference On. IEEE, pp. 452-463; Plakosh, D., Seacord, R., Stoddard, R.W., Svoboda, D., Zubrow, D., (2014) Improving the Automated Detection and Analysis of Secure Coding Violations, , (2014; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proceedings of the 30th International Conference on Software Engineering. ACM, pp. 341-350; Seacord, R.C., The CERT C coding standard: 98 rules for developing safe, reliable, and secure systems (2014) Pearson Education; https://www-cert-org.luisamigo.proxybk.com/secure-coding/products-services/scale.cfm, CERT Software Engineering Institute. [n. d.]. Secure Code Analysis Laboratory (SCALe)([n. d.]; Svoboda, D., Flynn, L., Snavely, W., Static analysis alert audits: Formal lexicon and rules (2016) Proceedings of the IEEE Cybersecurity Development (SecDev) 2016. Ieee; Wang, S., Liu, T., Tan, L., Automatically learning semantic features for defect prediction (2016) Proceedings of the 38th International Conference on Software Engineering. ACM, pp. 297-308; Yin, T., (2018), https://github-com.luisamigo.proxybk.com/terryyin/lizard, [n. d.]. Lizard. ([n. d.]). Accessed January 29; Zhang, F., Zheng, Q., Zou, Y., Hassan, A.E., Cross-project defect prediction using a connectivity-based unsupervised classifier (2016) Proceedings of the 38th International Conference on Software Engineering. ACM, pp. 309-320},
sponsors={ACM Special Interest Group on Software Engineering (SIGSOFT); IEEE Computer Society; IEEE Technical Council on Software Engineering (TCSE)},
publisher={IEEE Computer Society},
issn={02705257},
isbn={9781450357371},
coden={PCSED},
language={English},
abbrev_source_title={Proc Int Conf Software Eng},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Supriya2018809,
author={Supriya, M.D. and Pruthviraj, B.G. and Nivetha, K.J.},
title={Behavioral analysis of PV Static synchronous series compensator for grid fault during day and night time with ANFIS},
journal={2018 3rd IEEE International Conference on Recent Trends in Electronics, Information and Communication Technology, RTEICT 2018 - Proceedings},
year={2018},
pages={809-813},
doi={10.1109/RTEICT42901.2018.9012427},
art_number={9012427},
note={cited By 0; Conference of 3rd IEEE International Conference on Recent Trends in Electronics, Information and Communication Technology, RTEICT 2018 ; Conference Date: 18 May 2018 Through 19 May 2018;  Conference Code:158096},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85081790703&doi=10.1109%2fRTEICT42901.2018.9012427&partnerID=40&md5=e5861d073b2273fdb354af5cd503a4e4},
affiliation={Svce, Department of e and Ee, Bengaluru, India; Intern Altran Technologies India Private Limited, Bengaluru, India},
abstract={This paper deals with the study of Behavioral analysis of PV Static Synchronous Series Compensator for grid fault during day and night time with ANFIS (Adaptive Neuro Fuzzy Inference System) Control. The innovation of utilizing the technology of solar farm as Static Synchronous Series Compensator is alluded as PV-SSSC. Since most of the energy during night time will be unutilized from the solar panels, therefore up to some extent to enhance the Available Transfer Capability of the transmission network, FACTS controllers in the solar farm are adapted to interact with the Grid Connected system. To enhance the stable transmission limits of power, voltage and damping control are incorporated with the whole rating of inverter of solar farm, normally remains dormant during night time. A three phase to ground fault analysis study has been carried out on a realistic single machine infinite bus power system with PV-SSSC using Matlab/Simulink simulation software. The graphical comparisons for the fault analysis with various controllers for both during day and night are demonstrated in a single machine infinite bus system and also the power transfer capability for each case study is tabulated with specific parameters. © 2018 IEEE.},
author_keywords={A three phase to ground fault;  Damping control;  Flexible AC transmission systems (FACTS);  PCC voltage control;  Photovoltaic solar power systems;  SSSC},
keywords={Adaptive control systems;  Behavioral research;  Controllers;  Damping;  Electric fault currents;  Electric grounding;  Energy transfer;  Flexible AC transmission systems;  Fuzzy inference;  Fuzzy neural networks;  Fuzzy systems;  MATLAB;  Solar energy;  Solar power generation;  Time series analysis, Damping control;  Flexible ac transmission system (FACTS);  Photovoltaic;  SSSC;  Three phase, Static synchronous compensators},
references={Xiao, Y., Song, Y.H., Liu, C.-C., Sun, Y.Z., Available transfer capability enhancement using FACTS devices (2003) IEEE Trans. Power Syst., 18 (1), pp. 305-312. , Feb; Slepchenkov, M.N., Smedley, K.M., VAR management in power systems: Basic objectives, solutions and multi-level converters for STATCOM applications (2009) 2009 IEEE Power Energy Society General Meeting; Keshavan, B.K., Prabhu, N., Damping of sub synchronous oscillations using STATCOM- A FACTS controller (2004) 2004 International Conference on Power System Technology, 2004. Power Con 2004, 1, pp. 12-16; Novel Application of A PV Solar Plant As STATCOM during Night and Day in A Distribution Utility Network; Menniti, D., Scordino, N., Sorrentino, N., A new method for SSSC optimal location to improve power system Available Transfer Capability (2006) 2006 IEEE PES Power Systems Conference and Exposition, pp. 938-945; Optimal 24-hr Utilization of A PV Solar System As A STATCOM in A Distribution Network; Gershteyn, Y., Perman, L., (2003) Matlab: ANFIS Toolbox; Geethalakshmi, B., Saraswathi, A., Dananjayan, P., Comparing and evaluating the performance of SSSC with Fuzzy Logic controller and PI controller for transient stability enhancement (2006) 2006 India International Conference on Power Electronics, pp. 140-143; Mahfouz, M.M.A., El-Sayed, H.M.A., Static synchronous compensator sizing for enhancement of fault ride-through capability and voltage stabilization of fixed speed wind farms (2014) IET Renew. Power Generator, 8 (1), pp. 1-9; Varma, R.K., Rahman, S.A., Vanderheide, T., New control of PV solar farm as STATCOM (PV-STATCOM) for increasing grid power transmission limits during night and day (2015) IEEE Trans. Power Deliv., 30 (2), pp. 755-763. , Apr; Varma, R.K., Khadkikar, V., Seethapathy, R., Nighttime application of PV solar farm as statcom to regulate grid voltage (2009) IEEE Trans. Energy Convers., 24 (4), pp. 983-985. , Dec; Walling, R.A., Clark, K., (2010) Grid Support Functions Implemented in Utility-scale PV Systems, pp. 1-5; Perera, B.K., Ciufo, P., Perera, S., Point of common coupling (PCC) voltage control of a grid-connected solar photovoltaic (PV) system (2013) IECON 2013-39th Annual Conference of the IEEE Industrial Electronics Society, pp. 7475-7480; Hussein, K.H., Muta, I., Hoshino, T., Osakada, M., Maximum photovoltaic power tracking: An algorithm for rapidly changing atmospheric conditions (1995) Proc. Inst. Elect. Eng., Gen., Transm. Distrib., 142 (1), pp. 59-64. , Jan; Schonardie, M.F., Martins, D.C., Three-phase grid-connected photovoltaic system with active and reactive power control using dq0 transformation (2008) 2008 IEEE Power Electronics Specialists Conference, pp. 1202-1207},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538624401},
language={English},
abbrev_source_title={IEEE Int. Conf. Recent Trends Electron., Inf. Commun. Technol., RTEICT - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Feyzi201839,
author={Feyzi, F. and Parsa, S.},
title={FPA-FL: Incorporating static fault-proneness analysis into statistical fault localization},
journal={Journal of Systems and Software},
year={2018},
volume={136},
pages={39-58},
doi={10.1016/j.jss.2017.11.002},
note={cited By 11},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85033606653&doi=10.1016%2fj.jss.2017.11.002&partnerID=40&md5=3b0fdd2c21805a1de3f58af43cf0da59},
affiliation={Department of Computer Engineering, Iran University of Science and TechnologyTehran, Iran},
abstract={Despite the proven applicability of the statistical methods in automatic fault localization, these approaches are biased by data collected from different executions of the program. This biasness could result in unstable statistical models which may vary dependent on test data provided for trial executions of the program. To resolve the difficulty, in this article a new ‘fault-proneness’-aware statistical approach based on Elastic-Net regression, namely FPA-FL is proposed. The main idea behind FPA-FL is to consider the static structure and the fault-proneness of the program statements in addition to their dynamic correlations with the program termination state. The grouping effect of FPA-FL is helpful for finding multiple faults and supporting scalability. To provide the context of failure, cause-effect chains of program faults are discovered. FPA-FL is evaluated from different viewpoints on well-known test suites. The results reveal high fault localization performance of our approach, compared with similar techniques in the literature. © 2017 Elsevier Inc.},
author_keywords={Backward dynamic slice;  Coincidental correctness;  Elastic-net regression;  Fault localization;  Fault-proneness;  Statistical debugging},
keywords={Program debugging;  Statistics, Backward dynamic slice;  Coincidental correctness;  Elastic net;  Fault localization;  Fault proneness;  Statistical debugging, Software testing},
references={Abreu, R., Zoeteweij, P., Golsteijn, R., Van Gemund, A.J., A practical evaluation of spectrum-based fault localization (2009) J. Syst. Softw., 82 (11), pp. 1780-1792; Abreu, R., Zoeteweij, P., Van Gemund, A.J., Spectrum-based multiple fault localization (2009) Proceedings of the IEEE/ACM International Conference on Automated Software Engineering, pp. 88-99; Agrawal, H., Horgan, J.R., London, S., Wong, W.E., Fault localization using execution slices and dataflow tests (1995) Proceedings of the Sixth IEEE International Symposium on Software Reliability Engineering (ISSRE), pp. 143-151. , IEEE; Arumuga, P., Chen, T., Rosin, J., Liblit, B., Statistical debugging using compound Boolean predicates (2007) Proceedings of International Symposium on Software Testing and Analysis, pp. 5-15; Baah, G.K., Andy, P., Mary, J., Causal inference for statistical fault localization (2010) Proceedings of the 19th International Symposium on Software Testing and Analysis - ISSTA ′10, pp. 73-84; Baah, G.K., Andy, P., Mary, J., Mitigating the confounding effects of program dependences for effective fault localization (2011) Proceedings of the 19th ACM SIGSOFT symposium and the 13th European Conference on Foundations of Software Engineering, pp. 146-156. , ACM; Boehm, B.-W., Papaccio, P.-N., Understanding and controlling software costs (1988) IEEE Trans. Softw. Eng., 14 (10), pp. 1462-1477; Catal, C., Software fault prediction: a literature review and current trends (2011) Expert Syst. Appl., 38 (4), pp. 4626-4636; Catal, C., Diri, B., A systematic review of software fault prediction studies (2009) Expert Syst. Appl., 36 (4), pp. 7346-7354; Cellier, P., Ducassé, M., Ferré, S., Ridoux, O., Multiple fault localization with data mining (2011) SEKE, pp. 238-243; Cleve, H., Zeller, A., Locating causes of program failures (2005) Proceedings of the 27th International Conference on Software Engineering, pp. 342-351. , ACM; Czepiel, S.A., Maximum likelihood estimation of logistic regression models: theory and implementation (2002), http://czep-net.luisamigo.proxybk.com/stat/mlelr/, Available at:; Debroy, V., Wong, W.E., Xu, X., Choi, B., A grouping-based strategy to improve the effectiveness of fault localization techniques (2010) Proceedings of 2010 10th International Conference on Quality Software, pp. 13-22. , IEEE; Dejaeger, K., Verbraken, T., Baesens, B., Toward comprehensible software fault prediction models using Bayesian network classifiers (2013) IEEE Trans. Softw. Eng., 39 (2), pp. 237-257; Dickinson, W., Leon, D., Podgurski, A., Finding failures by cluster analysis of execution profiles (2001) Proceedings of the 23rd International Conference on Software Engineering, pp. 339-348; DiGiuseppe, N., Jones, J., Software behavior and failure clustering: an empirical study of fault causality (2012) Proceedings of 5th International Conference on Software Testing, Verification and Validation (ICST), pp. 191-200. , IEEE; Efron, B., Hastie, T., Johnstone, I., Tibshirani, R., Least angle regression (2004) Ann. Stat., 32 (2), pp. 407-499; Fenton, N., Neil, M., Software metrics: successes, failures and new directions (1999) J. Syst. Softw., 47 (2), pp. 149-157; Feyzi, F., Nikravan, E., Parsa, S., FPA-Debug: effective statistical fault localization considering fault-proneness analysis (2016), 1612.05780. arXiv preprint arXiv:; Feyzi, F., Parsa, S., Inforence: effective fault localization based on information-theoretic analysis and statistical causal inference (2017) Front. Comput. Sci.; Fitzsimmons, A., Love, T., A review and evaluation of software science (1978) Comput. Surv., 10 (1), pp. 3-18; Gupta, N., He, H., Zhang, X., Gupta, R., Locating faulty code using failure-inducing chops (2005) Proceedings of the International Conference on Automated Software Engineering, pp. 263-272. , IEEE/ACM; Gyimothy, T., Beszedes, A., Forgacs, I., An efficient relevant slicing method for debugging (1999) ACM SIGSOFT Softw. Eng. Notes, 24 (6), pp. 303-321; Halstead, M., Elements of Software Science (Operating and Programming Systems Series) (1977), Elsevier; Henry, S., Kafura, D., Software structure metrics based on information flow (1981) IEEE Trans. Softw. Eng., 7 (5), pp. 510-518; Hui, Z., Trevor, H., (2016), www-stat-umn-edu.luisamigo.proxybk.com/~hzou, Package elasticnet; Jeffrey, D., Gupta, N., Gupta, R., Fault localization using value replacement (2008) Proceedings of the International Symposium on Software Testing and Analysis, pp. 167-178. , ACM; Jiang, L., Su, Z., Context-aware statistical debugging: from bug predictors to faulty control flow paths (2007) Proceedings of 22th IEEE/ACM International Conference on Automated Software Engineering, pp. 184-193; Jones, J.-A., Harrold, M.-J., Empirical evaluation of the tarantula automatic fault-localization technique (2005) Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering, pp. 273-282. , ACM; Jorgensen, M., Iteratively reweighted least squares (2006) Encyclopedia of Environmetrics; Ju, X., Jiang, S., Chen, X., Wang, X., Zhang, Y., Cao, H., Effective fault localization using hybrid spectrum of full slices and execution slices (2014) J. Syst. Softw., 90, pp. 3-17; Just, R., Jalali, D., Ernst, M.D., Defects4J: a database of existing faults to enable controlled testing studies for Java programs (2014) Proceedings of the 2014 International Symposium on Software Testing and Analysis, pp. 437-440. , ACM; Just, R., Jalali, D., Inozemtseva, L., Ernst, M.D., Holmes, R., Fraser, G., Are mutants a valid substitute for real faults in software testing? (2014) Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 654-665. , ACM; Lessmann, S., Baesens, B., Mues, C., Pietsch, S., Benchmarking classification models for software defect prediction: A proposed framework and novel findings (2008) IEEE Trans. Softw. Eng., 34 (4), pp. 485-496; Lewis, J., Henry, S., A methodology for integrating maintainability using software metrics (1989) Proceedings of the Conference on Software Maintenance, Miami, pp. 32-39. , IEEE; Li, H., Cheung, W., An empirical study of software metrics (1987) IEEE Trans. Softw. Eng., 13 (6), pp. 697-708; Li, N., Li, F., Offutt, J., Better algorithms to minimize the cost of test paths (2012) Proceedings of 5th International Conference on Software Testing, Verification and Validation, pp. 280-289. , IEEE; Liblit, B., Aiken, A., Zheng, A., Jordan, M., Bug isolation via remote program sampling (2003) Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation, New York, pp. 141-154. , ACM; Liblit, B., Naik, B., Zheng, A., Aiken, A., Jordan, M., Scalable statistical bug isolation (2005) Proceedings of the Conference on Programming Language Design and Implementation, pp. 15-26; Liblit, B., Naik, M., Zheng, A., Jordan, M., Aiken, A., Scalable statistical bug isolation (2005) Proceedings of international Conference on Programming Language Design and Implementation, pp. 15-26; Mao, X., Lei, Y., Dai, Z., Qi, Y., Wang, C., Slice-based statistical fault localization (2014) J. Syst. Softw., 89, pp. 51-62; Masri, W., Abou-Assi, R., Cleansing test suites from coincidental correctness to enhance fault-localization (2010) Proceedings of 3th International Conference on Software Testing, Verification and Validation, pp. 165-174. , IEEE; Masri, W., Assi, R.-A., Prevalence of coincidental correctness and mitigation of its impact on fault localization (2014) ACM Trans. Softw. Eng. Methodol., 23 (1), p. 8; Menzies, T., Greenwald, J., Frank, A., Data mining static code attributes to learn defect predictors (2007) IEEE Trans. Softw. Eng., 32 (11), pp. 2-13; Menzies, T., Greenwald, J., Frank, A., Data mining static code attributes to learn defect predictors (2007) IEEE Trans. Softw. Eng., 33 (1), pp. 2-13; Miao, Y., Chen, Z., Li, S., Zhao, Z., Zhou, Y., Identifying coincidental correctness for fault localization by clustering test cases (2012) Proceedings of the 24th International Conference on Software Engineering and Knowledge Engineering, pp. 267-272; Minka, T.P., Algorithms for Maximum-Likelihood Logistic Regression (2001), CMU Statistics Department Technical Report 758; Naish, L., Lee, H.J., Ramamohanarao, K., A model for spectra-based software diagnosis (2011) ACM Trans. Softw. Eng. Methodol., 20 (3), p. 11; Parsa, S., Arabi, S., Vahidi-Asl, M., Minaei-Bidgoli, B., Statistical software debugging: from bug predictors to the main causes of failure (2009) Proceedings of 2nd ICADIWT International Conference on Applications of Digital Information and Web Technologies, pp. 802-807. , IEEE; Parsa, S., Vahidi-Asl, M., Arabi, S., Finding causes of software failure using ridge regression and association rule generation methods (2008) Proceedings of 9th ACIS International Conference on Parallel/Distributed Computing, pp. 873-878; Parsa, S., Vahidi-Asl, M., Arabi, S., Minaei-Bidgoli, B., Software fault localization using elastic-net: a new statistical approach (2009) Adv. Softw. Eng., pp. 127-134; Parsa, S., Vahidi-Asl, M., Asadi-Aghbolaghi, M., Hierarchy-debug: a scalable statistical technique for fault localization (2014) Softw. Qual. J., 22 (3), pp. 427-466; Parsa, S., Vahidi-Asl, M., Zareie, F., Statistical based slicing method for prioritizing program fault relevant statements (2015) Comput. Inf., 34 (4); Parsa, S., Zareie, F., Vahidi-Asl, M., Fuzzy clustering the backward dynamic slices of programs to identify the origins of failure (2011) Experimental Algorithms, pp. 352-363; Pearson, S., Campos, J., Just, R., Fraser, G., Abreu, R., Ernst, M.D., Keller, B., Evaluating and improving fault localization (2017) Proceedings of the 39th International Conference on Software Engineering, pp. 609-620. , IEEE; Podgurski, A., Leon, D., Francis, P., Masri, W., Minch, M., Sun, J., Wang, B., Automated support for classifying software failure reports (2003) Proceedings of the 25th International Conference on Software Engineering, pp. 465-475; Shepperd, M., Bowes, D., Hall, T., Researcher bias: the use of machine learning in software defect prediction (2014) IEEE Trans. Softw. Eng., 40 (6), pp. 603-616; Turhan, B., Menzies, T., Bener, A., Di Stefano, J., On the relative value of cross-company and within-company data for defect prediction. (2009) Empirical Softw. Eng., 14 (5), pp. 540-578; Wang, X., Cheung, S., Chan, W., Zhang, Z., Taming coincidental correctness: coverage refinement with context patterns to improve fault localization (2009) Proceedings of the 31st International Conference on Software Engineering, pp. 45-55. , IEEE; Wen, W., Software fault localization based on program slicing spectrum (2012) Proceedings of the 34th International Conference on Software Engineering, pp. 1511-1514. , IEEE; Wong, W.E., Debroy, V., Choi, B., A family of code coverage-based heuristics for effective fault localization (2010) J. Syst. Softw., 83 (2), pp. 188-208; Wong, W.E., Debroy, V., Gao, R., Li, Y., The D-star method for effective software fault localization (2014) IEEE Trans. Reliab., 63 (1), pp. 290-308; Wong, W.E., Debroy, V., Xu, D., Towards better fault localization: a crosstab-based statistical approach (2012) IEEE Trans. Syst. Man Cybern. Part C, 42 (3), pp. 378-396; Zeller, A., Hildebrandt, R., Simplifying and isolating failure-inducing input (2002) IEEE Trans. Softw. Eng., 28 (2), pp. 183-200; Zhang, H., On the distribution of software faults (2008) IEEE Trans. Softw. Eng., 34 (2), pp. 301-302; Zhang, L., Kim, M., Khurshid, S., FaultTracer: a spectrum‐based approach to localizing failure‐inducing program edits (2013) J. Softw., 25 (12), pp. 1357-1383; Zhang, X., Gupta, N., Gupta, R., Locating faults through automated predicate switching (2006) Proceedings of the 28th International Conference on Software Engineering, pp. 272-281. , ACM; Zhang, X., Gupta, N., Gupta, R., Locating faulty code by multiple points slicing (2007) Softw., 37 (9), pp. 935-961; Zhang, Z., Jiang, B., Chan, W.-K., Tse, T.-H., Wang, X., Fault localization through evaluation sequences (2010) J. Syst. Softw., 83 (2), pp. 174-187; Zheng, A.-X., Jordan, M.-I., Liblit, B., Naik, M., Aiken, A., Statistical debugging: simultaneous identification of multiple bug (2006) Proceedings of the 23rd International Conference on Machine Learning, pp. 1105-1112; Zou, H., Hastie, T., Regularization and variable selection via the elastic-net (2005) J. R. Stat. Soc., 67 (2), pp. 301-320},
correspondence_address1={Parsa, S.; Department of Computer Engineering, Iran; email: Parsa@iust.ac.ir},
publisher={Elsevier Inc.},
issn={01641212},
coden={JSSOD},
language={English},
abbrev_source_title={J Syst Software},
document_type={Article},
source={Scopus},
}

@ARTICLE{Wang20183,
author={Wang, H. and Zhou, M. and Cheng, X. and Chen, G. and Gu, M.},
title={Which Defect Should Be Fixed First? Semantic Prioritization of Static Analysis Report},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2018},
volume={11293 LNCS},
pages={3-19},
doi={10.1007/978-3-030-04272-1_1},
note={cited By 3; Conference of 8th International Conference on Software Analysis, Testing, and Evolution, SATE 2018 ; Conference Date: 23 November 2018 Through 24 November 2018;  Conference Code:221289},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85057464942&doi=10.1007%2f978-3-030-04272-1_1&partnerID=40&md5=abac727d8db3fa228339a7d3af13a00f},
affiliation={School of Software, Tsinghua University, Beijing, China},
abstract={The usability of static analyzers is plagued by excessive false alarms. It is laborious yet error-prone to manually examine the spuriousness of defect reports. Moreover, the inability to preclude overwhelming false alarms deters user’s confidence on such tools and severely limits their adoption in development cycles. In this paper, we propose a semantic approach for prioritizing defect reports emitted by static analysis. Our approach evaluates the importance of defect reports by their fatality and priorities defects by their affection to critical functions. Compared to the existing approaches that prioritize defect reports by analyzing external attributes, ours substantially utilizes semantic information derived by static analysis to measure the severity of defect reports more precisely. We have implemented a prototype which is evaluated to real-world code bases, and the results show that our approach can effectively evaluate the severity of defects. © 2018, Springer Nature Switzerland AG.},
author_keywords={Defect prioritization;  Defect propagation analysis;  Static analysis},
keywords={Defects;  Errors;  Semantics;  Software testing, Critical functions;  Defect prioritization;  Defect propagation;  Development cycle;  Prioritization;  Semantic approach;  Semantic information;  Static analyzers, Static analysis},
references={Abdelmoez, W., Kholief, M., Elsalmy, F.M., Bug fix-time prediction model using naïve bayes classifier (2012) 2012 22Nd International Conference on Computer Theory and Applications (ICCTA), pp. 167-172. , pp., IEEE; Beyer, D., Henzinger, T.A., Théoduloz, G., Configurable software verification: Con-cretizing the convergence of model checking and program analysis (2007) CAV 2007. LNCS, 4590, pp. 504-518. , https://doi.org/10.1007/978-3-540-73368-3_51, Damm, W., Hermanns, H. (eds.), pp., Springer, Heidelberg; Cheng, B.C., Hwu, W.M.W., Modular interprocedural pointer analysis using access paths: Design, implementation, and evaluation (2000) ACM Sigplan Not, 35 (5), pp. 57-69; Cytron, R., Ferrante, J., Rosen, B.K., Wegman, M.N., Zadeck, F.K., An efficient method of computing static single assignment form (1989) Proceedings of the 16Th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pp. 25-35. , pp., ACM; Guo, P.J., Zimmermann, T., Nagappan, N., Murphy, B., Characterizing and predicting which bugs get fixed: An empirical study of microsoft windows (2010) 2010 ACM/IEEE 32Nd International Conference on Software Engineering, 1, pp. 495-504. , vol., pp., IEEE; Jeong, G., Kim, S., Zimmermann, T., Improving bug triage with bug tossing graphs (2009) Proceedings of the 7Th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 111-120. , pp., ACM; Jureczko, M., Madeyski, L., Towards identifying software project clusters with regard to defect prediction (2010) Proceedings of the 6Th International Conference on Predictive Models in Software Engineering, p. 9. , p., ACM; Kanwal, J., Maqbool, O., Managing open bug repositories through bug report prioritization using SVMs (2010) Proceedings of the International Conference on Open-Source Systems and Technologies, Lahore, Pakistan; Kaushik, N., Amoui, M., Tahvildari, L., Liu, W., Li, S., Defect prioritization in the software industry: Challenges and opportunities (2013) 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation (ICST), pp. 70-73. , IEEE; Kremenek, T., Engler, D., Z-Ranking: Using statistical analysis to counter the impact of static analysis approximations (2003) SAS 2003. LNCS, 2694, pp. 295-315. , https://doi.org/10.1007/3-540-44898-5_16, Cousot, R. (ed.), pp., Springer, Heidelberg; Lamkanfi, A., Demeyer, S., Giger, E., Goethals, B., Predicting the severity of a reported bug (2010) 2010 7Th IEEE Working Conference on Mining Software Repositories (MSR), pp. 1-10. , pp., IEEE; Liang, G., Wu, Q., Wang, Q., Mei, H., An effective defect detection and warning prioritization approach for resource leaks (2012) 2012 IEEE 36Th Annual Computer Software and Applications Conference (COMPSAC), pp. 119-128. , pp., IEEE; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proceedings of the 30Th International Conference on Software Engineering, pp. 341-350. , pp., ACM; Uddin, J., Ghazali, R., Deris, M.M., Naseem, R., Shah, H., A survey on bug prioritization (2017) Artif. Intell. Rev., 47 (2), pp. 145-180; Watanabe, S., Kaiya, H., Kaijiri, K., Adapting a fault prediction model to allow inter languagereuse (2008) Proceedings of the 4Th International Workshop on Predictor Models in Software Engineering, pp. 19-24. , pp., ACM},
correspondence_address1={Wang, H.; School of Software, China; email: h-wang16@mails.tsinghua.edu.cn},
editor={Bu L., Xiong Y.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783030042714},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Ribeiro201890,
author={Ribeiro, A. and Meirelles, P. and Lago, N. and Kon, F.},
title={Ranking source code static analysis warnings for continuous monitoring of FLOSS repositories},
journal={IFIP Advances in Information and Communication Technology},
year={2018},
volume={525},
pages={90-101},
doi={10.1007/978-3-319-92375-8_8},
note={cited By 3; Conference of 14th IFIP WG 2.13 International Conference on Open Source Systems, OSS 2018 ; Conference Date: 8 June 2018 Through 10 June 2018;  Conference Code:214429},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85049054447&doi=10.1007%2f978-3-319-92375-8_8&partnerID=40&md5=cc5eb094cd214808343c6b1878ce6b01},
affiliation={FLOSS Competence Center, University of São Paulo, São Paulo, Brazil; Department of Health Informatics, Federal University of São Paulo, São Paulo, Brazil},
abstract={Performing source code static analysis during the software development cycle is a difficult task. There are different static analyzers available, and each of them usually works better in a small subset of problems, making it hard to choose a single tool. Combining the analysis of different tools solves this problem, but brings about other problems, namely the generated false positives and a large amount of unsorted alarms. This paper presents kiskadee, a system to support the usage of static analysis during software development by providing carefully ranked static analysis reports. First, it runs multiple static analyzers on the source code. Then, using a classification model, the potential bugs detected by the static analyzers are ranked based on their importance, with critical flaws ranked first, and potential false positives ranked last. Our experimental results show that, on average, when inspecting warnings ranked by kiskadee, one hits 5.2 times less false positives before each bug than when using a randomly sorted warning list. © 2018, IFIP International Federation for Information Processing.},
author_keywords={False positives;  Free software;  Open Source Software;  Software quality;  Static analysis},
keywords={Codes (symbols);  Computer programming languages;  Computer software selection and evaluation;  Enterprise software;  Open source software;  Open systems;  Quality control;  Software design, Classification models;  Continuous monitoring;  False positive;  Free software;  Software development cycles;  Software Quality;  Source code static analysis;  Static analyzers, Static analysis},
references={https://release-monitoring-org.luisamigo.proxybk.com, Accessed 5 Jan 2018; github.com/fedora-static-analysis/mock-with-analysis. Accessed 5 Jan 2018; fedoraproject.org/wiki/ StaticAnalysis. Accessed 5 Jan 2018; http://lists-fedoraproject-org.luisamigo.proxybk.com/archives/list/firehose-devel@lists.fedoraproject.org, Accessed 5 Jan 2018; Black, P.E., Static analyzers in software engineering (2009) J. Defense Softw. Eng., 22 (3), pp. 16-17; Boland, T., Black, P.E., Juliet 1.1 C/C++ and Java test suite (2012) Computer, 45 (10), pp. 88-90; Drucker, H., Cortes, C., Boosting decision trees (1996) Advances in Neural Information Processing Systems, pp. 479-485; Freund, Y., Schapire, R., Abe, N., A short introduction to boosting (1999) J. Jpn. Soc. Artif. Intell, 14 (771-780), p. 1612; Heckman, S., Williams, L., A model building process for identifying actionable static analysis alerts (2009) International Conference on Software Testing Verification and Validation, ICST 2009, pp. 161-170. , IEEE; Heckman, S.S., Adaptively ranking alerts generated from automated static analysis (2007) Crossroads, 14 (1), p. 7; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) SIGPLAN Not., 39 (12), pp. 92-106. , https://doi-acm-org.luisamigo.proxybk.com/10.1145/1052883.1052895; Jung, Y., Kim, J., Shin, J., Yi, K., (2005) Taming False Alarms from a Domain-Unaware C Analyzer by a Bayesian Statistical Post Analysis, 3672, pp. 203-217. , https://doi.org/10.1007/1154766215, Hankin, C., Siveroni, I. (eds.) SAS 2005. LNCS, Springer, Heidelberg; Kremenek, T., Ashcraft, K., Yang, J., Engler, D., Correlation exploitation in error ranking (2004) ACM SIGSOFT Softw. Eng. Notes, 29, pp. 83-93; Kremenek, T., Engler, D., Z-ranking: Using statistical analysis to counter the impact of static analysis approximations (2003) SAS 2003. LNCS, 2694, pp. 295-315. , https://doi.org/10.1007/3-540-44898-516, Cousot, R. (ed.), Springer, Heidelberg; Landi, W., Undecidability of static analysis (1992) ACM Lett. Prog. Lang. Syst. (LOPLAS), 1 (4), pp. 323-337. , http://dl-acm-org.luisamigo.proxybk.com/citation.cfm?id=161494.161501; Muske, T., Serebrenik, A., Survey of approaches for handling static analysis alarms (2016) 2016 IEEE 16Th International Working Conference on Source Code Analysis and Manipulation (SCAM), pp. 157-166. , IEEE; Muske, T.B., Baid, A., Sanas, T., Review efforts reduction by partitioning of static analysis warnings (2013) 2013 IEEE 13Th International Working Conference on Source Code Analysis and Manipulation (SCAM), pp. 106-115. , IEEE; Polikar, R., Ensemble based systems in decision making (2006) IEEE Circ. Syst. Mag., 6 (3), pp. 21-45; Russell, S.J., Norvig, P., (2003) Artificial Intelligence: a Modern Approach, 2 Edn. Pearson Education, , Upper Saddle River; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proceedings of the 30Th International Conference on Software Engineering, ICSE 2008, pp. 341-350. , https://doi-acm-org.luisamigo.proxybk.com/10.1145/1368088.1368135, ACM, New York; Yoon, J., Jin, M., Jung, Y., Reducing false alarms from an industrial-strength static analyzer by SVM (2014) 2014 21St Asia-Pacific Software Engineering Conference (APSEC), 2, pp. 3-6. , IEEE},
correspondence_address1={Ribeiro, A.; FLOSS Competence Center, Brazil; email: athoscr@ime.usp.br},
editor={Gonzalez-Barahona J.M., Varlamis I., Anagnostopoulos D., Stamelos I.},
publisher={Springer New York LLC},
issn={18684238},
isbn={9783319923741},
language={English},
abbrev_source_title={IFIP Advances in Information and Communication Technology},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Nagata201813,
author={Nagata, D. and Gotoh, Y. and Izumi, M. and Nara, T.},
title={Proposal of evaluation method of power generation current and defect inside MEA by inverse problem analysis using static magnetic field around PEFC},
journal={ECS Transactions},
year={2018},
volume={83},
number={1},
pages={13-21},
doi={10.1149/08301.0013ecst},
note={cited By 0; Conference of 2017 Fuel Cell Seminar and Energy Exposition, FCS and EE 2017 ; Conference Date: 7 November 2017 Through 9 November 2017;  Conference Code:135570},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85046015168&doi=10.1149%2f08301.0013ecst&partnerID=40&md5=a038e1fb21fa241587a6a8b01f2034ed},
affiliation={Department of Mechanical and Energy Systems Engineering, Oita University, 700 Dannoharu, Oita, 870-1192, Japan; Department of Mechanical Systems Engineering, University of Kitakyushu, 1-1 Hibikino, Wakamatsu-ku, Kitakyushu, Pukuoka, 808-0135, Japan; Department of Information Physics and Computing, Graduate School of Information Science and Technology, University of Tokyo, 7-3-1 Hongo, Bunkyo-ku, Tokyo, 113-8656, Japan},
abstract={A PEFC (polymer electrolyte fuel cell) is expected to be used as a new power supply since the power generation at high speed and low temperature is possible. In order to develop the high efficient fuel cell, it is necessary to measure the generated current inside the MEA (membrane electrode assembly) in the fuel cell, there is a possibility that the generated current distribution inside the MEA can be obtained using the distribution of the static magnetic field around the fuel cell. In this paper, it is shown that the distribution of the power generation current inside MEA can be presumed by the inverse problem analysis using the Ampere's law. And the presumed accuracy of the current distribution in MEA is increased by using the distribution of magnetic field around the fuel cell on more total power generation current. © The Electrochemical Society.},
keywords={Electric current distribution measurement;  Magnetic fields;  Polyelectrolytes;  Proton exchange membrane fuel cells (PEMFC);  Temperature, Current distribution;  High efficient;  Low temperatures;  Membrane electrode assemblies;  Polymer electrolyte fuel cells;  Power supply;  Problem analysis;  Static magnetic fields, Inverse problems},
references={Bender, G., Wison, M.S., Zawodzinski, T., Further refinements in the segmented cell approach to diagnosing performance in polymer electrolyte fuel cells (2003) Journal of Power Sources, 123, pp. 163-171; Geiger, A.B., Eckl, R., Wokaun, A., Scherer, G.G., An approach to measurement locally resolved currents in polymer electrolyte fuel cells (2004) Journal of Electrochemical Society, 151 (3), pp. 394-398; Liu, Z., Mao, Z., Wu, B., Wang, L., Schmidt, V.M., Current density distribution in PEFC (2005) Journal of Power Sources, 141, pp. 205-210; Izumi, M., Gotoh, Y., Yamanaka, T., Verification of measurement method of current distribution in polymer electrolyte fuel cells (2009) ECS Transactions, 17 (1), pp. 401-409; Katou, T., Gotoh, Y., Takahashi, N., Izumi, M., Measurement technique of distribution of power generation current using static magnetic field around polymer electrolyte fuel cell by 3D inverse problem FEM (2012) Materials Transactions, 53 (2), pp. 279-284; Yamanashi, R., Gotoh, Y., Izumi, M., Nara, T., Evaluation of generation current inside membrane electrode assembly in polymer electrolyte fuel cell using static magnetic field around fuel cell (2015) ECS Transactions, 65 (1), pp. 219-226; Nara, T., Koike, M., Ando, S., Gotoh, Y., Izumi, M., Estimation of localized Current Anomalies in polymer electrolyte fuel cells from magnetic flux density measurements (2016) Applied Physics Reviews, 6, p. 056603; Kitabayashi, T., Gotoh, Y., Izumi, M., Nara, T., Examination of non-contacting measurement method of power generation current inside single polymer electrolyte cell using simulated annealing (2016) ECS Transactions, 71 (1), pp. 13-20},
editor={Williams M.C.},
publisher={Electrochemical Society Inc.},
issn={19386737},
isbn={9781607688426; 9781623325206},
language={English},
abbrev_source_title={ECS Transactions},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Belevantsev201828,
author={Belevantsev, A. and Avetisyan, A.},
title={Multi-level static analysis for finding error patterns and defects in source code},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2018},
volume={10742 LNCS},
pages={28-42},
doi={10.1007/978-3-319-74313-4_3},
note={cited By 5; Conference of 11th International Andrei Ershov Memorial Conference on Perspectives of System Informatics, PSI 2017 ; Conference Date: 27 June 2017 Through 29 June 2017;  Conference Code:209849},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85041751634&doi=10.1007%2f978-3-319-74313-4_3&partnerID=40&md5=fb4439d007789266d2dbc3157beebb84},
affiliation={Institute for System Programming of the Russian Academy of Sciences, Moscow, Russian Federation; Moscow State University, Moscow, Russian Federation; Moscow Institute of Physics and Technology (National University), Moscow, Russian Federation; National Research University Higher School of Economics, Moscow, Russian Federation},
abstract={This paper presents the formalism for multiple level static analysis for defect detection in source code. The first level has the program and memory model that are suitable for AST-level checks. The following levels address detection of critical errors: on the second level interprocedural partially context-sensitive analysis is performed via dataflow analysis and symbolic execution with state merging, whereas the third level adds path-sensitivity via predicate tracking for the dataflow information computed on the second. The analysis designer can freely choose the appropriate analysis level or their combination to check the desired program property. The presented methods are implemented in the Svace static analysis toolset. The first analysis levels for C/C++ and Java are implemented as extensions of corresponding production compilers (Clang and javac) and FindBugs tool plugins, while the second and third levels make the core of Svace analyzer together with 100+ implemented checkers for critical defects. The evaluation on extra large codebases of millions lines of code such as full-blown Android and Tizen OSes has shown the approach scalability and the acceptable false positives ratio (less than 40%). © Springer International Publishing AG 2018.},
author_keywords={Defect detection;  Static analysis;  Symbolic execution},
keywords={Codes (symbols);  Data flow analysis;  Defects;  Model checking;  Static analysis, Context-sensitive analysis;  Critical defects;  Data-flow information;  Defect detection;  Inter-procedural;  Multiple levels;  Program properties;  Symbolic execution, C (programming language)},
references={Cousot, P., Cousot, R., Feret, J., Why does Astrée scale up? (2009) Form Methods Syst. Des., 35, p. 229. , https://doi.org/10.1007/s10703-009-0089-6; Xie, Y., Aiken, A., Saturn: A scalable framework for error detection using Boolean satisfiability (2007) ACM Trans. Program. Lang. Syst, 29 (3), pp. 1-43; Sankaranarayanan, S., Ivančić, F., Gupta, A., Program analysis using symbolic ranges (2007) SAS 2007. LNCS, 4634, pp. 366-383. , https://doi.org/10.1007/978-3-540-74061-2_23, Nielson, H.R., Filé, G. (eds.), Springer, Heidelberg; Xu, Z., Kremenek, T., Zhang, J., A memory model for static analysis of C programs (2010) Isola 2010, Part I. LNCS, 6415, pp. 535-548. , https://doi.org/10.1007/978-3-642-16558-0_44, Margaria, T., Steffen, B. (eds.), Springer, Heidelberg; Ignatiev, V., (2015) Using Static Analysis for Customizable Checks of C/C++ Semantic Constraints, , Ph.D. thesis, Moscow; Strein, D., Kratz, H., Lowe, W., Cross-language program analysis and refactoring (2006) Proceedings of the Sixth IEEE International Workshop on Source Code Analysis and Manipulation (SCAM 2006), Washington, DC, USA, pp. 207-216; Zubov, M.V., Pustygin, A.N., Startsev, E.V., Use of the intermediate software representations for static analysis of source code (2013) Doklady TUSUR, 27, pp. 64-68. , (in Russian); Borodin, A., (2016) Interprocedural Context-Sensitive Static Analysis for Finding Defects in C/C++ Program Source Code, , Ph.D. thesis, Moscow; http://llvm-org.luisamigo.proxybk.com/docs/LangRef.html; http://www-adacore-com.luisamigo.proxybk.com/knowledge/technical-papers/the-use-of-value-numbers-in-static-analysis/; https://www-misra-org-uk.luisamigo.proxybk.com/MISRAHome/MISRAC2012/tabid/196/Default.aspx; https://www-securecoding-cert-org.luisamigo.proxybk.com/confluence/display/c/SEI+CERT+C+Coding+Standard; https://cwe-mitre-org.luisamigo.proxybk.com/; Briggs, P., Cooper, K.D., Taylor Simpson, L., Value numbering (1997) Softw. Pract. Exper., 27 (6), pp. 701-724. , https://doi.org/10.1002/zaac.201500219; Borodin, A., Belevantsev, A., A static analysis tool Svace as a collection of analyzers with various complexity levels (2015) Trudy ISP Ran/Proc. ISP RAS, 27 (6), pp. 111-134. , (in Russian); Ivannikov, V.P., Belevantsev, A.A., Borodin, A.E., Ignat’Ev, V.N., Zhurikhin, D.M., Avetisjan, A.I., Leonov, M.I., Staticheskij analizator Svace dlja poiska defektov v iskhodnom kode programm [Svace: Static analyzer for detecting of defects in program source code] (2011) Trudy ISP RAN [The Proceedings of ISP RAS], 26 (1), pp. 231-250. , https://doi.org/10.15514/ispras-2014-26(1)-7; Avetisjan, A.I., Belevantsev, A.A., Borodin, A.E., Nesov, V.S., Ispol’zovanie staticheskogo analiza dlja poiska ujazvimostej i kriticheskikh oshibok v iskhodnom kode program [Using static analysis for searching vulnerabilities and critical errors in the source code of programs] (2011) Trudy ISP RAN [The Proceedings of ISP RAS], 21 (2338). , (in Russian); Koshelev, V.K., Ignatyev, V.N., Borzilov, A.I., C# static analysis framework (2016) Trudy ISP Ran/Proc. ISP RAS, 28 (1), pp. 21-40. , (in Russian); http://findbugs-sourceforge-net.luisamigo.proxybk.com/; http://clang-analyzer-llvm-org.luisamigo.proxybk.com/; https://github-com.luisamigo.proxybk.com/Z3Prover/z3; http://www-vedomosti-ru.luisamigo.proxybk.com/technology/articles/2016/11/17/665253-russkie-programmisti-samsung; Dudina, I., Inter-procedural buffer overflows detection in C/C++ source code via static analysis (2016) Trudy ISP Ran/Proc. ISP RAS, 28 (5), pp. 119-134. , https://doi.org/10.15514/ispras-2016-28(5)-7, (in Russian)},
correspondence_address1={Belevantsev, A.; Institute for System Programming of the Russian Academy of SciencesRussian Federation; email: abel@ispras.ru},
editor={Petrenko A.K., Voronkov A.},
sponsors={},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319743127},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Gou20175460,
author={Gou, X.D. and Zhou, X. and Pang, J.W. and Yang, S.K.},
title={Medical software bug prediction based on static analysis},
journal={Proceedings IECON 2017 - 43rd Annual Conference of the IEEE Industrial Electronics Society},
year={2017},
volume={2017-January},
pages={5460-5464},
doi={10.1109/IECON.2017.8216945},
note={cited By 0; Conference of 43rd Annual Conference of the IEEE Industrial Electronics Society, IECON 2017 ; Conference Date: 29 October 2017 Through 1 November 2017;  Conference Code:133535},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85046813424&doi=10.1109%2fIECON.2017.8216945&partnerID=40&md5=6f168b4cb28d88f75d3157440cf2b58c},
affiliation={Beihang University, School of Reliability and Systems Engineering, Beijng, China},
abstract={Monitoring and predicting the increasing or decreasing trend of bug number in a software is of great importance to both software developers and users. Accurate predicting of number of software bug will help developers make timely and correct decision. For software users, knowing the possible number of software bugs will enable them to take seasonable actions to cope with loss caused by possible software bugs. Medical software is vital to people's health, and therefore, the bug prediction of medical software is more important and essential than the ordinary software. To accomplish this goal, we present a method based on static analysis and correlation analysis to predict the bug number of medical image informatics software 3D Slicer and ITK. We obtain the complexity metrics through static analysis, then get the bug predicted value via correlation analysis between existing bug number and complexity metrics. The core idea of this paper is that the changes of software complexity metrics obtained by static analysis can reflect the changes of the bug number, and the predicted results prove the feasibility of this method. In addition, the method proposed in this paper is also applicable to other types of software other than medical software. © 2017 IEEE.},
author_keywords={Bug prediction;  Correlation analysis;  Static analysis},
keywords={Computational complexity;  Correlation methods;  Forecasting;  Industrial electronics;  Medical imaging;  Program debugging, Bug predictions;  Complexity metrics;  Correlation analysis;  Medical image informatics;  Medical software;  Software bug;  Software complexity;  Software developer, Static analysis},
funding_details={National Natural Science Foundation of ChinaNational Natural Science Foundation of China, NSFC, 61672080},
funding_text 1={We thank the support from National Natural Science Foundation of China (Grant Nos. 61672080) and National Aerospace Science Foundation of China (Grant Nos. 2011ZD51055 and2016ZD51031).},
references={Wallace, D.R., Kuhn, D.R., Failure modes in medical device software: An analysis of 15 years of recall data (2001) International Journal of Reliability Quality & Safety Engineering, 8 (4), pp. 351-371; Yang, Y., Static analysis of programs: Techniques and tools (2004) Computer Science; Zhang, H., Gong, L., Versteeg, S., Predicting bug-fixing time: An empirical study of commercial software projects (2013) International Conference on Software Engineering, pp. 1042-1051; Abdelmoez, W., Kholief, M., Elsalmy, F.M., Bug fix-time prediction model using naïve bayes classifier (2012) International Conference on Computer Theory and Applications, pp. 167-172; Zi, Y., Li-Li, Y.U., Chao, L., Bug prediction method for fine-grained source code changes (2014) Journal of Software; Parnerkar, S., Jain, A., Birchha, V., An Approach to Efficient Software Bug Prediction using Regression Analysis and Neural Networks; Parnerkar, S., Jain, A., Purohit, P., Implementation of an Efficient and Accurate Software Bug Prediction System; Wu, W., Zhang, W., Yang, Y., Wang, Q., Time series analysis for bug number prediction (2010) International Conference on Software Engineering and Data Mining, pp. 589-596; Singh, V.B., Chaturvedi, K.K., Entropy based bug prediction using support vector regression (2013) International Conference on Intelligent Systems Design and Applications, pp. 746-751; Zhang, C., Joshi, H., Ramaswamy, S., Bayrak, C., A dynamic approach to software bug estimation (2007) Advances in Computer & Information Sciences & Engineering, pp. 108-113; Srivastava, M., Badal, D.D., Jain, R.K., Regression and ARIMA hybrid model for new bug prediction (2010) International Journal on Computer Science & Engineering, 2 (8); Zanetti, M.S., Scholtes, I., Tessone, C.J., Schweitzer, F., Categorizing bugs with social networks: A case study on four open source software communities (2013) Software Engineering (ICSE), 2013 35th International Conference on, pp. 1032-1041. , IEEE},
sponsors={Chinese Association of Automation (CAA); Chinese Power Supply Society; et al.; IEEE Industrial Electronics Society (IES); Systems Engineering Society of China; The Institute of Electrical and Electronics Engineers (IEEE)},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538611272},
language={English},
abbrev_source_title={Proc. IECON - Annu. Conf. IEEE Ind. Electron. Soc.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Neelofar20171633,
author={Neelofar, N. and Naish, L. and Lee, J. and Ramamohanarao, K.},
title={Improving spectral-based fault localization using static analysis},
journal={Software - Practice and Experience},
year={2017},
volume={47},
number={11},
pages={1633-1655},
doi={10.1002/spe.2490},
note={cited By 12},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85015243245&doi=10.1002%2fspe.2490&partnerID=40&md5=a9998aebb87cb26545a744bed9f59c5a},
affiliation={Department of Computing and Information Systems, University of Melbourne, Melbourne, Australia},
abstract={Debugging is crucial for producing reliable software. One of the effective bug localization techniques is spectral-based fault localization (SBFL). It helps to locate a buggy statement by applying an evaluation metric to program spectra and ranking program components on the basis of the score it computes. SBFL is an example of a dynamic analysis – an analysis of computer program that is performed by executing it with sufficient number of test cases. Static analysis, on the other hand, is performed in a non-runtime environment. We introduce a weighting technique by combining these two kinds of program analysis. Static analysis is performed to categorize program statements into different classes and giving them weights based on the likelihood of being buggy statement. Statements are finally ranked on the basis of the weights computed by statements' categorization (static analysis) and scores computed by SBFL metrics (dynamic analysis). We evaluate the performance of our technique on Siemens test suite and Flex (having seeded bugs seeded by expert developers), Sed (having mixture of real and seeded bugs), and Space (having real bugs). In our evaluation, proposed weighting technique improves the performance of a wide variety of fault localization metrics up to 20% on single bug datasets and up to 42% on multi-bug datasets. Copyright © 2017 John Wiley & Sons, Ltd. Copyright © 2017 John Wiley & Sons, Ltd.},
author_keywords={dynamic analysis;  fault localization metrics;  spectral debugging;  static analysis},
keywords={Dynamic analysis;  Program debugging;  Software testing, Bug localizations;  Evaluation metrics;  Fault localization;  Program analysis;  Program components;  Program statements;  Runtime environments;  Weighting techniques, Static analysis},
references={Collofello, J.S., Woodfield, S.N., Evaluating the effectiveness of reliability-assurance techniques (1989) Journal of Systems and Software, 9 (3), pp. 191-195; Vessey, I., Expertise in debugging computer programs: a process analysis (1985) International Journal of Man-Machine Studies, 23 (5), pp. 459-494; Jones, J.A., Harrold, M.J., Stasko, J., Visualization of test information to assist fault localization (2002) Proceedings of the 24th International Conference on Software Engineering, pp. 467-477. , ACM, Orlando, Florida; Liblit, B.R., (2004) Cooperative bug isolation, , Ph.D. Thesis, University of California; Abreu, R., Zoeteweij, P., van Gemund, A.J.C., An evaluation of similarity coefficients for software fault localization (2006) PRDC'06, pp. 39-46; Naish, L., Lee, H.J., Kotagiri, R., A model for spectra-based software diagnosis (2011) ACM Transactions on Software Engineering and Methodology (TOSEM), 20 (3), pp. 1-32; Campos, J., Riboira, A., Perez, A., Abreu, R., Gzoltar: an eclipse plug-in for testing and debugging (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, pp. 378-381. , ACM, Essen, Germany; Liblit, B., Naik, M., Zheng, A., Aiken, A., Jordan, M.I., Scalable statistical bug isolation (2005) Proceedings of the 2005 ACM SIGPLAN, 40 (6), pp. 15-26; Wögerer, W., (2005) A survey of static program analysis techniques. Technical Report, , Citeseer; Vipindeep, V., Jalote, P., List of common bugs and programming practices to avoid them (2005) Electronic, March; Naish, L., Lee, H.J., Kotagiri, R., (2012) Spectral debugging: how much better can we do?, 122. , 35th Australasian Computer Science Conference (ACSC 2012), CRPIT, CRPIT; Naish, L., Lee, H.J., Duals in spectral fault localization (2013) Proceedings of ASWEC 2013, pp. 51-59. , IEEE Press, Melbourne, Australia; Jones, J.A., Harrold, M.J., Empirical evaluation of the Tarantula automatic fault-localization technique (2005) Proceedings of the 20th ASE, pp. 273-282; Wong, W.E., Qi, Y., Zhao, L., Cai, K.Y., Effective fault localization using code coverage (2007) Proceedings of the 31st Annual IEEE Computer Software and Applications Conference, pp. 449-456; Lee, H.J., (2011) Software debugging using program spectra, , Ph.D. Thesis, University of Melbourne; Gonzalez, A., (2007) Automatic error detection techniques based on dynamic invariants, , Master's Thesis, Delft University of Technology,, The Netherlands; Dallmeier, V., Lindig, C., Zeller, A., Lightweight bug localization with ample (2005) Proceedings of the Sixth International Symposium on Automated Analysis-Driven Debugging, pp. 99-104. , ACM, California, USA; Groce, A., Chaki, S., Kroening, D., Strichman, O., Error explanation with distance metrics (2006) International Journal on Software Tools for Technology Transfer, 8 (3), pp. 229-247; Hutchins, M., Foster, H., Goradia, T., Ostrand, T., Experiments of the effectiveness of dataflow-and controlflow-based test adequacy criteria (1994) Proceedings of the 16th International Conference on Software Engineering, pp. 191-200. , IEEE Computer Society Press, Sorrento, Italy; Vokolos, F.I., Frankl, P.G., Empirical evaluation of the textual differencing regression testing technique (1998) Software Maintenance, 1998. Proceedings., International Conference on, pp. 44-53. , IEEE, Portland, USA; Do, H., Elbaum, S.G., Rothermel, G., Supporting controlled experimentation with testing techniques: an infrastructure and its potential impact (2005) Empirical Software Engineering: An International Journal, 10 (4), pp. 405-435; Walter, D., Overfitting, regularization, and hyperparameters, , https//dswalter.github.io/blog/overfitting-regularization-hyperpa rameters; Landsberg, D., Chockler, H., Kroening, D., Lewis, M., Evaluation of measures for statistical fault localisation and an optimising scheme (2015) Fundamental Approaches to Software Engineering, pp. 115-129. , In, Springer, Heidelberg, Germany; Wilcoxon, F., Individual comparisons by ranking methods (1945) Biometrics Bulletin, 1 (6), pp. 80-83; Eric Wong, W., Gao, R., Li, Y., Abreu, R., Wotawa, F., A survey on software fault localization (2016) IEEE Transactions on Software Engineering, 42 (8), pp. 707-740; Yu, K., Lin, M., Gao, Q., Zhang, H., Zhang, X., Locating faults using multiple spectra-specific models (2011) Proceedings of the 2011 ACM Symposium on Applied Computing, pp. 1404-1410. , ACM, TaiChung, Taiwan; Wen, W., Software fault localization based on program slicing spectrum (2012) Proceedings of the 34th International Conference on Software Engineering, pp. 1511-1514. , IEEE Press, Zurich, Switzerland; Lee, H.J., Naish, L., Ramamohanarao, K., (2010) Effective software bug localization using spectral frequency weighting function, pp. 218-227. , Computer Software and Applications Conference (COMPSAC), 2010 IEEE 34th Annual; Naish, L., Probabilistic declarative debugging (2008) Journal of Functional and Logic Programming, 2008 (1); Ochiai, A., Zoogeographic studies on the soleoid fishes found in Japan and its neighbouring regions (1957) Bulletin of the Japanese Society for the Science of Fish, 22 (9), pp. 526-530; Naish, L., Ramamohanarao, K., (2015) Multiple bug spectral fault localization using genetic programming, pp. 11-17. , Software Engineering Conference (ASWEC), 2015 24th Australasian, IEEE, Adelaide, Australia; Jones, J.A., Bowring, J.F., Harrold, M.J., Debugging in parallel (2007) Proceedings of the ISSTA, pp. 16-26; Abreu, R., Zoeteweij, P., Van Gemund, A.J.C., (2009) Spectrum-based multiple fault localization, pp. 88-99. , Automated Software Engineering, 2009. ASE'09. 24th IEEE/ACM International Conference on, IEEE, Auckland, New Zealand; Wong, W.E., Debroy, V., Xu, D., Towards better fault localization: a crosstab-based statistical approach (2012) Systems, Man, and Cybernetics, Part C: Applications and Reviews, IEEE Transactions on, 42 (3), pp. 378-396; Agrawal, H., Horgan, J., London, S., Wong, W., Fault localization using execution slices and dataflow tests (1995) Software Reliability Engineering, pp. 143-151; Agrawal, H., DeMillo, R.A., Spafford, E.H., Debugging with dynamic slicing and backtracking (1993) Software: Practice and Experience, 23 (6), pp. 589-616; Hofer, B., Wotawa, F., (2012) Spectrum enhanced dynamic slicing for better fault localization, pp. 420-425. , ECAI, Montpellier, France; Mayer, W., Stumptner, M., Model-based debugging–state of the art and future challenges (2007) Electronic Notes in Theoretical Computer Science, 174 (4), pp. 61-82; Mayer, W., Stumptner, M., Evaluating models for model-based debugging (2008) Proceedings of the 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, pp. 128-137. , IEEE Computer Society; Wotawa, F., (2010) Fault localization based on dynamic slicing and hitting-set computation, pp. 161-170. , 2010 10th International Conference on Quality Software, IEEE; Wotawa, F., On the relationship between model-based debugging and program slicing (2002) Artificial Intelligence, 135 (1), pp. 125-143; Mayer, W., Abreu, R., Stumptner, M., van Gemund, A.J., Prioritising model-based debugging diagnostic reports (2008) Proceedings of the 19th International Workshop on Principles of Diagnosis, pp. 127-134. , Citeseer; Abreu, R., Mayer, W., Stumptner, M., van Gemund, A.J.C., Refining spectrum-based fault localization rankings (2009) Proceedings of the 2009 ACM Symposium on Applied Computing, pp. 409-414. , ACM, Honolulu, Hawaii; Moon, S., Kim, Y., Kim, M., Yoo, S., (2014) Ask the mutants: mutating faulty programs for fault localization, pp. 153-162. , Software Testing, Verification and Validation (ICST), 2014 IEEE Seventh International Conference on, IEEE, Cleveland, OH, USA; Debroy, V., Wong, W., Combining mutation and fault localization for automated program debugging (2014) Journal of Systems and Software, 90, pp. 45-60; Papadakis, M., Le Traon, Y., Effective fault localization via mutation analysis: a selective mutation approach (2014) Proceedings of the 29th Annual ACM Symposium on Applied Computing, pp. 1293-1300. , ACM; Chekam, T.T., Papadakis, M., Traon, Y.L., Assessing and comparing mutation-based fault localization techniques (2016) arXiv preprint arXiv:1607.05512; Papadakis, M., Le Traon, Y., (2012) Using mutants to locate“ unknown” faults, pp. 691-700. , Software Testing, Verification and Validation (ICST), 2012 IEEE Fifth International Conference on, IEEE, Montreal, QC; Papadakis, M., Le Traon, Y., Metallaxis-fl: mutation-based fault localization (2015) Software Testing, Verification and Reliability, 25 (5-7), pp. 605-628; Zeller, A., Isolating cause-effect chains from computer programs (2002) ACM SIGSOFT Software Engineering Notes, 27 (6), p. 10; Zeller, A., Hildebrandt, R., Simplifying and isolating failure-inducing input (2002) Software Engineering, IEEE Transactions on, 28 (2), pp. 183-200; Zhang, X., Gupta, N., Gupta, R., Locating faults through automated predicate switching (2006) Proceedings of the 28th International Conference on Software Engineering, pp. 272-281. , ACM, Shanghai, China; Wong, W.E., Horgan, J.R., London, S., Mathur, A.P., Effect of test set minimization on fault detection effectiveness (1995) Proceedings of the 17th International Conference on Software Engineering, (2008), pp. 41-50. , ACM, Seattle, Washington, USA, RAPID identifying bug signatures to support debugging activities; (2008) RAPID: identifying bug signatures to support debugging activities; Briand, L.C., Labiche, Y., Liu, X., (2007) Using machine learning to support debugging with Tarantula, pp. 137-146. , Software Reliability, 2007. ISSRE'07. the 18th IEEE International Symposium on, IEEE; Le, T.D.B., Oentaryo, R.J., Lo, D., Information retrieval and spectrum based bug localization: better together (2015) Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, pp. 579-590. , ACM, Bergamo, Italy},
correspondence_address1={Neelofar, N.; Department of Computing and Information Systems, Australia; email: neelofar.eme@gmail.com},
publisher={John Wiley and Sons Ltd},
issn={00380644},
coden={SPEXB},
language={English},
abbrev_source_title={Software Pract Exper},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Flynn20171,
author={Flynn, L. and Svoboda, D. and Snavely, W.},
title={Hands-On Tutorial: Auditing Static Analysis Alerts Using a Lexicon & Rules},
journal={Proceedings - 2017 IEEE Cybersecurity Development Conference, SecDev 2017},
year={2017},
pages={1-2},
doi={10.1109/SecDev.2017.10},
art_number={8077795},
note={cited By 1; Conference of 2017 IEEE Cybersecurity Development Conference, SecDev 2017 ; Conference Date: 24 September 2017 Through 26 September 2017;  Conference Code:131532},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85035814077&doi=10.1109%2fSecDev.2017.10&partnerID=40&md5=baece27a34f82f0a18643fd5b64a9443},
affiliation={Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States},
abstract={This hands-on tutorial teaches participants how to audit static analysis alerts, using an auditing lexicon and rules. There is no widely-accepted lexicon or standard set of rules for auditing static analysis alerts in the software engineering community. Auditing rules and a lexicon should guide different auditors to make the same determination for an alert. Standard terms and processes are necessary so that initial determinations are correctly interpreted, which helps organizations reduce code flaws. They are also needed to improve the quality of audit data to benefit research on alert prioritization. This tutorial teaches a suggested set of auditing rules and a lexicon, briefly detailing rationales based on modern software engineering practices for each rule and each lexicon term. The majority of time in the tutorial will be spent by participants working with provided small programs and associated static analysis alerts, examining them using the lexicon and rules to make a determination, separately and as a group. These hands-on activities will be interspersed with presenting the auditing rules, so participants immediately put what was taught into practice on relevant code and alerts. We hope that the auditing rules and lexicon taught will be immediately useful for participants to adopt (partially or in full) in their workplace, and that learning about them will motivate community discussion leading to agreed-upon standards. © 2017 IEEE.},
keywords={Software engineering;  Teaching, Alert prioritization;  Audit data;  Engineering community;  Hands-on activities;  Set of rules;  Software engineering practices, Static analysis},
funding_details={U.S. Department of DefenseU.S. Department of Defense, DOD},
funding_text 1={This material is based upon work funded and supported by the Department of Defense under Contract No. FA8702-15-D-0002 with Carnegie Mellon University for the operation of the Software Engineering Institute, a federally funded research and development center. [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution. Please see Copyright notice for non-US Govern-ment use and distribution. Carnegie Mellon® and CERT® are registered marks of Carnegie Mellon University. DM17-0319},
references={Shunn, A., Woody, C., Seacord, R., Householder, A., (2013) Strengths in Security Solutions; Chess, B., McGraw, G., Static analysis for security (2004) IEEE Security & Privacy, 2 (6), pp. 76-79; Heckman, S., Williams, L., A systematic literature review of action-able alert identification techniques for automated static code analysis (2011) Information and Software Technology, 53 (4), pp. 363-387; Flynn, L., (2016) Prioritizing Alerts from Static Analysis to Find and Fix Code Flaws, , https://insights-sei-cmu-edu.luisamigo.proxybk.com/seiblog/2016/06/prioritizing-alerts-from-static-analysis-to-find-and-fix-codeflaws.html, accessed: 2016-06-27; Flynn, L., (2016) Prioritizing Alerts from Static Analysis with Classification Models, , http://resources-sei-cmu-edu.luisamigo.proxybk.com/library/assetview.cfm?assetid=474252, November; Svoboda, D., Flynn, L., Snavely, W., Static analysis alert audits: Lexicon & rules (2016) Cybersecurity Development (SecDev), IEEE. IEEE, pp. 37-44; SEI CERT Coding Standards, , https://www-securecoding-cert-org.luisamigo.proxybk.com/confluence/display/seccode/SEI+CERT+Coding+Standards; (2016) Common Weakness Enumeration: A Community-Developed Dictionary of Software Weakness Types, , https://cwe-mitre-org.luisamigo.proxybk.com, accessed June 22; Svoboda, D., Toda, Y., (2014) Anatomy of Another Java Zero-Day Exploit, , https://www.youtube.com/watch?v=4m24AbbALUU, ap-proximately 100 attendees, October; Svoboda, D., (2013) Java Security Architecture. How? And Why?, , http://www-slideserve-com.luisamigo.proxybk.com/pakuna/the-java-security-architecturehow-and-why, approximately 150 attendees, October},
sponsors={},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538634677},
language={English},
abbrev_source_title={Proc. - 2017 IEEE Cybersecur. Dev. Conf., SecDev},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Wei2017672,
author={Wei, L. and Liu, Y. and Cheung, S.-C.},
title={OASIS: prioritizing static analysis warnings for Android apps based on app user reviews},
journal={Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering},
year={2017},
pages={672-682},
doi={10.1145/3106237.3106294},
note={cited By 14; Conference of 11th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2017 ; Conference Date: 4 September 2017 Through 8 September 2017;  Conference Code:130154},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85030783550&doi=10.1145%2f3106237.3106294&partnerID=40&md5=985c3f5d1041aa0fcb1e5f1c0a572b56},
affiliation={Department of Computer Science and Engineering, Hong Kong University of Science and Technology, Hong Kong, Hong Kong},
abstract={Lint is a widely-used static analyzer for detecting bugs/issues in Android apps. However, it can generate many false warnings. One existing solution to this problem is to leverage project history data (e.g., bug fixing statistics) for warning prioritization. Unfortunately, such techniques are biased toward a project's archived warnings and can easily miss newissues. Anotherweakness is that developers cannot readily relate the warnings to the impacts perceivable by users. To overcome these weaknesses, in this paper, we propose a semantics-aware approach, OASIS, to prioritizing Lint warnings by leveraging app user reviews. OASIS combines program analysis and NLP techniques to recover the intrinsic links between the Lint warnings for a given app and the user complaints on the app problems caused by the issues of concern. OASIS leverages the strength of such links to prioritize warnings. We evaluated OASIS on six popular and large-scale open-source Android apps. The results show that OASIS can effectively prioritize Lint warnings and help identify new issues that are previously-unknown to app developers. © 2017 Association for Computing Machinery.},
author_keywords={Android Lint;  App user reviews;  Concept graph;  Natural language processing;  Static analysis;  Warning prioritization},
keywords={Application programs;  Natural language processing systems;  Open source software;  Semantics;  Static analysis, Android Lint;  Concept graph;  Detecting bugs;  Nlp techniques;  Prioritization;  Program analysis;  Static analyzers;  User reviews, Android (operating system)},
funding_details={16202917},
funding_text 1={This research project is funded by RGC/GRF Grant 16202917 of Hong Kong.},
references={(2017) Android 6.0 Changes, , https://developer-android-com.luisamigo.proxybk.com/about/versions/marshmallow/android-6.0-changes.html, (2017); (2017) Android API Guides, , https://developer-android-com.luisamigo.proxybk.com/guide/index.html, (2017); (2017) Android Studio, , https://developer-android-com.luisamigo.proxybk.com/studio/index.html, (2017); (2017) Android's HTTP Clients, , https://android-developers-googleblog-com.luisamigo.proxybk.com/2011/09/androids-http-clients.html, (2017); (2017) AnkiDroid Code Repository, , https://github-com.luisamigo.proxybk.com/ankidroid/Anki-Android, (2017); (2017) C:geo Code Repository, , https://github-com.luisamigo.proxybk.com/cgeo/cgeo, (2017); (2017) FindBugs™-Find Bugs in Java Programs, , http://findbugs-sourceforge-net.luisamigo.proxybk.com, (2017); (2017) Improve Your Code with Lint, , https://developer-android-com.luisamigo.proxybk.com/studio/write/lint.html, (2017); (2017) Issue Checkers in Android Lint, , http://tools-android-com.luisamigo.proxybk.com/tips/lint-checks, (2017); (2017) K-9 Mail Code Repository, , https://github-com.luisamigo.proxybk.com/k9mail/k-9, (2017); (2017) LanguageTool Style and Grammar Check, , https://www-languagetool-org.luisamigo.proxybk.com/, (2017); (2017) Microsoft Concept Graph, , https://concept-research-microsoft-com.luisamigo.proxybk.com, (2017); (2017) OwnCloud Code Repository, , https://github-com.luisamigo.proxybk.com/owncloud/android, (2017); (2017) PMD, , https://pmd-github-io.luisamigo.proxybk.com, (2017); (2017) Stack Overflow, , http://stackoverflow-com.luisamigo.proxybk.com, (2017); (2017) Transdroid Code Repository, , https://github-com.luisamigo.proxybk.com/erickok/transdroid, (2017); (2017) WordPress for Android Code Repository, , https://github-com.luisamigo.proxybk.com/wordpress-mobile/WordPress-Android, (2017); Bessey, A., Block, K., Chelf, B., Chou, A., Fulton, B., Hallem, S., Henri-Gros, C., Engler, D., A few billion lines of code later: Using static analysis to find bugs in the real world (2010) Commun. ACM, 53 (2), pp. 66-75. , Feb. 2010; Binkley, D., Davis, M., Lawrie, D., Morrell, C., To camelcase or under-score (2009) ICPC, pp. 158-167; Chen, N., Lin, J., Ch Hoi, S., Xiao, X., Zhang, B., Arminer: Mining informative reviews for developers from mobile app marketplace (2014) ICSE, pp. 767-778; Christakis, M., Bird, C., What developers want and need from program analysis: An empirical study (2016) ASE, pp. 332-343; Di Sorbo, A., Panichella, S., Alexandru, C.V., Shimagaki, J., Visaggio, C.A., Canfora, G., Gall, H.C., Whatwould users change in my app? Summarizing app reviews for recommending software changes (2016) FSE, pp. 499-510; Gu, X., Kim, S., What parts of your apps are loved by users? (2015) ASE, pp. 760-770; Han, D., Zhang, C., Fan, X., Hindle, A., Wong, K., Stroulia, E., Understanding android fragmentation with topic analysis of vendor-specific bugs (2012) WCRE, pp. 83-92; Hanam, Q., Tan, L., Holmes, R., Lam, P., Finding patterns in static analysis alerts: Improving actionable alert ranking (2014) MSR, pp. 152-161; Harman, M., Jia, Y., Zhang, Y., App store mining and analysis: Msr for app stores (2012) MSR, pp. 108-111; Hua, W., Wang, Z., Wang, H., Zheng, K., Zhou, X., Short text understanding through lexical-semantic analysis (2015) ICDE, pp. 495-506; Joorabchi, M.E., Mesbah, A., Kruchten, P., Real challenges in mobile app development (2013) ESEM, pp. 15-24; Khalid, H., Nagappan, M., Shihab, E., Hassan, A.E., Prioritizing the devices to test your app on: A case study of android game apps (2014) FSE, pp. 610-620; Khalid, H., Shihab, E., Nagappan, M., Hassan, A.E., What do mobile app users complain about? (2015) IEEE Software, 32 (3), pp. 70-77. , 2015; Kim, S., Ernst, M.D., Which warnings should i fix first? (2007) ESEC/FSE, pp. 45-54; Kremenek, T., Engler, D., Z-ranking: Using statistical analysis to counter the impact of static analysis approximations (2003) SAS, pp. 295-315; Le Tien-Duy, B., Oentaryo, R.J., Lo, D., Information retrieval and spectrum based bug localization: Better together (2015) ESEC/FSE, pp. 579-590; Liu, Y., Xu, C., Cheung, S., Characterizing and detecting performance bugs for smartphone applications (2014) ICSE, pp. 1013-1024; Liu, Y., Xu, C., Cheung, S., Lü, J., Greendroid: Automated diagnosis of energy inefficiency for smartphone applications (2014) TSE, 40 (9), pp. 911-940. , Sept 2014; Long, F., Rinard, M., Automatic patch generation by learning correct code (2016) POPL, pp. 298-312; Manning, C.D., Surdeanu, M., Bauer, J., Finkel, J., Bethard, S.J., McClosky, D., The stanford corenlp natural language processing toolkit (2014) ACL (System Demonstrations), pp. 55-60; (1999) Code Conventions for the Java Programming Language, , Sun Microsystems. 1999; Nanda, M.G., Gupta, M., Sinha, S., Chandra, S., Schmidt, D., Balachandran, P., Making defect-finding tools work for you (2010) IICSE, pp. 99-108; Palomba, F., Linares-Vásquez, M., Bavota, G., Oliveto, R., Di Penta, M., Poshyvanyk, D., De Lucia, A., User reviews matter! Tracking crowdsourced reviews to support evolution of successful apps (2015) ICSME, pp. 291-300; Panichella, A., Dit, B., Oliveto, R., Di Penta, M., Poshyvanyk, D., De Lucia, A., Parameterizing and assembling irbased solutions for se tasks using genetic algorithms (2016) SANER, pp. 314-325; Panichella, S., Di Sorbo, A., Guzman, E., Visaggio, C.A., Canfora, G., Gall, H.C., How can i improve my app? Classifying user reviews for software maintenance and evolution (2015) ICSME, pp. 281-290; Ramos, J., Using tf-idf to determine word relevance in document queries (2003) ICML, pp. 133-142; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) ICSE, pp. 341-350; Sadowski, C., Van Gogh, J., Jaspan, C., Söderberg, E., Winter, C., Tricorder: Building a program analysis ecosystem (2015) ICSE, pp. 598-608; Shen, H., Fang, J., Zhao, J., Efindbugs: Effective error ranking for findbugs (2011) ICST, pp. 299-308; Villarroel, L., Bavota, G., Russo, B., Oliveto, R., Di Penta, M., Release planning of mobile apps based on user reviews (2016) ICSE, pp. 14-24; Wei, L., Liu, Y., Cheung, S.-C., Taming android fragmentation: Characterizing and detecting compatibility issues for android apps (2016) ASE, pp. 226-237; Wen, M., Wu, R., Cheung, S., Locus: Locating bugs from software changes (2016) ASE, pp. 262-273; Wu, R., Zhang, H., Kim, S., Cheung, S., Relink: Recovering links between bugs and changes (2011) ESEC/FSE, pp. 15-25; Xuan, J., Monperrus, M., Learning to combine multiple ranking metrics for fault localization (2014) ICSME, pp. 191-200; Ye, X., Shen, H., Ma, X., Bunescu, R., Liu, C., From word embeddings to document similarities for improved information retrieval in software engineering (2016) ICSE, pp. 404-415; Zhou, J., Zhang, H., Lo, D., Where should the bugs be fixed? More accurate information retrieval-based bug localization based on bug reports (2012) ICSE, pp. 14-24},
editor={Zisman A., Bodden E., Schafer W., van Deursen A.},
sponsors={Special Interest Group on Software Engineering (ACM SIGSOFT)},
publisher={Association for Computing Machinery},
isbn={9781450351058},
language={English},
abbrev_source_title={Proc ACM SIGSOFT Symp Found Software Eng},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Chen2017,
author={Chen, C. and Panerati, J. and Hafnaoui, I. and Beltrame, G.},
title={Static probabilistic timing analysis with a permanent fault detection mechanism},
journal={2017 12th IEEE International Symposium on Industrial Embedded Systems, SIES 2017 - Proceedings},
year={2017},
doi={10.1109/SIES.2017.7993373},
art_number={7993373},
note={cited By 1; Conference of 12th IEEE International Symposium on Industrial Embedded Systems, SIES 2017 ; Conference Date: 14 June 2017 Through 16 June 2017;  Conference Code:129714},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85028566364&doi=10.1109%2fSIES.2017.7993373&partnerID=40&md5=f08cbc4e5b8afa1727036422244f87fb},
affiliation={Département de Génie Informatique et Génie Logiciel, Polytechnique Montréal, Canada},
abstract={In recent years, random caches have been proposed as a way to simplify the timing analysis of real-time systems. However, technology-scaling makes caches prone to faults. Fault detection mechanisms can detect permanent faults but they affect the timing analysis of a random cache. This paper introduces a Static Probabilistic Timing Analysis (SPTA) technique that accounts for a permanent fault detection mechanism. The permanent fault detection mechanism periodically checks caches for faults and disables faulty cache blocks to prevent future accesses. The SPTA method operates by periodically switching its runtime between the fault-detection and the no-fault-detection states. This is the first SPTA with a realistic permanent fault detection mechanism. Experiments show that the proposed method always provides safe timing estimations-even when few memory blocks are provided-and accurate results-when sufficient memory blocks are present. © 2017 IEEE.},
keywords={Embedded systems;  Interactive computer systems;  Real time systems;  Timing circuits, Cache blocks;  Fault-detection mechanisms;  Memory blocks;  Permanent faults;  Runtimes;  Technology scaling;  Timing Analysis;  Timing estimation, Fault detection},
references={Bernat, G., Colin, A., Petters, S., Wcet analysis of probabilistic hard real-time systems (2002) Real-Time Systems Symposium, 2002. RTSS 2002. 23rd, pp. 279-288. , IEEE; Quinones, E., Berger, E., Bernat, G., Cazorla, F., Using randomized caches in probabilistic real-time systems (2009) Real-Time Systems, 2009. ECRTS '09. 21st Euromicro Conference on, pp. 129-138. , July; Wilkerson, C., Gao, H., Alameldeen, A.R., Chishti, Z., Khellah, M., Lu, S.-L., Trading off cache capacity for reliability to enable low voltage operation (2008) Computer Architecture, 2008. ISCA'08. 35th International Symposium on, pp. 203-214. , IEEE; Nassif, S.R., Mehta, N., Cao, Y., A resilience roadmap (2010) Proceedings of the Conference on Design Automation and Test in Europe. European Design and Automation Association, pp. 1011-1016; Hardy, D., Sideris, I., Ladas, N., Sazeides, Y., The performance vulnerability of architectural and non-architectural arrays to permanent faults (2012) 2012 45th Annual IEEE/ACM International Symposium on Microarchitecture, pp. 48-59. , IEEE; Altmeyer, S., Cucu-Grosjean, L., Davis, R., Static probabilistic timing analysis for real-time systems using random replacement caches (2015) Real-Time Systems, 51 (1), pp. 77-123; Cucu-Grosjean, L., Santinelli, L., Houston, M., Lo, C., Vardanega, T., Kosmidis, L., Abella, J., Cazorla, F., Measurement-based probabilistic timing analysis for multi-path programs (2012) Real-Time Systems (ECRTS), 2012 24th Euromicro Conference on, pp. 91-101. , July; Zhou, S., An efficient simulation algorithm for cache of random replacement policy (2010) Network and Parallel Computing, pp. 144-154. , Springer; Cazorla, F.J., Quiñones, E., Vardanega, T., Cucu, L., Triquet, B., Bernat, G., Berger, E., Maxim, D., Proartis: Probabilistically analyzable real-time systems (2013) ACM Trans. Embed. Comput. Syst, 12 (2 S), pp. 941-9426. , May; Davis, R., Santinelli, L., Altmeyer, S., Maiza, C., Cucu-Grosjean, L., Analysis of probabilistic cache related pre-emption delays (2013) Real-Time Systems (ECRTS), 2013 25th Euromicro Conference on, pp. 168-179. , July; Altmeyer, S., Davis, R., On the correctness, optimality and precision of static probabilistic timing analysis (2014) Design, Automation and Test in Europe Conference and Exhibition (DATE), 2014, pp. 1-6. , March; Kosmidis, L., Abella, J., Quiñones, E., Cazorla, F.J., A cache design for probabilistically analysable real-time systems (2013) Proceedings of the Conference on Design Automation and Test in Europe, Ser. DATE '13, pp. 513-518. , San Jose, CA, USA: EDA Consortium; Davis, R., Improvements to static probabilistic timing analysis for systems with random cache replacement policies (2013) RTSOPS 2013, pp. 22-24; Griffin, D., Lesage, B., Burns, A., Davis, R.I., Static probabilistic timing analysis of random replacement caches using lossy compression (2014) Proceedings of the 22Nd International Conference on Real-Time Networks and Systems Ser. RTNS '14, pp. 289-298. , New York, NY, USA: ACM; Lesage, B., Griffin, D., Altmeyer, S., Davis, R., Static probabilistic timing analysis for multi-path programs (2015) Real-Time Systems Symposium, 2015 IEEE, pp. 361-372. , Dec; Slijepcevic, M., Kosmidis, L., Abella, J., Quinones, E., Cazorla, F., Dtm: Degraded test mode for fault-aware probabilistic timing analysis (2013) Real-Time Systems (ECRTS), 2013 25th Euromicro Conference on, pp. 237-248. , July; Slijepcevic, M., Kosmidis, L., Abella, J., Quinones, E., Cazorla, F., Timing verification of fault-tolerant chips for safety-critical applications in harsh environments (2014) Micro, IEEE, 34 (6), pp. 8-19. , Nov; Hardy, D., Puaut, I., Static probabilistic worst case execution time estimation for architectures with faulty instruction caches (2013) Proceedings of the 21st International Conference on Real-Time Networks and Systems, Ser. RTNS '13, pp. 35-44. , New York, NY, USA: ACM; Hardy, D., Puaut, I., Sazeides, Y., Probabilistic wcet estimation in presence of hardware for mitigating the impact of permanent faults (2016) 2016 Design, Automation Test in Europe Conference Exhibition (DATE), pp. 91-96. , March; Chen, C., Santinelli, L., Hugues, J., Beltrame, G., Static probabilistic timing analysis in presence of faults (2016) 2016 11th IEEE Symposium on Industrial Embedded Systems (SIES), pp. 1-10. , May; Chen, C., Panerati, J., Beltrame, G., Effects of online fault detection mechanisms on probabilistic timing analysis (2016) 2016 IEEE International Symposium on Defect and Fault Tolerance in VLSI and Nanotechnology Systems (DFTS), , Sept; Panerati, J., Abdi, S., Beltrame, G., Balancing system availability and lifetime with dynamic hidden markov models (2014) Adaptive Hardware and Systems (AHS), 2014 NASA/ESA Conference on, pp. 240-247. , July; Abella, J., Chaparro, P., Vera, X., Carretero, J., Gonzlez, A., Online failure detection and confinement in caches (2008) 2008 14th IEEE International On-Line Testing Symposium, pp. 3-9. , July; Gustafsson, J., Betts, A., Ermedahl, A., Lisper, B., The Mälardalen WCET Benchmarks: Past, Present and Future (2010) 10th International Workshop on Worst-Case Execution Time Analysis (WCET 2010), Ser. OpenAccess Series in Informatics (OASIcs), 15, pp. 136-146; Binkert, N., The gem5 simulator (2011) SIGARCH Comput. Archit. News, 39 (2), pp. 1-7. , Aug},
sponsors={Ecole Nationale superieure d'Electrotechnique, d'Electronique, d'Informatique et des Telecommunications (INP-ENSEEIHT)},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538631669},
language={English},
abbrev_source_title={IEEE Int. Symp. Indu. Embed. Syst., SIES - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Dag20171990,
author={Dag, B. and Boynuegri, A.R. and Ates, Y. and Karakas, A. and Nadar, A. and Uzunoglu, M.},
title={Static Modeling of Microgrids for Load Flow and Fault Analysis},
journal={IEEE Transactions on Power Systems},
year={2017},
volume={32},
number={3},
pages={1990-2000},
doi={10.1109/TPWRS.2016.2613547},
art_number={7576668},
note={cited By 22},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85018747059&doi=10.1109%2fTPWRS.2016.2613547&partnerID=40&md5=2fc7c7ef7ce2c11718335e0b46d335c9},
affiliation={Energy Institute of Marmara Research Center, TUBITAK, Ankara, 06800, Turkey; Department of Electrical Engineering, Yildiz Technical University, Istanbul, 34220, Turkey},
abstract={Inverter interfaced distributed generators (DGs) in microgrids have different characteristics and models that are not available in the existing conventional power flow analysis tools. This paper presents a static modeling approach for inverter interfaced DGs that can be applied for time spread load flow analysis and fault analysis of microgrids, including droop-based voltage controlled DGs. The static models have been derived from the common control schemes applied to inverter interfaced DGs, including the constraints emerging from droop control and reflect steady-state behaviors of inverters accurately. In addition to simplification of analysis procedure, the static models can provide a base for the analysis of microgrids with conventional numeric analysis tools. The presented static modeling approach has been validated comparatively with the dynamic modeling results of a test microgrid. © 2017 IEEE.},
author_keywords={Droop control;  Fault analysis;  Inverter;  Load flow;  Microgrid;  Static modeling},
keywords={Electric inverters, Droop control;  Fault analysis;  Inverter;  Load flow;  Micro grid;  Static model, Electric load flow},
references={Arulampalam, A., Barnes, M., Engler, A., Goodwin, A., Jenkins, N., Control of power electronic interfaces in distributed generation microgrids (2004) Int. J. Electron., 91 (9), pp. 503-523. , Sep; Guerrero, J.M., Matas, J., De Vicuna, L.G., Castilla, M., Wirelesscontrol strategy for parallel operation of distributed-generation inverters (2006) IEEE Trans. Ind. Electron., 53 (5), pp. 1461-1470. , Oct; Pecąs Lopes, J.A., Moreira, C.L., Madureira, A.G., Defining control strategies for microgrids islanded operation (2006) IEEE Trans. Power Syst., 21 (2), pp. 916-924. , May; Katiraei, F., Iravani, M.R., Power management strategies for a microgrid with multiple distributed generation units (2006) IEEE Trans. Power Syst., 21 (4), pp. 1821-1831. , Nov; Guerrero, J.M., Chandorkar, M., Lee, T.-L., Loh, P.C., Advanced control architectures for intelligent microgrids-Part I: Decentralized and Hierarchical control (2013) IEEE Trans. Ind. Electron., 60 (4), pp. 1254-1262. , Apr; Canizares, C.A., Trends in microgrid control (2014) IEEE Trans. Smart Grid, 5 (4), pp. 1905-1919. , Jul; (2009) IEEE Standard for Interconnecting Distributed Resources with Electric Power Systems, , IEEE Application Guide for IEEE Std. 1547 IEEE Standard 1547. 2-2008; Carrasco, J.M., Power-electronic systems for the grid integration of renewable energy sources: A survey (2006) IEEE Trans. Ind. Electron., 53 (4), pp. 1002-1016. , Jun; Plet, C.A., Graovac, M., Green, T.C., Iravani, R., Fault response of grid-connected inverter dominated networks (2010) Proc. IEEE Power, Energy Soc. General Meeting, pp. 1-8. , Minneapolis, MN, USA; Plet, C.A., Green, T.C., Fault response of inverter interfaced distributed generators in grid-connected applications (2014) Elect. Power Syst. Res., 106, pp. 21-28; Miret, J., Castilla, M., Camacho, A., Garcia de Vicuna, L., Matas, J., Control scheme for photovoltaic three-phase inverters to minimize peak currents during unbalanced grid-voltage sags (2012) IEEE Trans. Power Electron., 27 (10), pp. 4262-4271. , Oct; Rodriguez, P., Timbus, A.V., Teodorescu, R., Liserre, M., Blaabjerg, F., Flexible active power control of distributed power generation systems during grid faults (2007) IEEE Trans. Ind. Electron., 54 (5), pp. 2583-2592. , Oct; Wang, F., Duarte, J.L., Hendrix, M.A.M., Pliant active and reactive power control for grid-interactive converters under unbalanced voltage dips (2011) IEEE Trans. Power Electron., 26 (5), pp. 1511-1521. , May; Camacho, A., Castilla, M., Miret, J., Vasquez, J.C., Alarcon-Gallo, E., Flexible voltage support control for three-phase distributed generation inverters under grid fault (2013) IEEE Trans. Ind. Electron., 60 (4), pp. 1429-1441. , Apr; Hooshyar, H., Baran, M.E., Fault analysis on distribution feeders with high penetration of PV systems (2013) IEEE Trans. Power Syst., 28 (3), pp. 2890-2896. , Aug; Tu, D.V., Chaitusaney, S., Yokoyama, A., Maximum-allowable distributed generation considering fault ride-through requirement and reach reduction of utility relay (2014) IEEE Trans. Power Del., 29 (2), pp. 534-541. , Apr; Wang, Q., Zhou, N., Ye, L., Fault analysis for distribution networks with current-controlled three-phase inverter-interfaced distributed generators (2015) IEEE Trans. Power Del., 30 (3), pp. 1532-1542. , Jun; Baran, M.E., El-Markaby, I., Fault analysis on distribution feeders with distributed generators (2005) IEEE Trans. Power Syst., 20 (4), pp. 1757-1764. , Nov; Brucoli, M., Green, T.C., Fault behavior in islanded microgrids (2007) Proc. 19th Int. Conf. Elect. Distrib., , Vienna, Austria Paper no. 0548; Plet, C., Brucoli, M., McDonald, J.D.F., Green, T.C., Fault models of inverter-interfaced distributed generators: Experimental verification and application to fault analysis (2011) Proc. IEEE Power&Energy Soc. General Meeting, pp. 1-8. , San Diego, CA, USA; Nimpitiwan, N., Heydt, G.T., Ayyanar, R., Suryanarayanan, S., Fault current contribution from synchronous machine and inverter based distributed generators (2007) IEEE Trans. Power Del., 22 (1), pp. 634-641. , Jan; Sortomme, E., Venkata, S.S., Mitra, J., Microgrid protection using communication-assisted digital relays (2010) IEEE Trans. Power Del., 25 (4), pp. 2789-2796. , Oct; Lijun, J., Miaomiao, J., Guangyao, Y., Fault analysis of microgrid and adaptive distance protection based on complex wavelet transform (2014) Proc. Electron. Appl. Conf. Expo., Shanghai, China, pp. 360-364. , Nov; Abdelaziz, M.M.A., Farag, H.E., El-Saadany, E.F., Mohamed, Y.A.I., A novel and generalized three-phase power flow algorithm for islanded microgrids using a Newton trust region method (2013) IEEE Trans. Power Syst., 28 (1), pp. 190-201. , Feb; Elrayyah, A., Sozer, Y., Elbuluk, M.E., A novel load-flow analysis for stable and optimized microgrid operation (2014) IEEE Trans. Power Del., 29 (4), pp. 1709-1717. , Aug; Mumtaz, F., Syed, M.H., Hosani, M.A., Zeineldin, H.H., A novel approach to solve power flow for islanded microgrids using modified Newton raphson with droop control of DG (2016) IEEE Trans. Sustain. Energy, 7 (2), pp. 493-503. , Apr; Mohd, A., Ortjohann, E., Sinsukthavorn, W., Lingemann, M., Hamsic, N., Morton, D., Supervisory control and energy management of an inverterbased modular smart grid (2009) Proc. Power Syst. Conf. Expo., pp. 1-6. , Seattle, WA, USA; He, J., Li, Y.W., Hybrid voltage and current control approach for DGgrid interfacing converters with LCL filters (2013) IEEE Trans. Ind. Electron., 60 (5), pp. 1797-1809. , May; Kim, J., Guerrero, J.M., Rodriguez, P., Teodorescu, R., Nam, K., Mode adaptive droop control with virtual output impedances for an inverterbased flexible AC microgrid (2011) IEEE Trans. Power Electron., 26 (3), pp. 689-701. , Mar; Marwali, M.N., Keyhani, A., Control of distributed generation systems-Part I: Voltages and currents control (2004) IEEE Trans. Power Electron., 19 (6), pp. 1541-1550. , Nov; Yazdanpanahi, H., Li, Y.W., Xu, W., A new control strategy to mitigate the impact of inverter-based DGs on protection system (2012) IEEE Trans. Smart Grid, 3 (3), pp. 1427-1436. , Sep; Bottrell, N., Green, T.C., Comparison of current-limiting strategies during fault ride-through of inverters to prevent latch-up and windup (2014) IEEE Trans. Power Electron., 29 (7), pp. 3786-3797. , Jul; Blaabjerg, F., Teodorescu, R., Liserre, M., Timbus, A.V., Overview of control and grid synchronization for distributed power generation systems (2006) IEEE Trans. Ind. Electron., 53 (5), pp. 1398-1409. , Oct; Cohelho, E.A.A., Cortizo, P.C., Garcia, P.F.D., Small-signal stability for parallel-connected inverters in stand-alone AC supply systems (2002) IEEE Trans. Ind. Appl., 38 (2), pp. 533-542. , Mar./Apr; Pogaku, N., Prodanovic, M., Green, T.C., Modeling, analysis and testing of autonomous operation of an inverter-based microgrid (2007) IEEE Trans. Power Electron., 22 (2), pp. 613-625. , Mar; Mohamed, Y.A.-R.I., El-Saadany, E.F., Adaptive decentralized droop controller to preserve power sharing stability of paralleled inverters in distributed generation microgrids (2008) IEEE Trans. Power. Electron., 23 (6), pp. 2806-2816. , Nov; Delghavi, M.B., Yazdani, A., An adaptive feedforward compensation for stability enhancement in droop-controlled inverter-based microgrids (2011) IEEE Trans. Power. Del., 26 (3), pp. 1764-1773. , Jul; Prodanovic, M., Green, T.C., Control and filter design of three-phase inverters for high power quality grid connection (2003) IEEE Trans. Power Electron., 18 (1), pp. 373-380. , Jan; Zhong, Q.-C., Robust droop controller for accurate proportional load sharing among inverters operated in parallel (2013) IEEE Trans. Ind. Electron., 60 (4), pp. 1281-1290. , Apr; Abdel-Akher, M., Nor, K.M., Rashid, A.H.A., Improved three-phase power-flow methods using sequence components (2005) IEEE Trans. Power Syst., 20 (3), pp. 1389-1397. , Aug; Kamh, M.Z., Iravani, R., Unbalanced model and power-flow analysis of microgrids and active distribution system (2010) IEEE Trans. Power. Del., 25 (4), pp. 2851-2858. , Oct; Jayawarna, N., Jenkins, N., Barnes, M., Lorentzou, M., Papathanassiou, S., Hatziargyriou, N., Safety analysis of a microgrid (2006) Int. J. Distrib. Energy Resour., 2 (4), pp. 261-278. , Jan},
publisher={Institute of Electrical and Electronics Engineers Inc.},
issn={08858950},
coden={ITPSE},
language={English},
abbrev_source_title={IEEE Trans Power Syst},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Kiliç20171342,
author={Kiliç, Y. and Sözer, H.},
title={Generating runtime verification specifications based on static code analysis alerts},
journal={Proceedings of the ACM Symposium on Applied Computing},
year={2017},
volume={Part F128005},
pages={1342-1347},
doi={10.1145/3019612.3019822},
note={cited By 0; Conference of 32nd Annual ACM Symposium on Applied Computing, SAC 2017 ; Conference Date: 4 April 2017 Through 6 April 2017;  Conference Code:128005},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85020859745&doi=10.1145%2f3019612.3019822&partnerID=40&md5=8f689c923bca9d621c9253ac518097f1},
affiliation={Özyeǧin University, Istanbul, Turkey},
abstract={Runtime verification techniques verify dynamic system behavior with respect to a set of specifications. These specifications are often created manually based on system requirements and constraints. In this paper, we introduce a rule-based approach for automatically generating runtime verification specifications based on alerts that are reported by static code analysis tools. We define a set of rules to be checked for an alert type. Violations of these rules indicate either the absence or existence of an actual bug designated by the instances of that alert type. Formal verification specifications are automatically generated for each reported alert instance based on the defined rules. Then, runtime monitors are automatically synthesized and integrated to the system. These monitors report detected errors or false positive alerts during software execution. The approach is applied on two open source software systems.},
author_keywords={Model transformations;  Runtime verification;  Software verification;  Static code analysis;  Tool integration},
keywords={Codes (symbols);  Computer software;  Formal verification;  Open source software;  Software engineering;  Specifications;  Verification, Model transformation;  Run-time verification;  Software verification;  Static code analysis;  Tool integration, Open systems},
references={Ahrendt, W., Pace, G., Schneider, G., A unified approach for static and runtime verification: Framework and applications (2012) Proceedings of the International Symposium on Leveraging Applications of Formal Methods, pp. 312-326; Artho, C., Bierel, A., Combined static and dynamic analysis (2005) Proceedings of the International Workshop on Abstract Interpretation of Object-Oriented Languages, pp. 98-115; Bodden, E., Sewe, A., Sinschek, J., Oueslati, H., Mezini, M., Taming reection: Aiding static analysis in the presence of reection and custom class loaders (2011) Proceedings of the 33rd International Conference on Software Engineering, pp. 241-250; Wohlin, C., (2012) Experimentation in Software Engineering, , Springer-Verlag, Berlin, Heidelberg; Ciraci, S., Sozer, H., Tekinerdogan, B., An approach for detecting inconsistencies between behavioral models of the software architecture and the code (2012) Proceedings of the 36th International Conference on Computer Software and Applications, pp. 257-266; Ciraci, S., Sozer, H., Tekinerdogan, B., A runtime verification framework for smart grid applications implemented on simulation frameworks (2013) Proceedings of the Workshop on Software Engineering Challenges for the Smart Grid, pp. 1-8; Czarnecki, K., Helsen, S., Feature-based survey of model transformation approaches (2006) IBM Systems Journal, 45, pp. 621-645; Gabbay, D., Hodkinson, I., Reynolds, M., (1997) Temporal Logic, , Oxford University Press, Oxford, UK; Gates, N.D.A., Roach, S., A taxonomy and catalog of runtime software-fault monitoring tools (2004) IEEE Transactions on Software Engineering, 30 (12), pp. 859-872; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Information and Software Technology, 53 (4), pp. 363-387; Jin, D., Meredith, P., Lee, C., Rosu, G., JavaMOP: Efficient parametric runtime monitoring framework (2012) Proceedings of the 34th International Conference on Software Engineering, pp. 1427-1430; Kiczales, G., Hilsdale, E., Hugunin, J., Kersten, M., Palm, J., Griswold, W., An overview of AspectJ (2001) Proceedings of the European Conference on Object-Oriented Programming, pp. 327-353; Kiczales, G., Lamping, J., Mendhekar, A., Maeda, C., Lopes, C., Loingtier, J.-M., Irwin, J., Aspect-oriented programming (1987) Proceedings of the European Conference on Object-Oriented Programming, pp. 220-242; Leucker, M., Schallhart, C., A brief account of runtime verification (2008) Journal of Logic and Algebraic Programming, 78, pp. 293-303; Li, Y., Tan, T., Sui, Y., Xue, J., Self-inferencing reection resolution for Java (2014) Proceedings of the 28th European Conference on Object-Oriented Programming, pp. 27-53; Livshits, B., Zimmerman, T., Dynamine: Finding common error patterns by mining software revision histories (2005) SIGSOFT Software Engineering Notes, 30, pp. 296-305; Meredith, P., (2012) Efficient Expressive and Eéctive Runtime Verification, , PhD thesis, University of Illinois at Urbana-Champaign, Urbana, Illinois, USA; Sozer, H., Integrated static code analysis and runtime verification (2015) Software: Practice and Experience, 45 (10), pp. 1359-1373},
sponsors={ACM Special Interest Group on Applied Computing (SIGAPP)},
publisher={Association for Computing Machinery},
isbn={9781450344869},
language={English},
abbrev_source_title={Proc ACM Symp Appl Computing},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Buckers2017472,
author={Buckers, T. and Cao, C. and Doesburg, M. and Gong, B. and Wang, S. and Beller, M. and Zaidman, A.},
title={UAV: Warnings from multiple Automated Static Analysis Tools at a glance},
journal={SANER 2017 - 24th IEEE International Conference on Software Analysis, Evolution, and Reengineering},
year={2017},
pages={472-476},
doi={10.1109/SANER.2017.7884656},
art_number={7884656},
note={cited By 10; Conference of 24th IEEE International Conference on Software Analysis, Evolution, and Reengineering, SANER 2017 ; Conference Date: 21 February 2017 Through 24 February 2017;  Conference Code:127060},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85018430951&doi=10.1109%2fSANER.2017.7884656&partnerID=40&md5=8d65de161f41d0ff5fe900316e098ee2},
affiliation={Delft University of Technology, Netherlands},
abstract={Automated Static Analysis Tools (ASATs) are an integral part of today's software quality assurance practices. At present, a plethora of ASATs exist, each with different strengths. However, there is little guidance for developers on which of these ASATs to choose and combine for a project. As a result, many projects still only employ one ASAT with practically no customization. With UAV, the Unified ASAT Visualizer, we created an intuitive visualization that enables developers, researchers, and tool creators to compare the complementary strengths and overlaps of different Java ASATs. UAV's enriched treemap and source code views provide its users with a seamless exploration of the warning distribution from a high-level overview down to the source code. We have evaluated our UAV prototype in a user study with ten second-year Computer Science (CS) students, a visualization expert and tested it on large Java repositories with several thousands of PMD, FindBugs, and Checkstyle warnings. Project Website: https://clintoncao-github-io.luisamigo.proxybk.com/uav/ © 2017 IEEE.},
keywords={Computer software selection and evaluation;  Java programming language;  Quality assurance;  Reengineering;  Static analysis;  Unmanned aerial vehicles (UAV);  Visualization, Integral part;  Project website;  Software quality assurance;  Source codes;  Treemap;  User study;  Visualizers, Quality control},
references={Beller, M., Bholanath, R., McIntosh, S., Zaidman, A., Analyzing the state of static analysis: A large-scale evaluation in open source software (2016) Proceedings of the International Conference on Software Analysis, Evolution, and Reengineering (SANER). IEEE, pp. 470-481; Ruthruff, J., Penix, J., Morgenthaler, D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proceedings of the International Conference on Software Engineering (ICSE). ACM, pp. 341-350; Heckman, S., Williams, L., On establishing a benchmark for evaluating static analysis alert prioritization and classification techniques (2008) Proceedings of the International Symposium on Empirical Software Engineering and Measurement (ESEM). ACM, pp. 41-50; Wagner, S., Jurjens, J., Koller, C., Trischberger, P., (2005) Comparing Bug Finding Tools with Reviews and Tests, 3502, pp. 40-55. , ser. LNCS. Springer; Panichella, S., Arnaoudova, V., Di Penta, M., Antoniol, G., Would static analysis tools help developers with code reviews? (2015) Proc. Inter-national Conference on Software Analysis, Evolution, and Reengineering (SANER). IEEE, pp. 161-170; Muske, T., Serebrenik, A., Survey of approaches for handling static analysis alarms (2016) Proc. International Working Conference on Source Code Analysis and Manipulation (SCAM). IEEE, pp. 157-166; Johnson, B., Shneiderman, B., Tree-maps: A space-filling approach to the visualization of hierarchical information structures (1991) Proc. of the 2nd Conference on Visualization (VIS). IEEE, pp. 284-291; Heinemann, L., Hummel, B., Steidl, D., Teamscale: Software quality control in real-time (2014) Companion Proceedings of the Int'l Conference on Software Engineering (ICSE). ACM, pp. 592-595; Campbell, G., Papapetrou, P.P., (2013) SonarQube in Action, , Manning Publications Co; Coverity Scan Static Analysis, , https://web-archive-org.luisamigo.proxybk.com/web/20161124164054/https://scan.coverity.com; Buckers, T., Cao, C., Doesburg, M., Gong, B., Wang, S., Beller, M., Zaidman, A., Online Appendix for UAV: Warnings from Multiple Automated Static Tools at A Glance, , https://figshare-com.luisamigo.proxybk.com/s/05658ac8ff03d57a8d60},
editor={Bavota G., Pinzger M., Marcus A.},
sponsors={Alpen-Adria Universitat; IEEE; IEEE Computer Society; Technical Council on Software Engineering (TCSE)},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781509055012},
language={English},
abbrev_source_title={SANER - IEEE Int. Conf. Softw. Anal., Evol., Reengineering},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Svoboda201737,
author={Svoboda, D. and Flynn, L. and Snavely, W.},
title={Static Analysis Alert Audits: Lexicon & Rules},
journal={Proceedings - 2016 IEEE Cybersecurity Development, SecDev 2016},
year={2017},
pages={37-44},
doi={10.1109/SecDev.2016.018},
art_number={7839787},
note={cited By 3; Conference of 2016 IEEE Cybersecurity Development, SecDev 2016 ; Conference Date: 3 November 2016 Through 4 November 2016;  Conference Code:126371},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85015229920&doi=10.1109%2fSecDev.2016.018&partnerID=40&md5=e75b0a4823511773a59d3e0cf51daf49},
affiliation={Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States},
abstract={There is no widely-accepted lexicon or standard set of rules for auditing static analysis alerts in the software engineering community. Auditing rules and a lexicon should guide different auditors to make the same determination for an alert. Standard terms and processes are necessary so that initial determinations are correctly interpreted, which helps organizations reduce code flaws. They are also needed to improve the quality of audit data to benefit research on alert prioritization. This paper provides a suggested set of auditing rules and a lexicon, detailing rationales based on modern software engineering practices for each rule and each lexicon term. Some code examples are provided with the auditing rules. The authors' hope is that this suggested framework will motivate community discussion leading to agreed-upon standards. © 2016 IEEE.},
author_keywords={Audit;  C;  Coding Standards;  Lexicon;  Software Security;  Static Analysis},
keywords={C (programming language);  Cesium;  Codes (symbols);  Software engineering, Alert prioritization;  Audit;  Coding standards;  Engineering community;  Lexicon;  Set of rules;  Software engineering practices;  Software security, Static analysis},
references={Shunn, A., Woody, C., Seacord, R., Householder, A., (2013) Strengths in Security Solutions; Chess, B., McGraw, G., Static analysis for security (2004) IEEE Security & Privacy, 2 (6), pp. 76-79; (2016) ThreadFix, , http://www-threadfix-it.luisamigo.proxybk.com/, accessed June 23; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proceedings of the 30th International Conference on Software Engineering, pp. 341-350. , ACM; Livshits, V.B., Lam, M.S., Finding security vulnerabilities in Java applications with static analysis (2005) Usenix Security, 2013; Delaitre, A., Okun, V., Fong, E., Of massive static analysis data (2013) Software Security and Reliability-Companion (SERE-C), 2013 IEEE 7th International Conference on, pp. 163-167. , IEEE; Ciriello, V., Carrozza, G., Rosati, S., Practical experience and evaluation of continuous code static analysis with C++ test (2013) Proceedings of the 2013 International Workshop on Joining Academia and Industry Contributions to Testing Automation, pp. 19-22. , ACM; Carlsson, B., Baca, D., Software security analysis-execution phase audit (2005) 31st EUROMICRO Conference on Software Engineering and Advanced Applications, pp. 240-247. , IEEE; Cifuentes, C., Keynes, N., Internal deployment of the parfait static code analysis tool at oracle (2013) Asian Symposium on Programming Languages and Systems, pp. 172-175. , Springer; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don't software developers use static analysis tools to find bugs? (2013) 2013 35th International Conference on Software Engineering (ICSE), pp. 672-681. , IEEE; Chess, B., West, J., (2007) Secure Programming with Static Analysis, , Pearson Education; (2016) Prioritizing Alerts from Static Analysis to Find and Fix Code Flaws, , https://insights-sei-cmu-edu.luisamigo.proxybk.com/seiblog/2016/06/prioritizing-alerts-from-static-analysis-to-find-and-fix-code-flaws.html, accessed: 2016-06-27; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Information and Software Technology, 53 (4), pp. 363-387; Kremenek, T., Ashcraft, K., Yang, J., Engler, D., Correlation exploitation in error ranking (2004) ACM SIGSOFT Software Engineering Notes, 29 (6), pp. 83-93. , ACM; (2016) CWE-Compatible Products and Services, , https://cwe-mitre-org.luisamigo.proxybk.com/compatible/compatible.html, MITRE, accessed June 23; Plakosh, D., Seacord, R., Stoddard, R.W., Svoboda, D., Zubrow, D., (2014) Improving the Automated Detection and Analysis of Secure Coding Violations; (2016) CodeDx, , http://codedx-com.luisamigo.proxybk.com/, accessed June 23; (2016) Common Weakness Enumeration: A Community-Developed Dictionary of Software Weakness Types, , https://cwe-mitre-org.luisamigo.proxybk.com, MITRE, accessed June 22; Seacord, R.C., (2014) The CERT C Coding Standard: 98 Rules for Developing Safe, Reliable, and Secure Systems, , Pearson Education; Long, F., Mohindra, D., Seacord, R.C., Sutherland, D., Svoboda, D., (2012) The CERT Oracle Secure Coding Standard for Java, , Pearson Education; (2013) Guidelines for the Use of the C Language in Critical Systems, , MISRA, MISRA, March; (2016) JasPer, , https://www-ece-uvic-ca.luisamigo.proxybk.com/~frodo/jasper, accessed June 23; Hayward, M., (2008) Static Analysis Vulnerabilities and Defects: Best Practices for Both Agile and Waterfall Development Environments, , Dec, White Paper; Shacham, H., The geometry of innocent flesh on the bone: Return-intolibc without function calls (on the x86) (2007) Proceedings of the 14th ACM Conference on Computer and Communications Security, pp. 552-561. , ACM},
sponsors={IEEE Cyber Security; IEEE TC on Security and Privacy; Northrop Grumman; NSF; Software Engineering Institute, Carnegie Mellon University; Veracode},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781509055883},
language={English},
abbrev_source_title={Proc. - IEEE Cybersecur. Dev., SecDev},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Jiang2017192,
author={Jiang, H. and Yang, H. and Qin, S. and Su, Z. and Zhang, J. and Yan, J.},
title={Detecting Energy Bugs in Android Apps Using Static Analysis},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2017},
volume={10610 LNCS},
pages={192-208},
doi={10.1007/978-3-319-68690-5_12},
note={cited By 20; Conference of 19th International Conference on Formal Engineering Methods, ICFEM 2017 ; Conference Date: 13 November 2017 Through 17 November 2017;  Conference Code:200799},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85032505395&doi=10.1007%2f978-3-319-68690-5_12&partnerID=40&md5=6d7384d8a1eccabf1725e6482180df7b},
affiliation={Beijing University of Technology, Beijing, China; Teesside University, Middlesbrough, United Kingdom; University of California, Davis, United States; State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences, Beijing, China},
abstract={Energy bugs in Android apps are defects that can make Android systems waste much energy as a whole. Energy bugs detection in Android apps has become an important issue since smartphones usually operate on a limited amount of battery capacity and the existence of energy bugs may lead to serious drain in the battery power. This paper focuses on detecting two types of energy bugs, namely resource leak and layout defect, in Android apps. A resource leak is a particular type of energy wasting phenomena where an app does not release its acquired resources such as a sensor and GPS. A layout defect refers to a poor layout structure causing more energy consumption for measuring and drawing the layout. In this paper, we present a static analysis technique called SAAD, that can automatically detect energy bugs in a context-sensitive way. SAAD detects the energy bugs by taking an inter-procedural anaysis of an app. For resource leak analysis, SAAD decompiles APK file into Dalvik bytecodes files and then performs resource leak analysis by taking components call relationship analysis, inter-procedure and intra-procedure analysis. For detecting layout defect, SAAD firstly employs Lint to perform some traditional app analysis, then filters energy defects from reported issues. Our experimental result on 64 publicly-available Android apps shows that SAAD can detect energy bugs effectively. The accuracies of detecting resource leak and layout energy defect are 87.5% and 78.1% respectively. © 2017, Springer International Publishing AG.},
keywords={Chemical detection;  Defects;  Electric batteries;  Energy utilization;  Formal methods;  Program debugging;  Software engineering;  Static analysis, Analysis techniques;  Android systems;  Battery capacity;  Context sensitive;  Energy defects;  Inter-procedural;  Layout structure;  Relationship analysis, Android (operating system)},
funding_details={National Natural Science Foundation of ChinaNational Natural Science Foundation of China, NSFC, 61672505},
funding_details={Chinese Academy of SciencesChinese Academy of Sciences, CAS},
funding_details={CAS-SAFEA International Partnership Program for Creative Research TeamsCAS-SAFEA International Partnership Program for Creative Research Teams},
funding_text 1={Supported by National Natural Science Foundation of China (No. 61672505) and the CAS/SAFEA International Partnership Program for Creative Research Teams.},
references={Pathak, A., Hu, Y.C., Zhang, M., Bootstrapping energy debugging on smartphones: A first look at energy bugs in mobile devices. In: Proceeding of The 10th ACM Workshop on Hot Topics in Networks (2011) Hotnets-X; Banerjee, A., Chong, L.K., Chattopadhyay, S., Detecting energy bugs and hotspots in mobile apps (2014) Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, Pp. 588–598. ACM; Zhang, J., Musa, A., Le, W., A comparison of energy bugs for smartphone platforms (2013) IEEE; Apktool, , https://code-google-com.luisamigo.proxybk.com/p/android-apktool; Lint, , http://tools-android-com.luisamigo.proxybk.com/tips/lint; Hoffmann, J., Ussath, M., Holz, T., Slicing droids: Program slicing for smali code. Automated Software Engineering (ASE), Coimbra, Portugal, 18–22 March 2013, pp. 1844–1851 (2013) IEEE; Dalvik, , https://en-wikipedia-org.luisamigo.proxybk.com/wiki/Dalvik; Hierarchy Viewer, , http://developer-android-com.luisamigo.proxybk.com/tools/help/hierarchy-viewer.html; Ferrari, A., Gallucci, D., Puccinelli, D., Detecting energy leaks in Android app with POEM (2015) IEEE; Liu, Y., Xu, C., Cheung, S.C., Where has my battery gone? Finding sensor related energy black holes in smartphone applications (2013) IEEE; Liu, Y., Xu, C., Cheung, S.C., Characterizing and detecting performance bugs for smartphone applications (2014) Proceedings of the 36Th International Conference Onsoftware Engineering, pp. 1013-1024; Wu, H., Yang, S., Rountev, A., Static detection of energy defect patterns in Android applications (2016) Proceedings of the 25Th International Conference on Compiler Construction, Pp. 185–195. ACM; Kim, P., Kroening, D., Kwiatkowska, M., Static program analysis for identifying energy bugs in graphics-intensive mobile apps (2016) Proceedings of the 24Th IEEE International Conference on Modelling, Analysis and Simulation of Computer and Telecommunication Systems, MASCOTS 2016. IEEE CS Press; Hao, S., Li, D., Halfond, W.G.J., Govindan, R., Estimating mobile application energy consumption using program analysis (2013) Proceedings of the 35Th International Conference on Software Engineering (ICSE), May; Li, D., Hao, S., Halfond, W.G.J., Govindan, R., Calculating source line level energy information for Android applications (2013) ISSTA; Li, D., Tran, A.H., Halfond, W.G.J., Making web applications more energy efficient for OLED smartphones (2014) Proceedings of the International Conference on Software Engineering (ICSE), June; Li, D., Lyu, Y., Gui, J., Halfond, W.G.J., Automated energy optimization of HTTP requests for mobile applications (2016) Proceedings of the 38Th International Conference on Software Engineering (ICSE), May; Liu, Y., Chang, X., Cheung, S.C., Lu, J., GreenDroid: Automated diagnosis of energy inefficiency for smartphone applications (2014) IEEE Trans. Software Eng., 40 (9), pp. 911-940; Wan, M., Jin, Y., Li, D., Halfond, W.G.J., Detecting display energy hotspots in Android apps (2015) Proceedings of the 8Th IEEE International Conference on Software Testing, Verification and Validation (ICST), April; Vsquez, M.L., Bavota, G., Bernal-Crdenas, C., Mining energy-greedy API usage patterns in Android apps: An empirical study (2014) 11Th Working Conference on Mining Software Repositories, MSR 2014, Pp. 2–11; Tianyong, W., Liu, J., Zhenbo, X., Guo, C., Zhang, Y., Yan, J., Zhang, J., Lightweight, inter-procedural and callback-aware resource leak detection for Android apps (2016) IEEE Trans. Software Eng., 42 (11), pp. 1054-1076; Lu, Q., Wu, T., Yan, J., Yan, J., Ma, F., Zhang, F., Lightweight method-level energy consumption estimation for Android applications (2016) In: TASE, 2016; Wu, T., Liu, J., Deng, X., Yan, J., Zhang, J., Relda2: An effective static analysis tool for resource leak detection in Android apps (2016) In: ASE, 2016, pp. 762-767; Banerjee, A., Chong, L.K., Chattopadhyay, S., Roychoudhury, A., Detecting energy bugs and hotspots in mobile apps (2014) In: SIGSOFT FSE, 2014, pp. 588-598; Pathak, A., Hu, Y.C., Zhang, M., Where is the energy spent inside my app?: Fine grained energy accounting on smartphones with Eprof. In: Proceedings of the 7th ACM European Conference on Computer Systems (2012) Eurosys, 2012, pp. 29-42; Guo, C., Zhang, J., Yan, J., Zhang, Z., Zhang, Y., Characterizing and detecting resource leaks in Android applications. In: IEEE/ACM 28th International Conference on Automated Software Engineering (2013) ASE, 2013, pp. 389-398},
correspondence_address1={Yang, H.; Beijing University of TechnologyChina; email: yhl.yang@gmail.com},
editor={Duan Z., Ong L.},
sponsors={},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319686899},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Elsaka201779,
author={Elsaka, E.},
title={Fault Localization Using Hybrid Static/Dynamic Analysis},
journal={Advances in Computers},
year={2017},
volume={105},
pages={79-114},
doi={10.1016/bs.adcom.2016.12.004},
note={cited By 1},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85011881642&doi=10.1016%2fbs.adcom.2016.12.004&partnerID=40&md5=147996c44144acd9d8defead7c73060a},
affiliation={University of Maryland, College Park, MD, United States},
abstract={With the increasing complexity of today's software, the software development process is becoming highly time and resource consuming. The increasing number of software configurations, input parameters, usage scenarios, supporting platforms, external dependencies, and versions plays an important role in expanding the costs of maintaining and repairing unforeseeable software faults. To repair software faults, developers spend considerable time in identifying the scenarios leading to those faults and root causing the problems. While software debugging remains largely manual, it is not the case with software testing and verification. The goal of this research is to improve the software development process in general, and software debugging process in particular, by devising techniques and methods for automated software debugging, which leverage the advances in automatic test case generation and replay. In this research, novel algorithms are devised to discover faulty execution paths in programs by utilizing already existing software test cases, which can be either automatically or manually generated. The execution traces or, alternatively, the sequence covers of the failing test cases are extracted. Afterward, commonalities between these test case sequence covers are extracted, processed, analyzed, and then presented to the developers in the form of subsequences that may be causing the fault. The hypothesis is that code sequences that are shared between a number of faulty test cases for the same reason resemble the faulty execution path, and hence, the search space for the faulty execution path can be narrowed down by using a large number of test cases. To achieve this goal, an efficient algorithm is implemented for finding common subsequences among a set of code sequence covers. Optimization techniques are devised to generate shorter and more logical sequence covers, and to select subsequences with high likelihood of containing the root cause among the set of all possible common subsequences. A hybrid static/dynamic analysis approach is designed to trace back the common subsequences from the end to the root cause. © 2017 Elsevier Inc.},
author_keywords={Automated software debugging;  Automated software testing;  Code coverage;  Dynamic analysis;  Software debugging tools;  Software quality;  Static analysis},
references={Vessey, I., Expertise in debugging computer programs: a process analysis (1985) Int. J. Man Mach. Stud., 23 (5), pp. 459-494; Myers, G.J., The Art of Software Testing (2004), second ed. Wiley New York ISBN 978-0-471-46912-4, I–XV, 234 pp; Godefroid, P., de Halleux, J., Nori, A.V., Rajamani, S.K., Schulte, W., Tillmann, N., Levin, M.Y., Automating software testing using program analysis (2008) IEEE Softw., 25 (5), pp. 30-37; Xie, Q., Memon, A.M., Using a pilot study to derive a GUI model for automated testing (2008) ACM Trans. Softw. Eng. Methodol., 18 (2); Memon, A.M., Xie, Q., Studying the fault-detection effectiveness of GUI test cases for rapidly evolving software (2005) IEEE Trans. Softw. Eng., 31 (10), pp. 884-896; Belli, F., Finite-state testing and analysis of graphical user interfaces (2001) ISSRE, pp. 34-43; Belli, F., Budnik, C.J., White, L., Event-based modelling, analysis and testing of user interactions: approach and case study (2006) Softw. Test. Verif. Reliab., 16 (1), pp. 3-32; Paiva, A.C.R., Tillmann, N., Faria, J.C.P., Vidal, R.F.A.M., Modeling and testing hierarchical GUIs (2005) Abstract State Machines, pp. 329-344; Shehady, R.K., Siewiorek, D.P., A method to automate user interface testing using variable finite state machines (1997) Proceedings of the 27th International Symposium on Fault-Tolerant Computing (FTCS ’97), p. 80. , IEEE Computer Society Washington, DC, USA ISBN 0-8186-7831-3; Wang, L., Yuan, J., Yu, X., Hu, J., Li, X., Zheng, G., Generating test cases from UML activity diagram based on Gray-Box method (2004) APSEC, pp. 284-291; Kim, H., Kang, S., Baik, J., Ko, I.-Y., Test cases generation from UML activity diagrams (2007) SNPD, 3, pp. 556-561; Chen, M., Mishra, P., Kalita, D., Coverage-driven automatic test generation for UML activity diagrams (2008) ACM Great Lakes Symposium on VLSI, pp. 139-142; Chen, M., Qiu, X., Li, X., Automatic test case generation for UML activity diagrams (2006) AST, pp. 2-8; Chen, M., Qiu, X., Xu, W., Wang, L., Zhao, J., Li, X., UML Activity diagram-based automatic test case generation for Java programs (2009) Comput. J., 52 (5), pp. 545-556; Huang, C.-Y., Lo, J.-H., Kuo, S.-Y., Lyu, M.R., Software reliability modeling and cost estimation incorporating testing-effort and efficiency (1999) Proceedings of the 10th International Symposium on Software Reliability Engineering (ISSRE’99), pp. 62-72; Dinh-Trong, T., A systematic approach to testing UML design models (2004) Doctorial Symposium, 7th International Conference on the Unified Modeling Language, Lisbon, Portugal; Samuel, P., Joseph, A.T., Test sequence generation from UML sequence diagrams (2008) SNPD, pp. 879-887; Sarma, M., Kundu, D., Mall, R., Automatic test case generation from UML sequence diagrams (2007) Proceedings of the 15th International Conference on Advanced Computing and Communications, pp. 60-67. , IEEE Computer Society; Javed, A.Z., Strooper, P.A., Watson, G., Automated generation of test cases using model-driven architecture (2007) AST, pp. 3-9; Ismail, N., Ibrahim, R., Ibrahim, N., Automatic generation of test cases from use-case diagram (2007) Proceedings of the International Conference on Electrical Engineering and Informatics Institut Teknologi, Bandung, Indonesia; Swain, S.K., Mohapatra, D.P., Article:test case generation from behavioral UML Models (2010) Int. J. Comput. Appl., 6 (8), pp. 5-11. , (published By Foundation of Computer Science); Riebisch, M., Philippow, I., Götze, M., UML-based statistical test case generation (2002) NetObjectDays, pp. 394-411; Ali, S., Briand, L.C., Rehman, M.J.-U., Asghar, H., Iqbal, M.Z.Z., Nadeem, A., A state-based approach to integration testing based on UML models (2007) Inform. Softw. Technol., 49 (11-12), pp. 1087-1106; Ogata, S., Matsuura, S., Towards the reliable integration testing: UML-based scenario analysis using an automatic prototype generation tool (2010), pp. 151-159. , http://dl-acm-org.luisamigo.proxybk.com/citation.cfm?id=1807733.1807758, Proceedings of the 9th WSEAS International Conference on Software Engineering, Parallel and Distributed Systems, SEPADS’10, World Scientific and Engineering Academy and Society (WSEAS), Stevens Point, Wisconsin, USA ISBN 978-960-474-156-4; Ogata, S., Matsuura, S., Ogata, S., Matsuura, S., A method of automatic integration test case generation from UML-based Scenario (2010) WSEAS Trans. Inform. Sci. Appl., 7, pp. 598-607; Pfaller, C., Requirements-based test case specification by using information from model construction (2008) AST, pp. 7-16; Cavarra, A., Crichton, C., Davies, J., Hartman, A., Mounier, L., Using UML for automatic test generation (2002) International Symposium on Software Testing and Analysis ISSTA, , Springer-Verlag Berlin; Farooq, Q., Iqbal, M.Z.Z., Malik, Z.I., Nadeem, A., An approach for selective state machine based regression testing (2007) A-MOST, pp. 44-52; Garousi, V., Briand, L.C., Labiche, Y., Control flow analysis of UML 2.0 sequence diagrams (2005) Model Driven Architecture—Foundations and Applications, ECMDA-FA, pp. 160-174. , Springer Berlin, Heidelberg; Alhroob, A., Dahal, K.P., Hossain, M.A., Automatic test cases generation from software specifications (2010) e-Informatica, 4 (1), pp. 109-121; Memon, A.M., An event-flow model of GUI-based applications for testing (2007) Softw. Test. Verif. Rel., 17 (3), pp. 137-157; Yuan, X., Memon, A.M., Generating event sequence-based test cases using GUI runtime state feedback (2010) IEEE Trans. Softw. Eng., 36 (1), pp. 81-95; Perrouin, G., Sen, S., Klein, J., Baudry, B., Traon, Y.L., Automated and scalable T-wise test case generation strategies for software product lines (2010) ICST, pp. 459-468. , IEEE Computer Society Washington, DC, USA; Gnesi, S., Latella, D., Massink, M., Formal test-case generation for UML statecharts (2004) Proc. 9th IEEE Int. Conf. on Engineering of Complex Computer Systems, pp. 75-84. , IEEE Computer Society; Weiser, M., Program slicing (1984) IEEE Trans. Software Eng., 10 (4), pp. 352-357; Weiser, M., Programmers use slices when debugging (1982) Commun. ACM, 25 (7), pp. 446-452; Agrawal, H., Horgan, J.R., Dynamic program slicing (1990) PLDI, pp. 246-256; DeMillo, R.A., Pan, H., Spafford, E.H., Critical slicing for software fault localization (1996) ISSTA, pp. 121-134; Gyimothy, T., Beszedes, A., Forgacs, I., An efficient relevant slicing method for debugging (1999) ESEC/SIGSOFT FSE, pp. 303-321; Zhang, X., Gupta, N., Gupta, R., Pruning dynamic slices with confidence (2006) PLDI, pp. 169-180; Zhang, X., Gupta, R., Zhang, Y., Precise dynamic slicing algorithms (2003) ICSE, pp. 319-329; Ness, B., Ngo, V., Regression containment through source change isolation (1997) COMPSAC ’97: Proceedings of the 21st International Computer Software and Applications Conference, pp. 616-621. , IEEE Computer Society Washington, DC, USA ISBN 0-8186-8105-5; Reps, T.W., Ball, T., Das, M., Larus, J.R., The use of program profiling for software maintenance with applications to the year 2000 problem (1997) ESEC/SIGSOFT FSE, pp. 432-449. , Springer Berlin, Heidelberg; Ball, T., Naik, M., Rajamani, S.K., From symptom to cause: localizing errors in counterexample traces (2003) POPL, pp. 97-105; Groce, A., Kroening, D., Lerda, F., Understanding counterexamples with explain (2004) CAV, pp. 453-456. , Springer Berlin, Heidelberg; Naish, L., Lee, H.J., Ramamohanarao, K., A model for spectra-based software diagnosis (2011) ACM Trans. Softw. Eng. Methodol., 20 (3), p. 11; Jones, J.A., Harrold, M.J., Stasko, J.T., Visualization of test information to assist fault localization (2002) ICSE, pp. 467-477; Moon, S., Kim, Y., Kim, M., Yoo, S., Ask the mutants: mutating faulty programs for fault localization (2014) Seventh IEEE International Conference on Software Testing, Verification and Validation, ICST 2014, March 31 2014–April 4, 2014, Cleveland, Ohio, USA, pp. 153-162; Liblit, B., Naik, M., Zheng, A.X., Aiken, A., Jordan, M.I., Scalable statistical bug isolation (2005) PLDI, pp. 15-26; Liu, C., Yan, X., Fei, L., Han, J., Midkiff, S.P., SOBER: statistical model-based bug localization (2005) ESEC/SIGSOFT FSE, pp. 286-295; Zeller, A., Isolating cause-effect chains from computer programs (2002) SIGSOFT FSE, pp. 1-10; Cleve, H., Zeller, A., Locating causes of program failures (2005) ICSE, pp. 342-351; Ruthruff, J., Creswick, E.R., Burnett, M., Cook, C., Prabhakararao, S., Ii, M.F., Main, M., End-user software visualizations for fault localization (2003) SoftVis ’03: Proceedings of the 2003 ACM symposium on Software visualization, pp. 123-132. , ACM Press San Diego, CA, USA ISBN 1581136420; Wong, E., Wei, T., Qi, Y., Zhao, L., A crosstab-based statistical method for effective fault localization (2008) Proceedings of the 2008 International Conference on Software Testing, Verification, and Validation, pp. 42-51. , IEEE Computer Society Washington, DC, USA ISBN 978-0-7695-3127-4; Zhang, Z., Chan, W.K., Tse, T.H., Fault localization based only on failed runs (2012) IEEE Comput., 45 (6), pp. 64-71; Wong, W.E., Qi, Y., Bp neural network-based effective fault localization (2009) Int. J. Softw. Eng. Know., 19 (4), pp. 573-597; Wong, W.E., Shi, Y., Qi, Y., Golden, R., Using an RBF neural network to locate program bugs (2008) ISSRE, pp. 27-36; Briand, L.C., Labiche, Y., Liu, X., Using machine learning to support debugging with tarantula (2007) ISSRE, pp. 137-146; Brun, Y., Ernst, M.D., Finding latent code errors via machine learning over program executions (2004) ICSE, pp. 480-490; Nessa, S., Abedin, M., Wong, W.E., Khan, L., Qi, Y., Software fault localization using N-gram analysis (2008) WASA, pp. 548-559. , Springer Berlin, Heidelberg; Cellier, P., Ducassé, M., Ferré, S., Ridoux, O., Formal concept analysis enhances fault localization in software (2008) ICFCA, pp. 273-288; Wotawa, F., Stumptner, M., Mayer, W., Model-based debugging or how to diagnose programs automatically (2002) IEA/AIE, pp. 746-757; Mateis, C., Stumptner, M., Wotawa, F., Modeling Java programs for diagnosis (2000) Proceedings of the European Conference on Artificial Intelligence (ECAI 2000); Mayer, W., Stumptner, M., Modeling programs with unstructured control flow for debugging (2002) Australian Joint Conference on Artificial Intelligence, pp. 107-118; Mayer, W., Stumptner, M., Wotawa, F., Debugging program exceptions (2003) Proc. DX’03 Workshop, pp. 119-124; DeMillo, R.A., Pan, H., Spafford, E.H., Failure and fault analysis for software debugging (1997) COMPSAC, pp. 515-521; Ammons, G., Choi, J., Gupta, M., Swamy, N., Finding and removing performance bottlenecks in large systems (2004) Proceedings of ECOOP, , Springer Berlin; Srinivas, K., Srinivasan, H., Summarizing application performance from a components perspective (2005) Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 136-145. , ACM New York, NY, USA ISBN 1-59593-014-0; Sevitsky, G., Pauw, W.D., Konuru, R., An information exploration tool for performance analysis of Java programs (2001) TOOLS (38), pp. 85-101. , http://dblp-uni-trier-de.luisamigo.proxybk.com/db/conf/tools/tools38-2001.html#SevitskyPK01, IEEE Computer Society ISBN 0-7695-1095-7; Han, S., Dang, Y., Ge, S., Zhang, D., Xie, T., Performance debugging in the large via mining millions of stack traces (2012) ICSE, pp. 145-155; Altman, E.R., Arnold, M., Fink, S., Mitchell, N., Performance analysis of idle programs (2010) OOPSLA, pp. 739-753; http://cobertura-github-io.luisamigo.proxybk.com/cobertura/, Cobertura (A code coverage utility for Java), n.d; Vallée-Rai, R., Co, P., Gagnon, E., Hendren, L.J., Lam, P., Sundaresan, V., Soot—a Java bytecode optimization framework (1999) Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, November 8–11, 1999, Mississauga, Ontario, Canada, p. 13; http://docs-oracle-com.luisamigo.proxybk.com/javase/7/docs/technotes/tools/windows/jdb.html, jdb - The Java Debugger, n.d},
publisher={Academic Press Inc.},
issn={00652458},
language={English},
abbrev_source_title={Adv. Comput.},
document_type={Book Chapter},
source={Scopus},
}

@CONFERENCE{Kim2016115,
author={Kim, C.H.P. and Kroening, D. and Kwiatkowska, M.},
title={Static program analysis for identifying energy bugs in graphics-intensive mobile apps},
journal={Proceedings - 2016 IEEE 24th International Symposium on Modeling, Analysis and Simulation of Computer and Telecommunication Systems, MASCOTS 2016},
year={2016},
pages={115-124},
doi={10.1109/MASCOTS.2016.28},
art_number={7774572},
note={cited By 8; Conference of 24th IEEE International Symposium on Modeling, Analysis and Simulation of Computer and Telecommunication Systems, MASCOTS 2016 ; Conference Date: 19 September 2016 Through 21 September 2016;  Conference Code:125410},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85010376044&doi=10.1109%2fMASCOTS.2016.28&partnerID=40&md5=0d5a3f67f323b5d34bf0ea23f58ff964},
affiliation={Department of Computer Science, University of Oxford, United Kingdom},
abstract={A major drawback of mobile devices is limited battery life. Apps that use graphics are especially energy greedy and developers must invest significant effort to make such apps energy efficient. We propose a novel static optimization technique for eliminating drawing commands to produce energy-efficient apps. The key insight we exploit is that the static analysis is able to predict future behavior of the app, and we give three exemplars that demonstrate the value of this approach. Firstly, loop invariant texture analysis identifies repetitive texture transfers in the render loop so that they can be moved out of the loop and performed just once. Secondly, packing identifies images that are drawn together and therefore can be combined into a larger image to eliminate overhead associated with multiple smaller images. Finally, identical frames detection uses a combination of static and dynamic analysis to identify frames that are identical to the previous frame and therefore do not have to be drawn. We implemented the technique against LibGDX, an Android game engine, and evaluated it using open source projects. Our experiments indicate savings up to 44% of the total energy consumption of the device. © 2016 IEEE.},
keywords={Energy utilization;  Program debugging;  Static analysis, Energy efficient;  Loop invariants;  Open source projects;  Repetitive textures;  Static and dynamic analysis;  Static optimization;  Static program analysis;  Total energy consumption, Energy efficiency},
references={As Tablets Slow and PCs Face Ongoing Challenges, Smartphones Grab An Ever-larger Share of the Smart Connected Device Market Through 2019, According to IDC, , http://www-idc-com.luisamigo.proxybk.com/getdoc.jsp?containerId=prUS25500515, International Data Corporation; The Apps That Drain Your Phone's Battery the Most, , http://money-cnn-com.luisamigo.proxybk.com/2015/06/03/technology/battery-draining-apps/, CNN; 15 Tricks for Getting Way Better Smartphone Battery Life, , http://time-com.luisamigo.proxybk.com/3820202/better-smartphone-battery-life/, TIME; Pang, C., Hindle, A., Adams, B., Hassan, A., What do programmers know about software energy consumption? (2015) Software IEEE, PP (99), p. 1; Pathak, A., Hu, Y.C., Zhang, M., Bootstrapping energy debugging on smartphones: A first look at energy bugs in mobile devices (2011) ACM Workshop on Hot Topics in Networks, Ser. HotNets-X. ACM, pp. 51-56. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2070562.2070567, [Online]; Baek, W., Chilimbi, T.M., Green: A framework for supporting energy-conscious programming using controlled approximation (2010) Programming Language Design and Implementation (PLDI), pp. 198-209. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1806596.1806620, B. G. Zorn and A. Aiken, Eds. ACM [Online]; Sidiroglou-Douskos, S., Misailovic, S., Hoffmann, H., Rinard, M.C., Managing performance vs. Accuracy trade-offs with loop perforation (2011) Foundations of Software Engineering (FSE), pp. 124-134. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2025113.2025133, T. Gyimóthy and A. Zeller, Eds. ACM [Online]; Oliner, A.J., Iyer, A.P., Stoica, I., Lagerspetz, E., Tarkoma, S., Carat: Collaborative energy diagnosis for mobile devices (2013) Embedded Networked Sensor Systems, Ser. SenSys. ACM, pp. 101-1014. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2517351.2517354, [Online]; Pathak, A., Jindal, A., Hu, Y.C., Midkiff, S.P., What is keeping my phone awake? Characterizing and detecting no-sleep energy bugs in smartphone apps (2012) Mobile Systems, Applications, and Services (MobiSys). ACM, pp. 267-280. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2307636.2307661, [Online]; Liu, Y., Xu, C., Cheung, S.-C., Characterizing and detecting performance bugs for smartphone applications (2014) International Conference on Software Engineering (ICSE). ACM, pp. 1013-1024. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2568225.2568229, [Online]; Li, D., Hao, S., Halfond, W.G.J., Govindan, R., Calculating source line level energy information for Android applications (2013) International Symposium on Software Testing and Analysis (ISSTA), pp. 78-89. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2483760.2483780, M. Pezzè and M. Harman, Eds. ACM [Online]; Wan, M., Jin, Y., Li, D., Halfond, W., Detecting display energy hotspots in Android apps (2015) Software Testing, Verification and Validation (ICST)., pp. 1-10. , IEEE, April; Li, D., Tran, A.H., Halfond, W.G.J., Making web applications more energy efficient for OLED smartphones (2014) International Conference on Software Engineering (ICSE). ACM, pp. 527-538. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2568225.2568321, [Online]; Linares-Vásquez, M., Bavota, G., Bernal-Cárdenas, C., Oliveto, R., Di Penta, M., Poshyvanyk, D., Mining energy-greedy API usage patterns in Android apps: An empirical study (2014) Mining Software Repositories, Ser. MSR. ACM, pp. 2-11. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2597073.2597085, [Online]; A Framework for Analyzing and Transforming Java and Android Applications, , http://sable-github-io.luisamigo.proxybk.com/soot/, Soot; Aho, A.V., Lam, M.S., Sethi, R., Ullman, J.D., (2006) Compilers: Principles, Techniques, and Tools (2nd Edition), , Addison-Wesley Longman Publishing Co., Inc; D'Silva, V., Kroening, D., Weissenbacher, G., A survey of automated techniques for formal software verification (2008) IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems (TCAD), 27 (7), pp. 1165-1178. , July; The Standard for Embedded Accelerated 3D Graphics, , https://www-khronos-org.luisamigo.proxybk.com/opengles/, Khronos; Saltares, D., Freegemas LibGDX, , https://github-com.luisamigo.proxybk.com/saltares/freegemas-gdx; Arzt, S., Rasthofer, S., Fritz, C., Bodden, E., Bartel, A., Klein, J., Le Traon, Y., McDaniel, P., FlowDroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps (2014) Programming Language Design and Implementation, Ser. PLDI. ACM, pp. 259-269. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2594291.2594299, [Online]; Cao, Y., Fratantonio, Y., Bianchi, A., Egele, M., Kruegel, C., Vigna, G., Chen, Y., EdgeMiner: Automatically detecting implicit control flow transitions through the Android framework (2015) Network and Distributed System Security Symposium (NDSS), , Internet Society; WariLibgdx, , https://github-com.luisamigo.proxybk.com/FrodCube/WariLibgdx, FrodCube; Su, T., Zxzx, , https://github-com.luisamigo.proxybk.com/timsu/zxzx/; Power Monitor, , https://www-msoon-com.luisamigo.proxybk.com/LabEquipment/PowerMonitor/, Monsoon Solutions Inc; FRep-finger Replayer, , https://play.google.com/store/apps/details?id=com.x0.strai.frep&hl=en, strAI; Misailovic, S., Roy, D.M., Rinard, M.C., Probabilistically accurate program transformations (2011) International Conference on Static Analysis, Ser. SAS., pp. 316-333. , http://dl-acm-org.luisamigo.proxybk.com/citation.cfm?id=2041552.2041576, Springer [Online]; Xiao, X., Han, S., Zhang, D., Xie, T., Context-sensitive delta inference for identifying workload-dependent performance bottlenecks (2013) International Symposium on Software Testing and Analysis (ISSTA). ACM, pp. 90-100. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2483760.2483784, [Online]; Nistor, A., Song, L., Marinov, D., Lu, S., Toddler: Detecting performance problems via similar memory-access patterns (2013) International Conference on Software Engineering (ICSE). IEEE, pp. 562-571; Wenzel, I., Kirner, R., Rieder, B., Puschner, P.P., Measurement-based timing analysis (2008) Leveraging Applications of Formal Methods, Verification and Validation, Ser. Communications in Computer and Information Science, 17, pp. 430-444. , http://dx-doi-org.luisamigo.proxybk.com/10.1007/978-3-540-88479-830, Springer [Online]; Chattopadhyay, S., Roychoudhury, A., Scalable and precise refinement of cache timing analysis via model checking (2011) Real-Time Systems Symposium (RTSS). IEEE, pp. 517-562; Seshia, S.A., Kotker, J., GameTime: A toolkit for timing analysis of software (2011) Proceedings of Tools and Algorithms for the Construction and Analysis of Systems (TACAS), pp. 388-392. , March; Kattenbelt, M., Kwiatkowska, M., Norman, G., Parker, D., Abstraction refinement for probabilistic software (2009) Verification, Model Checking, and Abstract Interpretation (VMCAI), Ser. LNCS, 5403, pp. 182-197. , Springer; Dubslaff, C., Klüppelholz, S., Baier, C., Probabilistic model checking for energy analysis in software product lines (2014) International Conference on Modularity, MODULARITY. ACM, pp. 169-180. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2577080.2577095, [Online]; Barbot, B., Kwiatkowska, M., Mereacre, A., Paoletti, N., Building power consumption models from executable timed I/O automata specifications (2016) Hybrid Systems: Computation and Control, HSCC. ACM, pp. 195-204. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2883817.2883844, [Online]; Xu, G., Yan, D., Rountev, A., Static detection of loop-invariant data structures (2012) Object-Oriented Programming (ECOOP), pp. 738-763. , Springer; Pathak, A., Hu, Y.C., Zhang, M., Where is the energy spent inside my app? Fine grained energy accounting on smartphones with Eprof (2012) Proceedings of the 7th ACM European Conference on Computer Systems. ACM, pp. 29-42; Hönig, T., Eibel, C., Kapitza, R., Schröder-Preikschat, W., SEEP: Exploiting symbolic execution for energy-aware programming (2011) Proceedings of the 4th Workshop on Power-Aware Computing and Systems, Ser. HotPower. ACM, pp. 41-45. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2039252.2039256, [Online]; Banerjee, A., Chong, L.K., Chattopadhyay, S., Roychoudhury, A., Detecting energy bugs and hotspots in mobile apps (2014) Foundations of Software Engineering, Ser. FSE. ACM, pp. 588-598. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/2635868.2635871, [Online]; Liu, Y., Xu, C., Cheung, S., Where has my battery gone? Finding sensor related energy black holes in smartphone applications Pervasive Computing and Communications (PerCom) 2013 IEEE International Conference on, pp. 2-10. , March 2013; Calman, S., Zhu, J., Interprocedural induction variable analysis based on interprocedural SSA form IR (2010) Program Analysis for Software Tools and Engineering (PASTE). ACM, pp. 37-44},
sponsors={},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781509034314},
language={English},
abbrev_source_title={Proc. - IEEE Int. Symp. Model., Anal. Simul. Comput. Telecommun. Syst., MASCOTS},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Liang2016407,
author={Liang, H. and Wang, L. and Wu, D. and Xu, J.},
title={MLSA: A static bugs analysis tool based on LLVM IR},
journal={2016 IEEE/ACIS 17th International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing, SNPD 2016},
year={2016},
pages={407-412},
doi={10.1109/SNPD.2016.7515932},
art_number={7515932},
note={cited By 2; Conference of 17th IEEE/ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing, SNPD 2016 ; Conference Date: 30 May 2016 Through 1 June 2016;  Conference Code:122820},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84983287746&doi=10.1109%2fSNPD.2016.7515932&partnerID=40&md5=983df62ec408e58c32e2122afe4e508e},
affiliation={School of Computer Science, Beijing University of Posts and Telecommunications, Beijing, China; School of Computer and Communication Engineering, China University of Petroleum, Qingdao, China},
abstract={Program bugs may result in unexpected software error, crash or serious security attack. Static program analysis is one of the most common methods to find program bugs. In this paper we present MLSA - a static analysis tool based on LLVM Intermediate Representation (IR), which can analyze programs written in multiple programming languages. MLSA combines symbolic execution with Z3 SMT solver to find bugs. At present, MLSA can detect some kinds of bugs, such as divide zero error, pointer overflow and dead code. Moreover, as a framework, MLSA follows the scalability and extensibility principles, which can help detect other types of bugs. Experiments show that MLSA is effective in finding bugs in real world software. © 2016 IEEE.},
author_keywords={bug detection;  LLVM IR;  SMT solver;  static program analysis;  symbolic execution},
keywords={Artificial intelligence;  Model checking;  Software engineering;  Static analysis, Analysis tools;  Bug detection;  Intermediate representations;  Security attacks;  Smt solvers;  Software errors;  Static program analysis;  Symbolic execution, Program debugging},
references={Cadar, C., Sen, K., Symbolic execution for software testing: Three decades later (2013) Communications of the ACM; De Moura, L., Bjofner, N., Z3: An efficient SMT solver (2008) Tools and Algorithms for the Construction and Analysis of Systems; Lattner, C., Adve, V., Ll vm: A compilation framework for lifelong program analysis & transformation (2004) Code Generation and Optimization; Dragon Egg, , http://dragonegg-llvm-org.luisamigo.proxybk.com/; GNU CoreUtils, , http://www-gnu-org.luisamigo.proxybk.com/software/coreutils/coreutils.html; NECLA Static A Nalysis Benchmark, , http://www.nec-Iabs.com/; LL VM Bug 21852, , https:/lllvm.org/bugs/show-bug.cgi?id=21852; Cadar, C., Dunbar, D., Engler, D.R., Klee:unassisted and automatic generation of high-coverage tests for complex systems programs (2008) OSDI; Sinz, C., Merz, F., Falke, S., Llbmc: A bounded model checker for ll vm's intermediate representation (2012) Tools and Algorithms for Construction and Analysis of Systems; Vujosevic-Janicic, M., Kuncak, V., Development and evaluation of la v: An SMT-based error finding platform (2012) Verified Software: Theories, Tools, Experiments; Li, G., Ghosh, I., Rajan, S.P., Klover: A symbolic execution and automatic test generation tool for c++ programs (2011) Computer Aided Verification; Babic, D., Hu, A.J., Calysto Software Engineering 2008 ICSE'08},
editor={Chen Y.},
sponsors={IEEE Computer Society; International Association for Computer and Information Science (ACIS)},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781509022397},
language={English},
abbrev_source_title={IEEE/ACIS Int. Conf. Softw. Eng., Artif. Intell., Netw. Parallel/ Distrib. Comput., SNPD},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Chen2016,
author={Chen, C. and Santinelli, L. and Hugues, J. and Beltrame, G.},
title={Static probabilistic timing analysis in presence of faults},
journal={2016 11th IEEE International Symposium on Industrial Embedded Systems, SIES 2016 - Proceedings},
year={2016},
doi={10.1109/SIES.2016.7509422},
art_number={7509422},
note={cited By 7; Conference of 11th IEEE International Symposium on Industrial Embedded Systems, SIES 2016 ; Conference Date: 23 May 2016 Through 25 May 2016;  Conference Code:122723},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84982166634&doi=10.1109%2fSIES.2016.7509422&partnerID=40&md5=3ff68680eece0e09a37d35344360f144},
affiliation={École Polytechnique de Montreal, Canada; ONERA, Toulouse, France; ISAE, Toulouse, France},
abstract={Accurate timing prediction for software execution is becoming a problem due to the increasing complexity of computer architecture, and the presence of mixed-criticality workloads. Probabilistic caches were proposed to set bounds to Worst Case Execution Time (WCET) estimates and help designers improve system resource usage. However, as technology scales down, system fault rates increase and timing behavior is affected. In this paper, we propose a Static Probabilistic Timing Analysis (SPTA) approach for caches with evict-on-miss random replacement policy using a state space modeling technique, with consideration of fault impacts on both timing analysis and task WCET. Different scenarios of transient and permanent faults are investigated. Results show that our proposed approach provides tight probabilistic WCET (pWCET) estimates and as fault rate increases, the timing behavior of the system can be affected significantly. © 2016 IEEE.},
keywords={Embedded systems, Accurate timing;  Mixed criticalities;  Random replacements;  Software execution;  State - space models;  System resources;  Transient and permanent fault;  Worst-case execution time, Computer architecture},
references={Bernat, G., Colin, A., Petters, S., Wcet analysis of probabilistic hard real-Time systems (2002) Real-Time Systems Symposium 2002 RTSS 2002. 23rd IEEE, pp. 279-288; Quinones, E., Berger, E., Bernat, G., Cazorla, F., Using randomized caches in probabilistic real-Time systems Real-Time Systems 2009 ECRTS 09. 21st Euromicro Conference on, pp. 129-138. , July 2009; Constantinescu, C., Trends and challenges in VLSI circuit reliability (2003) IEEE Micro, 23 (4), pp. 14-19. , Jul; Normand, E., Single-event effects in avionics (1996) Nuclear Science IEEE Transactions on, 43 (2), pp. 461-474. , Apr; Guertin, S., White, M., CMOS reliability challenges the future of commercial digital electronics and nasa (2010) NEPP Electronic Technology Workshop; Serfozo, R., (2009) Basics of Applied Stochastic Processes, , Springer; Zhou, S., An efficient simulation algorithm for cache of random replacement policy (2010) Network and Parallel Computing, pp. 144-154. , Springer; Cazorla, F.J., Quiñones, E., Vardanega, T., Cucu, L., Triquet, B., Bernat, G., Berger, E., Maxim, D., Proartis: Probabilistically analyzable real-Time systems (2013) ACM Trans. Embed. Comput. Syst, 12 (2), pp. 941-994. , 26, May; Altmeyer, S., Davis, R., On the correctness, optimality and precision of static probabilistic timing analysis Design, Automation and Test in Europe Conference and Exhibition (DATE) 2014, pp. 1-6. , March 2014; Kosmidis, L., Abella, J., Quiñones, E., Cazorla, F.J., A cache design for probabilistically analysable real-Time systems (2013) Proceedings of the Conference on Design, Automation and Test in Europe, pp. 513-518. , Ser. DATE 13. San Jose, CA, USA: EDA Consortium; Cucu-Grosjean, L., Santinelli, L., Houston, M., Lo, C., Vardanega, T., Kosmidis, L., Abella, J., Cazorla, F., Measurement-based probabilistic timing analysis for multi-path programs Real-Time Systems (ECRTS) 2012 24th Euromicro Conference on, pp. 91-101. , July 2012; Davis, R., Improvements to static probabilistic timing analysis for systems with random cache replacement policies (2013) RTSOPS 2013, pp. 22-24; Davis, R., Santinelli, L., Altmeyer, S., Maiza, C., Cucu-Grosjean, L., Analysis of probabilistic cache related pre-emption delays Real-Time Systems (ECRTS) 2013 25th Euromicro Conference on, pp. 168-179. , July 2013; Altmeyer, S., Cucu-Grosjean, L., Davis, R., Static probabilistic timing analysis for real-Time systems using random replacement caches (2015) Real-Time Systems, 51 (1), pp. 77-123; Griffin, D., Lesage, B., Burns, A., Davis, R.I., Static probabilistic timing analysis of random replacement caches using lossy compression (2014) Proceedings of the 22Nd International Conference on Real-Time Networks and Systems, pp. 289-298. , Ser. RTNS 14. New York, NY, USA: ACM; Lesage, B., Griffin, D., Altmeyer, S., Davis, R., Static probabilistic timing analysis for multi-path programs Real-Time Systems Symposium 2015 IEEE, pp. 361-372. , Dec 2015; Abella, J., Hardy, D., Puaut, I., Quinones, E., Cazorla, F., On the comparison of deterministic and probabilistic wcet estimation techniques Real-Time Systems (ECRTS) 2014 26th Euromicro Conference on, pp. 266-275. , July 2014; Slijepcevic, M., Kosmidis, L., Abella, J., Quinones, E., Cazorla, F., Dtm: Degraded test mode for fault-Aware probabilistic timing analysis Real-Time Systems (ECRTS) 2013 25th Euromicro Conference on, pp. 237-248. , July 2013; Slijepcevic, M., Kosmidis, L., Abella, J., Quinones, E., Cazorla, F., Timing verification of fault-Tolerant chips for safety-critical applications in harsh environments (2014) Micro IEEE, 34 (6), pp. 8-19. , Nov; Hardy, D., Puaut, I., Static probabilistic worst case execution time estimation for architectures with faulty instruction caches (2013) Proceedings of the 21st International Conference on Real-Time Networks and Systems, pp. 35-44. , Ser. RTNS 13. New York, NY, USA ACM; Mohr, K., Clark, L., Delay and area efficient first-level cache soft error detection and correction Computer Design 2006 ICCD 2006, pp. 88-92. , International Conference on, Oct 2006; Panerati, J., Abdi, S., Beltrame, G., Balancing system availability and lifetime with dynamic hidden markov models Adaptive Hardware and Systems (AHS) 2014 NASA/ESA Conference on, pp. 240-247. , July 2014; Abella, J., Chaparro, P., Vera, X., Carretero, J., Gonzalez, A., Online failure detection and confinement in caches On-Line Testing Symposium 2008 IOLTS 08. 14th, pp. 3-9. , IEEE International, July 2008; Gustafsson, J., Betts, A., Ermedahl, A., Lisper, B., The Mälardalen WCET benchmarks: Past, present and future (2010) 10th International Workshop on Worst-Case Execution Time Analysis (WCET 2010), 15, pp. 136-146. , Ser. OpenAccess Series in Informatics (OASIcs)},
sponsors={AGH University of Science and Technology in Krakow; Cadence Systems Poland; Intel Poland},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781509022823},
language={English},
abbrev_source_title={IEEE Int. Symp. Ind. Embed. Syst., SIES - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Liang2016137,
author={Liang, H. and Wang, L. and Wu, D. and Xu, J.},
title={MLSA: A static bugs analysis tool based on LLVM IR},
journal={International Journal of Networked and Distributed Computing},
year={2016},
volume={4},
number={3},
pages={137-144},
doi={10.2991/ijndc.2016.4.3.1},
note={cited By 1},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85018882974&doi=10.2991%2fijndc.2016.4.3.1&partnerID=40&md5=aedc564e0e05fad112b7b3cbb941b951},
affiliation={School of Computer Science, Beijing University of Posts and Telecommunications, Beijing, China; School of Computer and Communication Engineering, China University of Petroleum, Qingdao, China},
abstract={Program bugs may result in unexpected software error, crash or serious security attack. Static program analysis is one of the most common methods to find program bugs. In this paper we present MLSA - a static analysis tool based on LLVM Intermediate Representation (IR), which can analyze programs written in multiple programming languages. MLSA combines symbolic execution with Z3 SMT solver to find bugs. At present, MLSA can detect some kinds of bugs, such as divide zero error, pointer overflow and dead code. Moreover, as a framework, MLSA follows the scalability and extensibility principles, which can help detect other types of bugs. Experiments show that MLSA is effective in finding bugs in real world software.},
author_keywords={Bug detection;  LLVM IR;  SMT solver;  Static program analysis;  Symbolic execution},
references={Cadar, C., Sen, K., Symbolic execution for software testing: Three decades later (2013) Communications of the ACM; De Moura, L., Bjørner, N., Z3: An efficient SMT solver (2008) Tools and Algorithms for the Construction and Analysis of Systems; Lattner, C., Adve, V., LLVM: A compilation framework for lifelong program analysis & transformation (2004) Code Generation and Optimization; http://dragonegg-llvm-org.luisamigo.proxybk.com/; http://www-gnu-org.luisamigo.proxybk.com/software/coreutils/coreutils.html; NECLA Static Analysis Benchmark, , http://www-neclabs-com.luisamigo.proxybk.com/; https://llvm-org.luisamigo.proxybk.com/bugs/show_bug.cgi?id=21852; Cadar, C., Dunbar, D., Engler, D.R., (2008) KLEE:Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs, , OSDI; Sinz, C., Merz, F., Falke, S., LLBMC: A bounded model checker for LLVM's intermediate representation (2012) Tools and Algorithms for Construction and Analysis of Systems; Vujošević-Janičić, M., Kuncak, V., Development and evaluation of LAV: An SMT-based error finding platform (2012) Verified Software: Theories, Tools, Experiments; Li, G., Ghosh, I., Rajan, S.P., KLOVER: A symbolic execution and automatic test generation tool for C++ programs (2011) Computer Aided Verification; Babic, D., Hu, A.J., Calysto. Software Engineering, 2008, , ICSE'08},
publisher={Atlantis Press},
issn={22117938},
language={English},
abbrev_source_title={Int. J. Netw. Distrib. Comput.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Ostberg2016629,
author={Ostberg, J.-P. and Wagner, S.},
title={At ease with your warnings: The principles of the salutogenesis model applied to automatic static analysis},
journal={2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering, SANER 2016},
year={2016},
volume={1},
pages={629-633},
doi={10.1109/SANER.2016.63},
art_number={7476686},
note={cited By 5; Conference of 23rd IEEE International Conference on Software Analysis, Evolution, and Reengineering, SANER 2016 ; Conference Date: 14 March 2016 Through 18 March 2016;  Conference Code:121776},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85025834055&doi=10.1109%2fSANER.2016.63&partnerID=40&md5=3e2dd120c4b67437599e5769b33b4cc3},
affiliation={University of Stuttgart, Institute of Software Technology, Stuttgart, Germany},
abstract={The results of an automatic static analysis run can be overwhelming, especially for beginners. The overflow of information and the resulting need for many decisions is mentally tiring and can cause stress symptoms. There are several models in health care which are designed to fight stress. One of these is the salutogenesis model created by Aaron Antonovsky. In this paper, we will present an idea on how to transfer this model into a triage and recommendation model for static analysis tools and give an example of how this can be implemented in FindBugs, a static analysis tool for Java. © 2016 IEEE},
keywords={Reengineering, Automatic static analysis, Static analysis},
references={Antonovsky, A., (1979) Health, Stress and Coping: New Perpectives on Mental and Physical Well-Being, , YosseyBass; Bacchelli, A., Ponzanelli, L., Lanza, M., Harnessing stack overflow for the IDE (2012) Proc. Third International Workshop on Recommendation Systems for Software Engineering, RSSE'12, pp. 26-30; Boksem, M.A., Meijman, T.F., Lorist, M.M., Effects of mental fatigue on attention: An {ERP} study (2005) Cognitive Brain Research, 25 (1), pp. 107-116; Festinger, L., (1962) A Theory of Cognitive Dissonance, 2. , Stanford university press; Giger, E., Pinzger, M., Gall, H., Predicting the fix time of bugs (2010) Proc. 2nd International Workshop on Recommendation Systems for Software Engineering, RSSE'10, pp. 52-56; Heckman, S.S., Adaptively ranking alerts generated from automated static analysis (2007) Crossroads, 14 (1), pp. 71-711. , Dec; Huffman, C., Kahn, B.E., Variety for sale: Mass customization or mass confusion? (1998) Journal of Retailing, 74 (4), pp. 491-513; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don't software developers use static analysis tools to find bugs? (2013) Proc. 35th International Conference on Software Engineering (ICSE), pp. 672-681; Kläs, M., Heidrich, J., Münch, J., Trendowicz, A., CQML scheme: A classification scheme for comprehensive quality model landscapes (2009) Proc. 35th Euromicro SEAA Conference; Lindström, B., Eriksson, M., Salutogenesis (2005) Journal of Epidemiology and Community Health, 59 (6), pp. 440-442; Maier, S.F., Seligman, M.E., Learned helplessness: Theory and evidence (1976) Journal of Experimental Psychology: General, 105 (1), p. 3; Mordal-Manet, K., Balmas, F., Denier, S., Ducasse, S., Wertz, H., Laval, J., Bellingard, F., Vaillergues, P., The squale model - A practice-based industrial quality model (2009) Proc. IEEE International Conference on Software Maintenance (ICSM'09); Nielsen, J., (1994) Usability Engineering, , Elsevier; Ostberg, J.-P., Ramadani, J., Wagner, S., A novel approach for discovering barriers in using automatic static analysis (2013) Proceedings of the 17th International Conference on Evaluation and Assessment in Software Engineering, pp. 78-81; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proceedings of the 30th International Conference on Software Engineering, pp. 341-350; Schwartz, B., The tyranny of choice (2004) Scientific American, 290 (4), pp. 70-75; Shneiderman, B., (1992) Designing the User Interface: Strategies for Effective Human-Computer Interaction, 3. , Addison-Wesley; Simons, D.J., Chabris, C.F., Gorillas in our midst: Sustained inattentional blindness for dynamic events (1999) Perception-London, 28 (9), pp. 1059-1074; Vohs, K.D., Baumeister, R.F., Schmeichel, B.J., Twenge, J.M., Nelson, N.M., Tice, D.M., Making choices impairs subsequent self-control: A limited-resource account of decision making, self-regulation, and active initiative (2014) Motivation Science, 1 (S); Wagner, S., Goeb, A., Heinemann, L., Kläs, M., Lampasona, C., Lochmann, K., Mayr, A., Trendowicz, A., Operationalised product quality models and assessment: The Quamoco approach (2015) Information and Software Technology, 62, pp. 101-123; Wagner, S., Lochmann, K., Winter, S., Goeb, A., Klaes, M., Quality models in practice: A preliminary analysis (2009) Proc. 3rd International Symposium on Empirical Software Engineering and Measurement (ESEM'09); Weiss, C., Premraj, R., Zimmermann, T., Zeller, A., How long will it take to fix this bug? (2007) Proc. Fourth International Workshop on Mining Software Repositories, MSR'07.; Whitworth, B., Polite computing (2005) Behaviour & Information Technology, 24 (5), pp. 353-363},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781509018550},
language={English},
abbrev_source_title={IEEE Int. Conf. on Softw. Anal., Evol., Reengineering, SANER},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Li20161097,
author={Li, Z.-L. and Dou, L.-M. and Cai, W. and Wang, G.-F. and Ding, Y.-L. and Kong, Y.},
title={Mechanical Analysis of Static Stress Within Fault-Pillars Based on a Voussoir Beam Structure},
journal={Rock Mechanics and Rock Engineering},
year={2016},
volume={49},
number={3},
pages={1097-1105},
doi={10.1007/s00603-015-0754-6},
note={cited By 30},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84959158055&doi=10.1007%2fs00603-015-0754-6&partnerID=40&md5=7735639e21749bab9f059260c58f1700},
affiliation={State Key Laboratory of Coal Resources and Safe Mining, China University of Mining and Technology, Xuzhou, Jiangsu  221116, China},
author_keywords={Fault-pillar;  Rock burst;  Static stress;  Voussoir beam structure},
keywords={Prestressed beams and girders;  Rock bursts, Buckling failure;  Limiting condition;  Mechanical analysis;  Parameter influences;  Static stress;  Voussoir beam, Stresses, arch;  buckling;  mechanical property;  pillar;  rock mechanics;  static response;  stress field},
funding_details={CXZZ12_0949},
funding_details={National Natural Science Foundation of ChinaNational Natural Science Foundation of China, NSFC},
funding_details={Shenhua GroupShenhua Group, 51174285},
funding_details={Priority Academic Program Development of Jiangsu Higher Education InstitutionsPriority Academic Program Development of Jiangsu Higher Education Institutions, PAPD, SZBF2011-6-B35},
funding_text 1={This work was supported and financed by the Research and Innovation Project for College Graduates of Jiangsu Province (No. CXZZ12_0949), the National Natural Science Foundation of China and the Shenhua Group Corporation Limited (No. 51174285), and the Priority Academic Program Development of Jiangsu Higher Education Institutions (No. SZBF2011-6-B35).},
references={Beer, G., Meek, J.L., Design curves for roofs and hanging-walls in bedded rock based on ‘voussoir’ beam and plate solutions (1982) Trans Inst Min Metall, 91, pp. A18-A22; Brady, B.H.G., Brown, E.T., (2004) Rock mechanics for underground mining, , Kluwer Academic Publisher, Dordrecht; Byerlee, J.D., Friction of rocks (1978) Pure appl Geophys, 116 (4-5), pp. 615-626; Cao, S.G., Miao, X.X., Qian, M.G., Stability and application of bond-beam structure (1998) Coal Technol Northeast China (5), pp. 21-25; Chien, M.G., A study of the behaviour of overlying strata in longwall mining and its application to strata control (1981) Dev Geotech Eng, 32, pp. 13-17; Diederichs, M.S., Kaiser, P.K., Stability of large excavations in laminated hard rock masses: the voussoir analogue revisited (1999) Int J Rock Mech Min Sci, 36 (1), pp. 97-117; Evans, W.H., The strength of undermined strata (1941) Trans Inst Min Metall, 50, pp. 475-500; Huang, Q.X., Shi, P.W., Qian, M.G., Experiment study on the coefficients of friction and inserting of main roof block corner (2000) Rock Soil Mech, 21 (1), pp. 60-63. , (in Chinese); Islam, M.R., Shinjo, R., Mining-induced fault reactivation associated with the main conveyor belt roadway and safety of the Barapukuria Coal Mine in Bangladesh: constraints from BEM simulations (2009) Int J Coal Geol, 79 (4), pp. 115-130; Ji, H.G., Ma, H.S., Wang, J.A., Zhang, Y.H., Cao, H., Mining disturbance effect and mining arrangements analysis of near-fault mining in high tectonic stress region (2012) Safety Sci, 50 (4), pp. 649-654; Ju, J.F., Xu, J.L., Structural characteristics of key strata and strata behaviour of a fully mechanized longwall face with 7.0 m height chocks (2013) Int J Rock Mech Min Sci, 58, pp. 46-54; Li, Z.H., Dou, L.M., Cao, A.Y., Fan, J., Mu, Z.L., Mechanism of fault slip induced rockburst during mining (2011) J China Coal Soc, 36 (S1), pp. 68-73. , (in Chinese); Li, Z.L., Dou, L.M., Cai, W., He, J., Wang, G.F., Liu, J., Han, R.J., Fault-pillar induced rock burst mechanism of thick coal seam in deep mining (2013) Chin J Rock Mech Eng, 32 (2), pp. 333-342. , (in Chinese); Li, Z.L., Dou, L.M., Cai, W., Wang, G.F., He, J., Gong, S.Y., Ding, Y.L., Investigation and analysis of the rock burst mechanism induced within fault-pillars (2014) Int J Rock Mech Min Sci, 70, pp. 192-200; Michalski, A., Assessment of rock burst hazard in the approach of a caved longwall to a fault (1977) Przeglad Gorniczy, 23 (9), pp. 387-397. , (in Polish); Pan, Y.S., Wang, L.G., Zhang, M.T., Xu, B.Y., The theoretical and testing study of fault rockburst (1998) Chin J Rock Mech Eng, 17 (6), pp. 642-649. , (in Chinese); Qian, M.G., Conditions required for equilibrium of overlying strata at working areas (1981) J China Inst Min Technol (2), pp. 31-40; Qian, M.G., A structural model of overlying strata in longwall working and its application (1982) J China Inst Min Technol (2), pp. 1-11; Qian, M.G., Miao, X.X., He, F.L., Analysis of key block in the structure of voussoir beam in longwall mining (1994) J China Coal Soc, 19 (6), pp. 557-563. , (in Chinese); Qian, M.G., Zhang, D.L., Li, L.J., Kang, L.X., Xu, J.L., S-R (1994) stability for the voussoir beam and its application. Ground Press Strata Control (3):6–11; Sofianos, A.I., Analysis and design of an underground hard rock voussoir beam roof (1996) Int J Rock Mech Min Sci Geomech Abstr, 33 (2), pp. 153-166; Talesnick, M.L., Ya’acov, N.B., Cruitoro, A., Modeling of a multiply jointed voussoir beam in the centrifuge (2007) Rock Mech Rock Eng, 40 (4), pp. 383-404; Tsesarsky, M., Deformation mechanisms and stability analysis of undermined sedimentary rocks in the shallow subsurface (2012) Eng Geol, 133-134, pp. 16-29; Xuan, D.Y., Xu, J.L., Zhu, W.B., Dynamic disaster control under a massive igneous sill by grouting from surface boreholes (2014) Int J Rock Mech Min Sci, 71, pp. 176-187},
correspondence_address1={Dou, L.-M.; State Key Laboratory of Coal Resources and Safe Mining, China; email: lmdou@cumt.edu.cn},
publisher={Springer-Verlag Wien},
issn={07232632},
coden={RMRED},
language={English},
abbrev_source_title={Rock Mech Rock Eng},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Lee20165,
author={Lee, S.M. and Lee, S.E.},
title={Static fault analysis for resilient System-on-Chip design},
journal={ISOCC 2015 - International SoC Design Conference: SoC for Internet of Everything (IoE)},
year={2016},
pages={5-6},
doi={10.1109/ISOCC.2015.7401684},
art_number={7401684},
note={cited By 2; Conference of 12th International SoC Design Conference, ISOCC 2015 ; Conference Date: 2 November 2015 Through 5 November 2015;  Conference Code:119336},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84963876718&doi=10.1109%2fISOCC.2015.7401684&partnerID=40&md5=c52648178b0f017151df97937dce3a0e},
affiliation={Dept. of Electronic Engineering, Seoul National University of Science and Technology, Seoul, South Korea},
abstract={As a process technology is scaling, a reliability problem that may cause a failure in the functionality of the digital circuit becomes an important issue in System-on-Chip (SoC) design. This importance leads to the studies on fault diagnosis and tolerance. In this paper, we propose a static and analytical technique for fault diagnosis focused on the digital circuit. Gate level fault analysis is completed in accordance with characteristic of logic gates and error propagation, predicting a susceptible part of hardware. Gate level fault diagnosis can be realized by parsing a gate level netlist without simulation, reducing the verification time. Moreover, our proposal provides an abstraction between the user and the target system for fault diagnosis and helps users choose appropriate fault-tolerant technology for the system. The error propagation analysis with an example combinational logic shows the feasibility of our proposal for resilient SoC design. © 2015 IEEE.},
author_keywords={Fault diagnosis;  Fault modeling;  Soft error;  System-on-Chip},
keywords={Application specific integrated circuits;  Computer circuits;  Design;  Digital circuits;  Errors;  Failure analysis;  Fault detection;  Integrated circuits;  Programmable logic controllers;  Radiation hardening;  Reconfigurable hardware;  System-on-chip, Error propagation analysis;  Fault diagnosis and tolerances;  Fault model;  Fault tolerant technologies;  Process Technologies;  Soft error;  Static fault analysis;  System on chip design, Integrated circuit design},
references={Sootkaneung, W., Saluja, K.K., On techniques for handling soft errors in digital circuits (2010) ITC'10, , Austin, TX, USA: IEEE Computer Society; Baumann, R., Radiation-induced soft errors in advanced semiconductor technologies (2005) Device and Materials Reliability, IEEE Transactions on, 5 (3), pp. 305-316; Shivakumar, P., Kistler, M., Modeling the effect of technology trends on the soft error rate of combinational logic (2002) DSN'02, , Washington, D. C., USA: IEEE Computer Society; Jeong, Y.S., Lee, S.M., Lee, S.E., Survey of fault-injection techniques for resilient systems-on-chip design (2015) International Journal of Applied Engineering Research},
sponsors={},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781467393089},
language={English},
abbrev_source_title={ISOCC - Int. SoC Des. Conf.: SoC Internet Everything (IoE)},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Bäckström2016266,
author={Bäckström, O. and Butkova, Y. and Hermanns, H. and Krčál, J. and Krčál, P.},
title={Effective static and dynamic fault tree analysis},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2016},
volume={9922 LNCS},
pages={266-280},
doi={10.1007/978-3-319-45477-1_21},
note={cited By 4; Conference of 35th International Conference on Computer Safety, Reliability, and Security, SAFECOMP 2016 ; Conference Date: 21 September 2016 Through 23 September 2016;  Conference Code:181379},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84988638006&doi=10.1007%2f978-3-319-45477-1_21&partnerID=40&md5=9bcda2af9b8c6b06a81248ce5f5f11af},
affiliation={Lloyd’s Register Consulting, Stockholm, Sweden; Computer Science, Saarland University, Saarbrücken, Germany},
abstract={Fault trees constitute one of the essential formalisms for static safety analysis of various industrial systems. Dynamic fault trees (DFT) enrich the formalism by support for time-dependent behaviour, e.g., repairs or dynamic dependencies. This enables more realistic and more precise modelling, and can thereby avoid overly pessimistic analysis results. But analysis of DFT is so far limited to substantially smaller models than those required for instance in the domain of nuclear power safety. This paper considers so called SD fault trees, where the user is free to express each equipment failure either statically, without modelling temporal information, or dynamically, allowing repairs and other timed interdependencies. We introduce an analysis algorithm for an important subclass of SD fault trees. The algorithm employs automatic abstraction techniques effectively, and thereby scales similarly to static analysis algorithms, albeit allowing for a more realistic modelling and analysis. We demonstrate the applicability of the method by an experimental evaluation on fault trees of nuclear power plants. © Springer International Publishing Switzerland 2016.},
keywords={Abstracting;  Accident prevention;  Computer programming languages;  Nuclear energy;  Nuclear power plants;  Static analysis;  Trees (mathematics), Automatic abstractions;  Dynamic fault trees;  Experimental evaluation;  Realistic modelling;  Static and dynamic faults;  Static-analysis algorithm;  Temporal information;  Time-dependent behaviour, Fault tree analysis},
funding_details={Horizon 2020 Framework ProgrammeHorizon 2020 Framework Programme, H2020},
funding_details={Seventh Framework ProgrammeSeventh Framework Programme, FP7, 288175, 318490},
funding_details={European Research CouncilEuropean Research Council, ERC, 695614},
funding_details={Deutsche ForschungsgemeinschaftDeutsche Forschungsgemeinschaft, DFG},
funding_details={Grantová Agentura České RepublikyGrantová Agentura České Republiky, GA ČR, P202/12/G061},
funding_text 1={This work is partly supported by the ERC Advanced Investigators Grant 695614 (POWVER), by the EU 7th Framework Programme under grant agreement no. 318490 (SENSATION) and 288175 (CERTAINTY), by the DFG Transregional Collaborative Research Centre SFB/TR 14 AVACS, by the CDZ project 1023 (CAP), and by the Czech Science Foundation, grant No. P202/12/G061.},
references={Baier, C., Haverkort, B.R., Hermanns, H., Katoen, J., Model-checking algorithms for continuous-time Markov chains (2003) IEEE Trans. Softw. Eng, 29 (6), pp. 524-541; Dugan, B.J., Bavuso, S.J., Boyd, M., Dynamic fault-tree models for fault-tolerant computer systems (1992) IEEE Trans. Reliab, 41 (3), pp. 363-377; Boudali, H., Crouzen, P., Stoelinga, M., A rigorous, compositional, and extensible framework for dynamic fault tree analysis (2010) IEEE Trans. Depandable Sec. Compt, 7 (2), pp. 128-143; Bouissou, M., Bon, J.L., A new formalism that combines advantages of fault-trees and Markov models: Boolean logic driven Markov processes (2003) Reliab. Eng. Syst. Saf, 82 (2), pp. 149-163; Brázdil, T., Hermanns, H., Krčál, J., Křetínský, J., Řehák, V., Verification of open interactive Markov chains (2012) FSTTCS. Lipics, 18, pp. 474-485; Butkova, Y., Hatefi, H., Hermanns, H., Krcál, J., Optimal continuous time Markov decisions (2015) ATVA 2015. LNCS, 9364, pp. 166-182. , Finkbeiner, B., et al. (eds.), Springer, Heidelberg; (2008) Guidelines for Hazard Evaluation Procedures, , 3rd edn. Wiley, Hoboken; Fussell, J.B., Vesely, W.E., A new methodology for obtaining cut sets for fault trees (1972) Trans. Am. Nucl. Soc, 15, pp. 262-263; IAEA, (2010), Development and Application of Level 1 Probabilistic Safety Assessment for Nuclear Power Plants, IAEA Safety Standards Series No. SSG-3; IAEA, (2010), Development and Application of Level 2 Probabilistic Safety Assessment for Nuclear Power Plants, IAEA Safety Standards Series No. SSG-4; Krčál, J., Krčál, P., Scalable analysis of fault trees with dynamic features (2015) DSN 2015, pp. 89-100; Kwiatkowska, M., Norman, G., Parker, D., PRISM 4.0: Verification of probabilistic real-time systems (2011) CAV 2011. LNCS, 6806, pp. 585-591. , Gopalakrishnan, G., Qadeer, S. (eds.), Springer, Heidelberg; (2013) Theory Manual; (2002) Fault Tree Handbook with Aerospace Applications; Ruijters, E.J.J., Stoelinga, M.I.A., Fault tree analysis: A survey of the state of the art in modeling, analysis and tools (2015) Comput. Sci. Rev, 15, pp. 29-62; Vesely, W., Davis, T., Denning, R., Saltos, N., (1983) Measures of Risk Importance and Their Application (NUREG/CR-3385), , US Nuclear Regulatory Commission; Vesely, W., Goldberg, F., Roberts, N., Haasl, D., (1981) Fault Tree Handbook(Nureg/Cr-0492), , US Nuclear Regulatory Commission; Wood, S., Smith, C.L., Kvarfordt, K.J., Beck, S., (2008), 1. , Systems Analysis Programs for Hands-on Integrated Reliability Evaluations (SAPHIRE): Summary Manual (NUREG/CR-6952, US Nuclear Regulatory Commission},
correspondence_address1={Butkova, Y.; Computer Science, Germany; email: butkova@cs.uni-saarland.de},
editor={Skavhaug A., Guiochet J., Bitsch F.},
sponsors={Austrian Institute of Technology; European Workshop on Industrial Computer Systems Reliability, Safety and Security; International Federation for Information Processing; Norwegian University of Science and Technology; Thales Transportation Systems GmbH et al.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319454764},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Anoshkin20165,
author={Anoshkin, A.N. and Zuiko, V.Y. and Osokin, V.M. and Tretyakov, A.A. and Pisarev, P.V.},
title={Manufacturing defects in composite flanges: Modelling and analysis of influence on static strength},
journal={PNRPU Mechanics Bulletin},
year={2016},
volume={2016},
number={2},
pages={5-21},
doi={10.15593/perm.mech/2016.2.01},
note={cited By 5},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84978148171&doi=10.15593%2fperm.mech%2f2016.2.01&partnerID=40&md5=fa903783d212b5083a52815a1253da6e},
affiliation={Perm National Research Polytechnic University, Perm, Russian Federation},
abstract={This work presents an approximate methodology based on the numerical simulation aimed at assessing how defects affect static strength of polymer composite flanges in load bearing elements used in aeronautical engineering. Various defects may occur in the process of flange forming in the areas of bending, e.g. curvature of the layers, resin pockets, voids, delamination and others. Thus, there is an actual problem of assessing how technological defects affect the strength of this part. The main defects in composite laminates are defined and a review of literature related to strength problems for such structures are presented in this work. The numerical stress-strain analysis of composite flange with main types of defects under force loading condition was carried out with ANSYS software. A two-dimensional axisymmetric finite element model was used. For the development of the structural model a parametric modelling approach was applied, including defect size, configuration and location parameters. The problem was solved in a general statement for an anisotropic elastic body. In order to keep the original part profile, we reduced the overall thickness of the layers in the local area near the defect by the size of the defect, so the overstated value of structural strength was obtained in simulation. The safety factor of the flange was estimated by stress components using the maximum stress criterion. The stresses in the material principal directions and interlaminar shear and normal stresses were determined for analysis. A comparison of the obtained data with the results for a defect-free flange allows estimating the impact of each defect or its combination on the static strength of flange. © PNRPU.},
author_keywords={ANSYS;  Defect;  Delamination;  Fiberglass;  Finite element method (FEM);  Numerical simulation;  Polymer composite materials;  Reinforced scheme;  Stiffness;  Strength;  Stress-strain state},
references={Sapozhnikov, S.B., (1994) Defects and strength of reinforced plastics, p. 162. , Cheliabinskii gosudarstvennyi teckhnicheskii universitet, Defekty i prochnost' armirovannykh plastikov; Senthil, K., Arockiarajan, A., Palaninathan, R., Santhosh, B., Usha, K.M., Defects in composite structures: its effects and prediction methods-a comprehensive review (2013) Composite Structures, 106, pp. 139-149; Bokhoeva, L.A., (2007) Features of strength analysis of constructions elements made of isotropic and composite materials with allowed defects, p. 192. , Ulan-Ude: VostochnoSibirskii universitet tekhnologii, Osobennosti rascheta na prochnost' elementov konstruktsii iz izotropnykh i kompozitsionnykh materialov s dopustimymi defektami; Bolotin, V.V., Delamination in composite constructions (1984) Mechanics of Composite Materials, (2), pp. 239-255; Bolotin, V.V., Delamination failure in composites under combined loading (1988) Mechanics of Composite Materials, (3), pp. 410-418; Bolotin, V.V., About dynamic propagation of cracks (1992) Journal of Applied Mathematics and Mechanics, 56 (1), pp. 150-162; Troshin, V.P., Effect of longitudinal delamination of layered cylindrical shell on the critical external pressure (1982) Mechanics of Composite Materials, (5), pp. 838-842; Troshin, V.P., The problem of delamination buckling of cylindrical shell (1981) Mechanics of Composite Materials, (4), pp. 729-731; Tarnopol'skii, I.M., Delamination of composite rods under compression (1979) Razrushenie kompozitnykh materialov, (2), pp. 160-166; Luat, D.C., Lur'e, S.A., Dudchenko, A.A., Modeling of the properties degradation due to cracking and delamination for the static and cyclic loadings (2008) Composite Mechanics and Design, 14 (4), pp. 623-637; Bottega, W.J., Maewal, A., Delamination buckling and growth in laminates (1983) Journal Applied Mechanics, 50 (1), pp. 184-189; Chai, H., Babcock, C.D., Knauss, W.G., One dimensional modeling of failure in laminated plates by delamination buckling (1981) International Journal of Solids and Structures, 27 (11), pp. 1069-1083; Chai, H., Babcock, C.D., Two-dimensional modeling of compressive failure in delaminated laminates (1985) Journal of Composite materials, 19 (1), pp. 67-91; Bolotin, V.V., Delaminations in composite structures: its origin, buckling, growth and stability (1996) Composites Part B: Engineering, 27 (2), pp. 129-145; Simitses, G.J., Sallam, S., Yin, W.H., Effect of delamination of axially loaded homogeneous laminated plates (1985) AIAA Journal, 23 (9), pp. 1437-1444; Muc, A., Stawiarski, A., Identification of damages in composite multilayered cylindrical panels with delaminations (2012) Composite Structures, 94 (5), pp. 1871-1879; Mikulik, Z., Kelly, D.W., Prusty, B.G., Thomson, R.S., Prediction of flange debonding in composite stiffened panels using an analytical crack tip element-based methodology (2008) Composite Structures, 85 (3), pp. 233-244; Li, J., Flange delamination prediction in composite structures with ply waviness (2000) AIAA Journal, 38 (5), pp. 893-897; Camanho, P.P., Davila, C.G., Pinho, S.T., Fracture analysis of composite co-cured structural joints using decohesion elements (2004) Fatigue & Fracture of Engineering Materials & Structures, 27 (9), pp. 745-757; Steeves, C.A., Fleck, N.A., Compressive strength of composite laminates with terminated internal plies (2005) Composites Part A: Applied Science and Manufacturing, 36 (6), pp. 798-805; McElroy, M., Leone, F., Ratcliffe, J., Simulation of delamination-migration and core crushing in a CFRP sandwich structure (2015) Composites Part A: Applied Science and Manufacturing, 79, pp. 192-202; Anoshkin, A.N., Tashkinov, A.A., (1998) Prediction of carrying capacity of composite flanges for the aircraft engine casing parts, p. 101. , Permskii gosudarstvennyi tekhnicheskii universitet, Prognozirovanie nesushchey sposobnosti kompozitnykh flantsev korpusnykh detaley aviadvigateley; Anoshkin, A.N., Tashkinov, A.A., Nonsteady-state damage accumulation processes in composite flanges under cyclic loads (1997) Mechanics of Composite Materials, 33 (5), pp. 449-454; Anoshkin, A.N., Tashkinov, A.A., Gritsevich, A.M., Prediction of the bearing capacity of composite flanges for aircraft-engine casing parts (1997) Mechanics of Composite Materials, 33 (3), pp. 255-262; Anoshkin, A.N., Rudakov, M.V., Straumit, I.S., Shustova, E.N., Stress-strain analysis and strength prediction of composite flange of fiberglass shell for aircraft gas turbine engine (2011) Vestnik Ufimskogo gosudarstvennogo aviatsionnogo tekhnologicheskogo universiteta, 15 (1), pp. 67-75; Anoshkin, A.N., Zuiko, V.Y., Tashkinov, M.A., Silberschmidt, V.V., Repair of damage in aircraft composite sound-absorbing panels (2015) Composite Structures, 120, pp. 153-166; Anoshkin, A.N., Zuiko, V.Y., Tchugaynova, A.V., Shustova, E.N., Experimental-theoretical research of mechanical properties of perforated composite sandwich panels (2016) Solid State Phenomena, 243, pp. 1-10},
publisher={Perm State National Research Polytechnic University},
issn={22249893},
language={Russian},
abbrev_source_title={PNRPU Mech. Bull.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Yoshimura2016573,
author={Yoshimura, T. and Kono, K.},
title={A case for static analysis of linux to find faults in interrupt request handlers},
journal={Journal of Information Processing},
year={2016},
volume={24},
number={3},
pages={573-582},
doi={10.2197/ipsjjip.24.573},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84968845940&doi=10.2197%2fipsjjip.24.573&partnerID=40&md5=b14aa6bb74f75e1c81e4ff83836834b5},
affiliation={School of Science for Open and Environmental Systems, Keio University, Yokohama, Kanagawa  223-8522, Japan; Department of Information and Computer Science, Keio University, Yokohama, Kanagawa  223-8522, Japan},
abstract={Bugs in operating system kernels threaten system reliability and availability. Static analysis of device drivers is one of the most useful methods to find and fix bugs in operating systems. Unfortunately, existing tools focus on bug patterns that come from developers’ ad hoc beliefs and experiences, although the developers have a chance to utilize many past bug reports. The objective of this paper is to uncover particular types of real bugs in a widely used operating system. Specifically, this paper presents a case for finding six real bugs in Linux when obtaining 160 bug reports about interrupt request line (IRQ) handlers in past Linux. The 160 bug reports enable us to recognize nine patterns of mishandling IRQ handlers, and our analyzer, which is based on the recognized patterns, successfully detects the uncovered bugs. © 2016 Information Processing Society of Japan.},
author_keywords={Dependability;  Operating system;  Static analysis;  Symbolic execution},
references={Engler, D., Chelf, B., Chou, A., Hallem, S., Checking System Rules Using System-specific, Programmer-written Compiler Extensions (2000) Proc. 4th Conference on Symposium on Operating System Design & Implementation (OSDI '00); Renzelmann, M.J., Kadav, A., Swift, M.M., SymDrive: Testing Drivers Without Devices (2012) Proc. 10th USENIX Conference on Operating Systems Design and Implementation (OSDI’12), pp. 279-292; Saha, S., Lozi, J.-P., Thomas, G., Lawall, J.L., Muller, G., Hector: Detecting Resource-Release Omission Faults in Error-handling Code for Systems Software (2013) Proc. 43rd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN '13), pp. 1-12; Chipounov, V., Kuznetsov, V., Candea, G., S2E: A Platform for In-vivo Multi-path Analysis of Software Systems (2011) Proc. 16th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS XVI), pp. 265-278; Kadav, A., Renzelmann, M.J., Swift, M.M., Tolerating Hardware Device Failures in Software (2009) Proc. ACM 22nd Symposium on Operating Systems Principles (SOSP '09), pp. 59-72; Park, S., Lu, S., Zhou, Y., CTrigger: Exposing Atomicity Violation Bugs from Their Hiding Places (2009) Proc. 14th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS XIV), pp. 25-36; Cadar, C., Dunbar, D., Engler, D., KLEE: Unassisted and Automatic Generation of High-coverage Tests for Complex Systems Programs (2008) Proc. 8th USENIX Conference on Operating Systems Design and Implementation (OSDI '08), pp. 209-224; Ball, T., Bounimova, E., Cook, B., Levin, V., Lichtenberg, J., McGarvey, C., Ondrusek, B., Ustuner, A., Thorough Static Analysis of Device Drivers (2006) Proc. 1st ACMEuropean Conference on Computer Systems 2006 (EuroSys '06), pp. 73-85; Engler, D., Chen, D.Y., Hallem, S., Chou, A., Chelf, B., Bugs As Deviant Behavior: A General Approach to Inferring Errors in Systems Code (2001) Proc. 18th ACM Symposium on Operating Systems Principles (SOSP '01), pp. 57-72; Lu, L., Arpaci-Dusseau, A.C., Arpaci-Dusseau, R.H., Lu, S., A Study of Linux File System Evolution (2013) Proc. 11th USENIX Conference on File and Storage Technologies (FAST’13), pp. 31-44; Wang, X., Zeldovich, N., Kaashoek, M.F., Solar-Lezama, A., Towards Optimization-safe Systems: Analyzing the Impact of Undefined Behavior (2013) Proc. 24th ACM Symposium on Operating Systems Principles (SOSP '13), pp. 260-275; Lawall, J., Brunel, J., Palix, N., Hansen, R., Stuart, H., Muller, G., WYSIWIB: A declarative approach to finding API protocols and bugs in Linux code (2009) Proc. IEEE/IFIP International Conference on Dependable Systems Networks (DSN '09), pp. 43-52; Yang, J., Twohey, P., Engler, D., Musuvathi, M., Using Model Checking to Find Serious File System Errors (2004) Proc. 6th Conference on Symposium on Opearting Systems Design & Implementation (OSDI '04); Li, Z., Zhou, Y., PR-Miner: Automatically Extracting Implicit Programming Rules and Detecting Violations in Large Software Code (2005) Proc. 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering (ESEC/FSE-13), pp. 306-315; Yoshimura, T., Kono, K., Who Writes What Checkers?: Learning from Bug Repositories (2014) Proc. 10th USENIX Conference on Hot Topics in System Dependability (HotDep '14); Fonseca, P., Rodrigo Rodrigues, B.B.B., SKI: Exposing Kernel Concurrency Bugs Through Systematic Schedule Exploration (2014) Proc. 11th USENIX Conference on Operating Systems Design and Implementation (OSDI’14), pp. 415-431; Klein, G., Elphinstone, K., Heiser, G., Andronick, J., Cock, D., Derrin, P., Elkaduwe, D., Winwood, S., seL4: Formal Verification of an OS Kernel (2009) Proc. ACM 22nd Symposium on Operating Systems Principles (SOSP '09), pp. 207-220; Ryzhyk, L., Chubb, P., Kuz, I., Le Sueur, E., Heiser, G., Automatic Device Driver Synthesis with Termite (2009) Proc. ACM SIGOPS 22nd Symposium on Operating Systems Principles (SOSP '09), pp. 73-86; Wang, X., Lazar, D., Zeldovich, N., Chlipala, A., Tatlock, Z., Jitk: A Trustworthy In-kernel Interpreter Infrastructure (2014) Proc. 11th USENIX Conference on Operating Systems Design and Implementation (OSDI '14), pp. 33-47; Witkowski, T., Blanc, N., Kroening, D., Weissenbacher, G., Model Checking Concurrent Linux Device Drivers (2007) Proc. 22nd IEEE/ACM International Conference on Automated Software Engineering (ASE '07), pp. 501-504; Witkowski, T., (2007) Formal Verification of Linux Device Drivers, , Master’s thesis, TU Dresden and ETH Zurich; http://www-cprover-org.luisamigo.proxybk.com/ddverify/, available from; Ball, T., Bounimova, E., Levin, V., Kumar, R., Lichtenberg, J., The Static Driver Verifier Research Platform (2010) Proc. 22nd International Conference on Computer Aided Verification (CAV '10), pp. 119-122; Ball, T., Bounimova, E., Kumar, R., Levin, V., SLAM2: Static Driver Verification with Under 4% False Alarms (2010) Proc. 2010 Conference on Formal Methods in Computer-Aided Design (FMCAD '10), pp. 35-42; http://research-microsoft-com.luisamigo.proxybk.com/en-us/projects/slam/, available from},
publisher={Information Processing Society of Japan},
issn={03875806},
language={English},
abbrev_source_title={J. Info. Process.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Blánquez2015229,
author={Blánquez, F.R. and Platero, C.A. and Rebollo, E. and Blázquez, F.},
title={Field-winding fault detection in synchronous machines with static excitation through frequency response analysis},
journal={International Journal of Electrical Power and Energy Systems},
year={2015},
volume={73},
pages={229-239},
doi={10.1016/j.ijepes.2015.05.005},
note={cited By 21},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84930009939&doi=10.1016%2fj.ijepes.2015.05.005&partnerID=40&md5=147d5b51328c08130f979e56232de3c2},
affiliation={Department of Electrical Engineering, ETSI Industriales, Universidad Politécnica de Madrid, C/José Gutiérrez Abascal, 2, Madrid, 28006, Spain},
abstract={Frequency Response Analysis is a well-known technique for the diagnosis of power transformers. Currently, this technique is under research for its application in rotary electrical machines. This paper presents significant results on the application of Frequency Response Analysis to fault detection in field winding of synchronous machines with static excitation. First, the influence of the rotor position on the frequency response is evaluated. Secondly, some relevant test results are shown regarding ground fault and inter-turn fault detection in field windings at standstill condition. The influence of the fault resistance value is also taken into account. This paper also studies the applicability of Frequency Response Analysis in fault detection in field windings while rotating. This represents an important feature because some defects only appear with the machine rated speed. Several laboratory test results show the applicability of this fault detection technique in field windings at full speed with no excitation current. © 2015 Elsevier Ltd. All rights reserved.},
author_keywords={Fault detection;  Fault diagnosis;  Frequency response analysis;  Generators;  Impedance measurement;  Rotating machines},
keywords={Electric grounding;  Failure analysis;  Frequency response;  Gas generators;  Machine windings;  Power transformers;  Synchronous machinery;  Winding, Electrical machine;  Excitation currents;  Fault detection techniques;  Frequency response analysis;  Impedance measurement;  Important features;  Rotating machine;  Synchronous machine, Fault detection},
references={Arumugam, S., Experimental investigation on terminal connection and system function pair during SFRA testing on three phase transformers (2014) Int J Electr Power Energy Syst, 58, pp. 101-110. , ISSN 0142-0615; Herrera, W., Aponte, G., Pleite, J., Gonzalez-Garcia, C., A novel methodology for transformer low-frequency model parameters identification (2013) Int J Electr Power Energy Syst, 53, pp. 643-648. , ISSN 0142-0615; Vaessen, P.T.M., Hanique, E., A new frequency response analysis method for power transformers (1992) IEEE Trans Power Delivery, 7 (1), pp. 384-391; (2013) IEEE Guide for the Application and Interpretation of Frequency Response Analysis for Oil-Immersed Transformers, pp. 1-72. , IEEE Std C57.149-2012, March 8; Arumugam, S., Experimental investigation on terminal connection and system function pair during SFRA testing on three phase transformers (2014) Int J Electr Power Energy Syst, 58, pp. 101-110. , ISSN 0142-0615; Purnomoadi, A.P., Fransisco, D., Modeling and diagnostic transformer condition using sweep frequency response analysis (2009) Proceedings of the 9th International Conference on Properties and Applications of Dielectric Materials, , Harbin, China, July 19-23; Herrera, W., Aponte Mayor, G., Gonzalez-Garcia, C., Pleite, J., Detection of transformer faults using frequency response traces in the low frequency bandwidth (2014) IEEE Trans Ind Electron, 61 (9), pp. 4971-4978; Behjat, V., Vahedi, A., Setayeshmehr, A., Borsi, H., Gockenbach, E., Sweep frequency response analysis for diagnosis of low level short circuit faults on the windings of power transformers: An experimental study (2012) Int J Electric Power Energy Syst, 42 (1), pp. 78-90. , ISSN 0142-0615; Pandya, A.A., Parekh, B.R., Interpretation of sweep frequency response analysis (SFRA) traces for the open circuit and short circuit winding fault damages of the power transformer (2014) Int J Electric Power Energy Syst, 62, pp. 890-896. , ISSN 0142-0615; Sofian, D.M., Zhongdong, W., Li, J., Interpretation of transformer FRA responses - Part II: Influence of transformer structure (2010) IEEE Trans Power Delivery, 25 (4), pp. 2582-2589; Zoubek, H., Villwock, S., Pacas, M., Frequency response analysis for rolling-bearing damage diagnosis (2008) Ind Electron, IEEE Trans, 55 (12), pp. 4270-4276; Ordonez, M., Sonnaillon, M.O., Quaicoe, J.E., Iqbal, M.T., An embedded frequency response analyzer for fuel cell monitoring and characterization (2010) Ind Electron, IEEE Trans, 57 (6), pp. 1925-1934; Lebaroud, A., Medoued, A., Online computational tools dedicated to the detection of induction machine faults (2013) Int J Electric Power Energy Syst, 44 (1), pp. 752-757. , ISSN 0142-0615; Gritli, Y., Zarri, L., Rossi, C., Filippetti, F., Capolino, G., Casadei, D., Advanced diagnosis of electrical faults in wound-rotor induction machines (2013) Ind Electron, IEEE Trans, 60 (9), pp. 4012-4024; Capocchi, L., Toma, S., Capolino, G.-A., Fnaiech, F., Yazidi, A., Wound-rotor induction generator short-circuit fault classification using a new neural network based on digital data, diagnostics for electric machines, power electronics & drives (SDEMPED) (2011) 2011 IEEE International Symposium on, pp. 638-644. , 5-8 September; Ben Khader Bouzid, M., Champenois, G., New expressions of symmetrical components of the induction motor under stator faults (2013) Ind Electron IEEE Trans, 60 (9), pp. 4093-4102; Maouche, Y., Oumaamar, M.E.K., Boucherma, M., Khezzar, A., Instantaneous power spectrum analysis for broken bar fault detection in inverter-fed six-phase squirrel cage induction motor (2014) Int J Electric Power Energy Syst, 62, pp. 110-117. , ISSN 0142-0615; Kia, S.H., Henao, H., Capolino, G.-A., Diagnosis of broken-bar fault in induction machines using discrete wavelet transform without slip estimation (2009) Ind Appl IEEE Trans, 45 (4), pp. 1395-1404; Bacha, K., Gossa, M., Henao, H., Capolino, G.-A., Comparative investigation of diagnosis media of stator voltage asymmetry and rotor broken bars in induction machines (2006) IEEE Industrial Electronics, IECon 2006-32nd Annual Conference on, pp. 5040-5045. , 6-10 Nov; Antonino-Daviu, J., Climente-Alarcon, V., Tsoumas, I., Georgoulas, G., Perez, R.B., Multi-harmonic tracking for diagnosis of rotor asymmetries in wound rotor induction motors. Industrial electronics society (2013) IECON 2013-39th Annual Conference of the IEEE, pp. 5555-5560. , 10-13 Nov; Ceban, A., Pusca, R., Romary, R., Study of rotor faults in induction motors using external magnetic field analysis (2012) Ind Electron, IEEE Trans, 59 (5), pp. 2082-2093; Yazidi, A., Henao, H., Capolino, G.-A., Betin, F., Capocchi, L., Experimental inter-turn short circuit fault characterization of wound rotor induction machines (2010) Industrial Electronics (ISIE), 2010 IEEE International Symposium on, pp. 2615-2620. , 4-7 July; Neti, P., Dehkordi, A.B., Gole, A.M., A new robust method to detect rotor faults in salient-pole synchronous machines using structural asymmetries IEEE Industry Applications Society Annual Meeting; 2008. (IAS '08); Biet, M., Rotor faults diagnosis using feature selection and nearest neighbors rule: Application to a turbogenerator (2013) Ind Electron, IEEE Trans, 60 (9), pp. 4063-4073; Iris Power FluxTracII-R™, , http://www-irispower-com.luisamigo.proxybk.com/motor_cm_FluxTracII-R.aspx, Iris Power; Platero, C.A., Blázquez, F., Frías, P., Redondo, M., A novel rotor ground fault detection technique for synchronous machines with static excitation (2010) IEEE Trans Energy Convers, 25 (4), pp. 965-973; Platero, C.A., Blázquez, F., Frías, P., Pardo, M., New on-line rotor ground fault location method for synchronous machines with static excitation (2011) IEEE Trans Energy Convers, 26 (2), pp. 572-580; Bruzzese, C., Diagnosis of eccentric rotor in synchronous machines by analysis of split-phase currents-Part II: Experimental analysis (2014) Ind Electron, IEEE Trans, 61 (8), pp. 4206-4216; Bruzzese, C., Diagnosis of eccentric rotor in synchronous machines by analysis of split-phase currents-Part II: Experimental analysis (2014) Ind Electron, IEEE Trans, 61 (8), pp. 4206-4216; Lamarre, L., Picher, P., Impedance characterization of hydro generator stator windings and preliminary results of FRA analysis (2008) Conference Record of the 2008 IEEE International Symposium on Electrical Insulation, pp. 227-230; Platero, C.A., Blázquez, F., Frías, P., Ramírez, D., Influence of rotor position in FRA response for detection of insulation failures in salient-pole synchronous machines (2011) IEEE Trans Energy Convers, 26 (2), pp. 671-676; (2005) IEEE Guide for Diagnostic Field Testing of Electric Power Apparatus - Electrical Machinery, pp. 0-1100. , IEEE Std 62.2-2004},
correspondence_address1={Platero, C.A.; Department of Electrical Engineering, ETSI Industriales, Universidad Politécnica de Madrid, C/José Gutiérrez Abascal, 2, Spain},
publisher={Elsevier Ltd},
issn={01420615},
coden={IEPSD},
language={English},
abbrev_source_title={Int J Electr Power Energy Syst},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Tang201543,
author={Tang, H. and Lan, T. and Hao, D. and Zhang, L.},
title={Enhancing defect prediction with static defect analysis},
journal={ACM International Conference Proceeding Series},
year={2015},
volume={06-November-2015},
pages={43-51},
doi={10.1145/2875913.2875915},
note={cited By 5; Conference of 7th Asia-Pacific Symposium on Internetware, Internetware 2015 ; Conference Date: 6 November 2015;  Conference Code:124245},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84994341248&doi=10.1145%2f2875913.2875915&partnerID=40&md5=f05d2c424ec854ee67a58e4069a70809},
affiliation={Key Laboratory of High Confidence Software Technologies, Ministry of Education, Peking University, Beijing, 100871, China},
abstract={In the software development process, how to develop better software at lower cost has been a major issue of concern. One way that helps is to find more defects as early as possible, on which defect prediction can provide effective guidance. The most popular defect prediction technique is to build defect prediction models based on machine learning. To improve the performance of defect prediction model, selecting appropriate features is critical. On the other hand, static analysis is usually used in defect detection. As static defect analyzers detects defects by matching some well-defined "defect patterns", its result is useful for locating defects. However, defect prediction and static defect analysis are supposed to be two parallel areas due to the differences in research motivation, solution and granularity. In this paper, we present a possible approach to improve the performance of defect prediction with the help of static analysis techniques. Specifically, we present to extract features based on defect patterns from static defect analyzers to improve the performance of defect prediction models. Based on this approach, we implemented a defect prediction tool and set up experiments to measure the effect of the features. © 2015 ACM.},
author_keywords={Code feature;  Defect;  Defect pattern;  Machine learning;  Predictive model;  Static defect analyzer},
keywords={Artificial intelligence;  Forecasting;  Learning systems;  Software design;  Software engineering;  Static analysis, Analysis techniques;  Code feature;  Defect patterns;  Defect prediction models;  Predictive modeling;  Research motivations;  Software development process;  Static defect analyzer, Defects},
references={Akiyama, F., An example of software system debugging (1971) Proceedings of the International Federation of Information Processing Societies Congress, 71, pp. 353-359. , New York: Springer Science and Business Media; Catal, C., Software fault prediction: A literature review and current trends (2011) Expert Systems with Applications, 38 (4), pp. 4626-4636; Catal, C., Diri, B., A systematic review of software fault prediction studies (2009) Expert Systems with Applications, 36 (4), pp. 7346-7354; Chansler, R., Bryant, R., Bryant, R., Canino-Koening, R., Cesarini, F., Allman, E., Bostic, K., Brown, T., (2011) The Architecture of Open Source Applications; Chidamber, S.R., Kemerer, C.F., A metrics suite for object oriented design (1994) IEEE Transactions on Software Engineering, 20 (6), pp. 476-493; Clark, B., Zubrow, D., (2001) How Good Is the Software: A Review of Defect Prediction Techniques. Software Engineering Symposium, , IEEE Computer Press; Cuoq, P., Signoles, J., Baudin, P., Bonichon, R., Canet, G., Correnson, L., Monate, B., Puccetti, A., Experience report: Ocaml for an industrial-strength static analysis framework. in (2009) ACM Sigplan Notices, 44, pp. 281-286. , ACM; D'Ambros, M., Lanza, M., Robbes, R., An extensive comparison of bug prediction approaches (2010) 7th IEEE Working Conference on Mining Software Repositories, pp. 31-41. , IEEE; Dutko, A.M., (2011) The Relational Database: A New Static Analysis Tool?, , PhD thesis, Cleveland State University; Fenton, N.E., Ohlsson, N., Quantitative analysis of faults and failures in a complex software system (2000) IEEE Transactions on Software Engineering, 26 (8), pp. 797-814; Graves, T.L., Karr, A.F., Marron, J.S., Siy, H., Predicting fault incidence using software change history (2000) IEEE Transactions on Software Engineering, 26 (7), pp. 653-661; Hall, T., Beecham, S., Bowes, D., Gray, D., Counsell, S., A systematic literature review on fault prediction performance in software engineering (2012) IEEE Transactions on Software Engineering, 38 (6), pp. 1276-1304; Halstead, M.H., (1977) Elements of Software Science (Operating and Programming Systems Series), , Elsevier Science Inc; Harrison, R., Counsell, S.J., Nithi, R.V., An evaluation of the mood set of object-oriented software metrics (1998) IEEE Transactions on Software Engineering, 24 (6), pp. 491-496; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) ACM Sigplan Notices, 39 (12), pp. 92-106; Jiang, Y., Cukic, B., Menzies, T., Fault prediction using early lifecycle data (2007) The 18th IEEE International Symposium on Software Reliability, pp. 237-246. , IEEE; Jureczko, M., Significance of different software metrics in defect prediction. Software Engineering (2011) An International Journal, 1 (1), pp. 86-95; Jureczko, M., Madeyski, L., Towards identifying software project clusters with regard to defect prediction (2010) Proceedings of the 6th International Conference on Predictive Models in Software Engineering, p. 9. , ACM; Lessmann, S., Baesens, B., Mues, C., Pietsch, S., Benchmarking classification models for software defect prediction: A proposed framework and novel findings (2008) IEEE Transactions on Software Engineering, 34 (4), pp. 485-496; Li, Z., Zhou, Y., Pr-miner: Automatically extracting implicit programming rules and detecting violations in large software code. in (2005) ACM SIGSOFT Software Engineering Notes, 30, pp. 306-315. , ACM; Lipow, M., Number of faults per line of code (1982) IEEE Transactions on Software Engineering, (4), pp. 437-439; McCabe, T.J., A complexity measure (1976) IEEE Transactions on Software Engineering, (4), pp. 308-320; Mei, H., Liu, X., Internetware: An emerging software paradigm for internet computing (2011) Journal of Computer Science and Technology, 26 (4), pp. 588-599; Menzies, T., Greenwald, J., Frank, A., Data mining static code attributes to learn defect predictors (2007) IEEE Transactions on Software Engineering, 33 (1), pp. 2-13; Moser, R., Pedrycz, W., Succi, G., A comparative analysis of the efficiency of change metrics and static code attributes for defect prediction (2008) Proceedings of the ACM/IEEE 30th International Conference on Software Engineering, pp. 181-190. , IEEE; Nagappan, N., Ball, T., Use of relative code churn measures to predict system defect density (2005) Proceedings of the 27th International Conference on Software Engineering, pp. 284-292. , IEEE; Nakamura, T., Hochstein, L., Basili, V.R., Identifying domain-specific defect classes using inspections and change history (2006) Proceedings of the ACM/IEEE 28th International Symposium on Empirical Software Engineering, pp. 346-355. , ACM; Ostrand, T.J., Weyuker, E.J., Bell, R.M., Where the bugs are. in (2004) ACM SIGSOFT Software Engineering Notes, 29, pp. 86-96. , ACM; Rahman, F., Devanbu, P., How, and why, process metrics are better (2013) Proceedings of the 2013 International Conference on Software Engineering, pp. 432-441. , IEEE Press; Rahman, F., Khatri, S., Barr, E.T., Devanbu, P., Comparing static bug finders and statistical prediction (2014) Proceedings of the 36th International Conference on Software Engineering, pp. 424-434. , ACM; Rahman, F., Posnett, D., Devanbu, P., Recalling the imprecision of cross-project defect prediction (2012) Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, p. 61. , ACM; Rutar, N., Almazan, C.B., Foster, J.S., A comparison of bug finding tools for Java (2004) Proceedings of the 15th International Symposium on Software Reliability Engineering, pp. 245-256. , IEEE; Sadowski, C., Van Gogh, J., Jaspan, C., Soederberg, E., Winter, C., Tricorder: Building a program analysis ecosystem (2015) Proceedings of the International Conference on Software Engineering; Shull, F., Basili, V., Boehm, B., Costa, P., Lindvall, M., Port, D., Rus, I., Zelkowitz, M., What we have learned about fighting defects (2002) Proceedings of 8th IEEE Symposium on Software Metrics, pp. 249-258. , IEEE; Takahashi, M., Kamayachi, Y., An empirical study of a model for program error prediction (1985) Proceedings of the 8th International Conference on Software Engineering, pp. 330-336. , IEEE Computer Society Press; Tosun, A., Bener, A.B., Kale, R., Ai-based software defect predictors: Applications and benefits in a case study (2010) Proceedings of the 22th Innovative Applications of Artificial Intelligence Conference, pp. 1748-1755; Wong, C.-P., Xiong, Y., Zhang, H., Hao, D., Zhang, L., Mei, H., Boosting bug-report-oriented fault localization with segmentation and stack-trace analysis (2014) Proceedings of the IEEE International Conference on Software Maintenance and Evolution, pp. 181-190; Worth, D., Greenough, C., Chin, L., (2009) A Survey of C and C++ Software Tools for Computational Science, pp. 1-38. , Science and Technologies Facilities Council; Zhang, J., Wang, X., Hao, D., Xie, B., Zhang, L., Mei, H., A survey on bug-report analysis (2015) SCIENCE China Information Sciences, 58 (2), pp. 1-24; Zimmermann, T., Premraj, R., Zeller, A., Predicting},
sponsors={Ministry of Education, Key Laboratory of High Confidence Software Technologies},
publisher={Association for Computing Machinery},
isbn={9781450336413},
language={English},
abbrev_source_title={ACM Int. Conf. Proc. Ser.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Venkatasubramanyam2015100,
author={Venkatasubramanyam, R.D. and Gupta, S. and Uppili, U.},
title={Assessing the Effectiveness of Static Analysis through Defect Correlation Analysis},
journal={Proceedings - 2015 IEEE 10th International Conference on Global Software Engineering, ICGSE 2015},
year={2015},
pages={100-104},
doi={10.1109/ICGSE.2015.18},
art_number={7224486},
note={cited By 0; Conference of 10th IEEE International Conference on Global Software Engineering, ICGSE 2015 ; Conference Date: 13 July 2015 Through 16 July 2015;  Conference Code:117973},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84957873187&doi=10.1109%2fICGSE.2015.18&partnerID=40&md5=26bf00c52b0b3a12499dd733cb3258b5},
affiliation={Corporate Technology-Research and Technology Center, Siemens Technology and Services Private Limited, Bengaluru, India; Corporate Technology-Development Center, Siemens Technology and Services Private Limited, Bengaluru, India},
abstract={Assessment of code and design quality using Software Code Assessment tools is important for continuous improvement and monitoring of code quality in the software industry in general and for global software development in particular. Static Analysis is believed to help identify issues at an early stage in the software development life cycle (SDLC), however it is still under utilized in the industry. In this paper, we discuss our experiences in determining the importance of Static Analysis and the extent to which the defects (that could otherwise be slipped to later stages of SDLC) could have been reduced with the continuous use of Static Analysis. Towards this end, we have performed analysis of defects reported from testing/field by correlating the defects to Static Analysis Rules, for projects that were developed across different regions. Our focus was to gather insight into the number and type of defects that could be identified in advance through Static Analysis Rules. The purpose of gaining the insights is to justify the ROI for software quality checks, fine tune, update existing software quality practices and introduce new practices uniformly across the teams as necessary. The results substantiate the role of Static Analysis in reducing technical debt by identifying potential defects early in the SDLC. © 2015 IEEE.},
author_keywords={defect analysis;  defect correlation;  software code quality;  software product quality;  static analysis},
keywords={Codes (symbols);  Computer software;  Computer software selection and evaluation;  Defects;  Life cycle;  Software design;  Software engineering;  Static analysis, Continuous improvements;  Correlation analysis;  Defect analysis;  Global software development;  Software codes;  Software development life cycle;  Software industry;  Software product quality, Quality control},
references={Zheng, L.W., Nagappan, N., Snipes, W., Hudepohl, J.P., Vouk, M.A., On the value of static analysis for fault detection in software (2006) IEEE Trans. Softw. Eng., 32 (4), pp. 240-253. , April; Nagappan, N., Ball, T., Static analysis tools as early indicators of pre-release defect density (2005) Proceedings of the 27th International Conference on Software Engineering (ICSE '05), pp. 580-586. , ACM, New York, NY, USA; Gupta, S., Singh, H.K., Venkatasubramanyam, R.D., Uppili, U., SCQAM: A scalable structured code quality assessment method for industrial software (2014) Proceedings of the 22nd International Conference on Program Comprehension, pp. 244-252. , June) ACM; Thung, F., Lucia, D.L., Jiang, L., Rahman, F., Devanbu, P.T., To what extent could we detect field defects an empirical study of false negatives in static bug finding tools (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering (ASE 2012), pp. 50-59. , ACM, New York, NY, USA; Ayewah, N., Pugh, W., David Morgenthaler, J., Penix, J., Zhou, Y.Q., Evaluating static analysis defect warnings on production software (2007) Proceedings of the 7th ACM SIGPLANSIGSOFT Workshop on Program Analysis for Software Tools and Engineering (PASTE '07), pp. 1-8. , ACM, New York, NY, USA; Pressman, R.S., Software Engineering, A Practitioner's Approach, 7th Edition, , McGraw Hill New York; http://www-webseo-com-au.luisamigo.proxybk.com/keywordextractor.html, Keyword Extraction", [Online]; http://tartarus-org.luisamigo.proxybk.com/~martin/PorterStemmer/, Stemmer", [Online]; Kothapalli, C., Ganesh, S.G., Singh, H.K., Radhika, D.V., Rajaram, T., Ravikanth, K., Gupta, S., Rao, K., Continual monitoring of code quality (2011) Proceedings of the 4th India Software Engineering Conference, ISEC '11, pp. 175-184. , New York, NY, USA ACM; https://msdn-microsoft-com.luisamigo.proxybk.com/enus/library/ms182189.aspx, FxCop Rule", [Online]; http://www-gimpel-com.luisamigo.proxybk.com/html/pcl.htm, PCLint," [Online] Available; http://findbugs-sourceforge-net.luisamigo.proxybk.com, FindBugs," [Online] Available},
sponsors={IEEE Computer Society},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781479984091},
language={English},
abbrev_source_title={Proc. - IEEE Int. Conf. Glob. Softw. Eng., ICGSE},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Xie2015164,
author={Xie, Y. and Feng, C. and Yang, Z. and Liu, H. and Wang, Z.},
title={Electromagnetic force calculation and structural static analysis on the rotor of squirrel-cage induction motors before and after the broken bars fault},
journal={Diangong Jishu Xuebao/Transactions of China Electrotechnical Society},
year={2015},
volume={30},
number={15},
pages={164-171},
note={cited By 4},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84947432119&partnerID=40&md5=8637f19781809f2882d07db35822c42b},
affiliation={School of Electrical & Electronic Engineering Harbin University of Science and Technology, Harbin, 150080, China; School of Electrical Engineering&Information Northeast Petroleum University, Daqing, 163318, China},
abstract={Takingthe Y802-2 type squirrel-cage induction motor asan example, the electromagnetic force and structural static on the rotor are researched when the motor operates with the broken bars fault. Based on the results of the two-dimensional transient magnetic field, the magnetic force iscalculated by the Maxwell tensor method and the principle of the Lorentz force. Then the change patterns with time of the rotor electromagnetic force are given before and after the broken bars fault. In addition, the validity of the calculated results is confirmed through comparing with the ones measuredin the experiments. Using the calculated electromagnetic forceas the load, the structural static of the rotor in the steady state is studied afterwards. The fault deformation distribution on the rotor is then achieved. The further evolution trend of the broken bars fault can be speculated by the rotor electromagnetic force and the change of displacement before and after the fault. ©, 2015, The editorial office of Transaction of China Electrotechnical Society. All right reserved.},
author_keywords={Broken bars fault;  Electromagnetic force;  Fault deformation;  Finite element method;  Induction motor;  Structural static},
keywords={Deformation;  Finite element method;  Induction motors;  Magnetic fields, Broken bar;  Deformation distributions;  Electromagnetic force calculations;  Electromagnetic forces;  Squirrel cage induction motor;  Structural static;  Structural static analysis;  Two-dimensional transient, Squirrel cage motors},
references={Mizia, J., Adamiak, K., Eastham, A.R., Finite element force calculation comparison of methods for electric machines (1988) IEEE Transactions on Magnetics, 24 (1), pp. 447-450; Ren, Z., Comparison of different force calculation methods in 3d finite element modelling (1994) IEEE Transactions on Magnetics, 30 (5), pp. 3471-3474; Kovanen, T., Tarhasaari, T., Kettunen, L., Computation of local electromagnetic force (2011) IEEE Transactions on Magnetics, 47 (5), pp. 894-897; Lee, S.H., Park, I.H., Lee, K.S., Comparison of mechanical deformations due to different force distributions of two equivalent magnetization models (2000) IEEE Transactions on Magnetics, 34 (4), pp. 1368-1372; Lee, S.H., Han, S.J., Choi, H.S., Magnetic force distributions in saturated magnetic system using magnetic charge method and other methods (2004) IEEE Transactions on Applied Superconductivity, 14 (2), pp. 682-685; Li, Z., Luo, Y., Meng, L., The calculation of local magnetic force in turbo-generator with FEM based virtual work principle (2007) Proceedings of the CSEE, 27 (15), pp. 47-52; Li, Z., Luo, Y., New method of magnetic force density computation for turbo-generator based on finite element method and virtual work principle (2009) Proceedings of the CSEE, 29 (3), pp. 71-77; Cao, X., Deng, Z., Yang, G., Mathematical model of bearingless switched reluctance motors based on maxwell stress tensor method (2009) Proceedings of the CSEE, 29 (3), pp. 78-83; Kovanen, T., Tarhasaari, T., Kettunen, L., Localization of electromagnetic force based on material models (2012) IEEE Transactions on Magnetics, 48 (1), pp. 13-17; Stancheva, R.D., Iatcheva, I.I., 3-D electromagnetic force distribution in the end region of turbogenerator (2009) IEEE Transactions on Magnetics, 45 (3), pp. 1000-1003; Liang, Y., Liu, J., Chen, J., Dynamic electromagnetic force calculation for single-phase short circuit fault of large induction motors (2012) Proceedings of the CSEE, 32 (9), pp. 109-115; Wang, X., Qiu, A., Finite element calculation of radial electromagnetic force wave in squirrel-cage asynchronous motors (2012) Transactions of China Electrotechnical Society, 27 (7), pp. 109-117; Mao, W., Fu, C., Tan, J., FEM structure analysis and optimization of vertical motor rotor (2007) Electric Motor Technology, (1), pp. 22-24; Cheng, W., Geng, H., Feng, S., Rotor strength analysis of high-speed permanent magnet synchronous motors (2010) Proceedings of the CSEE, 32 (27), pp. 87-94; Wang, J., Hu, X., Guo, J., Statics modeling and analyzing of three-degree-of-freedom spherical ultrasonic motors with the spiral spring (2014) Transactions of China Electrotechnical society, 29 (3), pp. 125-131; Liang, Y., Wang, H., Zhang, J., Research of end fields and eddy current losses for air-cooling steam-turbo-generator (2010) Electric Machines and Control, 14 (1), pp. 29-34; Huang, T., Ruan, J., Zhang, Y., Magneto-structural coupling field analysis on the end winding of multi-phase asynchronous motor (2011) Large Electric Technology, (3), pp. 1-4},
correspondence_address1={Xie, Y.; School of Electrical & Electronic Engineering Harbin University of Science and TechnologyChina},
publisher={China Machine Press},
issn={10006753},
coden={DIJXE},
language={Chinese},
abbrev_source_title={Diangong Jishu Xuebao},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Mandhan2015880,
author={Mandhan, N. and Verma, D.K. and Kumar, S.},
title={Analysis of approach for predicting software defect density using static metrics},
journal={International Conference on Computing, Communication and Automation, ICCCA 2015},
year={2015},
pages={880-886},
doi={10.1109/CCAA.2015.7148499},
art_number={7148499},
note={cited By 10; Conference of 2015 International Conference on Computing, Communication and Automation, ICCCA 2015 ; Conference Date: 15 May 2015 Through 16 May 2015;  Conference Code:113347},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84939524064&doi=10.1109%2fCCAA.2015.7148499&partnerID=40&md5=fb40209058b6fe42c480a0a1ab8a77ac},
affiliation={Department of Computer Science and Engineering, Jaypee University of Engineering and Technology, Guna, MP, India},
abstract={Now a day's software development is growing rapidly. Due to this, there is also a rapid growth in the number of occurrences of defects. In this paper, defect density had been predicted using the Linear Regression Method and had been applied to Static Metrics. It helps to determine that to which module more reliability techniques should be applied. Static metric is used for prediction of defects which requires extraction of abstract information from the code. In this paper, the relationship has been established between the static metrics with defect density individually and jointly. This relationship is used to predict the number of defects. Simple and multiple linear regression statistical methods have been used for the analysis. The results reveal that which static metric is more useful in prediction of defect density and which metric is less useful and will also see that which metric has positive correlation or negative correlation with defects. © 2015 IEEE.},
author_keywords={Defect Density;  Multiple Linear Regression;  Simple Linear regression;  Static Metrics},
keywords={Defects;  Forecasting;  Linear regression;  Regression analysis;  Software design, Linear regression methods;  Multiple linear regressions;  Negative correlation;  Positive correlations;  Reliability techniques;  Simple linear regression;  Software defects;  Static metrics, Defect density},
references={Catal, C., Eason, G., Noble, B., Sneddon, I.N., On certain integrals of Lipschitz-Hankel type involving products of Bessel functions (1955) Phil. Trans. Roy. Soc. London, A247, pp. 529-551. , April; Catal, C., (2010) Software Fault Prediction: A Literature Review and Current Trends, Elsevier; Chidamber, S., Kemerer, C., A metrics suite for object oriented design (1994) Software Engineering, IEEE Transactions on, 20 (6), pp. 476-493. , http://ieeexplore-ieee-org.luisamigo.proxybk.com/search/srchabstract.jsp, Jun; Denaro, G., Estimating software fault-proneness for tuning testing activities (2000) Twenty-second International Conference on Software Engineering, pp. 704-706. , New York, NY: ACM; Denaro, G., Pezzè, M., Morasca, S., Towards industrially relevant fault proneness models (2003) International Journal of Software Engineering and Knowledge Engineering, 13 (4), pp. 395-417; Verma, D., Kumar, S., (2014) An Improved Approach for Reduction of Defect Density Using Optimal Module Sizes, 2014. , Hindwai Publishing Corporation, Advances in Software Engineering; Elliot, A.C., Woodward, W.A., (2007) Statistical Analysis Quick Reference Guidebook with SPSS Examples, , 1st ed. London: Sage Publications; Emam, K.E., Melo, W., Machado, J.C., The prediction of faulty classes using object-oriented design metrics (2001) Journal of Systems and Software, 56 (1), pp. 63-75; Ganguli, M., (2002) Making Use of Jsp, , New York: Wiley; Gyimothy, T., Ferenc, R., Siket, I., Empirical validation of object-oriented metrics on open source software for fault prediction (2005) IEEE Transactions on Software Engineering, 31 (10), pp. 897-910; Hassan, A.E., Holt, R.C., The top ten list: Dynamic fault prediction (2005) Twenty-first IEEE International Conference on Software Maintenance, pp. 263-272. , Budapest, Hungary: IEEE Computer Society; http://tunedit-org.luisamigo.proxybk.com/repo/PROMISE/DefectPrediction; (2010) IEEE Standards Classification for Software Anamolies, , http://ieeexplore-ieee-org.luisamigo.proxybk.com/xpl/articleDetails.jsp?arnumber=5399061, IEEE std. 1044-2009; Olague, H.M., Gholston, S., Quattlebaum, S., Empirical validation of three software metrics suites to predict faultproneness of object-oriented classes developed using highly iterative or agile software development processes (2007) IEEE Transactions on Software Engineering, 33 (6), pp. 402-419; Ostrand, T.J., Weyuker, E.J., Bell, R.M., Automating algorithms for the identification of fault-prone files (2007) International Symposium on Software Testing and Analysis, pp. 219-227. , London, United Kingdom; Michel, P.A., The assumptions of the linear regression model (1971) Inst. Brit. Geogr., Trans., (52), pp. 145-158; Robert, E., Park.: Software Size Measurement: A Framework for Counting Source Statements, , www-sei-cmu-edu.luisamigo.proxybk.com/reports/92tr020.pdf, Technical Report CMU/SEI-92-TR-020; http://www-spss-com.luisamigo.proxybk.com/statistics, IBM SPSS Statistics Version 20 64-bit; (1995) The Standish Group Report: Chaos, , http://www4-in-tum-de.luisamigo.proxybk.com/lehre/vorlesungen/vse/WS2004/1995_Standish_Chaos.pdf; Tomaszewski, P., Lundberg, L., Grahn, H., The accuracy of early fault prediction in modified code (2005) Fifth Conference on Software Engineering Research and Practice in, pp. 57-63. , Sweden, Västeras, Sweden; Yourdon, E., Constantine, L.L., (1979) [1975]. Structured Design: Fundamentals of A Discipline of Computer Program and Systems Design, , Yourdon Press},
editor={Swaroop A., Sharma V.},
sponsors={},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781479988907},
language={English},
abbrev_source_title={Int. Conf. Comput., Commun. Autom., ICCCA},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Li20151,
author={Li, J.-Q. and Zhang, L.-P.},
title={Simulation analysis on spectral characteristics of doubly-fed induction generator rotor windings inter-turn short fault considering rotor static eccentricity},
journal={Dianji yu Kongzhi Xuebao/Electric Machines and Control},
year={2015},
volume={19},
number={6},
pages={1-5},
doi={10.15938/j.emc.2015.06.001},
note={cited By 1},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84938074306&doi=10.15938%2fj.emc.2015.06.001&partnerID=40&md5=c543339772f2911128499a7d1d93b87e},
affiliation={School of Electrical and Electronic Engineering, North China Electric Power University, Baoding, 071003, China},
abstract={Differences of doubly-fed induction generator (DFIG) spectral characteristics between rotor windings inter-turn short fault and rotor static eccentric were studied, in order to avoid misdiagnosis of rotor windings inter-turn short fault leading by rotor static eccentric. Based on the finite element theory, model of rotor windings inter-turn short fault and the model considering static eccentric were built, and these different situations were simulated. Taking rotor line current and stator line voltage as research objects, the simulation results for each group were compared from the perspective of spectral characteristics. The results show that the presence of static eccentric can cause the same frequency as rotor windings inter-turn short fault in stator voltage, it may cause false diagnosis. While monitoring rotor line current, stator line voltage and high frequency of stator voltage could distinguish between rotor static eccentric and rotor windings inter-turn short fault effectively, and avoid misdiagnosis of rotor windings inter-turn short fault caused by rotor static eccentric. ©, 2015, Editorial Department of Electric Machines and Control. All right reserved.},
author_keywords={Distinguish of spectral characteristics;  Doubly-fed induction generator;  Finite element theory;  Inter-turn short circuit fault of rotor windings;  Rotor static eccentric},
keywords={Asynchronous generators;  Electric fault currents;  Electric generators;  Stators;  Winding, Doubly fed induction generator (DFIG);  Doubly fed induction generators;  Finite element theories;  High frequency HF;  Rotor windings;  Simulation analysis;  Spectral characteristics;  Static eccentricities, Rotors (windings)},
references={Wei, S., Fu, Y., Ma, H., Stator winding inter-turn short-circuit diagnosis and experimental research on doubly-fed wind generator (2010) Power System Protection and Control, 38 (11), pp. 25-28; Li, J., Wang, D., He, L., Steady-state analysis on inter-turn short circuit fault of stator windings in doubly-fed induction generators (2013) Automation of Electric Power Systems, 37 (18), pp. 103-107; Ma, H., Shi, W., Han, J., Double-fed induction generator rotor fault diagnosis considering control strategies of rotor-side converters (2014) Proceedings of the CSEE, 33 (18), pp. 119-125; Qian, Y., Ma, H., A survey of fault diagnosis method for doubly-fed induction motor (2011) Large Electric Machine and Hydraulic Turbine, 5, pp. 5-8; Zhang, Z., Ma, H., Qian, Y., Simulation on inter-turn short circuit faults of stator winding via finite-element method for DFIG (2012) High Voltage Apparatus, 48 (8), pp. 24-33; Chen, J., Ma, H., Shi, W., Study of stator inter-turn short fault diagnosis of DFIG-Based wind turbines based on Hilbert-Huang transform (2013) Large Electric Machine and Hydraulic Turbine, 2, pp. 34-38; Dong, G., Zhang, C., Shi, X., Summation on fault diagnosis for cage motor (2001) S&M Electric Machine, 28 (1), pp. 39-42; Fang, R., Ma, H., Classification of induction machine rotor faults based on least square support vector machine (2006) Transactions of China Electrotechnical Society, 5, pp. 92-98; Stefani, A., Yazidi, A., Rossi, C., Double fed induction machines diagnosis based on signature analysis of rotor modulating signals (2008) IEEE Transactions on Industry Application, 44 (6), pp. 1711-1721; Sun, L., Lü, Z., Liu, H., A detection and diagnostic system of rotor eccentricity in asynchronousmotor with DSO-2100 (2005) Electric Machines and Control, 9 (6), pp. 537-540; Bao, X., Lü, Q., Review and prospect of air-gap eccentricity faults in induction machines (2013) Proceedings of the CSEE, 33 (6), pp. 93-100; Ma, H., Fang, R., Huang, Y., Study on fault feature in large asynchronous motor rotor winding (2004) Large Electric Machine and Hydraulic Turbine, 4, pp. 1-4},
correspondence_address1={Zhang, L.-P.; School of Electrical and Electronic Engineering, China},
publisher={Editorial Department of Electric Machines and Control},
issn={1007449X},
language={Chinese},
abbrev_source_title={Dianji yu Kongzhi Xuebao},
document_type={Article},
source={Scopus},
}

@ARTICLE{Ranadive2015,
author={Ranadive, P.R. and Vaidya, V. and Rajguru, C.},
title={Reducing Defects in Automotive Software Using Static Analysis},
journal={SAE Technical Papers},
year={2015},
volume={2015-April},
number={April},
doi={10.4271/2015-01-0191},
note={cited By 0; Conference of SAE 2015 World Congress and Exhibition ; Conference Date: 21 April 2015 Through 23 April 2015;  Conference Code:111931},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84938302771&doi=10.4271%2f2015-01-0191&partnerID=40&md5=9d60a0777f75ea2a84cf4a99ef9cf962},
affiliation={CREST, KPIT Technologies Ltd., India},
abstract={Improving reliability and quality of software is a major aspect in automotive industry. Software reliability and quality improves by reducing bugs or defects in the software. However, finding these defects at an early stage in the software development life cycle is important to reduce rework and cost. Manually detecting defects or bugs in large code sets is time consuming and is less accurate. Hence, using static or dynamic analysis tools has become a standard practice in automotive industry. Though many such tools are commercially available, it is observed that these tools are less used for various reasons. Some of the major reasons are users need to spend considerable amount of time to learn to use these tools to get desired output reports, customized checks are required for an application that are not provided by the tool and reports are too lengthy as well as cumbersome to analyze. In this paper, we propose a static analysis based YUCCA-CCC tool that addresses some of the major limitations like support for differential code sets, function pointers analysis, and customized checks. We treat this tool as a complementary tool to other tools since it incorporates customized checks and customized report formats. We also discuss our results obtained on three automotive software source codes in production. The results show 42.30% increase in accuracy over the manual process. Copyright © 2015 SAE International.},
keywords={Automotive industry;  Codes (symbols);  Defects;  Life cycle;  Software design;  Software reliability;  Static analysis, Automotive software;  Complementary tools;  Detecting defects;  Dynamic analysis tools;  Function pointers;  Quality of softwares;  Software development life cycle;  Standard practices, Program debugging},
references={Kemerer, C.F., Paulk, M.C., The Impact of Design and Code Reviews on Software Quality: An Empirical Study Based on PSP Data (2009) IEEE Software Engineering Transactions, 35 (4), pp. 534-550; Conrad, M., Verification and Validation According to ISO 26262: A Workflow to Facilitate the Development of High-Integrity Software, , www-mathworks-com.luisamigo.proxybk.com/tagteam/71300_1D-4.pdf; Chimdyalwar, B., Survey of Array out of Bound Access Checkers for C Code (2012) Proc. 5th India Software Eng. Conf. (ISEC 2012), pp. 45-48; Williams, C., Hollingsworth, J., Bug Driven Bug Finders (2004) Int'l Workshop Mining Software Repositories, (MSR 2004), pp. 70-74; Ayewah, N., Pugh, W., Null Dereference Analysis in Practice (2010) Program Analysis Software Tools Eng., (PASTE 2010), pp. 65-72; Nesov, V., Automatically Finding Bugs in Open Source Programs (2009) Electronic Communications of the EASST; Zheng, J., Williams, L., Nagappan, N., Snipes, W., Hudepohl, J.P., Vouk, M.A., On the Value of Static Analysis for Fault Detection in Software (2006) Trans. Software Eng., 32 (4), pp. 240-253. , IEEE; Chelf, B., Engler, D., Hallem, S., How to Write System specific, Static Checkers in Metal (2002) Workshop Program Analysis Software Tools Eng, (PASTE 2002), ACM, pp. 51-60; Kienle, H.M., Kraft, J., Müller, H., Software Reverse Engineering in the Domain of Complex Embedded Systems (2011) Book Chapter, Reverse Engineering, InTech; Hallem, S., Chelf, B., Xie, Y., Engler, D., A System and Language for Building SystemSpecific static analysis (2002) Conf. Programming Language Design Implementation, (PLDI 2002), pp. 69-82; Kielne, H.M., Kraft, J., Nolte, T., System-specific static code analyses: A case study in the complex embedded systems domain (2012) Software Quality J., 20 (2), pp. 337-367. , June; Foster, J., Hicks, M., Pugh, W., Improving Software Quality with Static Analysis (2007) Program Analysis Software Tools Eng., (PASTE 2007), ACM, pp. 83-84; Polyspace, , http://www-mathworks-in.luisamigo.proxybk.com/products/polyspace/; Qa-C, , http://www-programmingresearch-com.luisamigo.proxybk.com/products/qac/; Codesonar, , http://www-grammatech-com.luisamigo.proxybk.com/products/codesonar/overview.html; Coverity, , http://www-coverity-com.luisamigo.proxybk.com/; Goanna, , http://redlizards-com.luisamigo.proxybk.com/; Klocwork Insight, , http://www-klocwork-com.luisamigo.proxybk.com/products/insight/index.php; Ostberg, J., Wagner, S., Get started imminently: Using tutorials to accelerate learning in automated static analysis (2012) ICCSW, 28, pp. 109-115; Fehnker, A., Huuck, R., Seefried, S., Tapp, M., Fade to Grey: Tuning Static Program Analysis Electronic Notes in Theoretical Computer Science; Holzmann, G.J., The Power of Ten -Rules for Developing Safety Critical Code.; Athavale, A., Ranadive, P., Babu, M.N., Pawar, P., Sah, S., Vaidya, V., Rajguru, C., Dudka, K., Automatic sequential to parallel code conversion: The S2P tool and performance analysis (2012) J. Computing, (JoC), 1 (4). , Common Errors in C/C++ Code and Static Analysis," RedHat publication, February 2011; Ayewah, N., Pugh, W., Morgenthaler, J., Penix, J., Zhou, Y., Evaluating Static Analysis Defect Warnings on Production Software (2007) Workshop Program Analysis Software Tools Eng., (PASTE 2007), ACM, pp. 1-8; Ruthruff, J., Penix, J., Morgenthaler, J., Elbaum, S., Rothermel, G., Predicting Accurate and Actionable Static Analysis Warnings: An Experimental Approach (2008) 30th Int'l Conf. Software Eng., (ICSE 2008), pp. 341-350; Hovemeyer, D., Pugh, W., Finding More Null Pointer Bugs, but Not Too Many (2007) Workshop Program Analysis Software Tools Eng., (PASTE 2007), ACM, pp. 9-14; Ayewah, N., Pugh, W., A Report on a Survey and Study of Static Analysis Users (2008) Workshop Defects in Large Software Systems, pp. 1-5; Vetro, A., Torchiano, M., Morisio, M., Quantitative Assessment of the Impact of Automatic Static Analysis Issues on Time Efficiency (2011) Informatica Quantitativa, pp. 27-29; Heckman, S., Williams, L., On Establishing a Benchmark for Evaluating Static Analysis Alert Prioritization and Classification Techniques (2008) Int'l Symposium Empirical Software Eng. Measurement, (ESEM 2008), ACM-IEEE, pp. 41-50; Ayewah, N., Static Analysis in Practice (2010) Doctoral Thesis, , Univ. of Maryland; Nanda, M., Gupta, M., Sinha, S., Chandra, S., Schmidt, D., Balachandran, P., Making defect-finding tools work for you (2010) Int'l Conf. Software Eng. (ICSE 2010), pp. 99-108; Understand Source Code Analysis and Metrics, , http://www-scitools-com.luisamigo.proxybk.com/; Sane, A., Ranadive, P., Sah, S., Data Dependency Analysis Using Data-Write Detection Techniques (2010) 2nd Int'l Conf. Software Technology Eng. (ICSTE 2010), 1, pp. 9-12. , October; Aho, A.V., Sethi, R., Ullman, J.D., (2005) Compilers: Principles, Techniques, and Tools, , 3rd Edition; Graaf, D., Detection of Static Flaws in Changesets (2010) Masters Thesis, , Iowa State University},
sponsors={AVL; Continental; et al.; FEV; Fiat Chrysler Automobiles; IAV Automotive Engineering},
publisher={SAE International},
issn={01487191},
language={English},
abbrev_source_title={SAE Techni. Paper.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Wu201545,
author={Wu, T. and Zhang, J. and Zhang, D. and Jin, D.},
title={Static analysis refinement on defect path segment},
journal={Communications in Computer and Information Science},
year={2015},
volume={572},
pages={45-57},
doi={10.1007/978-981-10-0421-6_5},
note={cited By 0; Conference of 13th National Embedded System Technology Conference, ESTC 2015 ; Conference Date: 10 October 2015 Through 11 October 2015;  Conference Code:164449},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84959246813&doi=10.1007%2f978-981-10-0421-6_5&partnerID=40&md5=e2e684a26c746b62f1f778143b3b3ad8},
affiliation={School of Computer and Technology, Beijing Jiaotong University, Beijing, China; National Research Center of Railway Safety Assessment, Beijing Jiaotong University, Beijing, China; State Key Laboratory of Networking and Switching Technology, Beijing University of Posts and Telecommunications, Beijing, China},
abstract={In this paper, we present a refinement method of static analysis based on path segment. The dataflow analysis generates the initial defect detection results and the defect path. Then the path constraints that might cause the defect are searched for on the defect path for a reported defect. Finally, all the path constraints are solved by a constraint solver. If no solution is found, the defect is a false positive, otherwise not. The comparative experiment on an embedded software of certain key field and the comparisons with similar tool PC-Lint show that our method has better analytical accuracy and efficiency. © Springer Science+Business Media Singapore 2015.},
author_keywords={Constraint solving;  Embedded software;  Path segment;  Static analysis},
keywords={Data flow analysis;  Defects;  Embedded software;  Embedded systems;  Logic programming, Comparative experiments;  Constraint solvers;  Constraint Solving;  False positive;  Initial defects;  Path constraint;  Path segments;  Refinement methods, Static analysis},
funding_details={Beijing Jiaotong University Education FoundationBeijing Jiaotong University Education Foundation, O14RC00010},
funding_text 1={Supported by Foundation for Talents of Beijing Jiaotong University (Grant No. O14RC00010).},
references={Xiao, Q., Gong, Y.Z., Yang, C.H., Jin, D.H., Wang, Y.W., Path sensitive static defect detecting method (2010) J. Softw, 21 (2), pp. 209-217; Xiao, Q., (2011) Research on Key Technologies of Improving the Accuracy of Static Defect Detecting, , Beijing University of Posts and Telecommunications, Beijing; Zhao, Y.S., (2012) Research on Symbolic Analysis Based Static Defect Detection Technique, , Beijing University of Posts and Telecommunications, Beijing; Wang, Y.W., (2009) Research on Software Testing Technology Based on Defect Pattern, , Beijing University of Posts and Telecommunications, Beijing; Zhao, Y.S., Gong, Y.Z., Zhou, A., Wang, Q., Zhou, H.B., False positive elimination in static defect detection (2012) J. Comput. Res. Develop, 49 (9), pp. 1822-1831; Wei, L., Segmented symbolic analysis (2013) Proceedings of ICSE 2013, pp. 212-221. , IEEE Press, San Francisco; Zhou, H.B., Wang, Q., Jin, D.H., Gong, Y.Z., A static detecting model for invalid arithmetic operation based on alias analysis (2012) Proceedings of the 2012 IEEE 23Rd International Symposium on Software Reliability Engineering Workshops (ISSREW), pp. 183-188. , IEEE Press, New York; Zhang, D.L., Jin, D.H., Gong, Y.Z., Wang, Q., Dong, Y.K., Zhang, H.L., Optimizing static analysis based on defect correlations (2014) J. Softw, 25 (2), pp. 386-399},
correspondence_address1={Zhang, J.; School of Computer and Technology, China; email: zjw@bjtu.edu.cn},
editor={Sha X., Zhang X., Wu Z.},
sponsors={China Computer Federation and Peking University},
publisher={Springer Verlag},
issn={18650929},
isbn={9789811004209},
language={English},
abbrev_source_title={Commun. Comput. Info. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Belmonte20152365,
author={Belmonte, D. and Dalla Vedova, M.D.L. and Maggiore, P.},
title={Electromechanical servomechanisms affected by motor static eccentricity: Proposal of fault evaluation algorithm based on spectral analysis techniques},
journal={Safety and Reliability of Complex Engineered Systems - Proceedings of the 25th European Safety and Reliability Conference, ESREL 2015},
year={2015},
pages={2365-2372},
doi={10.1201/b19094-310},
note={cited By 13; Conference of 25th European Safety and Reliability Conference, ESREL 2015 ; Conference Date: 7 September 2015 Through 10 September 2015;  Conference Code:139809},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84959018254&doi=10.1201%2fb19094-310&partnerID=40&md5=34acbab2c7a8c63ca685b982739739cb},
affiliation={Politecnico di Torino, Torino, Italy},
abstract={The development of a prognostic algorithm capable of identifying the precursors of incipient failures of primary flight command Electromechanical Actuators (EMA) is beneficial for the anticipation of the incoming failure: a correct interpretation of the failure degradation pattern, in fact, can trig an early alert of the maintenance crew, who can properly schedule the servomechanism replacement. Prognostic, though, is strictly technology-oriented as it is based on accurate analysis of the cause and effect relationships. As a consequence, it is possible that prognostics algorithms that demonstrate great efficacy for certain applications fail in other circumstances, just because the actuator is based on a different technology. In this paper the authors propose an innovative prognostic “model-based” technique able to identify symptoms of an EMA degradation before the actual exhibition of the anomalous behavior. The identification/evaluation of the considered incipient failures is performed analyzing proper critical operational system parameters, able to put in evidence the corresponding degradation path, by means of a numerical algorithm based on spectral analysis techniques. Subsequently, these operational parameters are correlated with the actual health condition of the considered system by means of failure maps created by a reference monitoring model-based algorithm. According to preliminary testing, the proposed method has proved its worth for different types of EMA progressive failure: in particular, in the present work, it has been applied to the case of an actuator having brushless DC motor affected by a progressive increase of the static eccentricity of the rotor. © 2015 Taylor & Francis Group, London.},
keywords={Brushless DC motors;  Electromechanical devices;  Failure (mechanical);  Parameter estimation;  Reliability;  Spectrum analysis, Cause-and-effect relationships;  Degradation patterns;  Electro mechanical actuator (EMA);  Numerical algorithms;  Operational parameters;  Operational systems;  Spectral analysis techniques;  Static eccentricities, Electromechanical actuators},
references={Battipede, M., Dalla Vedova, M.D.L., Maggiore, P., Romeo, S., Model based analysis of precursors of electromechanical servomechanisms failures using an artificial neural network (2015) AIAA Modeling and Simulation Technologies Conference, , Kissimmee, Florida; Belmonte, D., Dalla Vedova, M.D.L., Maggiore, P., Onboard Electromechanical Actuators Affected by Motor Static Eccentricity: A New Prognostic Method based on Spectral Analysis Techniques (2015) 2015 International Conference on Applied Physics, Simulation and Computers (APSAC 2015), , Vienna Austria; Borello, L., Dalla Vedova, M.D.L., Jacazio, G., Sorli, M., A Prognostic Model for Electrohydraulic Servovalves (2009) Annual Conference of the Prognostics and Health Management Society, , San Diego, CA; Borello, L., Dalla Vedova, M.D.L., A dry friction model and robust computational algorithm for reversible or irreversible motion transmission (2012) International Journal of Mechanics and Control, 13 (2), pp. 37-48; Borello, L., Villero, G., Dalla Vedova, M.D.L., New asymmetry monitoring techniques: Effects on attitude control (2009) Aerospace Science and Technology, 13 (8), pp. 475-487; Cooley, J.W., Tukey, J.W., An algorithm for the machine calculation of complex Fourier series (1965) Mathematics of Computation, 19 (90), pp. 297-301; Çunkas, M., Aydoğdu, O., Realization of Fuzzy Logic Controlled Brushless DC Motor Drives using Matlab Simulink (2010) Mathematical and Computational Applications, 15, pp. 218-222; Elliott, D.F., Rao, K.R., (1982) Fast Transforms: Algorithms, Analyses, Applications, , New York: Academic Press; Halvaei Niasar, A., Moghbelli, H., Vahedi, A., (2009) Modelling, Simulation and Implementation of Four-Switch Brushless DC Motor Drive Based on Switching Functions, pp. 682-687. , IEEE EUROCON 2009, St. Petersburg, Russia; Harris, F., On the use of Windows for Harmonic Analysis with the Discrete Fourier Transform (1978) Proceedings of the IEEE, 66 (1), pp. 51-83; Hongwei, W., (2009) Evaluation of Various Window Functions Using Multi-Instrument, , Virtins technology; Lee, B.K., Advanced Simulation Model for Brushless DC Motor Drives (2003) Electric Power Components and Systems, 31 (9), pp. 841-868; Maggiore, P., Dalla Vedova, M.D.L., Pace, L., Desando, A., Definition of parametric methods for fault analysis applied to an electromechanical servomechanism affected by multiple failures (2014) Second European Conference of the PHM Society (PHME’14), 8-10, pp. 561-571. , Nantes, France, July 2014; Maggiore, P., Dalla Vedova, M.D.L., Pace, L., Proposal of Prognostic Parametric Method Applied to an Electrohydraulic Servomechanism Affected by Multiple Failures (2014) WSEAS Transactions on Environment and Development, 10, pp. 478-490; Oppenheim, A.V., Schafer, R.W., Buck, J.A., (1991) Discrete-Time Signal Processing, , Prentice Hall; Ramian, F., (2011) Implementation of Real-Time Spectrum Analysis, , Rohde & Schwarz GmbH},
editor={Podofillini L., Sudret B., Stojadinovic B., Zio E., Kroger W.},
publisher={CRC Press/Balkema},
isbn={9781138028791},
language={English},
abbrev_source_title={Saf. Reliab. Complex. Eng. syst. - Proc. Eur. Saf. Reliab. Conf.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Cui201532,
author={Cui, B. and Hou, T. and Long, B. and Xu, L.},
title={Bidirectional analysis method of static XSS defect detection technique based on database query language},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2015},
volume={9380},
pages={32-44},
doi={10.1007/978-3-662-49017-4_3},
note={cited By 0; Conference of 19th International Conference on Transactions on  Computational Collective Intelligence, TCCI 2015 ; Conference Date: 21 September 2015 Through 23 September 2015;  Conference Code:159289},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84952645484&doi=10.1007%2f978-3-662-49017-4_3&partnerID=40&md5=98875e10ad9ab44e87de2685222c6303},
affiliation={National Engineering Laboratory for Mobile Network Security, Beijing, China; School of Computer Science, Beijing University of Posts and Telecommunications, Beijing, China; Department of Computer Science, South China University of Technology, Guangzhou, China},
abstract={Along with the wide use of web application, XSS vulnerability has become one of the most common security problems and caused many serious losses. In this paper, on the basis of database query language technique, we put forward a static analysis method of XSS defect detection of Java web application by analyzing data flow reversely. This method first converts the JSP file to a Servlet file, and then uses the mock test method to generate calls for all Java code automatically for comprehensive analysis. We get the methods where XSS security defect may occur by big data analysis. Originated from the methods where XSS security defect may occur, we analyze the data flow and program semantic reversely to detect XSS defect by judging whether it can be introduced by user input without filter. Moreover, to trace the taint path and to improve the analysis precision, we put forward bidirectional analysis. Originated from the results of the reverse analysis, we analyze the data flow forward to trace the taint path. These two methods have effectively reduced analyzing tasks which are necessary in forward ways. It was proved by experiments on some open source Java web projects, bidirectional and reverse methods not only improved the efficiency of detection, but also improved the detection accuracy for XSS defect. © Springer-Verlag Berlin Heidelberg 2015.},
author_keywords={Bidirectional analysis;  JSP file;  Reverse analysis;  Static analysis;  Web application;  XSS defect},
keywords={Codes (symbols);  Computational linguistics;  Data flow analysis;  Data transfer;  Defects;  Java programming language;  Open source software;  Query languages;  Query processing;  Semantics;  Static analysis;  Testing;  Trace analysis;  World Wide Web, Bi-directional analysis;  Comprehensive analysis;  Database query language;  Detection accuracy;  JSP file;  Reverse analysis;  Static analysis method;  WEB application, Big data},
funding_details={61100047, 61170268, 61272493},
funding_text 1={This work was supported by National Natural Science? Foundation of China (No.61170268, 61100047, 61272493).},
references={Yawen, W., (2009) Defect model based software testing technology, , Beijing Univ. Posts Telecommun; Di Lucca, G.A., Fasolino, A.R., Mastoianni, M., Tramontana, P., Identifying cross site scripting vulnerabilities in Web applications (2004) 26th Annual International Telecommunications Energy Conference, pp. 71-80. , INTELEC 2004, 11 September; (2013) Open Web Application Security Project. Types of Cross-Site, , https://www-owasp-org.luisamigo.proxybk.com/index.php/TypesofCross-SiteScripting, October 2013 Scripting; Zhong Chenming, X.S., (2013) Web Front-endReveal Hacking Techniques, , Electronic Industry Press, Beijing; Martin, M., Lam, M.S., Automatic generation of XSS and SQL injection attacks with goal-directed model checking (2008) Proceedings of the 17th Conference on Security Symposium, pp. 31-43. , USENIX Association; Bisht, P., Venkatakrishnan, V.N., XSS-GUARD: Precise dynamic prevention of cross-site scripting attacks (2008) DIMVA 2008. LNCS, 5137, pp. 23-43. , Zamboni, D. (ed.),. Springer, Heidelberg; Fonseca, J., Vieira, M., Madeira, H., Testing and comparing Web vulnerability scanning tools for SQL injection and XSS attacks (2007) 13th Pacific Rim International Symposium on Dependable Computing, pp. 365-372. , 2007, PRDC 2007,. IEEE; Wurzinger, P., Platzer, C., Ludl, C., Kirda, E., Kruegel, C., SWAP: Mitigating XSS attacks using a reverse proxy (2009) Proceedings of the 2009 ICSE Workshop on Software Engineering for Secure Systems, pp. 33-39. , IEEE Computer Society; Klein, A., (2005) DOM based cross site scripting or XSS of the third kind, , Web Application Security Consortium, Articles, 4; Fonseca, J., Vieira, M., Madeira, H., Testing and comparing Web vulnerability scanning tools for SQL injection and XSS attacks (2007) 13th Pacific Rim International Symposium on Dependable Computing, pp. 365-372. , 2007, PRDC 2007,. IEEE; Paros, Y., (2006) Paros Proxy [DB/OL], , http://sourceforge-net.luisamigo.proxybk.com/projects/paros/; (2012) Mozilla. XSS-Me [DB/OL], , http://labs-securitycompass-com.luisamigo.proxybk.com/exploit-me/xss-me/; Vogt, P., Nentwich, F., Jovanovic, N., Kirda, E., Kruegel, C., Vigna, G., Cross Site scripting prevention with dynamic data tainting and static analysis (2007) NDSS; Wassermann, G., Su, Z., Static detection of cross-site scripting vulnerabilities (2008) ACM/IEEE 30th International Conference on Software Engineering, pp. 171-180. , 2008, ICSE 2008,. IEEE; Benjamin Livshits, V., Lam, M.S., Finding security vulnerabilities in java applications with static analysis (2005) USENLX Technology Symposiu; Kirkegaard, C., Møller, A., Static analysis for java servlets and JSP (2006) SAS 2006. LNCS, 4134, pp. 336-352. , Yi, K. (ed.),. Springer, Heidelberg; Chess, B., West, J., (2007) Secure Programming with Static Analysis, , Pearson Education, USA; Haviv, Y.A., Tripp, O., Weisman, O.U.S., (2014) Patent No. 8, 726, 245, , Washington, DC: U.S. Patent and Trademark Office; Whaley, J., Dzintars, A., Using datalog with binary decision diagrams for program analysis (2005) Third Asian Symposium; Whaley, J., Lam, M.S., Cloning-based context-sensitive pointer alias analysis using binary decision diagrams (2004) Proceedings of the ACM SIGPLAN 2004 Conference on Programming Language Design and Implementation, , (PLDI); Whaley, J., Lam, M.S., Cloning-based context-sensitive pointer alias analysis using binary decision diagrams (2004) ACM SIGPLAN Notices, 39 (6), pp. 131-144. , ACM; Tripp, O., Pistoia, M., Cousot, P., Cousot, R., Guarnieri, S., Andromeda: Accurate and scalable security analysis of web applications (2013) FASE 2013 (ETAPS 2013). LNCS, 7793, pp. 210-225. , Cortellessa, V., Varró, D. (eds.),. Springer, Heidelberg; Schneier, B., (2007) Applied Cryptography: Protocols, Algorithms, and Source Code, , Wiley, New York},
correspondence_address1={Cui, B.; National Engineering Laboratory for Mobile Network SecurityChina; email: cuibj@bupt.edu.cn},
editor={Nguyen N.T., Kowalczyk R., Xhafa F.},
sponsors={},
publisher={Springer Verlag},
issn={03029743},
isbn={9783662490167},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Ogidi20141549,
author={Ogidi, O.O. and Barendse, P.S. and Khan, M.A.},
title={Detection of static eccentricity faults in AFPM machine with asymmetric windings using vibration analysis},
journal={Proceedings - 2014 International Conference on Electrical Machines, ICEM 2014},
year={2014},
pages={1549-1554},
doi={10.1109/ICELMACH.2014.6960388},
art_number={6960388},
note={cited By 2; Conference of 21st International Conference on Electrical Machines, ICEM 2014 ; Conference Date: 2 September 2014 Through 5 September 2014;  Conference Code:109303},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84916213972&doi=10.1109%2fICELMACH.2014.6960388&partnerID=40&md5=57066bbb94c96695aeb45fbd01f29fe9},
affiliation={Department of Electrical Engineering, University of Cape Town, South Africa},
abstract={Vibration signature has been proposed for fault diagnosis in electrical machines but its efficacy is hinged on proper determination of vibrating frequencies. Thus, this paper explores the applicability and performance of using vibration analysis on axial flux permanent magnet (AFPM) machine with asymmetric windings under static eccentricity (SE). The test rig developed to accurately replicate the faults is described and the vibration induced by electromagnetic forces associated with SE is investigated. The more dominant frequency component affected by the fault is the 2nd harmonic of the magnetic force. The amplitude of the harmonic increased considerably with worsening SE. Along with other frequency components identified, it is proposed as an index for SE fault detection in AFPM machine. © 2014 IEEE.},
author_keywords={asymmetrical winding;  Axial flux permanent magnet machine;  frequency techniques;  harmonics;  magnetic forces;  static eccentricity;  vibration},
keywords={Electric machinery;  Fault detection;  Harmonic analysis;  Permanent magnets;  Winding, Axial-flux permanent magnet machines;  Frequency techniques;  harmonics;  Magnetic force;  Static eccentricities;  vibration, Vibration analysis},
references={Aydin, M., Huang, S., Lipo, T.A., Design, analysis and control of a hybrid field-controlled axial-flux permanent magnet motor (2010) IEEE Trans. Ind. Electron, 57 (1), pp. 78-87. , Jan; Kano, Y., Kosaka, T., Matsui, N., A simple nonlinear magnetic analysis for axial-flux permanent-magnet machines (2010) IEEE Trans. Ind. Electron., 57 (6), pp. 2124-2133. , Jun; Fei, W., Luk, P.C.K., El-Hasan, T.S., Rotor integrity design for a high-speed modular air-cored axial-flux permanent-magnet generator (2011) IEEE Trans. Ind. Electron., 58 (9), pp. 3848-3858. , Sep; Crescimbini, F., Lidozzi, A., Solero, L., High-speed generator and multilevel converter for energy recovery in automotive systems (2012) IEEE Trans. Ind. Electron., 59 (6), pp. 2678-2688. , Jun; Gerlando, D., Foglia, G., Iacchetti, M.F., Perini, R., Axial-flux PM machines with concentrated armature windings: Design analysis and test validation of wind energy generators (2011) IEEE Trans. Ind. Electron., 58 (9), pp. 3795-3805. , Sep; Nguyen, T.D., Tseng, K.-J., Zhang, S., Nguyen, H.T., A novel axial flux permanent-magnet machine for flywheel energy storage system: Design and analysis (2011) IEEE Trans. Ind. Electron., 58 (9), pp. 3784-3794. , Sep; Mbidi, D.N., Van Der Westhuizen, K., Wang, R., Kamper, M.J., Blom, J., Mechanical design considerations of a double stage axial-flux PM machine (2000) IEEE IAS Conf, 1, pp. 198-201; McDonald, A.S., Mueller, M.A., Polinder, H., Structural mass in direct-drive permanent magnet electrical generators (2008) IET Renew. Power Gener, 2 (1), pp. 3-15; Geiras, J.F., Wang, R.J., Kamper, M.J., (2004) Axial-flux Permanent Magnet Brushless Machines, , London: Kluwer academic publishers; Tavner, P., Ran, L., Penman, J., Sedding, H., Condition monitoring of rotating electrical machines (2008) IET Power and Energy Series, , London, UK; Zhu, W., Pekarek, S., Fahimi, B., Deken, B.J., Investigation of force generation in a permanent magnet synchronous machine (2007) IEEE Trans. Energy Convers., 22 (3), pp. 557-565. , Sep; Lisner, R., Timar, P.L., A new approach to electric motor acoustic noise standards and test procedures (1999) IEEE Trans. Energy Convers., 14 (3), pp. 692-697. , Sep; Jang, G.H., Lieu, D.K., Vibration reduction in electric machine by interlocking of the magnets (1993) IEEE Trans. Magn., 29 (2), pp. 1423-1426. , Mar; Tsypkin, M., Induction motor condition monitoring: Vibration analysis technique - A twice line frequency component as a diagnostic tool (2011) IEEE International Electric Machines & Drives Conference (IEMDC); Mirimani, S.M., Vahedi, A., Marignetti, F., Effect of inclined static eccentricity fault in single stator-single rotor axial flux permanent magnet machines (2012) IEEE Trans. Magn., 48 (1), pp. 143-149. , Jan; Geiras, J.F., Wing, M., (2002) Permanent Magnet Motor Technology, , design and applications, second edition, Marcel Dekker, Inc. New York; Vijayraghavan, P., Krishnan, R., Noise in electric machines (1999) IEEE Trans. Ind. Appl., 35 (5), pp. 1007-1014. , Sep; Magnussen, F., Lendenmann, H., Parasitic effects in pm machines with concentrated windings (2007) IEEE Transactions on Industry Applications, 43 (5). , Oct; Cros, J., Viarouge, P., Synthesis of high performance PM machines with concentrated windings (2002) IEEE Trans. Energy Convers, 17 (2), pp. 248-253. , Jun; Xia, P.Z., Zhu, Z.Q., Wu, L.J., Jewell, G.W., Comparison of radial and vibration forces in 10-pole/12-slot fractional-slot surface-mounted and interior pm brushless AC machines (2010) International Conference on Electrical Machines, , Italy, September; Mai, H.C.M., Bernard, R., Bigot, P., Dubas, F., Chamagne, D., Espanet, C., Consideration of radial magnetic forces in brushless dc motors (2010) International Conference on Electrical Machines and Systems (ICEMS), , Korea, October; Zhu, Z.Q., Xia, P.Z., Wu, L., Jewell, G.W., Influence of slot and pole number combination on radial force and vibration modes in fractional slot PM brushless machines having single- and double-layer windings (2009) IEEE Energy Conversion Congress and Exposition (ECCE), , USA, September; Wanjiku, J.G., Jagau, H., Khan, M.A., Barendse, P.S., Minimization of cogging torque in a small axial-flux PMSG with a parallel-teeth stator (2011) IEEE Energy Conversion Congress and Exposition; Valavi, M., Nysveen, A., Nilssen, R., Magnetic forces and vibration in permanent magnet machines with non-overlapping concentrated windings: A review (2012) IEEE International Conference on Industrial Technology (ICIT), , Athens, March; Valavi, M., Nysveen, A., Nilssen, R., Characterization of radial magnetic forces in low-speed permanent magnet wind generator with non-overlapping concentrated windings (2012) XXth International Conference on Electrical Machines, Marseille, , Sept; Ede, J.D., Atallah, K., Jewell, G.W., Wang, J., Howe, D., Effect of axial segmentation of permanent magnets on rotor loss in modular permanent-magnet brushless machines Proceedings of the IEE International Conference on Power Electronics, Machines and Drives, PEMD 2002, pp. 445-420. , University of Bath, the UK; Amara, Y., Jiabin, W., Howe, D., Analytical prediction of eddy-current loss in modular tubular permanent-magnet machines IEEE Transactions on Energy Conversion, 20 (4), pp. 761-770; Grabner, A., Analytical and numerical calculation of natural resonance frequencies in case of concentrated coil armature windings (2005) Canadian Conference on Electrical and Computer Engineering, , Saskatoon, Sask. May},
sponsors={Power Engineering Society withing VDI (ETG); The Institute of Electrical and Electronics Engineers (IEEE)},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781479943890},
language={English},
abbrev_source_title={Proc. - Int. Conf. Electr. Mach., ICEM},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Hanam2014152,
author={Hanam, Q. and Tan, L. and Holmes, R. and Lam, P.},
title={Finding patterns in static analysis alerts: Improving actionable alert ranking},
journal={11th Working Conference on Mining Software Repositories, MSR 2014 - Proceedings},
year={2014},
pages={152-161},
doi={10.1145/2597073.2597100},
note={cited By 31; Conference of 11th International Working Conference on Mining Software Repositories, MSR 2014 ; Conference Date: 31 May 2014 Through 1 June 2014;  Conference Code:112956},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84938807326&doi=10.1145%2f2597073.2597100&partnerID=40&md5=48e6518a154a51340c0b0502b0d1c560},
affiliation={University of Waterloo, 200 University Ave W, Waterloo, ON, Canada},
abstract={Static analysis (SA) tools that find bugs by inferring programmer beliefs (e.g., FindBugs) are commonplace in today's software industry. While they find a large number of actual defects, they are often plagued by high rates of alerts that a developer would not act on (unactionable alerts) because they are incorrect, do not significantly affect program execution, etc. High rates of unactionable alerts decrease the utility of static analysis tools in practice. We present a method for differentiating actionable and unactionable alerts by finding alerts with similar code patterns. To do so, we create a feature vector based on code characteristics at the site of each SA alert. With these feature vectors, we use machine learning techniques to build an actionable alert prediction model that is able to classify new SA alerts. We evaluate our technique on three subject programs using the FindBugs static analysis tool and the Faultbench benchmark methodology. For a developer inspecting the top 5% of all alerts for three sample projects, our approach is able to identify 57 of 211 actionable alerts, which is 38 more than the FindBugs priority measure. Combined with previous actionable alert identification techniques, our method finds 75 actionable alerts in the top 5%, which is four more actionable alerts (a 6% improvement) than previous actionable alert identification techniques. Copyright 2014 ACM.},
author_keywords={Alert classification;  Alert patterns;  Bug detection;  Machine learning;  Static analysis},
keywords={Learning systems;  Machine learning;  Pattern recognition;  Predictive analytics;  Program debugging;  Software engineering, Alert classification;  Alert patterns;  Bug detection;  Identification techniques;  Machine learning techniques;  Prediction model;  Program execution;  Software industry, Static analysis},
references={APACHE Software Foundation, The, (2014) Apache Commons, , http://commons-apache-org;.luisamigo.proxybk.com APACHE Software Foundation, The, (2014) Apache Log4J, , http://logging-apache-org.luisamigo.proxybk.com/log4j/1.2; APACHE Software Foundation, The, (2014) Apache Tomcat 6.0, , http://tomcat-apache-org.luisamigo.proxybk.com/tomcat-6.0-doc/index.html; APACHE Software Foundation, The, (2014) Open Source Tools, , http://tomcat-apache-org.luisamigo.proxybk.com/tools.html; Ayewah, N., Pugh, W., Morgenthaler, J.D., Penix, J., Zhou, Y., Evaluating static analysis defect warnings on production software (2007) Proceedings of the 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, pp. 1-8; Bessey, A., Block, K., Chelf, B., Chou, A., Fulton, B., Hallem, S., Henri-Gros, C., Engler, D., A few billion lines of code later: Using static analysis to find bugs in the real world (2010) Commun. ACM, 53 (2), pp. 66-75; Bodden, E., Lam, P., Hendren, L., Finding programming errors earlier by evaluating runtime monitors ahead-of-time (2008) Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 36-47; Chimdyalwar, B., Kumar, S., Effective false positive filtering for evolving software Proceedings of the 4th India Software Engineering Conference (2011), Pp. 103-106; Coverity, (2013) Who Uses coverity?, , http://www-coverity-com.luisamigo.proxybk.com/customers; ECLIPSE Foundation, The, (2013) Eclipse Java Development Tools (JDT), , http://www-eclipse-org.luisamigo.proxybk.com/jdt; Engler, D., Chen, D.Y., Hallem, S., Chou, A., Chelf, B., Bugs as deviant behavior: A general approach to inferring errors in systems code (2001) SIGOPS Oper. Syst. Rev, 35 (5), pp. 57-72; Findbugs, (2014) Data Mining of Bugs with FindBugs, , http://findbugs-sourceforge-net.luisamigo.proxybk.com/manual/datamining.html; Heckman, S., Williams, L., On establishing a benchmark for evaluating static analysis alert prioritization and classification techniques (2008) Proceedings of the Second ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, pp. 41-50; Heckman, S., Williams, L., A model building process for identifying actionable static analysis alerts (2009) Proceedings of the 2009 International Conference on Software Testing Verification and Validation, pp. 161-170; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Inf. Softw. Technol, 53 (4), pp. 363-387; Heckman, S., Williams, L., (2014) Faultbench, , http://www-realsearchgroup-org.luisamigo.proxybk.com/faultbench; Heckman, S., Williams, L., (2014) Faultbench v0.1, , http://www-realsearchgroup-org.luisamigo.proxybk.com/faultbench/parts/version_0.1/index_content.html; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) SIGPLAN Not, 39 (12), pp. 92-106; Johnson, B., Song, Y., Murphy-Hill, E., Bowdidge, R., Why don't software developers use static analysis tools to find bugs? (2013) Proceedings of the 2013 International Conference on Software Engineering, pp. 672-681; Lee, C.C., (2014) JavaNCSS - A Source Management Suite for Java, , http://www-kclee-de.luisamigo.proxybk.com/clemens/java/javancss; Roy, C., Cordy, J., Scenario-based comparison of clone detection techniques (2008) Program Comprehension, 2008. ICPC 2008. The 16th IEEE International Conference On, pp. 153-162; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proceedings of the 30th International Conference on Software Engineering, pp. 341-350; Sridharan, M., Fink, S.J., Bodik, R., Thin slicing (2007) Proceedings of the 2007 ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 112-122; The Eclipse Foundation, (2014) Eclipse, , http://www-eclipse-org;.luisamigo.proxybk.com The University of Waikato, (2013) Weka, , http://www-cs-waikato-ac-nz.luisamigo.proxybk.com/~ml/weka; University of Maryland, (2012) Findbugs, , http://findbugs-sourceforge-net;.luisamigo.proxybk.com University of Maryland, (2012) Findbugs Users, , http://findbugs-sourceforge-net.luisamigo.proxybk.com/users.html; WALA, (2013) Main Page, , http://wala-sourceforge-net.luisamigo.proxybk.com/wiki/index.php/Main_Page; Weiser, M., Program slicing (1981) Proceedings of the 5th International Conference on Software Engineering, pp. 439-449},
sponsors={ACM Special Interest Group on Software Engineering (SIGSOFT); IEEE Computer Society's Tech. Council on Software Engin. (TCSE)},
publisher={Association for Computing Machinery},
isbn={9781450328630},
language={English},
abbrev_source_title={Work. Conf. Min. Softw. Repos., MSR - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Zhang2014386,
author={Zhang, D.-L. and Jin, D.-H. and Gong, Y.-Z. and Wang, Q. and Dong, Y.-K. and Zhang, H.-L.},
title={Optimizing static analysis based on defect correlations},
journal={Ruan Jian Xue Bao/Journal of Software},
year={2014},
volume={25},
number={2},
pages={386-399},
doi={10.13328/j.cnki.jos.004538},
note={cited By 7},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84894770275&doi=10.13328%2fj.cnki.jos.004538&partnerID=40&md5=c9ff87f72be84c818527fa5a2b2c6946},
affiliation={State Key Laboratory of Networking and Switching Technology, Beijing University of Posts and Telecommunications, Beijing 100876, China},
abstract={Defect detection generally includes two stages: static analysis and defect inspection. A large number of defects reported may lead developers and managers to reject the use of static analysis tools as part of the development process due to the overhead of defect inspection. To help with the inspection tasks, this paper formally introduces defect correlation, a sound dependency relationship between defects. If the occurrence of one defect causes another defect to occur, the two defects are correlated. This paper presents a sound optimized method to static analysis that can classify the defects reported by static defect detection tool into different groups, in which all defects are false positives (true positives) if the dominant defect is false positives (true positives). The experimental results show a decrease of 22% the time inspecting all defects and the capability and flexibility of this method to detect defects of large, critical or embedded systems. © Copyright 2014, Institute of Software, the Chinese Academy of Sciences. All rights reserved.},
author_keywords={Abstract interpretation;  Defect correlation;  Optimizing;  State slicing;  Static analysis},
references={Bush, W.R., Pincus, J.D., Sielaff, D.J., A static analyzer for finding dynamic programming errors (2000) Software-Practice and Experience, 30 (7), pp. 775-802. , [doi:10.1002/(SICI)1097-024X(200006)30: 7<775::AID-SPE309>3.0.CO;2-H]; Das, M., Lerner, S., Seigle, M., ESP: Path-Sensitive program verification in polynomial time (2002) ACM SIGPLAN Notices, 37 (5), pp. 57-68. , [doi:10.1145/543552.512538]; Rice, H.G., Classes of recursively enumerable sets and their decision problems (1953) Trans. of the American Mathematical Society, 74 (2), pp. 358-366. , [doi:10.1090/S0002-9947-1953-0053041-6]; Le, W., Soffa, M.L., Path-Based fault correlations (2010) Proc. of the 18th ACM SIGSOFT Int'l Symp. on Foundations of Software Engineering, pp. 307-316. , ACM Press, [doi:10.1145/1882291.1882336]; Xiao, Q., Gong, Y.Z., Yang, Z.H., Jin, D.H., Wang, Y.W., Path sensitive static defect detecting method (2010) Ruan Jian Xue Bao/Journal of Software, 21 (2), pp. 209-217. , http://www-jos-org-cn.luisamigo.proxybk.com/1000-9825/3872.htm, (in Chinese with English abstract). [doi:10.3724/SP.J.1001.2010.03872]; Xiao, Q., Chen, J.L., Research on key technologies of improving the accuracy of static defect detecting (2011), [Ph.D. Thesis]. Beijing: Beijing University of Posts and Telecommunications, (in Chinese with English abstract); Zhao, Y.S., Gong, Y.Z., Research on symbolic analysis based static defect detection technique (2012), Ph.D. Thesis]. Beijing: Beijing University of Posts and Telecommunications, (in Chinese with English abstract); Cousot, P., Cousot, R., Abstract interpretation frameworks (1992) Journal of Logic and Computation, 2 (4), pp. 511-547. , [doi:10.1093/logcom/2.4.511]; Cousot, P., Cousot, R., Abstract interpretation: A unified lattice model for static analysis of programs by construction or approximation of fixpoints (1977) Proc. of the 4th ACM SIGACT-SIGPLAN Symp. on Principles of Programming Languages, pp. 238-252. , ACM Press, [doi:10.1145/512950.512973]; Cousot, P., Cousot, R., Static determination of dynamic properties of generalized type unions (1977) ACM SIGOPS Operating Systems Review, 11 (2), pp. 77-94. , [doi:10.1145/390018.808314]; Wang, Y.W., Chen, J.L., Research on software testing technology based on defect pattern (2009), [Ph.D. Thesis]. Beijing: Beijing University of Posts and Telecommunications, (in Chinese with English abstract); Zhao, Y., Gong, Y., Liu, L., Xiao, Q., Yang, Z., Context-Sensitive interprocedural defect detection based on a unified symbolic procedure summary model (2011) Proc. of the 2011 11th Int'l Conf. on Quality Software (QSIC), pp. 51-60. , IEEE, [doi:10.1109/QSIC.2011.15]; Dillig, I., Dillig, T., Aiken, A., Automated error diagnosis using abductive inference (2012) ACM SIGPLAN Notices, 47 (6), pp. 181-192. , [doi:10.1145/2254064.2254087]; Rival, X., Understanding the origin of alarms in Astrée (2005) Proc of the 12th Int'l Conf. on Static Analysis, pp. 303-319. , London: Springer-Verlag, [doi:10.1007/11547662_21]; Manevich, R., Sridharan, M., Adams, S., Das, S., Yang, Z., PSE: explaining program failures via postmortem static analysis (2004) ACM SIGSOFT Software Engineering Notes, 29 (6), pp. 63-72. , [doi:10.1145/1029894.1029907]; Lee, W., Lee, W., Yi, K., Sound non-statistical clustering of static analysis alarms (2012) Proc. of the Verification, Model Checking, and Abstract Interpretation, pp. 299-314. , Berlin, Heidelberg: Springer-Verlag, [doi:10.1007/978-3-642-27940-9_20]; Zhao, Y., Wang, Y., Gong, Y., Chen, H., Xiao, Q., Yang, Z., STVL: Improve the precision of static defect detection with symbolic three-valued logic (2011) Proc. of the 2011 18th Asia Pacific Software Engineering Conf. (APSEC), pp. 179-186. , IEEE, [doi:10.1109/A PSEC.2011.23]; Zhou, H., Wang, Q., Jin, D., Gong, Y., A Static detecting model for invalid arithmetic operation based on alias analysis (2012) Proc. of the 2012 IEEE 23rd Int'l Symp. on Software Reliability Engineering Workshops (ISSREW), pp. 183-188. , IEEE, [doi:10.1109/ISS REW.2012.14]},
correspondence_address1={Zhang, D.-L.; State Key Laboratory of Networking and Switching Technology, , Beijing 100876, China; email: dalin@bupt.edu.cn},
issn={10009825},
coden={RUXUE},
language={Chinese},
abbrev_source_title={Ruan Jian Xue Bao},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Baojiang2014487,
author={Baojiang, C. and Baolian, L. and Tingting, H.},
title={Reverse analysis method of static XSS defect detection technique based on database query language},
journal={Proceedings - 2014 9th International Conference on P2P, Parallel, Grid, Cloud and Internet Computing, 3PGCIC 2014},
year={2014},
pages={487-491},
doi={10.1109/3PGCIC.2014.99},
art_number={7024633},
note={cited By 2; Conference of 9th International Conference on P2P, Parallel, Grid, Cloud and Internet Computing, 3PGCIC 2014 ; Conference Date: 8 November 2014 Through 10 November 2014;  Conference Code:110463},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84946691334&doi=10.1109%2f3PGCIC.2014.99&partnerID=40&md5=c83bb065008ab01df94f3436f126ee0c},
affiliation={School of Computer, National Engineering Laboratory for Mobile Network Security, Beijing University of Posts and Telecommunications, Beijing, China},
abstract={Along with the wide use of web application, XSS vulnerability has become one of the most common security problems and caused many serious losses. In this paper, on the basis of database query language technique, we put forward a static analysis method of XSS defect detection of java web application by analyzing data flow reversely. This method first converts the JSP file to a Servlet file, and then uses the mock test method to generate calls for all Java code automatically for comprehensive analysis. Originated from the methods where XSS security defect may occur, we analyze the data flow reversely to detect XSS defect by judging whether it can be introduced by user input without filter. This reverse method has effectively reduced analyzing tasks which are necessary in forward ways. It was proved by experiments on artificially constructed Java web project with XSS flaws and some open source Java web projects, this method not only improved the efficiency of detection, but also improved the detection accuracy for XSS defect. © 2014 IEEE.},
author_keywords={JSP file;  reverse analysis;  static analysis;  web application;  XSS defect},
keywords={Computational linguistics;  Data flow analysis;  Data transfer;  Distributed computer systems;  Java programming language;  Mobile security;  Open source software;  Query languages;  Query processing;  Social networking (online);  Static analysis;  Testing;  World Wide Web, Comprehensive analysis;  Database query language;  Detection accuracy;  JSP file;  Reverse analysis;  Security problems;  Static analysis method;  WEB application, Defects},
funding_details={61100047, 61170268, 61272493},
references={Di Lucca, G.A., Fasolino, A.R., Mastoianni, M., Tramontana, P., Identifying cross site scripting vulnerabilities in web applications (2004) Telecommunications Energy Conference, 2004. INTELEC 2004. 26th Annual International, pp. 71-80. , 11 Sept; (2013) Open Web Application Security Project. Types of Cross-Site, , https://www-owasp-org.luisamigo.proxybk.com/index.php/Types_of_Cross-Site_Scripting, October Scripting; Xu Shaopei, Z.C., (2013) Web Front-end-Reveal Hacking Techniques [M], , Beijing: Electronic Industry Press; Ming, G., (2007) Software Security Vulnerability Detection Technology Based on Program Analysis [D], , Northwestern Polytechnical University; Yawen, W., (2009) Defect Model Based Software Testing Technology [D], , Beijing University of Posts and Telecommunications; Paros, Y., (2006) Paros Proxy, , http://sourceforge-net.luisamigo.proxybk.com/projects/paros/, [DB/OL]; (2012) Mozilla, , http://labs-securitycompass-com.luisamigo.proxybk.com/exploitme/xss-me/, XSS-Me [DB/OL]; Whaley, J., Dzintars avots and so on (2005) Using Datalog with Binary Decision Diagrams for Program Analysis, , Third Asian Symposium; Benjamin Livshits, V., Lam, M.S., Finding security vulnerabilities in java applications with static analysis (2005) USENLX Technology Symposium; Whaley, J., Lam, M.S., Cloning-based context-sensitive pointer alias analysis using binary decision diagrams (2004) Proceedings of the ACM SIGPLAN 2004 Conference on Programming Language Design and Implementation (PLDI)},
editor={Barolli L., Li J., Ogiela M.R., Xhafa F., Yoshihisa T.},
sponsors={},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781479941711},
language={English},
abbrev_source_title={Proc. - Int. Conf. PP, Parallel, Grid, Cloud Internet Comput., PGCIC},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Chen2014388,
author={Chen, C.Q. and Mai, Z.H. and Ang, G.B. and Liu, B.H. and Ng, P.T. and Yip, K.H. and Khalid, D. and Lam, J.},
title={Static fault isolation on the functional failure analysis},
journal={Conference Proceedings from the International Symposium for Testing and Failure Analysis},
year={2014},
volume={2014-January},
number={January},
pages={388-390},
note={cited By 0; Conference of 40th International Symposium for Testing and Failure Analysis, ISTFA 2014 ; Conference Date: 9 November 2014 Through 13 November 2014;  Conference Code:112467},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84932190282&partnerID=40&md5=263a24db1476507daeff35e4db734104},
affiliation={Failure Analysis, Product Failure Analysis Product, Test and Failure Analysis Dept. (PTF Singapore), Globalfoundries Singapore Pte., Ltd., Singapore},
abstract={As the technology keeps scaling down and IC design becomes more and more complex, failure analysis becomes much more challenging, especially for static fault isolation. For semiconductor foundry FA, it will become even more challenging due to lack of enough information. Static fault Eolation is the major global fault Eolation methodology in foundry FA and it is difficult to access and trigger the failing signal detected by scan and BIST test, which is widely applied in modem IC design. Because, in most of the time, the normal two pin bias (Vdd and Vss) can only get the comparable IV result between bad unit and the reference unit for function related fail. There are two possibilities from reverse engineering perspective. Firstly, the defect location may not be accessed by the DC bias. Secondly, even if the defect can be accessed, but the defect induced current or voltage change is too small to be differentiated from the overall signal. So it will be concealed in the overall current. However, it is still possible for us to do gbbal fault isolation for the second situation. In this paper, a unit with Iddoff failure was analyzed. Although, no significant IV difference was observed between failed and reference units, a distinct Photon Emission (EMMI) spot was successfully observed in the failed unit. Layout analysis and process analysis on this EMMI spot further confirmed the reality of the emission spot. Copyright © 2014 ASM International® All rights reserved.},
keywords={Defects;  Foundries;  Integrated circuit design;  Reverse engineering, Defect location;  Engineering perspective;  Fault isolation;  Functional failure analysis;  Layout analysis;  Photon emissions;  Process analysis;  Semiconductor foundries, Failure analysis},
references={Ross, R.J., (2011) Microelectronics Failure Analysis, pp. 279-397. , October; Wagner, L.C., (1999) Failure Analysis of Integrated Circuit-Tool and Techniques, pp. 87-113},
sponsors={},
publisher={ASM International},
language={English},
abbrev_source_title={Conf. Proc. Int. Symp. Test. Failure Anal.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Borodin2014231,
author={Borodin, A.},
title={Summary based static analysis for practical search for defects in C programs and libraries},
journal={Proceedings - IEEE 7th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2014},
year={2014},
pages={231-232},
doi={10.1109/ICSTW.2014.60},
art_number={6825663},
note={cited By 2; Conference of 7th IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2014 ; Conference Date: 31 March 2014 Through 4 April 2014;  Conference Code:105862},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84903604321&doi=10.1109%2fICSTW.2014.60&partnerID=40&md5=517fe28ad32a5c09f300b5540c852a3e},
affiliation={Institute for System Programming, Russian Academy of Sciences, Moscow, Russian Federation},
abstract={This paper considers an algorithm for scalable automatic static analysis to detect defects in programs written in C. We propose a criterion for emitting warnings based on reach ability of function statements. Main advantages of the proposed approach are scalability, high true positive rate and ability to perform library analysis. © 2014 IEEE.},
author_keywords={backward analysis;  bug-finding;  static analysis;  summary-based analysis},
keywords={Algorithms;  C (programming language);  Defects;  Software testing, Automatic static analysis;  Backward analysis;  bug-finding;  C programs;  summary-based analysis;  True positive rates, Static analysis},
references={Kremenek, T., Engler, D., Z-ranking: Using statistical analysis to counter the impact of static analysis approximations (2003) Static Analysis, pp. 295-315. , Springer Berlin Heidelberg; Dillig, I., Dillig, T., Aiken, A., Static error detection using semantic inconsistency inference (2007) ACM SIGPLAN Notices, 42 (6). , ACM; Livshits, V.B., Lam, M.S., Tracking pointers with path and context sensitivity for bug detection in C programs (2003) ACM SIGSOFT Software Engineering Notes, 28 (5). , ACM; Aho, A.V., Lam, M.S., Sethi, R., Ullman, J.D., (2007) Compilers: Principles, Techniques, & Tools with Gradiance},
correspondence_address1={Borodin, A.; Institute for System Programming, Russian Academy of Sciences, Moscow, Russian Federation; email: alexey.borodin@ispas.ru},
sponsors={Institut Mines-Telecom; INTER-TRUST - FP7; SPaCIoS European Project; TU Munich},
publisher={IEEE Computer Society},
address={Cleveland, OH},
isbn={9780769551944},
language={English},
abbrev_source_title={Proc. - IEEE Int. Conf. Softw. Test., Verif. Valid. Workshops, ICSTW},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Fry2013282,
author={Fry, Z.P. and Weimer, W.},
title={Clustering static analysis defect reports to reduce maintenance costs},
journal={Proceedings - Working Conference on Reverse Engineering, WCRE},
year={2013},
pages={282-291},
doi={10.1109/WCRE.2013.6671303},
art_number={06671303},
note={cited By 12; Conference of 20th Working Conference on Reverse Engineering, WCRE 2013 ; Conference Date: 14 October 2013 Through 17 October 2013;  Conference Code:102314},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84893395252&doi=10.1109%2fWCRE.2013.6671303&partnerID=40&md5=873ca5bf98f56f55b5dc9e5b82f4a3ff},
affiliation={Weimer University of Virginia, Charlottesville VA, United States},
abstract={Static analysis tools facilitate software maintenance by automatically identifying bugs in source code. However, for large systems, these tools often produce an overwhelming number of defect reports. Many of these defect reports are conceptually similar, but addressing each report separately costs developer effort and increases the maintenance burden. We propose to automatically cluster machine-generated defect reports so that similar bugs can be triaged and potentially fixed in aggregate. Our approach leverages both syntactic and structural information available in static bug reports to accurately cluster related reports, thus expediting the maintenance process. We evaluate our technique using 8,948 defect reports produced by the Coverity Static Analysis and FindBugs tools in both C and Java programs totaling over 14 million lines of code. We find that humans overwhelmingly agree that clusters of defect reports produced by our tool could be handled aggregately, thus reducing developer maintenance effort. Additionally, we show that our tool is not only capable of perfectly accurate clusters, but can also significantly reduce the number of defect reports that have to be manually examined by developers. For instance, at a level of 90% accuracy, our technique can reduce the number of individually inspected defect reports by 21.33% while other multi-language tools fail to obtain more than a 2% reduction. © 2013 IEEE.},
keywords={Defect reports;  Developer efforts;  Java program;  Lines of code;  Maintenance cost;  Maintenance efforts;  Maintenance process;  Structural information, Aggregates;  C (programming language);  Computer software;  Defects;  Java programming language;  Maintenance;  Program debugging;  Reverse engineering;  Tools, Static analysis},
references={Ballou, M.C., Improving software quality to drive business agility (2008) White Paper, International Data Corporation, , June; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) Companion to the Conference on Object-oriented Programming Systems, Languages, and Applications, pp. 132-136; Nethercote, N., Seward, J., Valgrind: A framework for heavyweight dynamic binary instrumentation (2007) Programming Language Design and Implementation, pp. 89-100; Ball, T., Rajamani, S.K., The slam project: Debugging system software via static analysis (2002) Principles of Programming Languages, pp. 1-3; Liblit, B., Aiken, A., Zheng, A.X., Jordan, M.I., Bug isolation via remote program sampling (2003) Programming Language Design and Implementation, pp. 141-154; Bessey, A., Block, K., Chelf, B., Chou, A., Fulton, B., Hallem, S., Henri-Gros, C., Engler, D.R., A few billion lines of code later: Using static analysis to find bugs in the real world (2010) Communications of the ACM, 53 (2), pp. 66-75; Ayewah, N., Pugh, W., Morgenthaler, J.D., Penix, J., Zhou, Y., Evaluating static analysis defect warnings on production software (2007) Program Analysis for Software Tools and Engineering, pp. 1-8; Vetro, A., Torchiano, M., Morisio, M., Assessing the precision of findbugs by mining java projects developed at a university (2010) Mining Software Repositories, pp. 110-113; Jalbert, N., Weimer, W., Automated duplicate detection for bug tracking systems (2008) International Conference on Dependable Systems and Networks, pp. 52-61; Wang, X., Zhang, L., Xie, T., Anvik, J., Sun, J., An approach to detecting duplicate bug reports using natural language and execution information (2008) International Conference on Software Engineering, pp. 461-470; Sun, C., Lo, D., Wang, X., Jiang, J., Khoo, S.C., A discriminative model approach for accurate duplicate bug report retrieval (2010) International Conference on Software Engineering, pp. 45-54. , ACM; Engler, D.R., Chen, D.Y., Chou, A., Bugs as inconsistent behavior: A general approach to inferring errors in systems code (2001) Symposium on Operating Systems Principles; (2011) ConQAT: Conqat, , https://www-conqat-org.luisamigo.proxybk.com/; (2012) PMD: Pmd, , http://pmd-sourceforge-net.luisamigo.proxybk.com/pmd-5.0.0/; (2011) Checkstyle: Checkstyle, , http://checkstyle-sourceforge-net.luisamigo.proxybk.com/; Beyer, D., Henzinger, T.A., Jhala, R., Majumdar, R., The software model checker Blast: Applications to software engineering (2007) International Journal on Software Tools for Technology Transfer, 9 (5), pp. 505-525. , October; Levenshtein, V., Binary codes capable of correcting deletions (1966) Insertions and Reversals. Soviet Physics Doklady, 10, p. 707; Jones, K.S., A statistical interpretation of term specificity and its application in retrieval (1972) Journal of Documentation, 28, pp. 11-21; Sipser, M., (1997) Introduction to the Theory of Computation, , Second edition; Wei, C., Premraj, R., Zimmermann, T., Zeller, A., How long will it take to fix this bug? (2007) Workshop on Mining Software Repositories, , May; Kremenek, T., Ashcraft, K., Yang, J., Engler, D., Correlation exploitation in error ranking (2004) Foundations of Software Engineering, pp. 83-93; Kononenko, I., (1994) Estimating Attributes: Analysis and Extensions of Relief, pp. 171-182. , Bergadano, F., Raedt, L.D., eds.: European Conference on Machine Learning Springer; Robnik-Sikonja, M., Kononenko, I., (1997) An Adaptation of Relief for Attribute Estimation in Regression, pp. 296-304. , Fisher, D.H., ed.: Fourteenth International Conference on Machine Learning, Morgan Kaufmann; Randolph, J.J., Free-marginal multirater kappa (multirater free): An alternative to fleiss fixed-marginal multirater kappa (2005) Joensuu Learning and Instruction Symposium; Thung, F., Lo, D., Jiang, L., Automatic defect categorization (2012) Working Conference on Reverse Engineering, pp. 205-214; Bettenburg, N., Premraj, R., Zimmermann, T., Kim, S., Duplicate bug reports considered harmful really? (2008) International Conference on Software Maintenance, pp. 337-345; Juergens, E., Deissenboeck, F., Hummel, B., Wagner, S., Do code clones matter? (2009) International Conference on Software Engineering, pp. 485-495; Anvik, J., Hiew, L., Murphy, G.C., Who should fix this bug? (2006) International Conference on Software Engineering, pp. 361-370},
correspondence_address1={Weimer University of Virginia, Charlottesville VA, United States},
sponsors={The Reengineering Forum; Technical Council on Software Engineering (TCSE)},
address={Koblenz},
issn={10951350},
isbn={9781479929313},
language={English},
abbrev_source_title={Proc. Working Conf. Rev. Eng. WCRE},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Yüksel2013532,
author={Yüksel, U. and Sözer, H.},
title={Automated classification of static code analysis alerts: A case study},
journal={IEEE International Conference on Software Maintenance, ICSM},
year={2013},
pages={532-535},
doi={10.1109/ICSM.2013.89},
art_number={6676950},
note={cited By 22; Conference of 29th IEEE International Conference on Software Maintenance, ICSM 2013 ; Conference Date: 22 September 2013 Through 28 September 2013;  Conference Code:101824},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84891711063&doi=10.1109%2fICSM.2013.89&partnerID=40&md5=581904ac33e2506cea604b6817078378},
affiliation={Vestel Electronics, Manisa, Turkey; Özyeǧin University, Itanbul, Turkey},
abstract={Static code analysis tools automatically generate alerts for potential software faults that can lead to failures. However, developers are usually exposed to a large number of alerts. Moreover, some of these alerts are subject to false positives and there is a lack of resources to inspect all the alerts manually. To address this problem, numerous approaches have been proposed for automatically ranking or classifying the alerts based on their likelihood of reporting a critical fault. One of the promising approaches is the application of machine learning techniques to classify alerts based on a set of artifact characteristics. In this work, we evaluate this approach in the context of an industrial case study to classify the alerts generated for a digital TV software. First, we created a benchmark based on this code base by manually analyzing thousands of alerts. Then, we evaluated 34 machine learning algorithms using 10 different artifact characteristics and identified characteristics that have a significant impact. We obtained promising results with respect to the precision of classification. © 2013 IEEE.},
author_keywords={Alert classification;  Industrial case study;  Static code analysis},
keywords={Alert classification;  Automated classification;  False positive;  Industrial case study;  Machine learning techniques;  Software fault;  Static code analysis;  Static code analysis tools, Digital television;  Industrial applications;  Learning algorithms;  Learning systems, Computer software maintenance},
references={Tischer, R., Schaufler, R., Payne, C., Static analysis of programs as an aid for debugging (1983) SIGPLAN Notices, 18 (8), pp. 155-158; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Information and Software Technology, 53 (4), pp. 363-387; Kremenek, T., Engler, D., Z-ranking: Using statistical analysis to counter the impact of static analysis approximations (2003) Proceedings of the 10th International Conference on Static Analysis, pp. 295-315; (2009) Effective Management of Static Analysis Vulnerabilities and Defects, , White Paper, Coverity Inc; Heckman, S.S., Adaptively ranking alerts generated from automated static analysis (2007) Crossroads, 14 (1), pp. 7-11. , Dec; Heckman, S.S., (2009) A Systematic Model Building Process for Predicting Actionable Static Analysis Alerts, , Ph.D., North Carolina State University, United States-North Carolina; Kim, S., Ernst, M.D., Prioritizing warning categories by analyzing software history (2007) Proceedings of the Fourth International Workshop on Mining Software Repositories, p. 27. , ser. MSR '07. Washington, DC, USA: IEEE Computer Society; Kim, S., Ernst, M.D., Which warnings should i fix first? (2007) Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, p. 4554. , ser. ESEC-FSE '07. New York, NY, USA: ACM; Liang, G., Wu, L., Wu, Q., Wang, Q., Xie, T., Mei, H., Automatic construction of an effective training set for prioritizing static analysis warnings (2010) Proceedings of the IEEE/ACM International Conference on Automated Software Engineering, p. 93102. , ser. ASE '10. New York, NY, USA: ACM; Allier, S., Anquetil, N., Hora, A., Ducasse, S., A framework to compare alert ranking algorithms (2012) 2012 19th Working Conference on Reverse Engineering (WCRE), pp. 277-285. , Oct; Hall, M., Frank, E., Holmes, G., Pfahringer, B., Reutemann, P., Witten, I.H., The WEKA data mining software: An update (2009) SIGKDD Explor. Newsl, 11 (1), pp. 10-18. , Nov; Yi, K., Choi, H., Kim, J., Kim, Y., An empirical study on classification methods for alarms from a bug-finding static C analyzer (2007) Information Processing Letters, 102 (23), pp. 118-123; Witten, I.H., Frank, E., Hall, M.A., (2011) Data Mining: Practical Machine Learning Tools and Techniques, Third Edition, , 3rd ed. Morgan Kaufmann, Jan; Hall, M.A., Frank, E., (2008) Combining Naive Bayes and Decision Tables, pp. 318-319. , Florida, USA; Zheng, J., Williams, L., Nagappan, N., Snipes, W., Hudepohl, J., Vouk, M., On the value of static analysis for fault detection in software (2006) IEEE Transactions on Software Engineering, 32 (4), pp. 240-253. , Apr; Boogerd, C., Moonen, L., Assessing the value of coding standards: An empirical study (2008) IEEE International Conference on Software Maintenance, 2008. ICSM 2008, pp. 277-286. , Oct; Heckman, S., Williams, L., On establishing a benchmark for evaluating static analysis alert prioritization and classification techniques (2008) Proceedings of the Second ACM-IEEE International Symposium on Empirical Software Engineering and Measurement, p. 4150. , ser. ESEM '08. New York, NY, USA: ACM},
correspondence_address1={Vestel Electronics, Manisa, Turkey},
sponsors={IEEE Computer Society; Technical Council on Software Engineering; IEEE},
address={Eindhoven},
language={English},
abbrev_source_title={IEEE Int. Conf. Softw. Maint. ICSM},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Ni2013846,
author={Ni, J. and Tang, W. and Xing, Y.},
title={A simple algebra for fault tree analysis of static and dynamic systems},
journal={IEEE Transactions on Reliability},
year={2013},
volume={62},
number={4},
pages={846-861},
doi={10.1109/TR.2013.2285035},
art_number={6632939},
note={cited By 26},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84890433632&doi=10.1109%2fTR.2013.2285035&partnerID=40&md5=d684c06f1a280b16a6a93824c54e6a25},
affiliation={School of Mechanical Engineering, Jiulong Lake Campus, Southeast University, Nanjing 211189, China},
abstract={We present an algebra with the purpose to efficiently simplify the fault tree structure representing static or dynamic systems, and reduce the repeated events inside. We consider logical unions made up by events as variables. Each variable is represented by an array: 1) it has three elements; 2) each element is a set; 3) the first set contains the Boolean state for this variable; 4) the second set contains the state timing; 5) the last set contains the probability at the starting moment for beginning in states from normal to failure; and 6) the Boolean state represents the variable value. The variable array interprets the logical union with two variables as the temporal or mixed operation using four operators: sequence, simultaneity, disjunction, and AND operators. The algebra generates theorems including the priority, idempotent, commutativity, associativity, absorptivity, and distributivity. The relation between the theorems and the fault tree analysis is then represented, which is propitious to the efficient determination of minimal cut sets, and the accurate analytic solution of top event unreliability. Finally, several examples are used to show its usage in the qualitative and quantitative analysis. Compared to related works, results suggest the algebra has advantages in concise expression of the fault trees, and efficient reduction of the Boolean functions, warranting further analysis. © 1963-2012 IEEE.},
author_keywords={Algebra;  Analytic solution;  Boolean;  Fault tree;  Minimal cut set;  Temporal order},
keywords={Analytic solution;  Boolean;  Fault-trees;  Minimal cutsets;  Temporal order, Boolean functions;  Fault tree analysis;  Trees (mathematics), Algebra},
references={Vesely, W.E., A time dependent methodology for fault tree evaluation (1970) Nucl. Eng. des, 13, pp. 337-360; Anand, A., Somani, A.K., Hierarchical analysis of fault treeswith dependencies, using decomposition (1998) Proc. Annu. Rel. Maintainability Symp, pp. 69-75; Bryant, R.E., Graph-based algorithms for Boolean function manipulation (1986) IEEE Trans. Comput, 35, pp. 667-691; Bryant, R.E., Symbolic Boolean Operation with Ordered Binary-Decision Diagrams (1992) ACM Comput. Surveys, 24 (3), pp. 293-318; Rauzy, A., New algorithms for fault tree analysis (1993) Rel. Eng. Syst. Safety, 40, pp. 203-221; Andrews, J.D., Dunnett, S.J., Event-tree analysis using binary decision diagrams (2000) IEEE Transactions on Reliability, 49 (2), pp. 230-238. , DOI 10.1109/24.877343; Way, Y.S., Hsia, D.Y., A simple component-connection method for building binary decision diagrams encoding a fault tree (2000) Rel. Eng. Syst. Safety, 70 (1), pp. 59-70; Remenyte-Prescott, R., Andrews, J.D., An enhanced component connection method for conversion of fault trees to binary decision diagrams (2008) Reliability Engineering and System Safety, 93 (10), pp. 1543-1550. , DOI 10.1016/j.ress.2007.09.001, PII S0951832007002232; Bartlett, L.M., Andrews, J.D., Comparison of two new approaches to variable ordering for binary decision diagrams (2001) Quality and Reliability Engineering International, 17 (3), pp. 151-158. , DOI 10.1002/qre.406; Bartlett, L.M., Andrews, J.D., Ordering heuristic to develop the binary decision diagram based on structural importance (2001) Reliability Engineering and System Safety, 72 (1), pp. 31-38. , DOI 10.1016/S0951-8320(00)00103-4; Bartlett, L.M., Andrews, J.D., Choosing a heuristic for the "fault tree to binary decision diagram" conversion, using neural networks (2002) IEEE Trans. Rel, 51 (3), pp. 324-326. , Se; Reay, K.A., Andrews, J.D., A fault tree analysis strategy using binary decision diagrams (2002) Reliability Engineering and System Safety, 78 (1), pp. 45-56. , DOI 10.1016/S0951-8320(02)00107-2, PII S0951832002001072; Dugan, J.B., Bavuso, S.J., Boyd, M.A., Dynamic fault-tree models for fault-tolerant computer systems (1992) IEEE Trans. Rel, 41 (3), pp. 363-377. , Se; Boudali, H., Dugan, J.B., A discrete-time Bayesian network reliability modeling and analysis framework (2005) Rel. Eng. Syst. Safety, 87 (3), pp. 337-349; Brown, B.D., Card, H.C., Stochastic neural computation I: Computational elements (2001) IEEE Transactions on Computers, 50 (9), pp. 891-905. , DOI 10.1109/12.954505; Tang, Z., Dugan, J.B., Minimal cut set/sequence generation for dynamic fault trees (2004) Proc. IEEE Annu. Rel. Maintainability Symp, pp. 207-213. , Los Angeles, CA, USA; Qian, W., Riedel, M.D., Bazargan, K., Lilja, D.J., The synthesis of combinational logic to generate probabilities (2009) Proc. 2009 Int. Conf. Comput. Aided Design (ICCAD'09), pp. 367-374. , Nov; Aliee, H., Zarandi, H.R., A fast and accurate fault tree analysis based on stochastic logic implemented on field-programmable gate arrays (2013) IEEE Trans. Rel, 62 (1), pp. 13-22. , Mar; Aliee, H., Zarandi, H.R., Fault tree analysis using stochastic logic: A reliable and high speed computing (2011) Proc. Annu. Rel. Maintainability Symp. (RAMS'11), pp. 1-6. , USA, Jan; Ejlali, A., Miremadi, S.G., FPGA-based Monte Carlo simulation for fault tree analysis (2004) Microelectron. Rel, 44 (6), pp. 1017-1028. , Jun; Liu, D., Zhang, C., Xing, W., Li, R., Li, H., Quantification of cut sequence set for fault tree analysis (2007) Proc. HPCC, 4782, pp. 755-765. , Lecture Notes in Computer Science; Merle, G., Roussel, J.M., Lesage, J.J., (2008) Algebraic Framework for the Modelling of Priority Dynamic Fault Trees, , http://www-lurpa-ens-cachan-fr.luisamigo.proxybk.com/isa/aadft/documents/LURPA-2008-Framework. pdf, [Online], Internal report; Merle, G., Roussel, J.M., Lesage, J.J., Bobbio, A., Probabilistic algebraic analysis of fault trees with priority gates and repeated events (2010) IEEE Trans. Rel, 59 (1), pp. 250-261. , Mar; Merle, G., Roussel, J.M., Lesage, J.J., Algebraic determination of the structure function of Dynamic Fault Trees (2011) Rel. Eng. Syst. Safety, 96 (2), pp. 267-277; Rauzy, A., Sequence algebra, sequence decision diagrams and dynamic fault trees (2011) Rel. Eng. Syst. Safety, 96 (7), pp. 785-792; Xing, L., Dai, Y., A new decision diagram based method for efficient analysis onmulti-state systems (2009) IEEE Trans. Dependable Secure Comput, 6 (3), pp. 161-174. , Jul-Se; Shrestha, A., Xing, L., Coit, D.W., An efficient multistate multivalued decision diagram-based approach for multistate system sensitivity analysis (2010) IEEE Trans. Rel, 59 (3), pp. 581-592. , Se; Reed, S., Andrews, J.D., Dunnett, S.J., Improved efficiency in the analysis of phased mission systems with multiple failure mode components (2011) IEEE Trans. Rel, 60 (1), pp. 70-79. , Mar; Ulmeanu, A.P., Analytical method to determine uncertainty propagation in fault trees by means of binary decision diagrams (2012) IEEE Trans. Rel, 61 (1), pp. 70-79. , Mar; Xing, L., Tannous, O., Dugan, J.B., Reliability Analysis of Non repairable Cold-Standby Systems Using Sequential Binary Decision Diagrams (2012) IEEE Trans. Syst., Man, Cybern. A, Syst Humans, 42 (3), pp. 715-726. , Mar; Dujmovic, J.J., Larsen, H.L., Generalized conjunction/disjunction (2007) International Journal of Approximate Reasoning, 46 (3), pp. 423-446. , DOI 10.1016/j.ijar.2006.12.011, PII S0888613X07000035; Xing, L., Dugan, J.B., Morrissette, B.A., Efficient analysis of imperfect coverage systems with functional dependence (2010) Proc. 56th Annu. Rel. Maintainability Symp, pp. 1-6. , San Jose, CA, Jan. 25-28; Trivedi, K., (2001) Probability & Statistics with Reliability Queueing & Computer Science Applications, , 2nd Ed. Hoboken NJ USA: Wiley; Amari, S., Dill, G., Howals, E., A new approach to solve dynamic fault-trees (2003) Proc. IEEE Annu. Rel. Maintainability Symp, pp. 374-379. , Tampa, FL, USA},
correspondence_address1={School of Mechanical Engineering, , Nanjing 211189, China},
issn={00189529},
coden={IEERA},
language={English},
abbrev_source_title={IEEE Trans Reliab},
document_type={Article},
source={Scopus},
}

@ARTICLE{Schmoll2013,
author={Schmoll, F. and Heinig, A. and Marwedel, P. and Engel, M.},
title={Improving the fault resilience of an H.264 decoder using static analysis methods},
journal={Transactions on Embedded Computing Systems},
year={2013},
volume={13},
number={1 SUPPL.},
doi={10.1145/2536747.2536753},
art_number={31},
note={cited By 14},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84890379335&doi=10.1145%2f2536747.2536753&partnerID=40&md5=a04e2247d0a64907e3e69c5bd9e43bbd},
affiliation={TU Dortmund, D-44221 Dortmund, Germany},
abstract={Fault tolerance rapidly evolves into one of the most significant design objectives for embedded systems due to reduced semiconductor structures and supply voltages. However, resource-constrained systems cannot afford traditional error correction for overhead and cost reasons. New methods are required to sustain acceptable service quality in case of errors while avoiding crashes. We present a flexible fault-tolerance approach that is able to select correction actions depending on error semantics using application annotations and static analysis approaches. We verify the validity of our approach by analyzing the vulnerability and improving the reliability of an H.264 decoder using flexible error handling. © 2013 ACM 1539-9087/2013/11-ART31 $15.00.},
author_keywords={Annotations;  Application knowledge;  Delayed error handling;  Embedded systems;  Error classification;  Flexible error handling;  Static analysis;  Transient faults;  Type qualifier},
keywords={Annotations;  Error classification;  Error handling;  Transient faults;  Type qualifiers, Embedded systems;  Error correction;  Fault tolerance;  Semantics, Static analysis},
funding_details={Seventh Framework ProgrammeSeventh Framework Programme, FP7, 287759},
references={Afonso, F., Silva, C.A., Tavares, A., Montenegro, S., Application-Level fault tolerance in real-Time embedded systems (2008) Proceedings of SIES'08, pp. 126-133. , In, IEEE; Benso, A., Chiusano, S., Prinetto, P., A software development kit for dependable applications in embedded systems (2000) Proceedings of International Test Conference, pp. 170-178. , In, IEEE; Carter, N.P., Naeimi, H., Gardner, D.S., 2010. Design techniques for cross-Layer resilience Proceedings of DATE'10, pp. 1023-1028. , In , IEEE; Chalin, P., Towards support for non-Null types and non-null-By-Default in java (2006) Proceedings of the 8th Workshop on Formal Techniques for Java-Like Programs (FTfJP'06), , In; Chin, B., Markstrum, S., Millstein, T., Semantic type qualifiers (2005) Proceedings of PLDI'05, pp. 85-95. , In, ACM, New York; Engel, M., Schmoll, F., Heinig, A., Marwedel, P., Unreliable yet useful - Reliability annotations for data in cyber-Physical systems (2011) Proceedings of WS4C, , In; Foster, J.S., Fähndrich, M., Aiken, A., A theory of type qualifiers (1999) Proceedings of PLDI'99, pp. 192-203. , In, ACM, New York, NY; Graham, S.L., Kessler, P.B., Mckusick, M.K., GPROF: A call graph execution profiler (2004) SIGPLAN Notices 39, 4, pp. 49-57; Heinig, A., Engel, M., Schmoll, F., Marwedel, P., Improving transient memory fault resilience of an H.264 Decoder (2010) Proceedings of ESTIMedia'10, pp. 121-130. , In, IEEE; (2008) ICD-C Compiler Framework, , http://www-icd-de.luisamigo.proxybk.com/es/icd-c/icd-c.html; (2009) International Technology Roadmap for Semiconductors, , http://www-itrs-net.luisamigo.proxybk.com/Links/2009ITRS/2009_Chapters_2009Tables/2009_ExecSum. pdf, 2009 Edi., Executive Summary; Kwak, S.W., Choi, B.J., Kim, B.K., Checkpointing strategy for multiple real-Time tasks (2000) Proceedings of RTCSA'00, pp. 517-521. , In, IEEE; Lee, K., Shrivastava, A., Issenin, I., Dutt, N., Venkatasubramanian, N., Mitigating soft error failures for multimedia applications by selective data protection (2006) Proceedings of CASES'06, pp. 411-420. , In, ACM, New York; Li, C.-C.J., Stewart, E.M., Fuchs, W.K., Compiler-Assisted full checkpointing (1994) Softw. Pract. Exper., 24 (10), pp. 871-886; Li, X., Yeung, D., Application-Level correctness and its impact on fault tolerance (2007) Proceedings of the 13th International Symposium on High Performance Computer Architecture, pp. 181-192. , In, IEEE; Lyons, R.E., Vanderkulk, W., The use of triple-Modular redundancy to improve computer reliability (1962) IBM J. Res. Devel, 6 (2), pp. 200-209; Mehrara, M., Austin, T., Exploiting selective placement for low-Cost memory protection (2008) ACMTrans. Architect. Code Optimiz, 5 (3), pp. 1-24; Mitra, S., Brelsford, K., Sanda, P.N., Cross-Layer resilience challenges: Metrics and optimization (2010) Proceedings of DATE'10, pp. 1029-1034. , In, IEEE, DC; Perry, F., Mackey, L., Reis, G.A., Ligatti, J., August, D.I., Andwalker, D., Fault-Tolerant typed assembly language (2007) SIGPLAN Notices, 42, pp. 42-53; Polian, I., Becker, B., Nakasato, M., Ohtake, S., Fujiwara, H., Low-Cost hardening of image processing applications against soft errors (2006) Proceedings of DFT'06, pp. 274-279. , In, IEEE; Polian, I., Reddy, S.M., Pomeranz, I., Tang, X., Becker, B., No free lunch in soft error protection? (2008) Proceedings of the 2nd Workshop on Dependable and Secure Nanocomputing, , In, IEEE; Pradhan, D.K., Vaidyan, H., Roll-Forward checkpointing scheme: A novel fault-Tolerant architecture (1994) IEEE Trans. Comput., 43 (10), pp. 1163-1174; Punnekkat, S., Burns, A., Davis, R., Analysis of checkpointing for real-Time systems (2001) Real-Time Syst., 20 (1), pp. 83-102; Richardson, P., Sieh, L., Elkateeb, A., Fault-Tolerant adaptive scheduling for embedded real-Time systems (2001) Micro IEEE, 21 (5), pp. 41-51; Sampson, A., Dietl, W., Fortuna, E., Gnanapragasam, D., Grossma, L.C.D., EnerJ: Approximate data types for safe and general low-power computation (2011) Proceedings of PLDI'11, pp. 164-174. , In, ACM, New York; Sundaram, A., Aakel, A., Lockhart, D., Thaker, D., Franklin, D., Efficient fault tolerance in multimedia applications through selective instruction replication (2008) Proceedings of WREFT'08, pp. 339-346. , In, ACM, New York; (2012) CoMET, Virtual Prototyping Solution, , http://www-synopsys-com;.luisamigo.proxybk.com Zhang, Y., Chakrabarty, K., Fault recovery based on checkpointing for hard real-Time embedded systems (2003) Proceedings of DFT'03, pp. 320-327. , In, IEEE},
correspondence_address1={TU Dortmund, D-44221 Dortmund, Germany},
issn={15399087},
language={English},
abbrev_source_title={Trans. Embedded Comput. Syst.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Johnson2013672,
author={Johnson, B. and Song, Y. and Murphy-Hill, E. and Bowdidge, R.},
title={Why don't software developers use static analysis tools to find bugs?},
journal={Proceedings - International Conference on Software Engineering},
year={2013},
pages={672-681},
doi={10.1109/ICSE.2013.6606613},
art_number={6606613},
note={cited By 337; Conference of 2013 35th International Conference on Software Engineering, ICSE 2013 ; Conference Date: 18 May 2013 Through 26 May 2013;  Conference Code:100317},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84886386212&doi=10.1109%2fICSE.2013.6606613&partnerID=40&md5=b9367292e85d446c831d201bd338bad6},
affiliation={North Carolina State University, Raleigh, NC, United States; Google, Mountain View, CA, United States},
abstract={Using static analysis tools for automating code inspections can be beneficial for software engineers. Such tools can make finding bugs, or software defects, faster and cheaper than manual inspections. Despite the benefits of using static analysis tools to find bugs, research suggests that these tools are underused. In this paper, we investigate why developers are not widely using static analysis tools and how current tools could potentially be improved. We conducted interviews with 20 developers and found that although all of our participants felt that use is beneficial, false positives and the way in which the warnings are presented, among other things, are barriers to use. We discuss several implications of these results, such as the need for an interactive mechanism to help developers fix defects. © 2013 IEEE.},
keywords={Code inspections;  False positive;  Manual inspection;  Software defects;  Software developer, Defects;  Program debugging;  Software engineering;  Tools, Static analysis},
references={Briand, L.C., Thomas, W.M., Hetmanski, C.J., Modeling and managing risk early in software development (1993) Proc. ICSE, pp. 55-65; Nagappan, N., Ball, T., Static analysis tools as early indicators of pre-release defect density (2005) Proc. ICSE, pp. 580-586; Gegick, M., Williams, L., Towards the use of automated static analysis alerts for early identification of vulnerability-and attack-prone components (2007) Proc. ICIMP, pp. 18-23; IntelliJ IDEA, , http://www-jetbrains-com.luisamigo.proxybk.com/idea/; FindBugs, , http://findbugs-sourceforge-net;.luisamigo.proxybk.com Ayewah, N., Hovemeyer, D., Morgenthaler, J.D., Penix, J., Pugh, W., Using static analysis to find bugs (2008) IEEE Softw., 25 (5), pp. 22-29; Eclipse, , http://www-eclipse-org.luisamigo.proxybk.com/; NetBeans, , http://www-netbeans-org.luisamigo.proxybk.com/; Ayewah, N., Pugh, W., The google findbugs fixit (2010) Proc. ISSTA, pp. 241-252; Bessey, A., Engler, D., Block, K., Chelf, B., Chou, A., Fulton, B., Hallem, S., McPeak, S., A few billion lines of code later: Using static analysis to find bugs in the real world (2010) Commun. ACM, 53 (2), pp. 66-75; Khoo, Y.P., Foster, J.S., Hicks, M., Sazawal, V., Path projection for user-centered static analysis tools (2008) Proc. PASTE, pp. 57-63; Johnson, S.C., Lint, a c program checker (1978) Bell Laboratories, , Tech. Rep; http://pmd-sourceforge-net.luisamigo.proxybk.com/, PMD; Chess, B., West, J., (2007) Secure Programming with Static Analysis, , Addison-Wesley Professional; Vorobyov, K., Krishna, P., Comparing model checking and static program analysis: A case study in error detection approaches (2010) Proc. SSV, pp. 1-7; Dastani, M., The role of visual perception in data visualization (2002) Journal of Visual Languages and Computing, 13 (6), pp. 601-622; Ayewah, N., Pugh, W., A report on a survey and study of static analysis users (2008) Proc. DEFECTS, pp. 1-5; Heckman, S., Williams, L., On establishing a benchmark for evaluating static analysis alert prioritization and classification techniques (2008) Proc. ESEM, pp. 41-50; Layman, L., Williams, L., St. Amant, R., Toward reducing fault fix time: Understanding developer behavior for the design of automated fault detection tools (2007) Proc. ESEM, pp. 176-185; http://www-parasoft-com.luisamigo.proxybk.com/jsp/products/jtest.jsp; Klocwork Insight, , http://www-klocwork-com.luisamigo.proxybk.com/products/insight; Microsoft Visual Studio, , http://www.microsoft.com/visualstudio/; Google CodePro AnalytiX, , http://code-google-com.luisamigo.proxybk.com/javadevtools/codepro; Hove, S., Anda, B., Experiences from conducting semi-structured interviews in empirical software engineering research (2005) Proc. METRICS, pp. 1-10; Johnson, B., A study on improving static analysis tools: Why are we not using them (2012) Proc. ICSE, Student Research Competition; Robertson, T., Prabhakararao, S., Burnett, M., Cook, C., Ruthruff, J., Beckwith, L., Phalgune, A., Impact of interruption style on enduser debugging (2004) Proc. CHI, pp. 287-294; Gluck, J., Bunt, A., McGrenere, J., Impact of interruption style on end-user debugging (2007) Proc. CHI, pp. 41-50; Lewis, C.H., (1982) Using the "thinking Aloud" Method in Cognitive Interface Design, , IBM, Tech. Rep. RC-9265; http://logging-apache-org.luisamigo.proxybk.com/log4j/; http://ant-apache-org.luisamigo.proxybk.com/; Spinuzzi, C., The methodology of participatory design (2005) Technical Commun., 52 (2), pp. 163-174; Gordon, R., Coding interview responses (1998) Basic Interviewing Skills. Waveland Pr Inc., pp. 183-199; Shen, H., Fang, J., Zhao, J., EFindBugs: Effective error ranking for findbugs (2011) Proc. ICST, pp. 299-308; http://findbugs-sourceforge-net.luisamigo.proxybk.com/findbugs2.html#cloud, FindBugs Cloud Storage; Murphy-Hill, E., Black, A.P., Refactoring tools: Fitness for purpose (2008) IEEE Softw., 25 (5), pp. 38-44; Oberg, B., Notkin, D., Error reporting with graduated color (1992) IEEE Softw., 9 (6), pp. 33-38; Murphy-Hill, E., Black, A.P., An interactive ambient visualization for code smells (2010) Proc. SoftVis, pp. 5-14; http://www-socialresearchmethods-net.luisamigo.proxybk.com/kb/consthre.php, Threats to Construct Validity; Kersten, M., Murphy, G.C., Mylar: A degree-of-interest model for IDEs (2005) Proc. AOSD, pp. 159-168},
correspondence_address1={North Carolina State University, Raleigh, NC, United States},
sponsors={Association for Computing Machinery (ACM); SIGSOFT; IEEE Computer Society; Technical Council on Software Engineering (TCSE)},
address={San Francisco, CA},
issn={02705257},
isbn={9781467330763},
coden={PCSED},
language={English},
abbrev_source_title={Proc Int Conf Software Eng},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Jabonir2013435,
author={Jabonir, S. and Gaol, F.L.},
title={Bugs pattern detection application in JDBC using static analysis non-linear method},
journal={International Journal of Software Engineering and its Applications},
year={2013},
volume={7},
number={5},
pages={435-448},
doi={10.14257/ijseia.2013.7.5.38},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84886385529&doi=10.14257%2fijseia.2013.7.5.38&partnerID=40&md5=be340829edac0e52ce4fe587094dd936},
affiliation={Departement of Magister Information Technology, Binus University Anggrek Campus, Jakarta, Indonesia},
abstract={In this paper, it will be explained about an application which able to analyze the quality of java program code in implementing Java Database Connectivity (JDBC). The analysis will be based on existing best practice in implement JDBC. To analyze JDBC, bugs patterns are needed to be compared with existing best practice. Various methods are available to be used in constructing this kind of application, but in this paper, static analysis non-linear method is used in designing this application. Static analysis means the java program code will be read and analyzed without executing. Non-linear meansthe java program code will not read sequentially, but it will follow the flow of the program code itself. And this application will be called Bedhigasan, which able to detect bugs pattern in implementing JDBC and it will report those bugs to the web page including with location of the bugs ©2013 SERSC.},
author_keywords={Bugs pattern;  Java;  JDBC;  Non-linear;  Static analysis},
references={Brian, C., Daniel, H., David, H., Reuven, L., Pugh, W., Kristin, S., "Improving Your Software Using Static Analysis to Find Bugs" (2006); Jeffrey, F., Michael, H., William, P., "Improving Software Quality with Static Analysis (2007); David, H., William, P., Finding Bugs is Easy (2004); Brett, S., Pro Java Programming (2005), 2nd, Apress, New York},
correspondence_address1={Jabonir, S.; Departement of Magister Information Technology, , Jakarta, Indonesia; email: shadrach.jabonir@live.com},
issn={17389984},
language={English},
abbrev_source_title={Int. J. Softw. Eng. Appl.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Moiseev2013169,
author={Moiseev, M.},
title={Static analysis approach for defect detection in multithreaded C/C++ programs},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={8166 LNCS},
pages={169-183},
doi={10.1007/978-3-642-40894-6_14},
note={cited By 1; Conference of 5th workshop on Software Engineering for Resilient Systems, SERENE 2013 ; Conference Date: 3 October 2013 Through 4 October 2013;  Conference Code:100133},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84885708822&doi=10.1007%2f978-3-642-40894-6_14&partnerID=40&md5=d69ff2ea311e595d6a485f2f35053a14},
affiliation={St. Petersburg State Polytechnical University, St. Petersburg, Russian Federation},
abstract={Automatic defect detection in multithreaded programs with pointers and recursion is a real challenge. In this paper we present a static analysis approach targeted to detection of wide range of defect types in multithreaded programs, including some types of synchronization errors. This approach is based on well-known algorithms for interval and points-to analysis, which are extended with the developed algorithms for analysis of parallel execution. We show efficiency of our approach by evaluating it on a set of artificial and real-world multithreaded C/C++ programs based on Pthreads. © 2013 Springer-Verlag.},
author_keywords={defect detection;  multithreaded program;  Static analysis},
keywords={Analysis approach;  Automatic defect detections;  C/C++ programs;  Defect detection;  Multi-threaded programs;  Parallel executions;  Points-to analysis;  Synchronization error, Algorithms;  Defects;  Multitasking;  Software engineering, Static analysis},
references={Aegis mt, Defect Detection Tool, , http://www-digiteklabs-ru.luisamigo.proxybk.com/aegis/; Coverity Scan: 2011 Open Source Integrity Report, , http://www-coverity-com.luisamigo.proxybk.com/library/pdf/coverity-scan-2011-open-source- integrity-report.pdf; IEEE Standard for Information Technology - Portable Operating System Interface (Posix), , http://standards-ieee-org.luisamigo.proxybk.com/findstds/standard/1003.1-2001-Cor_2-2004.html; Parasoft c++ Test, , http://www-parasoft-com.luisamigo.proxybk.com/jsp/products/cpptest.jsp; Bouajjani, A., Esparza, J., Touili, T., A generic approach to the static analysis of concurrent programs with procedures (2003) SIGPLAN Not., 38 (1), pp. 62-73. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/640128.604137; Chugh, R., Voung, J.W., Jhala, R., Lerner, S., Dataflow analysis for concurrent programs using datarace detection (2008) PLDI, pp. 316-326. , http://dblp-uni-trier-de.luisamigo.proxybk.com/db/conf/pldi/pldi2008.html#ChughVJL08, Gupta, R., Amarasinghe, S.P. (eds.) ACM; Cytron, R., Ferrante, J., Rosen, B.K., Wegman, M.N., Zadeck, F.K., Efficiently computing static single assignment form and the control dependence graph (1991) ACM Transaction on Programming Languages and Systems, 13, pp. 451-490; Emmi, M., Qadeer, S., Rakamaric, Z., Delay-bounded scheduling (2011) POPL, pp. 411-422. , http://dblp-uni-trier-de.luisamigo.proxybk.com/db/conf/popl/popl2011.html#EmmiQR11, Ball, T., Sagiv, M. (eds.) ACM; Engler, D., Ashcraft, K., Racerx: Effective, static detection of race conditions and deadlocks (2003) SIGOPS Oper. Syst. Rev., 37 (5), pp. 237-252. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1165389.945468; Gotsman, A., Berdine, J., Cook, B., Sagiv, M., Thread-modular shape analysis (2007) SIGPLAN Not., 42 (6), pp. 266-277. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1273442.1250765; Kahlon, V., Sankaranarayanan, S., Gupta, A., Semantic reduction of thread interleavings in concurrent programs (2009) LNCS, 5505, pp. 124-138. , Kowalewski, S., Philippou, A. (eds.) TACAS 2009. Springer, Heidelberg; Kahlon, V., Sinha, N., Kruus, E., Zhang, Y., Static data race detection for concurrent programs with asynchronous calls (2009) ESEC/SIGSOFT FSE, pp. 13-22. , http://dblp-uni-trier-de.luisamigo.proxybk.com/db/conf/sigsoft/fse2009.html#KahlonSKZ09, van Vliet, H., Issarny, V. (eds.) ACM; Lahiri, S.K., Qadeer, S., Rakamarić, Z., Static and precise detection of concurrency errors in systems code using SMT solvers (2009) LNCS, 5643, pp. 509-524. , Bouajjani, A., Maler, O. (eds.) CAV 2009. Springer, Heidelberg; Lal, A., Reps, T.W., Reducing concurrent analysis under a context bound to sequential analysis (2009) Formal Methods in System Design, 35 (1), pp. 73-97. , http://dblp-uni-trier-de.luisamigo.proxybk.com/db/journals/fmsd/fmsd35.html#LalR09; Naik, M., Park, C.S., Sen, K., Gay, D., Effective static deadlock detection (2009) ICSE, pp. 386-396. , http://dblp-uni-trier-de.luisamigo.proxybk.com/db/conf/icse/icse2009.html#NaikPSG09, IEEE; Pratikakis, P., Foster, J.S., Hicks, M., Locksmith: Practical static race detection for c (2011) ACM Trans. Program. Lang. Syst., 33 (1), pp. 3:1-3:55. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1889997.1890000; Qadeer, S., Wu, D., Kiss: Keep it simple and sequential (2004) PLDI, pp. 14-24. , http://dblp-uni-trier-de.luisamigo.proxybk.com/db/conf/pldi/pldi2004.html#QadeerW04, Pugh, W., Chambers, C. (eds.) ACM; Srinivasan, H., Hook, J., Wolfe, M., Static single assignment for explicitly parallel programs (1993) Proceedings of the 20th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 1993, pp. 260-272. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/158511.158644, ACM, New York; Terauchi, T., Checking race freedom via linear programming (2008) SIGPLAN Not., 43 (6), pp. 1-10. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1379022.1375583; La Torre, S., Madhusudan, P., Parlato, G., Reducing context-bounded concurrent reachability to sequential reachability (2009) LNCS, 5643, pp. 477-492. , http://dblp-uni-trier-de.luisamigo.proxybk.com/db/conf/cav/cav2009.html#TorreMP09, Bouajjani, A., Maler, O. (eds.) CAV 2009. Springer, Heidelberg},
correspondence_address1={Moiseev, M.; St. Petersburg State Polytechnical University, St. Petersburg, Russian Federation; email: mikhail.moiseev@gmail.com},
sponsors={var.pagings},
address={Kiev},
issn={03029743},
isbn={9783642408939},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Heckman2013,
author={Heckman, S. and Williams, L.},
title={A comparative evaluation of static analysis actionable alert identification techniques},
journal={ACM International Conference Proceeding Series},
year={2013},
volume={Part F128822},
doi={10.1145/2499393.2499404},
note={cited By 5; Conference of 9th International Conference on Predictive Models in Software Engineering, PROMISE 2013 ; Conference Date: 9 October 2013;  Conference Code:128822},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84976618869&doi=10.1145%2f2499393.2499404&partnerID=40&md5=c7d47ab9cc8e5e6f7736b299061b37c7},
affiliation={North Carolina State University, Campus Box 8206, Raleigh, NC  27695-8602, United States},
abstract={Automated static analysis (ASA) tools can identify potential source code anomalies that could lead to field failures. Developer inspection is required to determine if an ASA alert is important enough to fix, or an actionable alert. Supplementing current ASA tools with automated identification of actionable alerts could reduce developer inspection overhead, leading to an increase in industry adoption of ASA tools. The goal of this research is to inform the selection of an actionable alert identification technique for ranking the output of automated static analysis through a comparative evaluation of actionable alert identification techniques. We investigated six actionable alert identification techniques on three subject projects. Among these six techniques, the systematic actionable alert identification (SAAI) technique reported an average accuracy of 82.5% across the three subject projects when considering both ASA tools evaluated. Check 'n' Crash reported an average accuracy of 85.8% for the single ASA tool evaluated. The other actionable alert identification techniques had average accuracies ranging from 42.2%-78.2%.},
author_keywords={Actionable static analysis alert identification;  Automated static analysis;  Comparative evaluation},
keywords={Automation;  Software engineering, Automated identification;  Comparative evaluations;  Field failure;  Identification techniques;  Potential sources, Static analysis},
references={Aggarwal, A., Jalote, P., Integrating static and dynamic analysis for detecting vulnerabilities (2006) Proceedings of the 30th Annual International Computer Software and Applications Conference, Chicago, Illinois, USA, pp. 343-350. , September 17-21; Allier, S., Anquetil, N., Hora, A., Ducasse, S., A framework to compare alert ranking algorithms (2012) 2012 19th Working Conference on Reverse Engineering, Kingston, Ontario, Canada, pp. 277-285. , October 15-18; Boogerd, C., Moonen, L., Prioritizing software inspection results using static profiling (2006) Proceedings of the 6th IEEE Workshop on Source Code Analysis and Manipulation, Philadelphia, PA, USA, pp. 149-160. , September 27-29; Chess, B., McGraw, G., Static analysis for security (2004) IEEE Security & Privacy, 2 (6), pp. 76-79; Csallner, C., Smaragdakis, Y., Check 'n' crash: Combining static checking and testing (2005) Proceedings of the 27th International Conference on Software Engineering, St. Louis, MO, USA, pp. 422-431; Csallner, C., Smaragdakis, Y., Xie, T., DSD-crasher: A hybrid analysis tool for bug finding (2008) ACM Transactions on Software Engineering and Methodology, 17 (2), pp. 1-36. , April; Flanagan, C., Leino, K.R.M., Lillibridge, M., Nelson, G., Saxe, J.B., Stata, R., Extended static checking for Java (2002) Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation, Berlin, Germany, pp. 234-245; Heckman, S., Williams, L., On establishing a benchmark for evaluating static analysis alert prioritization and classification techniques (2008) Proceedings of the 2nd International Symposium on Empirical Software Engineering and Measurement, Kaiserslautern, Germany, pp. 41-50. , October 9-10; Heckman, S., Williams, L., A model building process for identifying actionable static Analysis Alerts (2009) Proceedings of the 2nd IEEE International Conference on Software Testing, Verification and Validation, Denver, CO, USA, pp. 161-170; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Information and Software Technology, 53 (4), pp. 363-387. , April; Heckman, S.S., Adaptively ranking alerts generated from automated static Analysis (2007) ACM Crossroads, 14 (1), pp. 16-20; Heckman, S.S., (2009) A Systematic Model Building Process for Predicting Actionable Static Analysis Alerts, , Dissertation, Computer Science, North Carolina State University; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) Proceedings of the 19th ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications, Vancouver, British Columbia, Canada, pp. 132-136. , October 24-28; (2002) IEEE 1028-1997 (R2002) IEEE Standard for Software Reviews, , IEEE; Kim, S., Ernst, M.D., Prioritizing warning categories by analyzing software history (2007) Proceedings of the International Workshop on Mining Software Repositories, Minneapolis, MN, USA, p. 27. , May 19-20; Kim, S., Ernst, M.D., Which warnings should i fix first? (2007) Proceedings of the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, Dubrovnik, Croatia, pp. 45-54. , September 3-7; Kremenek, T., Ashcraft, K., Yang, J., Engler, D., Correlation exploitation in error ranking (2004) Proceedings of the 12th ACM SIGSOFT International Symposium on Foundations of Software Engineering, Newport Beach, CA, USA, pp. 83-93; Kremenek, T., Engler, D., Z-ranking: Using statistical analysis to counter the impact of Static Analysis Approximations (2003) Proceedings of the 10th International Static Analysis Symposium, San Diego, California, pp. 295-315; Menzies, T.Z., Hihn, C.J., Lum, K., Data mining static code attributes to learn defect predictors IEEE Transactions on Software Engineering, 33 (1), pp. 2-13; Roberts, D., Brant, J., Johnson, R., A refactoring tool for smalltalk (1997) Theory and Practice of Object Systems, 3 (4), pp. 253-263; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An Experimental Approach (2008) Proceedings of the 30th International Conference on Software Engineering, Leipzig, Germany, pp. 341-350. , May 10-18; Shen, H., Fang, J., Zhao, J., EFindBugs: Effective error ranking for findbugs (2011) 2011 IEEE 4th International Conference on Software Testing, Verification and Validation, Berlin, Germany, pp. 299-308. , March 21-25; Williams, C.C., Hollingsworth, J.K., Automatic mining of source code repositories to improve bug Finding Techniques (2005) IEEE Transactions on Software Engineering, 31 (6), pp. 466-480; Witten, I.H., Frank, E., (2005) Data Mining Practical Machine Learning Tools and Techniques, , 2nd ed Amsterdam: Morgan Kaufmann; Zimmermann, T., Premraj, R., Zeller, A., Predicting defects in eclipse (2007) Proceedings of the 3rd International Workshop on Predictor Models in Software Engineering, Minneapolis, MN, USA, p. 9. , May 20},
sponsors={},
publisher={Association for Computing Machinery},
isbn={9781450320160},
language={English},
abbrev_source_title={ACM Int. Conf. Proc. Ser.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Xiang201358,
author={Xiang, J. and Machida, F. and Tadano, K. and Yanoo, K. and Sun, W. and Maeno, Y.},
title={A static analysis of dynamic fault trees with priority-AND gates},
journal={Proceedings - 6th Latin-American Symposium on Dependable Computing, LADC 2013},
year={2013},
pages={58-67},
doi={10.1109/LADC.2013.14},
art_number={6542606},
note={cited By 11; Conference of 6th Latin-American Symposium on Dependable Computing, LADC 2013 ; Conference Date: 2 April 2013 Through 5 April 2013;  Conference Code:98106},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84881183021&doi=10.1109%2fLADC.2013.14&partnerID=40&md5=b397658358a6316765667513fb170040},
affiliation={Central Research Laboratories, NEC Corporation, Kawasaki, 211-8666, Japan},
abstract={A PAND gate is a special AND gate of Dynamic Fault Trees (DFTs) where the input events must occur in a specific order for the occurrence of its output event. We present a transformation from a PAND gate to an AND gate with some dependent conditioning events, called CAND gate, provided that the dynamic behavior of the system can be modeled by a (semi-)Markov process. With the transformation, a DFT with only static Boolean logic gates and PAND gates can be transformed into a static fault tree, which opens up the way to employ efficient combinatorial analysis for the DFT. In addition, the PAND gate cannot model the priority relations between the events whose occurrences are not necessary for the output event. The inability has not been addressed before and it can be overcome by the proposed CAND gate. © 2013 IEEE.},
author_keywords={cut sequence;  cut set;  fault tree;  Markov property;  Priority-AND},
keywords={cut sequence;  Cut sets;  Fault-trees;  Markov property;  Priority-AND, Computer science, Markov processes},
references={Vesely, W.E., Goldberg, F.F., Roberts, N.H., Haasl, D.F., (1981) Fault Tree Handbook, , U.S. Nuclear Regulatory Commission, Washington, D.C, Tech. Rep. NUREG-0492, Jan; Leveson, N.G., (1995) Safeware: System Safety and Computers, , Addison-Wesley Pub., Sep; Hansen, K.M., Ravn, A.P., From safety analysis to software requirement (1998) IEEE Transactions on Software Engineering, 24 (7), pp. 573-584. , Jul; Xiang, J., Futatsugi, K., He, Y., Fault tree analysis of software reliability allocation (2003) Proc. of the 7th World Multiconference on Systemics, Cybernetics and Informatics, Volume II-Computer Science and Engineering, pp. 460-465. , Orlando, USA: International Institute of Informatics and Systemics, Jul; Pai, G.J., Dugan, J.B., Automatic synthesis of dynamic fault trees from UML system models (2002) Prof. of the 13th International Symposium on Software Reliability Engineering (ISSRE'02), pp. 243-256. , Los Alamitos, CA, USA: IEEE; Xiang, J., Yanoo, K., Maeno, Y., Tadano, K., Automatic synthesis of static fault trees from system models (2011) Proc. of the 5th International Conference on Secure Software Integration and Reliability Improvement (SSIRI 2011), pp. 127-136. , Jeju Island, Korean: IEEE, June; Dugan, J.B., Bavuso, S., Boyd, M., Dynamic fault tree models for fault tolerant computer systems (1992) IEEE Transactions on Reliability, 41 (3), pp. 363-377; Fussell, J.B., Vesely, W.E., A new methodology for obtaining cut sets for fault trees (1972) American Nuclear Society Transactions, 15, pp. 262-263. , June; Rauzy, A., Toward an efficient implementation of the MOCUS algorithm (2003) IEEE Transactions on Reliability, 52 (2), pp. 175-180. , June; Xiang, J., Yanoo, K., Maeno, Y., Tadano, K., Machida, F., Kobayashi, A., Osaki, T., Efficient analysis of fault trees with voting gates (2011) Proc. of IEEE 22nd International Symposium on Software Reliability Engineering (ISSRE 2011), pp. 230-239. , Hiroshima, Japan: IEEE, Nov; Rauzy, A., New algorithms for fault trees analysis (1993) Reliability Engineering and System Safety, 40 (3), pp. 203-211; Tang, Z., Dugan, J.B., Minimal cutset/sequence generation for dynamic fault trees (2004) Proc. of the IEEE Annual Reliability and Maintainability Symposium. IEEE, pp. 207-213; Dugan, J.B., Bavuso, S.J., Boyd, M.A., Fault trees and Markov models for reliability analysis of fault-tolerant digital systems (1993) Reliability Engineering & System Safety, 39, pp. 291-307; Gulati, R., Dugan, J.B., A modular approach for analyzing static and dynamic fault-trees (1997) Proc. of the IEEE Annual Reliability and Maintainability Symposium, pp. 57-63. , Philadelphia, PA, USA; Boudali, H., Crouzen, P., Stoelinga, M., Dynamic fault tree analysis through input/output interactive Markov chains (2007) Proc. of the International Conference on Dependable Systems and Networks (DSN 2007), pp. 25-38. , Edinburgh, UK; Codetta-Raiteri, D., The conversion of dynamic fault trees to stochastic Petri nets, as a case of graph transformation (2005) Electronic Notes on Theoretical Computer Science, 127 (2), pp. 45-60. , Springer; Fussel, J.B., Aber, E.F., Rahl, R.G., On the quantitative analysis of priority-and failure logic (1976) IEEE Transactions on Reliability, R-25 (5), pp. 324-326; Yuge, T., Yanagi, S., Quantitative analysis of a fault tree with priority and gates (2008) Reliability Engineering & System Safety, 93, pp. 1557-1583; Amari, S., Dill, G., Howald, E., A new approach to solve dynamic fault trees (2003) Proc. of Annual Reliability and Maintainability Symposium. IEEE, pp. 374-379; Merle, G., Roussel, J.-M., Lesage, J.-J., Bobbio, A., Probabilistic algebraic analysis of fault trees with priority dynamic gates and repeated events (2010) IEEE Transactions on Reliability, 59 (1), pp. 250-261; Moszkowski, B., A temporal logic for multilevel reasoning about hardware (1985) IEEE Computer, 18 (2), pp. 10-19; Xiang, J., Machida, F., Tadano, K., Yanoo, K., Sun, W., Maeno, Y., Combinatorial analysis of dynamic fault trees with priority-and gates (2012) Proc. of IEEE 23rd International Symposium on Software Reliability Engineering Workshops (ISSREW), pp. 3-4. , IEEE, Nov; Dugan, J.B., Bavuso, S.J., Boyd, M.A., Fault trees and sequence dependencies (1990) Proc. of Annual Reliability and Maintainability Symposium. IEEE, pp. 286-293; Xiang, J., Yanoo, K., Formal static fault tree analysis (2010) Proc. of the 6th International Conference on Computer Engineering and Systems (ICCES 2010), pp. 280-286. , Cairo, Egypt: IEEE, Dec; Trivedi, K.S., (2002) Probability and Statistics with Reliability, Queuing, and Computer Science Applications, , 2nd ed. Wiley-Interscience; Wang, D., Fricks, R.M., Trivedi, K.S., Dealing with non-exponential distributions in dependability models (2003) Performance Evaluation-Stories and Perspectives, G. Kotsis, Ed. Wien: Austrian Computer Society, pp. 273-302; Xiang, J., Yanoo, K., Automatic static fault tree analysis from system models (2010) Proc. of the 16th IEEE Pacific Rim International Symposium on Dependable Computing (PRDC 2010), pp. 241-242. , Tokyo, Japan: IEEE, Dec; Rasmuson, D.M., Marshall, N.H., FATRAM - A core efficient cut-set algorithm (1978) IEEE Transactions on Reliability, R-27 (4), pp. 250-252; Limnios, N., Ziani, R., An algorithm for reducing cut sets in fault tree analysis (1986) IEEE Transactions on Reliability, R-35 (5), pp. 559-562; Harper, R.E., Lala, J.H., Deyst, J.J., Fault tolerant parallel processor architecuture overview (1988) Proc. 18th Symp. Fault Tolerant Computing, pp. 252-257; Harper, R.E., Reliability analysis of parellel processing systems (1988) Proc. 8th Digital Avionics Systems Conf., pp. 213-219},
correspondence_address1={Central Research Laboratories, , Kawasaki, 211-8666, Japan},
sponsors={Brazilian Computer Society (SBC)},
address={Rio de Janeiro},
isbn={9780769549620},
language={English},
abbrev_source_title={Proc. - Lat.-Amer. Symp. Dependable Comput., LADC},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Ghahari2013426,
author={Ghahari, S.F. and Moradnejad, H.R. and Rouhanimanesh, M.S. and Sarvghad-Moghadam, A.},
title={Studying higher mode effects on the performance of nonlinear static analysis methods considering near-fault effects},
journal={KSCE Journal of Civil Engineering},
year={2013},
volume={17},
number={2},
pages={426-437},
doi={10.1007/s12205-013-1386-6},
note={cited By 8},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84875507638&doi=10.1007%2fs12205-013-1386-6&partnerID=40&md5=b03c7763b83bb6b409b0011a131d6863},
affiliation={Dept. of Civil Engineering, Sharif University of Technology, Tehran, 11365-9313, Iran; Engineering Department, Central Tehran Branch, Islamic Azad University, Tehran, 13185-768, Iran; Dept. of Civil Engineering, International Institute of Earthquake Engineering and Seismology, Tehran, 19395-3913, Iran},
abstract={Daily development in civil engineering arena and the importance of economical aspects in the design of structures have motivated the engineers to shift their approaches from designing upon strength to designing upon performance. This is of more importance regarding the forces induced by earthquakes which have unpredicted and random nature. However, it is not possible to design or assess exactly the structural performance against strong ground motion using analytical methods which are applied for static loads and therefore precise dynamic analysis methods are needed. Despite significant progress in the analytical methods and engineering software, using nonlinear time history analysis is very difficult for engineers and designers due to unpredictable nature of future ground motions as well as complicated behaviour of structures. Consequently, the substituting methods are presented upon nonlinear static analysis. Coefficient method and capacity spectrum method, presented by FEMA356 and ATC40, respectively, are of this kind that have been used in the recent years and modified by newer documents such as FEMA440. Despite acceptable results, neglecting some important items, such as higher mode effects which can be decisive in tall and specific structures, made offering other procedures like Modal Pushover Analysis (MPA). In this study, the performance abilities of nonlinear static methods are studied in order to assess the dynamic response of structures under both far- and near-fault earthquake records. For this purpose, two reinforced concrete frames of 5 and 15 stories are analyzed by a series of nonlinear static and dynamic analyses. Analysis results show that conventional nonlinear static analysis methods cannot estimate accurately the deformation demands of tall building structures, particularly in the higher stories, due to the effects of higher modes. Although MPA method has almost improved the results, yet it has not high accuracy regarding near-fault earthquake records. © 2013 Korean Society of Civil Engineers and Springer-Verlag Berlin Heidelberg.},
author_keywords={dynamic responses of structures;  far-fault records;  higher modes;  nearfault records;  nonlinear static analysis;  seismic performance},
keywords={Dynamic response;  Earthquake effects;  Faulting;  Reinforced concrete;  Seismic response;  Static analysis;  Tall buildings, far-fault records;  Higher mode;  Near-fault;  Non-linear static analysis;  Seismic Performance, Nonlinear analysis},
references={Abrahamson, N., (1993) Non-Stationary Spectral Matching Program; (2002) Building Code Requirements for Structural Concrete, , American Concrete Institute; (1996) Seismic Evaluation and Retrofit of Concrete Buildings, , Applied Technology Council; (2005) Iranian Code of Practice for Seismic Resistant Design of Buildings, , BuildingHousing Research Center; Chopra, A.K., Goel, R.K., (2001) A Modal Pushover Analysis Procedure to Estimate Seismic Demands for Buildings, , Berkeley, CA: Pacific Earthquake Engineering Center, University of California; Chopra, A.K., Goel, R.K., A modal pushover analysis procedure for estimating seismic demands for buildings (2002) Earthquake Engineering and Structural Dynamics, 31 (3), pp. 561-582; Chopra, A.K., Goel, R.K., Chintanapakdee, C., Evaluation of a modified MPA procedure assuming higher modes as elastic to estimate seismic demands (2004) Earthquake Spectra, 20 (3), pp. 757-778; (2009) V-12. Integrated Finite Element Analysis and Design of Structures, , CSI, SAP 2000, Berkeley, CA, USA: Computers and Structures Inc; Fajfar, P., A nonlinear analysis method for performance based seismic design (2000) Earthquake Spectra, 16 (3), pp. 573-592; (2000) Pre-Standard and Commentary for the Seismic Rehabilitation of Buildings, , Federal Emergency Management Agency, Washington, D.C: American Society of Civil Engineers; (2005) Improvement of Nonlinear Static Seismic Analysis Procedures, , Federal Emergency Management Agency, Washington, D.C: Applied Technology Council; Gasparini, D.A., Vanmarcke, E.H., (1976) Evaluation Analysis of Safety of Buildings - Simulated Earthquake Motions Compatible with Prescribed Response Spectra, 2. , Massachusetts Institute of Technology; Ghahari, S.F., Jahankhah, H., Ghannad, M.A., Study on elastic response of structures to near-fault ground motions through record decomposition (2010) Soil Dynamics and Earthquake Engineering, 30 (7), pp. 536-546; Ghahari, S.F., Khaloo, A.R., (2010) Considering Rupture Directivity Effects, Which Structures Should Be Named "Long-Period Buildings"?; Goel, R.K., Chopra, A.K., Evaluation of modal and FEMA pushover analysis: SAC Buildings (2004) Earthquake Spectra, 20 (1), pp. 224-225; Kaul, M.K., Spectrum consistent time history generation (1978) ASCE Journal of Engineering Mechanics, 4 (104), pp. 781-788; Kim, S., D'Amore, E., Pushover analysis procedure in earthquake engineering (1999) Earthquake Spectra, 15 (3), pp. 417-434; Krawinkler, H., Seneviratna, G.D.P.K., Pros and cons of a pushover analysis of seismic performance evaluation (1998) Engineering Structures, 20 (4-6), pp. 452-462; Lilhanand, K., Tseng, W.S., (1987) Generation of Synthetic Time Histories Compatible with Multiple-Damping Response Spectra; Lillhanand, K., Tseng, W.S., Development and application of realistic earthquake time histories compatible with multiple damping response spectra (1988) Proceedings of the Word Conference on Earthquake Engineering, Tokyo, Japan, 2, pp. 819-824; Poursha, M., Khoshnoudian, F., Moghadam, A., Assessment of modal pushover analysis and conventional nonlinear static procedure with load distributions of Federal Emergency Management Agency for high-rise buildings (2008) The Structural Design of Tall and Special Buildings, 19 (3), pp. 291-308},
correspondence_address1={Ghahari, S. F.; Dept. of Civil Engineering, , Tehran, 11365-9313, Iran; email: Ghahari@mehr.sharif.edu},
publisher={Springer Verlag},
issn={12267988},
language={English},
abbrev_source_title={KSCE J. Civ. Eng.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Fehnker201345,
author={Fehnker, A. and Huuck, R.},
title={Model checking driven static analysis for the real world: Designing and tuning large scale bug detection},
journal={Innovations in Systems and Software Engineering},
year={2013},
volume={9},
number={1},
pages={45-56},
doi={10.1007/s11334-012-0192-5},
note={cited By 8},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84874264838&doi=10.1007%2fs11334-012-0192-5&partnerID=40&md5=d319737b38acdffc47d3204cdeecd78f},
affiliation={National ICT Australia Ltd. (NICTA), University of New South Wales, Locked Bag 6016, Sydney, NSW, 1466, Australia; SCIMS, University of the South Pacific, Suva, Fiji},
abstract={Model checking and static analysis are traditionally seen as two separate approaches to software analysis and verification. In this work we define a model, checking approach for the static analysis of large C/C++ source code bases to detect potential run-time issues such as program crashes, security vulnerabilities and memory leaks. Working on the intersection of software model checking and automated static bug detection for real-life systems, we address a number of issues: how to scale for real-life systems of 1,000,000 LoC or more, how to quickly write new checks, and most importantly how to distinguish between relevant and irrelevant bugs and fine tune the analysis accordingly. We define our model checking-based static analysis approach implemented in our tool Goanna, illustrate a number of design and implementation decisions to obtain practical outcomes and relevant results, and present our findings by empirical data obtained from regularly analyzing large industrial and open source code bases such as the Firefox Web browser. © 2012 Springer-Verlag London Limited.},
author_keywords={Case study;  False positive tuning;  Firefox;  Goanna tool;  Model checking;  Static analysis},
keywords={C++ (programming language);  Codes (symbols);  Open source software;  Open systems;  Program debugging;  Static analysis;  Web browsers, Analysis approach;  Design and implementations;  False positive;  Firefox;  Firefox web browser;  Security vulnerabilities;  Software analysis;  Software model checking, Model checking},
funding_details={Australian Research CouncilAustralian Research Council, ARC},
funding_details={Department of Broadband, Communications and the Digital Economy , Australian GovernmentDepartment of Broadband, Communications and the Digital Economy , Australian Government, DBCDE},
funding_text 1={NICTA is funded by the Australian Government as represented by the Department of Broadband, Communications and the Digital Economy and the Australian Research Council through the ICT Centre of Excellence program.},
references={Aho, A.V., Sethi, R., Ullman, J.D., (1986) Compilers: Principles, techniques and tools, , Addison-Wesley, Reading; Nielson, F., Nielson, H.R., Hankin, C.L., (1999) Principles of Program Analysis, , Berlin: Springer; Engler, D., Chelf, B., Chou, A., Hallem, S., Checking system rules using system-specific, programmer-written compiler extensions (2000) In: Proceedings of the symposium on operating systems design and implementation, , USENIX Association, San Diego; Holzmann, G., Static source code checking for user-defined properties (2002) In: Proceedings of the IDPT 2002, , Pasadena; Dams, D., Namjoshi, K., Orion: high-precision methods for static error analysis of C and C++ programs (2004) Bell Labs Tech. Mem, , ITD-04-45263Z, Lucent Technologies; Schmidt, D.A., Steffen, B., Program analysis as model checking of abstract interpretations (1998) In: Proceedings of the SAS '98, pp. 351-380. , Springer, Berlin; Clarke, E.M., Emerson, E.A., Design and synthesis of synchronization skeletons for branching time temporal logic (1982) In: Logics of programs workshop, LNCS, 131, pp. 52-71. , Springer, Berlin; Queille, J.P., Sifakis, J., Specification and verification of concurrent systems in CESAR (1982) In: Proceedings of the international symposium on programming, pp. 337-350. , Turin, April 6-8, 1982. Springer, Berlin; Fehnker, A., Huuck, R., Jayet, P., Lussenburg, M., Rauch, F., Model checking software at compile time (2007) In: Proceedings of the TASE 2007, IEEE Computer Society; Gawlitza, T., Seidl, H., Precise fixpoint computation through strategy iteration (2007) In: De Nicola R (ed) Proceedings of the 16th European conference on programming (ESOP'07), pp. 300-315. , Springer, Berlin; Clarke, E., Kroening, D., Sharygina, N., Yorav, K., SATABS: SAT-based predicate abstraction for ANSI-C (2005) In: Proceedings of the TACAS 2005. LNCS, 3440, pp. 570-574. , Springer, Berlin; Fehnker, A., Huuck, R., Seefried, S., Counterexample guided path reduction for static program analysis (2010) Concurrency, compositionality, and correctness, 5930. , Essays in Honor of Willem-Paul de Roever. Lecture Notes in Computer Science; Cimatti, A., Clarke, E., Giunchiglia, E., Giunchiglia, F., Pistore, M., Roveri, M., Sebastiani, R., Tacchella, A., NuSMV Version 2: an OpenSource tool for symbolic model checking (2002) In: International conference on computer-aided verification (CAV 2002), 2404. , LNCS, Springer, Berlin; http://www-coverity-com.luisamigo.proxybk.com, Coverity: Prevent for C and C++; http://www-klocwork-com.luisamigo.proxybk.com/, Klocwork: K7; http://www-fortifysoftware-com.luisamigo.proxybk.com/, Fortify: Fortify static code analysis; Gray, J., Why do computers stop and what can be done about it? (1986) In: Symposium on reliability in distributed software and database systems, pp. 3-12; ftp://ftp-mozilla-org.luisamigo.proxybk.com/pub/mozilla.org/firefox/nightly, Mozilla: Source code for firefox, nightly build; (2010), http://samate-nist-gov.luisamigo.proxybk.com/SATE2010.html, NIST SAMATE: Static analysis tool exposition (SATE); Hovemeyer, D., Spacco, J., Pugh, W., Evaluating and tuning a static analysis to find null pointer bugs (2005) PASTE '05: Proceedings of the 6th ACM SIGPLAN-SIGSOFT workshop on program analysis for software tools and engineering, pp. 13-19. , ACM, New York; Reimer, D., Schonberg, E., Srinivas, K., Srinivasan, H., Alpern, B., Johnson, R.D., Kershenbaum, A., Koved, L., Saber: Smart analysis based error reduction (2004) ISSTA '04: Proceedings of the 2004 ACM SIGSOFT international symposium on Software testing and analysis, pp. 243-251. , ACM, New York; Ayewah, N., Pugh, W., Morgenthaler, J.D., Penix, J., Zhou, Y., Evaluating static analysis defect warnings on production software (2007) PASTE '07: Proceedings of the 7th ACM SIGPLAN-SIGSOFT workshop on program analysis for software tools and engineering, pp. 1-8. , ACM, New York; Emanuelsson, P., Nilsson, U., A comparative study of industrial static analysis tools (2008) In: 3rd International workshop on systems software verification (SSV 08), ENTCS 217, , Elsevier, Amsterdam; Kratkiewicz, K., (2005) Evaluating static analysis tools for detecting buffer overflows in C code, , Master's thesis, Harvard University, Cambridge; Cousot, P., Cousot, R., Feret, J., Mine, A., Mauborgne, L., Monniaux, D., Rival, X., Varieties of static analyzers: a comparison with ASTREE (2007) TASE '07: Proceedings of the first joint IEEE/IFIP symposium on theoretical aspects of software engineering, pp. 3-20. , IEEE Computer Society; Zitser, M., Lippmann, R., Leek, T., Testing static analysis tools using exploitable buffer overflows from open source code (2004) SIGSOFT '04/FSE-12: Proceedings of the 12th ACM SIGSOFT international symposium on foundations of software engineering, pp. 97-106. , ACM, New York},
correspondence_address1={Huuck, R.; National ICT Australia Ltd. (NICTA), Locked Bag 6016, Sydney, NSW, 1466, Australia; email: ralf.huuck@nicta.com.au},
publisher={Springer London},
issn={16145046},
language={English},
abbrev_source_title={Innov. Syst. Softw. Eng.},
document_type={Article},
source={Scopus},
}

@BOOK{Baird2013177,
author={Baird, S. and Charlet, A. and Moy, Y. and Taft, T.},
title={CodePeer - Beyond Bug-finding with Static Analysis},
journal={Static Analysis of Software: The Abstract Interpretation},
year={2013},
pages={177-205},
doi={10.1002/9781118602867.ch5},
note={cited By 1},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84888724393&doi=10.1002%2f9781118602867.ch5&partnerID=40&md5=4524bc2c90d173f55f80234ed78d3be0},
affiliation={ADACORE, Paris, France; SofCheck, Burlington, United States},
author_keywords={Caller-relevant objects;  CodePeer;  Integrated development environment (IDE);  Possible value propagation (PVP);  Run-time errors;  SCIL program;  Uninitialized and invalid variables},
references={Banning, J.P., An efficient way to find the side effects of procedure calls and the aliases of variables (1979) Proceedings of the 6th International Conference on Principles of Programming Languages, , San Antonio; Chess, B., West, J., Static Analysis as Part of the Code Review Process (2007) Secure Programming with Static Analysis, , Chapter 3, Addison-Wesley; Hind, M., Pointer analysis: haven't we solved this problem yet? (2001) PASTE'01, Workshop on Program Analysis for Software Tools and Engineering, , Snowbird, Utah; Ottenstein, K.J., Ballence, R.A., Maccabe, A.B., The program dependence web: a representation supporting control-, data- and demand-driven interpretation of imperative languages (1990) PLDI'90, Proceedings of the International Conference on Programming Language Design and Implementation, pp. 257-271. , White Plains, New York; Staiger, S., Vogel, G., Keul, S., Wiebe, E., (2007) Interprocedural Static Single Assignment Form in Bauhaus, , Technical Report, University of Stuttgart, Department of Computer Science},
correspondence_address1={Baird, S.; ADACORE, Paris, France},
publisher={John Wiley and Sons},
isbn={9781848213203},
language={English},
abbrev_source_title={Static Anal. of Softw.: The Abstract Interpret.},
document_type={Book Chapter},
source={Scopus},
}

@ARTICLE{Qiu201353,
author={Qiu, J. and Su, X. and Ma, P.},
title={Defect detection for assembly codes based on static analysis},
journal={Harbin Gongye Daxue Xuebao/Journal of Harbin Institute of Technology},
year={2013},
volume={45},
number={2},
pages={53-59},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84876056754&partnerID=40&md5=3f84657c4ad7237a1b88e28f34c27b8a},
affiliation={School of Computer Science and Technology, Harbin Institute of Technology, 150001 Harbin, China},
abstract={Aiming at the present situation that needs to develop a code review tool for assembly codes, this paper studies the procedure of manual code reviews and proposes a method to detect defects in assembly codes based on static analysis. After the control flow linearization, compiler patterns are used to solve indirect jumps, and node cloning is used to recover the control flow of the delayed branch. In the construction of inter-procedural control flow graph, the recursive function is in-lined by means of a call trace with limited depth. The prototyping tool for ADSP SHARC assembly codes is realized finally. Experimental results show that the tool can effectively detect defects in loops, registers, and memory accessing.},
author_keywords={Assembly code;  Defect detection;  Delayed branch;  Static analysis},
keywords={Assembly code;  Control flow graphs;  Control flows;  Defect detection;  Delayed branch;  Inter-procedural;  Present situation;  Prototyping tools, Data flow analysis;  Defects;  Genetic engineering;  Recursive functions, Static analysis},
references={Bermudo, N., Krall, A., Horspool, N., Control flow graph reconstruction for assembly language programs with delayed instructions (2005) Proceedings of the 2005 Fifth IEEE International Workshop on Source Code Analysis and Manipulation(SCAM'05), pp. 107-118. , Washington, DC: IEEE Computer Society; Kastner, D., Wilhelm, S., Generic control flow reconstruction form assembly code (2002) Proceedings of the Joint Conference on Languages, Compilers and Tools for Embedded Systems: Software and Compilers for Embedded Systems, pp. 46-55. , New York, NY: ACM; Schlich, B., Loll, J., Kowalewski, S., Application of static analyses for state space reduction to microcontroller assembly code (2008) Proceedings of the 12th International Conference on Formal Methods for Industrial Critical Systems, pp. 21-37. , Berlin, Heidelberg: Springer-Verlag; Aho, A.V., Ullman, J.D., (1980) Principles of Compiler Design Theory, , Boston: Addison-Wesley; (2005), 17 (11), pp. 2477-2483. , Chinese source; Code example (2011), http://www-analog-com.luisamigo.proxybk.com/en/processors-dsp/sharc/products/ code-examples/21065L_audio_demos/resources/fca.html; Zivojnovic, V., Velarde, J.M., Schlager, C., DSPstone: a DSP-oriented benchmarking methodology (1994) Proceedings of the International Conference on Signal Processing and Technolog(ICSPAT'94), pp. 715-720. , Dallas, [s.n.]: ICE},
correspondence_address1={Qiu, J.; School of Computer Science and Technology, , 150001 Harbin, China; email: qj@sse.hit.edu.cn},
issn={03676234},
coden={HPKYA},
language={Chinese},
abbrev_source_title={Harbin Gongye Daxue Xuebao},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Muske2013106,
author={Muske, T.B. and Baid, A. and Sanas, T.},
title={Review efforts reduction by partitioning of static analysis warnings},
journal={IEEE 13th International Working Conference on Source Code Analysis and Manipulation, SCAM 2013},
year={2013},
pages={106-115},
doi={10.1109/SCAM.2013.6648191},
art_number={6648191},
note={cited By 24; Conference of 2013 IEEE 13th International Working Conference on Source Code Analysis and Manipulation, SCAM 2013 ; Conference Date: 22 September 2013 Through 23 September 2013;  Conference Code:101472},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84891086535&doi=10.1109%2fSCAM.2013.6648191&partnerID=40&md5=50e7f1cf1483427fb8a873062e8a3e22},
affiliation={TRDDC, 54-B Hadapsar Industrial Estate, Pune, MH, 411013, India},
abstract={Static analysis has been successfully employed in software verification, however the number of generated warnings and cost incurred in their manual review is a major concern. In this paper we present a novel idea to reduce manual review efforts by identifying redundancy in this review process. We propose two partitioning techniques to identify redundant warnings - 1) partitioning of the warnings with each partition having one leader warning such that if the leader is a false positive, so are all the warnings in its partition which need not be reviewed and 2) further partitioning the leader warnings based on similarity of the modification points of variables referred to in their expressions. The second technique makes the review process faster by identifying further redundancies and it also makes the reviewing of a warning easier due to the associated information of modification points. Empirical results obtained with these grouping techniques indicate that, on an average, 60% of warnings are redundant in the review context and skipping their review would lead to a reduction of 50-60% in manual review efforts. © 2013 IEEE.},
author_keywords={Analysis warnings;  Data flow analysis;  False positives;  Review of warnings;  Static analysis},
keywords={Data flow analysis;  Redundancy;  Verification, Analysis warnings;  False positive;  Grouping technique;  Partitioning techniques;  Review process;  Software verification, Static analysis},
references={Rival, X., Understanding the origin of alarms in astŕee (2005) SAS, pp. 303-319; Cousot, P., Cousot, R., Basic concepts of abstract interpretation (2004) BUILDING the INFORMATION SOCIETY, p. 4. , Kluwer Academic Publishers; Cousot, P., Abstract interpretation based formal methods and future challenges (2001) Informatics, Ser. Lecture Notes in Computer Science, 2000, pp. 138-156. , R. Wilhelm, Ed. Springer Berlin Heidelberg; Junker, M., Huuck, R., Fehnker, A., Knapp, A., Smt based false positive elimination in static program analysis (2012) ICFEM, pp. 316-331; Fehnker, A., Huuck, R., Model checking driven static analysis for the real world: Designing and tuning large scale bug detection (2013) Innov. Syst. Softw. Eng., 9 (1), pp. 45-56; Post, H., Sinz, C., Kaiser, A., Gorges, T., Reducing false positives by combining abstract interpretation and bounded model checking (2008) ASE, pp. 188-197; Static Analyzer, , http://www-astree-ens-fr.luisamigo.proxybk.com/; Munier, P., (2012) Polyspace, pp. 123-153. , John Wiley &Sons, Inc; Khedker, U., Sanyal, A., Sathe, B., (2009) Data Flow Analysis: Theory and Practice, , http://books-google-co-in.luisamigo.proxybk.com/books, Taylor &Francis, id=9PyrtgNBdg0C; http://www-tcs-com.luisamigo.proxybk.com/resources/brochures/Pages/TCSEmbeddedCodeAnalyzer.asp x; Collard, J.F., Knoop, J., (1998) A comparative study of reaching definitions analyses; Ayewah, N., Pugh, W., Using checklists to review static analysis warnings (2009) Proceedings of the 2nd International Workshop on Defects in Large Software Systems: Held in Conjunction with the ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2009), Ser. DEFECTS '09, pp. 11-15. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1555860.1555864, New York, NY, USA; Kim, S., Ernst, M.D., Which warnings should i fix first (2007) Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, Ser. ESEC FSE '07, pp. 45-54. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1287624.1287633, New York, NY, USA; Spacco, J., Hovemeyer, D., Pugh, W., Tracking defect warnings across versions (2006) Proceedings of the 2006 International Workshop on Mining Software Repositories, Ser. MSR '06, pp. 133-136. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1137983.1138014, New York, NY, USA; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proceedings of the 30th International Conference on Software Engineering, Ser. ICSE '08, pp. 341-350. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1368088.1368135, New York, NY, USA; Boogerd, C., Moonen, L., Prioritizing software inspection results using static profiling (2006) Source Code Analysis and Manipulation, 2006. SCAM '06. Sixth IEEE International Workshop on, pp. 149-160; Heckman, S.S., Adaptively ranking alerts generated from automated static analysis (2007) Crossroads, 14 (1), pp. 71-711. , Available:http://doi.acm.org/10.1145/1349332.1349339, Dec; Ayewah, N., Pugh, W., Morgenthaler, J.D., Penix, J., Zhou, Y., Evaluating static analysis defect warnings on production software (2007) Proceedings of the 7th ACM SIGPLAN SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, Ser. PASTE '07, pp. 1-8. , http://doi-acm-org.luisamigo.proxybk.com/10.1145/1251535.1251536, New York, NY, USA; Heckman, S., Williams, L., A systematic literature review of actionable alert identification techniques for automated static code analysis (2011) Information and Software Technology, 53 (4), pp. 363-387. , http://www-sciencedirect-com.luisamigo.proxybk.com/science/article/pii/S0950584910002235},
sponsors={GrammaTech Inc.; IEEE Computer Society Technical Council on Software Engineering; Semantic Designs Inc.},
publisher={IEEE Computer Society},
address={Eindhoven},
isbn={9781467357395},
language={English},
abbrev_source_title={IEEE Int. Work. Conf. Source Code Anal. Manip., SCAM},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Halem2013118,
author={Halem, N. and Zouzou, S.E. and Srairi, K. and Guedidi, S. and Abbood, F.A.},
title={Static eccentricity fault diagnosis using the signatures analysis of stator current and air gap magnetic flux by finite element method in saturated induction motors},
journal={International Journal of System Assurance Engineering and Management},
year={2013},
volume={4},
number={2},
pages={118-128},
doi={10.1007/s13198-013-0164-7},
note={cited By 13},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84878739406&doi=10.1007%2fs13198-013-0164-7&partnerID=40&md5=06d81442e4565be07b2819e2a6946d18},
affiliation={Laboratoire de Génie Electrique (LGEB), Département de Génie Electrique, Université de Biskra, BP 145 RP, 07000 Biskra, Algeria; Laboratoire de Modélisation des Systèmes Energétiques (LMSE), Département de Génie Electrique, Université de Biskra, BP 145 RP, 07000 Biskra, Algeria; Département de Génie Electrique, Université de Babylon, Babylon, Iraq},
abstract={Static eccentricity produces low frequency air gap flux components, however they can be observed in stator current spectrum only under mixed eccentricity, and for high degrees of rotor shifting. Unlike motor current signature analysis, the air-gap magnetic flux signature analysis allows to detect small degree of purely static eccentricity. The simulation results are obtained by using time stepping finite elements method. In order to indicate the influence of the magnetic saturation upon the analysis of the faulty induction motor, two constant and non-liner permeability; are included in this paper. It is shown that the fault index amplitudes of obtained signals from the constant permeability are larger than that of the real case. In this paper the amplitudes of characteristic frequency components fecc = |fs ± k1pt fr| with low degrees of purely static eccentricity fault are detected using air-gap magnetic flux signature analysis. Moreover, new index signatures are detected around the third time harmonics in air-gap magnetic flux density spectrum for saturated motor, those components are expressed by fecc = mfs ± fr. © 2013 The Society for Reliability Engineering, Quality and Operations Management (SREQOM), India and The Division of Operation and Maintenance, Lulea University of Technology, Sweden.},
author_keywords={Air-gap magnetic flux signature analysis (FSA);  Induction motor;  Magnetic saturation;  Motor current signature analysis (MCSA);  Static eccentricity (SE);  Time stepping finite elements method (TSFEM)},
keywords={Electric fault currents;  Electric machine theory;  Electric motors;  Finite element method;  Induction motors;  Magnetic flux;  Mechanical permeability;  Saturation magnetization;  Stators, Air-gap magnetic flux densities;  Characteristic frequencies;  Constant permeabilities;  Mixed eccentricity;  Motor current signature analysis;  Signature analysis;  Static eccentricities;  Time-stepping finite elements, Magnetic devices},
references={Akar, M., Detection of a static eccentricity fault in a closed induction motor by using the angular domain order tracking analysis method (2013) Mech Syst Signals Process, 34 (2013), pp. 173-182. , 10.1016/j.ymssp.2012.04.003; Andriamalala, R.N., Razik, H., Baghli, L., Sargos, F.M., Eccentricity fault diagnosis of a dual-stator winding induction machine drive considering the slotting effects (2008) IEEE Trans Ind Electron, 55 (12), pp. 4238-4251. , 10.1109/TIE.2008.2004664; Arkkio, A., Lindgren, O., Unbalanced magnetic pull in a high speed induction motor with an eccentric rotor (1994) Proceedings of ICEM'94, Paris, 5-8 September 1994, pp. 53-58; Bacha, K., Gossa, M., Henao, H., Capolino, G.A., Comparative investigation of diagnosis media of stator voltage asymmetry and rotor broken bars in induction machines (2006) IEEE 32nd Annual Conference on Industrial Electronics, pp. 5040-5045; Bangura, F., Demerdash, N.A., Performance and torque-ripple characterization in induction motor adjustable-speed drives using time-stepping coupled finite-element state-space techniques (1999) IEEE Trans Ind Appl, 35 (5), pp. 982-990. , 10.1109/28.793357; Bangura, F., Demerdash, N.A., Comparison between characterization and diagnosis of broken bars/end-ring connectors and airgap eccentricities of induction motor in ASD's using a coupled finite element-state space method (2000) IEEE Trans Energy Convers, 15 (1), pp. 48-56. , 10.1109/60.849115; Belkhayat, D., Romary, R., El Adnani, M., Corton, R., Brudny, J.F., Fault diagnosis in induction motors using radial field measurement with an antenna (2003) Meas Sci Technol, 14 (2003), pp. 1695-1700. , 10.1088/0957-0233/14/9/322; Benbouzid, M.H., Kliman, G.B., Fellow, L., What stator current processing-based technique to use for induction motor rotor faults diagnosis (2003) IEEE Trans Energy Convers, 18 (2), pp. 238-244. , 10.1109/TEC.2003.811741; Cameron, J.R., Thomson, W.T., Dow, A.B., Vibration and current monitoring for detecting air-gap eccentricity in large induction motors (1986) Proc Inst Electr Eng, 133 (3), pp. 155-163; Ceban, A., Pusca, R., Romary, R., Study of rotor faults in induction motors using external magnetic field analysis (2012) IEEE Trans Ind Electron, 59 (5), pp. 2082-2093. , 10.1109/TIE.2011.2163285; Concari, C., Franceschini, G., Tassoni, C., Differential diagnosis based on multivariable monitoring to assess induction machine rotor conditions (2008) IEEE Trans Ind Electron, 55 (12), pp. 4156-4166. , 10.1109/TIE.2008.2003212; Dorell, D.G., Sources and characteristics of unbalanced magnetic pull in three-phase cage induction motor with axial-varying rotor eccentricity (2011) IEEE Trans Ind Appl, 47 (1), pp. 12-24. , 10.1109/TIA.2010.2090845; Dorell, D.G., Thomson, W.T., Roach, S., Analysis of air-gap flux, current, vibration signals as a function of the combination of static and dynamic air-gap eccentricity in 3-phase induction motors (1997) IEEE Trans Ind Appl, 33 (1), pp. 24-34. , 10.1109/28.567073; Drif, M., Cardoso, A.J.M., Air gap-eccentricity fault diagnosis, in three-phase induction motors, by the complex apparent power signature analysis (2008) IEEE Trans Ind Electron, 55 (3), pp. 1404-1410. , 10.1109/TIE.2007.909076; Faiz, J., Ebrahini, B.M., Locating rotor broken bars in induction motors using finite element method (2009) Energy Conversat Manag, 50, pp. 125-131. , 10.1016/j.enconman.2008.08.025; Faiz, J., Ebrahimi, B.M., Akin, B., Toliyat, H.A., Finite-element transient analysis of induction motors under mixed eccentricity fault (2008) IEEE Trans Magn, 44 (1), pp. 66-74. , 10.1109/TMAG.2007.908479; Faiz, J., Ebrahimi, B.M., Toliyat, H.A., Effect of magnetic saturation on static and mixed eccentricity fault diagnosis in induction motor (2009) IEEE Trans Magn, 45 (8), pp. 3137-3144. , 10.1109/TMAG.2009.2016416; Faiz, J., Ebrahimi, B.M., Akin, B., Toliyat, H.A., Comprehensive eccentricity fault diagnosis in induction motors using finite element method (2009) IEEE Trans Magn, 45 (3), pp. 1764-1767. , 10.1109/TMAG.2009.2012812; Faiz, J., Ebrahimi, B.M., Akin, B., Toliyat, H.A., Dynamic analysis of mixed eccentricity signatures at various operating points and scrutiny of related indices for induction motor (2010) IET Electr Power Appl, 4 (1), pp. 1-16. , 10.1049/iet-epa.2008.0224; Feki, N., Clerc, G., Velex, P., Gear and motor fault modeling and detection based on motor current analysis (2013) Electr Power Syst Res, 95 (2013), pp. 28-37. , 10.1016/j.epsr.2012.08.002; Ghoggal, A., Zouzou, S.E., Razik, H., Sahraoui, M., Khezzar, A., An improved model of induction motors for diagnosis purposes-slot skewing effect and air-gap eccentricity faults (2009) Energy Convers Manag, 50 (2), pp. 1336-1347. , 10.1016/j.enconman.2009.01.003; Gyftakis, K.N., Kappatou, J.C., A novel and effective method of static eccentricity diagnosis in three-phase PSH induction motors (2013) IEEE Trans Energy Convers, 99, pp. 1-8; Henao, H., Demian, C., Capolino, G.A., A frequency-domain detection of stator winding faults in induction machines using an external flux sensor (2003) IEEE Trans Ind Appl, 39 (5), pp. 1272-1279. , 10.1109/TIA.2003.816531; Hyun, D., Lee, S., Hong, J., Lee, S.B., Nandi, S., Detection of airgap eccentricity for induction motors using the single-phase rotation test (2012) IEEE Trans Energy Convers, 27 (3), pp. 689-696. , 10.1109/TEC.2012.2198218; Joksimovic, G., Stator current harmonics in saturated cage and wound rotor induction motors (2010) XIX International Conference on Electrical Machines, ICEM 2010, Rome; Joksimovic, G., Line current spectrum analysis in saturated three-phase cage induction machine (2010) Electr Eng, 91 (8), pp. 425-437. , 10.1007/s00202-010-0151-9; Joksimovic, G., Riger, J., Wolbank, T., Peric, N., Vasak, M., (2011) Stator Line Current Spectrum Content of A Healthy Cage Rotor Induction Machine, , SDEMPED Bologna; Kia, S.H., Henao, H., Capolino, G.H., Martis, C., Induction machine broken bars fault detection using stray flux after supply disconnection (2006) IEEE 32nd Annual Conference Industrial Electronics, pp. 1498-1503; Li, X., Wu, Q., Nandi, S., Performance analysis of three-phase induction machine with inclined static eccentricity (2007) IEEE Trans Ind Appl, 43 (2), pp. 531-541. , 10.1109/TIA.2006.889806; Lombard, P., Meunier, G., A general method for electric and magnetic coupled problem in 2D and magnetodynamic domain (1992) IEEE Trans Magn, 28 (2), pp. 1291-1294. , 10.1109/20.123926; Nandi, S., A detailed model of induction machines with saturation extendable for fault analysis (2004) IEEE Trans Ind Appl, 40 (5), pp. 1302-1309. , 10.1109/TIA.2004.834101; Nandi, S., Bharadwaj, R.M., Toliyat, H., Performance analysis of a three-phase induction motor under mixed eccentricity condition (2002) IEEE Trans. Energy Convers, 17 (3), pp. 392-399. , 10.1109/TEC.2002.801995; Nandi, S., Ilamparithi, T.C., Lee, S.B., Hyun, D., Detection of eccentricity faults in induction machines based on nameplate parameters (2011) IEEE Trans Ind Appl, 58 (5), pp. 1673-1683; Ondel, O., Yazidi, A., Boutleux, E., Clerc, G., Henao, H., Casimir, R., Capolino, G.A., Comparative study of two diagnosis methods induction machine (2004) IEEE International Conference on Industrial Technology, pp. 159-165; Povinelli, R.J., Bangura, J.F., Demerdash, N.A., Brown, R.H., Diagnostics of bar and end-ring connector breakage faults in polyphase induction motors through a novel dual track of time-series data mining and time-stepping coupled finite element-state space modeling (2002) IEEE Trans Energy Convers, 17 (1), pp. 39-46. , 10.1109/60.986435; Preston, T.W., Reece, A.B.J., Sangha, P.S., Induction motor analysis by time-stepping technique (1988) IEEE Trans Magn, 24 (1), pp. 471-474. , 10.1109/20.43959; Sadowski, N., Carlson, R., Arruda, S.R., Silva, C.A., Mazenc, M.L., Simulation of single-phase induction motor by general method coupling field and circuit equations (1995) IEEE Trans Magn, 31 (3), pp. 1908-1911. , 10.1109/20.376412; Sahraoui, M., Ghoggal, A., Zouzou, S.E., Benbouzid, M.E., Dynamic eccentricity in squirrel cage induction motors-simulation and analytical study of its spectral signatures on stator currents (2008) Simul Model Pract Theory, 16 (4), pp. 1503-1513. , 10.1016/j.simpat.2008.08.007; Salon, S.J., Burow, D.W., Ashly, R.E., Ovacik, L., Debotoli, M.J., Finite element analysis of induction machine in the frequency domain (1993) IEEE Trans Magn, 29 (2), pp. 1438-1441. , 10.1109/20.250673; Samaga, B.L.R., Vittal, K.P., Comprehensive study of mixed eccentricity fault diagnosis in induction motors using signature analysis (2012) Electr Power Energy Syst, 35 (2012), pp. 180-185. , 10.1016/j.ijepes.2011.10.011; Sangha, P.S., Preston, T.W., Reece, A.B.J., Design analysis by finite-element time-stepping technique (1989) Proceedings of IEE Fourth International Conference on Electrical Machines and Drives, pp. 11-15; Tenhunen, A., Finite-element calculation of unbalanced magnetic pull and circulating current between parallel windings in induction motor with non-uniform eccentric rotor (2001) Proceedings of Electromotion'01, 19-20 June 2001, Bologna, pp. 19-24; Thomson, W.T., Barbour, A., On-line current monitoring and application of finite element method to predict the level of static airgap eccentricity in three-phase induction motors (1998) IEEE Trans Energy Convers, 13 (4), pp. 347-357. , 10.1109/60.736320; Vaseghi, B., Takorabet, N., Meibody-Tabar, F., Transient finite element analysis of induction machines with stator winding turn fault (2009) Prog Electromagn Res PIER, 95, pp. 1-18. , 10.2528/PIER09052004; Vitek, O., Janda, M., Hajek, V., Effects of eccentricity on external magnetic field of induction machine (2010) Melecon 15th IEEE Mediterranean Electrotechnical Conference, pp. 939-943; Werner, U., FE-analysis of a soft-mounted two-pole induction motor regarding relative shaft vibration caused by static rotor eccentricity (2012) International Symposium on Power Electronics, Electrical Drives, Automation and Motion, pp. 1448-1445; Yazidi, A., Henao, H., Capolino, G.A., Artioli, M., Filippetti, F., Casadei, D., Flux signature analysis: An alternative method for the fault diagnosis of induction machines (2007) IEEE Power Tech Russia, pp. 675-680; Zouzou, S.E., Khelif, S., Halem, N., Sahraoui, M., Analysis of induction motor with broken rotor bars using circuit-field coupled method (2011) International Conference on Electric Power and Energy Conversion Systems, Sharjah, UAE, 15-17 November 2011},
correspondence_address1={Halem, N.; Laboratoire de Génie Electrique (LGEB), BP 145 RP, 07000 Biskra, Algeria; email: n_halem55@yahoo.fr},
publisher={Springer},
issn={09756809},
language={English},
abbrev_source_title={Intl. J. Syst. Assur. Eng. Manage.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Akar2013173,
author={Akar, M.},
title={Detection of a static eccentricity fault in a closed loop driven induction motor by using the angular domain order tracking analysis method},
journal={Mechanical Systems and Signal Processing},
year={2013},
volume={34},
number={1-2},
pages={173-182},
doi={10.1016/j.ymssp.2012.04.003},
note={cited By 40},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84870246782&doi=10.1016%2fj.ymssp.2012.04.003&partnerID=40&md5=268867fdcccedac482e097355edac2ee},
affiliation={Gaziosmanpasa University, Faculty of Engineering and Natural Sciences, Mechatronics Engineering Department, 60150 Tokat, Turkey},
abstract={In this study, a new method was presented for the detection of a static eccentricity fault in a closed loop operating induction motor driven by inverter. Contrary to the motors supplied by the line, if the speed and load, and therefore the amplitude and frequency, of the current constantly change then this also causes a continuous change in the location of fault harmonics in the frequency spectrum. Angular Domain Order Tracking analysis (AD-OT) is one of the most frequently used fault diagnosis methods in the monitoring of rotating machines and the analysis of dynamic vibration signals. In the presented experimental study, motor phase current and rotor speed were monitored at various speeds and load levels with a healthy and static eccentricity fault in the closed loop driven induction motor with vector control. The AD-OT method was applied to the motor current and the results were compared with the traditional FFT and Fourier Transform based Order Tracking (FT-OT) methods. The experimental results demonstrate that AD-OT method is more efficient than the FFT and FT-OT methods for fault diagnosis, especially while the motor is operating run-up and run-down. Also the AD-OT does not incur any additional cost for the user because in inverter driven systems, current and speed sensor coexist in the system. The main innovative parts of this study are that AD-OT method was implemented on the motor current signal for the first time. © 2012 Elsevier Ltd.},
author_keywords={Eccentricity;  Fault diagnosis;  Induction motors;  Order tracking analysis;  Transient analysis},
keywords={Additional costs;  Angular domain;  Closed loops;  Driven system;  Dynamic vibration;  Eccentricity;  Experimental studies;  Fault diagnosis method;  Frequency spectra;  Load levels;  Location of fault;  Motor currents;  Motor phase;  Order tracking;  Order tracking analysis;  Rotating machine;  Rotor speed;  Speed sensors;  Static eccentricities;  Vector controls, Bearings (machine parts);  Failure analysis;  Fast Fourier transforms;  Induction motors;  Transient analysis, Fault detection},
references={Rosero, J., Cusido, J., Garcia, A., Ortega, J., Romeral, L., On-line condition monitoring technique for PMSM operating with eccentricity (2007) Proceedings of the 6th IEEE International Symposium on Diagnostics for Electric Machines, Power Electronics and Drives, IEEE SDEMPED, , Cracow, Poland; Seker, S., Determination of air-gap eccentricity in electric motors using coherence analysis (2000) IEEE Power Eng. Rev., 20, pp. 48-50; Seker, S., Ayaz, E., A reliability model for induction motor ball bearing degradation (2003) Electr. Power Components Syst., 31, pp. 639-652; Ayaz, E., Seker, S., Ozturk, A., Continuous wavelet transform for bearing damage detection in electric motors (2006) Proceedings of the IEEE, Melecon, Benalmádena (Málaga), , Spain; Ayaz, E., Seker, S., Ozturk, A., Upadhyaya, B.R., Fault detection based on continuous wavelet transform and sensor fusion in electric motors (2009) Compel, 28 (2), pp. 454-470; Nandi, S., Toliyat, H.A., Li, X., Condition monitoring and fault diagnosis of electrical motors - A review (2005) IEEE Transactions on Energy Conversion, 20 (4), pp. 719-729. , DOI 10.1109/TEC.2005.847955; Seker, S., Ayaz, E., Feature extraction related to bearing damage in electric motors by wavelet Analysis (2003) J. Franklin Inst., 340, pp. 125-134; Akin, B., Toliyat, H., Orguner, U., Rayner, M., Low-cost motor drive-embedded fault diagnosis - A simple harmonic analyzer (2007) Proceedings of the Applied Power Electronics Conference, APEC, 2007 - 22nd Annual IEEE, , California, USA; Wolbank, T.M., MacHeiner, P.E., Monitoring of static and dynamic air gap eccentricity of nverter fed nduction machine drives (2006) Proceedings of the IEEE Industrial Electronics, IECON, 2006 - 32nd Annual Conference, Paris; Doosoo, H., Jongman, H., Sang, B.L., Kwonhee, K., Wiedenbrug, E.J., Teska, M., Nandi, S., Chelvan, I.T., Automated monitoring of airgap eccentricity for inverterfed induction motors under standstill conditions (2010) Proceedings of the Energy Conversion Congress and Exposition, ECCE, Atlanta; Georgakopoulos, I.P., Mitronikas, E.D., Safacas, A.N., Tsoumas, I.P., Detection of eccentricity in inverter-fed induction machines using wavelet analysis of the stator current (2008) Proceedings of the Power Electronics Specialists Conference, PESC, Rhodes; Huang, X., Habetler, T.G., Detection of mixed air gap eccentricity in closed-loop drive-connected induction motors (2003) Proceedigns of the Diagnostics for Electric Machines, Power Electronics and Drives, SDEMPED 2003, USA; Huang, X., Habetler, T.G., Harley, R.G., Detection of rotor eccentricity faults in a closed-loop drive-connected induction motor using an artificial neural network (2007) IEEE Transactions on Power Electronics, 22 (4), pp. 1552-1559. , DOI 10.1109/TPEL.2007.900607; Rodriquez, P.V.J., Negrea, M., Arkkio, A., A simplified scheme for induction motor condition monitoring (2008) Mech. Syst. Signal Process., 22, pp. 1216-1236; Trajin, B., Chabert, M., Regnier, J., Faucher, J., Hilbert versus Concordia transform for three-phase machine stator current time-frequency monitoring (2009) Mech. Syst. Signal Process., 23, pp. 2648-2657; Akar, M., Taskn, S., Seker, S., Cankaya, I., Detection of static eccentricity for permanent magnet synchronous motors using the coherence analysis (2010) Turk. J. Electr. Eng. Comput. Sci., 18, pp. 963-974; Kral, C., Habetler, T.G., Harley, R.G., Detection of mechanical imbalances of induction machines without spectral analysis of time-domain signals (2004) IEEE Trans. Ind. Appl., 40, pp. 1101-1106; Vas, P., (1993) Parameter Estimation, Condition Monitoring, and Diagnosis of Electrical Machines, , Clarendron Press Oxford; (2009) National Instruments, Sound and Vibration Measurement Suite 2009 Help Manual, Part No. 372416C-01, June; Blough, J.R., Development and analysis of time variant discrete fourier transform order tracking (2003) Mech. Syst. Signal Process., 17, pp. 1185-1199; Fyfe, K.R., Munck, D.S., Analysis of computed order tracking (1997) Mech. Syst. Signal Process., 11, pp. 187-205; Vold, H., Herlufsen, H., Mains, M., Corwin-Renner, D., Multi axle order tracking with the Vold-Kalman tracking filter (1997) S V Sound and Vibration, 31 (5), pp. 30-34; Albright, M.F., Qian, S., A comparasion of the newly proposed gabor order tracking technique vs. other order tracking methods (2001) Proceedings of the Noise and Vibration Conference and Exposition, SAE, April},
correspondence_address1={Akar, M.; Gaziosmanpasa University, , 60150 Tokat, Turkey; email: mehmet.akar@gop.edu.tr},
issn={08883270},
coden={MSSPE},
language={English},
abbrev_source_title={Mech Syst Signal Process},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Manzoor2012129,
author={Manzoor, N. and Munir, H. and Moayyed, M.},
title={Comparison of static analysis tools for finding concurrency bugs},
journal={Proceedings - 23rd IEEE International Symposium on Software Reliability Engineering Workshops, ISSREW 2012},
year={2012},
pages={129-133},
doi={10.1109/ISSREW.2012.28},
art_number={6405429},
note={cited By 7; Conference of 23rd IEEE International Symposium on Software Reliability Engineering Workshops, ISSREW 2012 ; Conference Date: 27 November 2012 Through 30 November 2012;  Conference Code:95287},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84873375300&doi=10.1109%2fISSREW.2012.28&partnerID=40&md5=1764c8e6a13f726435a0490dabd5fab4},
affiliation={Blekinge Institute of Technology, Karlsrkona, Sweden},
abstract={This paper highlights the issues of detecting Java concurrency bugs using static code analysis tools. Concurrency bugs are often hard to find because of interleaving threads and there is need to use static analysis tools to detect the concurrency bugs. In the literature review, we established that there are number of static analysis tools such as FindBugs, JLint and Chord, used in experiments to determine their ability to detect the Java concurrency bugs. However, there are still tools in the class of open source static analysis that needs experimental evidence for their ability to find concurrency bugs. In this study we selected three tools CheckThread, RacerX and RELAY. The experiment and survey is used to find out the answers for formulated research questions in the introduction section. © 2012 IEEE.},
author_keywords={Concurrency bugs;  Static analysis tools;  Static code analysis},
keywords={Concurrency bugs;  Experimental evidence;  Literature reviews;  Open sources;  Research questions;  Static code analysis;  Static code analysis tools, Experiments;  Software reliability;  Technical presentations, Static analysis},
references={Kester, D., Mwebesa, M., Bradbury, J.S., How good is static analysis at finding concurrency bugs? (2010) 2010 10th IEEE Working Conference on Source Code Analysis and Manipulation, pp. 115-124. , Timisoara, Romania; Rutar, N., Almazan, C.B., Foster, J.S., A comparison of bug finding tools for java (2004) Software Reliability Engineering, International Symposium on, pp. 245-256. , Los Alamitos, CA, USA; Almasi, G., Gottlieb, A., (1989) Highly Parallel Computing, , Redwood City, CA, USA: Benjamin-Cummings Publ. Co.,Inc; Hovemeyer, D., Pugh, W., Finding concurrency bugs in java (2004) Proceedings of the PODC Workshop on Concurrency and Synchronization in Java Programs, St. John's, Newfoundland, Canada; Lu, S., Park, S., Seo, E., Zhou, Y., Learning from mistakes: A comprehensive study on real world concurrency bug characteristics (2008) ACM SIGPLAN Notices, 43, pp. 329-339; Ben-Asher, Y., Farchi, E., Eytani, Y., Heuristics for finding concurrent bugs (2003) Parallel and Distributed Processing Symposium; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proceedings of the 30th International Conference on Software Engineering, pp. 341-350; Stobie, K., Too darned big to test (2005) Queue, 3, pp. 30-37. , Feb; Dawson, D.C., (2009) Projects in Computing and Information Systems: A Student's Guide, , 2nd ed. Addison Wesley; Voung, J.W., Jhala, R., Lerner, S., RELAY: Static race detection on millions of lines of code (2007) Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 205-214; Yu, X., Modulation of p53, ErbB1, ErbB2, and Raf-1 expression in lung cancer cells by depsipeptide FR901228 (2002) Journal of the National Cancer Institute, 94 (7), p. 504; CheckThread A Static Analysis Tool for Catching Java Concurrency Bugs | Javalobby, , http://checkthread-org.luisamigo.proxybk.com/index.html, [Accessed: 05-May-2011]; IBM Haifa Labs | ConTest - A Tool for Testing Multi-threaded Java Applications, , http://www-research-ibm-com.luisamigo.proxybk.com/haifa/projects/verification/contest/index. html, [Accessed: 20-Mar-2011]; Projects/start - Java Path Finder, , http://babelfish-arc-nasa-gov.luisamigo.proxybk.com/trac/jpf/wiki/projects/start, [Accessed: 20-Mar-2011]},
correspondence_address1={Manzoor, N.; Blekinge Institute of Technology, Karlsrkona, Sweden; email: numan.manzoor@live.se},
address={Dallas, TX},
isbn={9780769549286},
language={English},
abbrev_source_title={Proc. - Int. Symp. Softw. Reliab. Eng. Workshops, ISSREW},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Lai2012794,
author={Lai, X. and Zhou, K. and Li, L. and Tang, L. and Yao, Y. and Yu, L.},
title={A method of software defects mining based on static analysis},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2012},
volume={7345 LNAI},
pages={794-807},
doi={10.1007/978-3-642-31087-4_80},
note={cited By 1; Conference of 25th International Conference on Industrial Engineering and Other Applications of Applied Intelligent Systems, IEA/AIE 2012 ; Conference Date: 9 June 2012 Through 12 June 2012;  Conference Code:91432},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84864338460&doi=10.1007%2f978-3-642-31087-4_80&partnerID=40&md5=6a2c565171c41b0d46fe60561ef325a5},
affiliation={Faculty of Electronic Information and Electrical, Dalian University of Technology, Dalian, China; School of Software, Dalian University of Technology, Dalian, China},
abstract={Software defects are easy to cause when programming by C++ language, because of its features of flexibility and complexity, as well as its large number of undefined behaviors. According to "MISRA C++ 2008" safe subset, a method of software defects mining is raised based on static analysis technology. Source files can be converted into XML intermediate files, while rules in safe subset are expressed by XQuery expressions. And then match each rule to XML intermediate files to find the location of defects in source files. The experimental result of the prototype system shows that the software defects conflicting to safety rules can be mined effectively with low false alarm rate and low false negative rate. © 2012 Springer-Verlag.},
author_keywords={extensible markup language;  mining;  rules matching;  software defects;  static analysis},
keywords={C++ language;  False alarm rate;  False negative rate;  Prototype system;  rules matching;  Safety rules;  Software defects;  Source files;  XQuery expressions, Computer software;  Defects;  Industrial engineering;  Intelligent systems;  Mining;  Software prototyping;  XML, Static analysis},
funding_details={Fundamental Research Funds for the Central UniversitiesFundamental Research Funds for the Central Universities, 1600-893321, DUT12JR03},
funding_text 1={Supported by “the Fundamental Research Funds for the Central Universities” under Grant DUT12JR03, and “the Fundamental Research Funds for the Central Universities” under Grant No. 1600-893321.},
references={Chen, H., Wang, J., Wei, D., High Confidence Software Engineering Technologies (2003) Acta Electronica Sinica, 31 (12), pp. 1933-1938; Christey, S., Martin, R.A., Vulnerability Type Distributions in CVE (2007) The MITRE Corporation, pp. 1-38; Hoare, C.A.R., The verifying compiler: A grand challenge for computing research (2003) Journal of the ACM, 50 (1), pp. 63-69; Zhang, J., Sharp Static Analysis of Programs (2008) Chinese Journal of Computers, 31 (9), pp. 1549-1553; Cui, Z., Wang, L., Li, X., Target-Directed Concolic Testing (2011) Chinese Journal of Computers, 34 (6), pp. 953-964; Hwang, J.G., Jo, H.J., Kim, B.H., Jeong, R.G., Development of Automatic Testing Tool for Software Coding Rules for Railway Signalling (2009) IEEE T&D Asia; Chess, B., McGraw, G., Static analysis for security (2004) IEEE Security & Privacy, (6), pp. 67-69; Larochelle, D., Evans, D., Statically Detecting Likely Buffer Overflow Vulnerabilities (2001) Proc.10th Usenix Security Symp. (USENIX 2001), pp. 177-189. , Usenix Assoc; Chen, H., Wagner, D., MOPS:An Infrastructure for Examining Security Properties of Software (2002) Proc. 9th ACM Conf. Computer and Communications Security (CCS 2002), pp. 235-244. , ACM Press; Zheng, H., Zhou, K., Research on XML based static software security analysis (2010) Proc. 2nd WRI World Congress on Software Engineering (WCSE 2010), pp. 141-144; Antoniol, G., XML-Oriented gcc AST Analysis and Transformations (2005) Proceedings of the Third IEEE International Workshop on Source Code Analysis and Manipulation, pp. 869-901; Kraft, N.A., Duffy, E.B., Malloy, B.A., Grammar Recovery from Parse Trees and Metrics-Guided Grammar Refactoring (2009) IEEE Transactions on Software Engineering, 35 (6), pp. 780-794; Kraft, N.A., Malloy, B.A., Power, J.F., An Infrastructure to Support Interoperability in Reverse Engineering (2007) Information and Software Technology, 49 (3), pp. 292-307},
correspondence_address1={Lai, X.; Faculty of Electronic Information and Electrical, , Dalian, China; email: far.away@tom.com},
sponsors={International Society of Applied Intelligence (ISAI); Association for the Advancement of Artificial Intelligence (AAAI); Association for Computing Machinery (ACM/SIGART, SIGKDD); Austrian Association for Artificial Intelligence (OeGAI); Catalan Association for Artificial Intelligence (ACIA)},
address={Dalian},
issn={03029743},
isbn={9783642310867},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Kacenka2012206,
author={Kacenka, V. and Rafajdus, P. and Makys, P. and Vavrus, V. and Szabó, L.},
title={Static and dynamic fault analysis of switched reluctance motor},
journal={Proceedings of 9th International Conference, ELEKTRO 2012},
year={2012},
pages={206-211},
doi={10.1109/ELEKTRO.2012.6225639},
art_number={6225639},
note={cited By 10; Conference of 9th International Conference on ELEKTRO 2012 ; Conference Date: 21 May 2012 Through 22 May 2012;  Conference Code:91294},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84864250280&doi=10.1109%2fELEKTRO.2012.6225639&partnerID=40&md5=fa32002f490b0e1e93be440aaf09c36f},
affiliation={University of Zilina, Faculty of Electrical Engineering, Department of Power Electrical Systems, Zilina, Slovakia; Technical University of Cluj-Napoca, Department of Electrical Machines and Drives, Cluj-Napoca, Romania},
abstract={This paper deals with static and dynamic analysis of the Switched Reluctance Motor (SRM) under fault operating conditions. The static analysis is carried out by means of Finite Element Method (FEM) to investigate static parameters of the SRM for health and some defined faults of the phases. These static parameters are used in the dynamic model of the SRM and some transients are simulated for normal condition and also for fault operation. The comparison with experimental results is presented. © 2012 IEEE.},
author_keywords={fault operation;  parameter analysis;  switched reluctance motor},
keywords={Fault operation;  Finite element method FEM;  Normal condition;  Operating condition;  Parameter analysis;  Static and dynamic;  Static and dynamic analysis;  Static parameters;  Switched Reluctance Motor, Finite element method, Reluctance motors},
references={Miller, T.J.E., (2001) Electronic Control of Switched Reluctance Machines, , Oxford (U.K.): Newnes; Miller, T.J.E., Switched Reluctance Motors and their Control (1992) Magna Physics; Pyrhonen, J., Jokinen, T., Hrabovcova, V., (2008) Design of Rotating Electrical Machines, , John Wiley & Sons; Krishnan, R., (2000) Switched Reluctance Motor Drives - Modeling, Simulation, Analysis, Design, and Applications, , CRC Press LLC, FLA, USA; Schinnerl, B., Gerling, D., Analysis of winding failure of switched reluctance motors Proceedings of the IEEE International Electric Machines and Drives Conference (IEMDC '09), Miami (USA), pp. 738-743; Terec, R., Benţia, I., Ruba, M., Szabó, L., Rafajdus, P., Effects of Winding Faults on the Switched Reluctance Machine's Working Performances LINDI 2011 3rd IEEE International Symposium on Logistics and Industrial Informatics August 25-27, 2011, Budapest, Hungary; Terec, R., Benţia, I., Ruba, M., Szabó, L., Rafajdus, P., On the Usefulness of Numeric Field Computations in the Study of the Switched Reluctance Motor's Winding Faults ISCIII 2011 5th International Symposium on Computational Intelligence and Intelligent Informatics September 15-17, 2011, Floriana, Malta; Rafajdus, P., Hrabovcova, V., Hudak, P., Investigation of Losses and Efficiency in Switched Reluctance Motor EPE-PEMC 2006, Portoroz, Slovenia; DiRenzo, M.T., (2000) Switched Reluctance Motor Control - Basic Operation and Example Using the TMS320F240, , Application Report, Texas Instruments; Visinka, R., Balazovic, P., (2002) 3-Phase Switched Reluctance Motor Control with Encoder Using DSP56F80x, , MOTOROLA Inc},
correspondence_address1={Kacenka, V.; University of Zilina, , Zilina, Slovakia},
sponsors={Orange Slovensko; VUPEX; ASBIS; IBM Slovensko; BETAMONT},
address={Zilina - Rajecke Teplice},
isbn={9781467311793},
language={English},
abbrev_source_title={Proc. Int. Conf., ELEKTRO},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Hirano20111460,
author={Hirano, S. and Yamashita, T.},
title={Analysis of the static stress field around faults lying along and intersecting a bimaterial interface},
journal={Geophysical Journal International},
year={2011},
volume={187},
number={3},
pages={1460-1478},
doi={10.1111/j.1365-246X.2011.05202.x},
note={cited By 10},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-81555213571&doi=10.1111%2fj.1365-246X.2011.05202.x&partnerID=40&md5=7b38fdc6d0f20d8c07373af44634ae88},
affiliation={Earthquake Research Institute, University of Tokyo, Japan},
abstract={Major faults are known to lie along material interfaces, including plate interfaces and tectonic lines. Recent high-precision observations have revealed that there are also faults in the vicinity of material interfaces. This suggests that slip on a fault and stress changes near one can be affected significantly by the presence of a material interface. In this paper, we develop a new mathematical framework to derive an expression for a static slip response function by drawing on properties of complex functions. Our method is characterized by its unique ability to analyse both a fault lying along a material interface and a fault intersecting a material interface under a unified framework. A few previous studies have theoretically dealt with the problem of slip on a fault that intersects a material interface, but their mathematical techniques were so complicated that they had only limited utility for seismological applications. By contrast, our mathematical framework has a simple structure thanks to the characteristics of the complex functions. Using our formula, one can easily calculate the fault slip and the static stress changes nearby, if only the stress drop on the fault is given. The static stress is represented as a sum of stress changes due to the slip and a background stress that is generally discontinuous across a material interface. Understanding of the static stress state around a fault has important implications for evaluating the likelihood of secondary failures. We find that, when the fault is located along, or in the vicinity of, a material interface, the background stress plays a key role in the formation of the stress state around a fault, and accordingly also in the triggering of secondary failures. © 2011 The Authors Geophysical Journal International © 2011 RAS.},
author_keywords={Dynamics and mechanics of faulting;  Fractures and faults;  Mechanics, theory, and modelling},
keywords={Bi-material interfaces;  Complex functions;  Fault slip;  High-precision;  Material interfaces;  Mathematical frameworks;  Plate interfaces;  Response functions;  Simple structures;  Static stress;  Static stress fields;  Stress changes;  Stress drop;  Stress state;  Unified framework, Functions;  Materials;  Stresses, Interfaces (materials), faulting;  fracture;  numerical model;  stress field;  theoretical study},
references={Aki, K., Richards, P.G., (2002) Quantitative Seismology, , 2nd edn, University Science Books, Herndon, VA; Angelier, J., Inversion of field data in fault tectonics to obtain the regional stress-III. A new rapid direct inversion method by analytical means (1990) Geophys. J. Int., 103 (2), pp. 363-376; Birch, F., The velocity of compressional waves in rocks to 10 kilobars, Part 2 (1961) J. geophys. Res., 66 (7), pp. 2199-2224; Bonafede, M., Rivalta, E., On tensile cracks close to and across the interface between two welded elastic half-spaces (1999) Geophys. J. Int., 138, pp. 410-434; Bonafede, M., Parenti, B., Rivalta, E., On strike-slip faulting in layered media (2002) Geophys. J. Int., 149, pp. 698-723; Casey, M., Mechanics of shear zones in isotropic dilatant materials (1980) J. Struct. Geol., 2 (1-2), pp. 143-147; Chester, F.M., Chester, J.S., Ultracataclasite structure and friction processes of the Punchbowl fault, San Andreas system, California (1998) Tectonophysics, 295, pp. 199-221; Comninou, M., The interface crack (1977) J. Appl. Mech., 44, pp. 631-636; Crouch, S.L., Starfield, A.M., (1983) Boundary Element Methods in Solid Mechanics: With Applications in Rock Mechanics and Geological Engineering, , George Allen & Unwin, London; Deng, J., Sykes, L.R., Evolution of the stress field in southern California and triggering of moderate-size earthquakes: A 200-year perspective (1997) J. geophys. Res., 102 (B5), pp. 9859-9886; England, A.H., (1971) Complex Variable Methods in Elasticity, , John Wiley & Sons, Chichester; Fukuyama, E., Ellsworth, W.L., Waldhauser, F., Kubo, A., Detailed fault structure of the 2000 Western Tottori, Japan, earthquake sequence (2003) Bull. seism. Soc. Am., 93 (4), pp. 1468-1478; Hardebeck, J.L., Hauksson, E., Role of fluids in faulting inferred from stress field signatures (1999) Science, 285, pp. 236-239; Head, A.K., Edge dislocations in inhomogeneous media (1953) Proc. Phys. Soc., 66, pp. 793-801; Heaton, T.H., Heaton, R.E., Static deformations from point sources and force couples located in welded Poissonian half-spaces: implications for seismic moment tensors (1989) Bull. seism. Soc. Am., 79, pp. 813-841. , Erratum in: Bull. seism. Soc. Am., 80, 1056]; Helmstetter, A., Shaw, B.E., Relation between stress heterogeneity and aftershock rate in the rate-and-state model (2006) J. geophys. Res., 111. , B07304; Hikima, K., Koketsu, K., Rupture processes of the 2004 Chuetsu (mid-Niigata prefecture) earthquake, Japan: a series of events in a complex fault system (2005) Geophys. Res. Lett., 32. , L18303; Hirano, S., Yamashita, T., (2010), Off fault stress distribution around dynamic slip pulse on a bimaterial interface, in Proceedings of the 7th ACES International Workshop, Abstract P19; Ishibe, T., Shimazaki, K., Tsuruoka, H., Satake, K., Correlation between the dCFF caused by large historical earthquakes and recent seismic activities (2009) EOS, Trans. Am. geophys. Un., 90 (52). , Abstract S51C-1436; Ishibe, T., Shimazaki, K., Tsuruoka, H., Yamanaka, Y., Satake, K., Correlation between Coulomb stress changes imparted by large historical strike-slip earthquakes and current seismicity in Japan (2011) Earth planets Space, 63, pp. 301-314; Kame, N., Saito, S., Oguni, K., Quasi-static analysis of strike fault growth in layered media (2008) Geophys. J. Int., 173, pp. 309-314; Kato, A., Ohnaka, M., Yoshida, S., Mochizuki, H., Effect of strain rate on constitutive properties for the shear failure of intact granite in seismogenic environments (2003) Geophys. Res. Lett., 30 (21). , 2108; Kato, A., Sakai, S., Hirata, N., Kurashimo, E., Iidaka, T., Iwasaki, T., Kanazawa, T., Imaging the seismic structure and stress field in the source region of the 2004 mid-Niigata prefecture earthquake: structural zones of weakness and seismogenic stress concentration by ductile flow (2006) J. geophys. Res., 111. , B08308; Katsura, T., (2011), Seismogenic process studies based on recordings of Ishii strainmeter, activity of AE, and elasto-plastic stress modeling around M2 sources-At a 3.3 km depth site in Mponeng gold mine, South Africa, MSc thesis, Ritsumeikan University (in Japanese); King, G.C.P., Stein, R.S., Lin, J., Static stress changes and the triggering of earthquakes (1994) Bull. seism. Soc. Am., 84 (3), pp. 935-953; Li, Y.-G., Aki, K., Adams, D., Hasemi, A., Lee, W.H.K., Seismic guided waves trapped in the fault zone of the Landers, California, earthquake of 1992 (1994) J. geophys. Res., 99, pp. 11705-11722; Maccaferri, F., Bonafede, M., Rivalta, E., A numerical model of dyke propagation in layered elastic media (2010) Geophys. J. Int., 180, pp. 1107-1123; Muskhelishvili, N.I., (1963), Some Basic Problems of the Mathematical Theory of Elasticity, translated by Radok, J.R.M., P. Noordhoff Ltd, Groningen; Naoi, M., Nakatani, M., Yabe, Y., Kwiatek, G., Igarashi, T., Plenkers, K., Twenty thousand aftershocks of a very small (M2) earthquake and their relation to the mainshock rupture and geological structures (2011) Bull. seism. Soc. Am., 101 (5), pp. 2399-2407; Okada, T., Umino, N., Hasegawa, A., Deep structure of the Ou mountain range strain concentration zone and the focal area of the 2008 Iwate-Miyagi Nairiku earthquake, NE Japan-seismogenesis related with magma and crustal fluid (2010) Earth planets Space, 62, pp. 347-352; Poliakov, A.N.B., Dmowska, R., Rice, J.R., Dynamic shear rupture interactions with fault bends and off-axis secondary faulting (2002) J. geophys. Res., 107. , 2295; Qian, W., Sun, C.T., A frictional interfacial crack under combined shear and compression (1998) Compos. Sci. Technol., 58, pp. 1753-1761; Rani, S., Singh, S.J., Static deformation of two welded half-spaces due to dip-slip faulting (1992) Proc. Indian Acad. Sci., 101 (3), pp. 269-282. , Earth planet. Sci; Rice, J.R., Sammis, C.G., Parsons, R., Off-fault secondary failure induced by a dynamic slip pulse (2005) Bull. seism. Soc. Am., 95 (1), pp. 109-134; Rivalta, E., Mangiavillano, W., Bonafede, M., The edge dislocation problem in a layered elastic medium (2002) Geophys. J. Int., 149, pp. 508-523; Rybicki, K.R., Yamashita, T., Constrains on stresses in isotropic homogeneous infinite half-spaces being in welded contact: 2D anti-plane and in-plane cases (2008) Acta Geophys., 56 (2), pp. 286-292; Sano, O., Ito, H., Hirata, A., Mizuta, Y., Review of methods of measuring stress and its variations (2005) Bull. Earthq. Res. Inst. Univ. Tokyo, 80, pp. 87-103; Sato, R., Crustal deformation due to dislocation in a multi-layered medium (1971) J. Phys. Earth., 19 (1), pp. 31-46; Scholz, C.H., (2002) The Mechanics of Earthquake and Faulting, , 2nd edn, Cambridge University Press, Cambridge; Shi, Z., Ben-Zion, Y., Dynamic rupture on a bimaterial interface governed by slip-weakening friction (2006) Geophys. J. Int., 165, pp. 469-484; Shima, H., Nakayama, T., (2010) Higher Mathematics for Physics and Engineering, , Springer-Verlag, Berlin; Terakawa, T., Matsu'ura, M., CMT data inversion using a Bayesian information criterion to estimate seismogenic stress fields (2008) Geophys. J. Int., 172 (2), pp. 674-685; Tinti, S., Armigliato, A., Displacements and stresses induced by a point source across a plane interface separating two elastic semi-infinite spaces: an analytical solution (1998) J. geophys. Res., 103, pp. 15109-15125; Tone, S., Miyatake, T., Hikima, K., Kato, A., Change of static stress fields from earthquake rupture in heterogeneous crustal structure (2009) Zisin J. seism. Soc. Jpn., Second Ser., 62, pp. 97-107. , Japanese with English abstract); Wang, K., Wada, I., Ishikawa, Y., Stresses in the subducting slab beneath southwest Japan and relation with plate geometry, tectonic forces, slab dehydration, and damaging earthquakes (2004) J. geophys. Res., 109. , B08304; Yabe, Y., Observation of numerous aftershocks of an Mw 1.9 earthquake with an AE network installed in a deep gold mine in South Africa (2009) Earth planets Space, 61, pp. e49-e52; Yamanaka, Y., (2000), The western Tottori Prefecture earthquake of 6 October 2000 (M7.3), EIC Seismological Note, available at: (accessed 2011 February 14) (in Japanese); Yamashita, T., Knopoff, L., Models of aftershock occurrence (1987) Geophys. J. R. astr. Soc., 91, pp. 13-26; Yamashita, T., Knopoff, L., Model for intermediate-term precursory clustering of earthquakes (1992) J. geophys. Res., 97, pp. 19873-19879; Yukutake, Y., Iio, Y., Katao, H., Shibutani, T., Estimation of the stress field in the region of the 2000 Western Tottori Earthquake: using numerous aftershock focal mechanisms (2007) J. geophys. Res., 112. , B09306},
correspondence_address1={Hirano, S.; Earthquake Research Institute, Japan; email: hirano@eri.u-tokyo.ac.jp},
issn={0956540X},
language={English},
abbrev_source_title={Geophys. J. Int.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Mohammadi2011668,
author={Mohammadi, M.},
title={Voltage stability analysis with Static Var Compensator (SVC) for various faults in power system with and without Power System Stabilizers (PSS)},
journal={Research Journal of Applied Sciences, Engineering and Technology},
year={2011},
volume={3},
number={7},
pages={668-676},
note={cited By 7},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-80051896563&partnerID=40&md5=c191f4c9ac0a255bddd7a22d699b321c},
affiliation={Department of Engineering, Borujerd Branch, Islamic Azad University, Borujerd, Iran},
abstract={However, in previous study the effect of SVC and PSS on voltage transient in power system with suitable model of these component for various faults such as Single Line to Ground faults (SLG) and Line to line and Line to Line to Ground (LL and LLG) and three phase faults have not been considered and analyzed and investigated. Shunt Flexible AC Transmission System (FACTS) devices, when placed at the mid-point of along transmission line, play an important role in controlling the reactive power flow to the power network and hence both the system voltage fluctuions and transient stability. This study deals with the location of a shunt FACTS device to improve transient stability in along transmission line with pre defined direction of real power flow. The validity of the mid-point location of shunt FACTS devices is verified, with various shunt FACTS devices, namely Static Var Compensator (SVC) in a long transmission line using the actual line model. It has been observed that the FACTS devices, when placed slightly off-centre towards sending-end, give better performance in improving transient stability and the location depends on the amount of local/through load. This study investigates the effects of Static Var Compensator (SVC) on voltage stability of a power system. The functional structure for SVC built with a Thyristor Controlled Reactor (TCR) and its model are described. The model is based on representing the controller as variable impedance that changes with the firing angle of the TCR. A Power System Computer Aided Design /Electromagnetic Transients including DC (PSCAD/EMTDC) is used to carry out simulations of the system under study and detailed results are shown to access the performance of SVC on the voltage stability of the system. © 2011 Maxwell Scientific Organization.},
author_keywords={FACTS;  Line to line fault (LL and LLG);  PSS;  Single line to ground fault (SLG);  SVC;  Transient stability},
keywords={FACTS;  Line to line fault;  PSS;  Single line to ground faults;  SVC, Computer aided design;  Computer simulation;  DC power transmission;  Electric fault currents;  Electric grounding;  Electric lines;  Electric reactors;  Electric switchgear;  Power converters;  Power electronics;  Power quality;  Power transmission;  Reactive power;  System stability;  Transients;  Transmission line theory;  Underground cables;  Value engineering;  Voltage stabilizing circuits, Electric network topology},
references={Acha, E., Agelidis, V.G., Anaya-Lara, O., Miller, T.J.E., Power Electronic Control in Electrical Systems, Newnes Power (2002) Engineering Series; Acha, E., Ambriz-Perez, H., Fuerte-Esquivel, Advanced SVC models for newton-raphson load flow and newton optimal power flow studies (2000) IEEE Trans. Power Sys., 15 (1), pp. 129-136; Cai, L., (2004) Robust co-ordinated control of FACTS devices in large power systems, , Ph.D. Thesis, University of Duisburg, Germany, Published by Logos Verlag Berlin; Fuerte-Esquivel, C.R., Acha, E., Ambriz-Perez, H., A comprehensive Newton-Raphson UPFC model for the quadratic power flow solution of practical power networks (2000) IEEE Trans. Power Syst., 15 (1), pp. 102-109; Carsten, L., Security constrained optimal power flow for an economical operation of FACTS-devices in liberalized energy markets (2002) IEEE Trans. Power Delivery, 17, pp. 603-608; Gyugyi, L., Power electronics in electric utilities: Static var compensators (1988) Proc. IEEE, 76 (4), pp. 483-494; Stagg, G.W., El-Abiad, A.H., (2002) Computer methods in power system analysis, , 1st Edn., McGraw-Hill; Saadat, H., (2002) Power System Analysis, , Tata McGraw-Hill; Hingorani, N.G., Gyugyi, L., (2000) Understanding, FACTS concepts and Technology of flexible AC transmission systems, , IEEE Press, New York; Jun, Z., Akihiko, Y., Optimal power flow for congestion management by static var compensator (SVC) (2006) IEEE, International Conference on Power System Technology, , Chongqing, China; Kazerani, M., Marceau, R., Wolanski, Z., Midpoint sitting of FACTS devices in transmission lines (1997) IEEE Trans. Power Delv., 12 (4), pp. 1717-1722; Gyugyi, L., Sen, K.K., Schauder, C.D., The stativ var compensator concept a new approach to power flow management in Electronics Engineering 4:7 2010 95 transmission systems (1999) IEEE Trans. Power Del., 14 (3), pp. 1115-1123; Noroozian, M., Ängquist, L., Ghandhari, M., Andersson, G., Use of UPFC for optimal power flow control (1997) IEEE Trans. Power Del., 12 (4), pp. 1629-1634; Muwaffaq, I.A., Derivation of SVC load flow model with examples of its use in restructured power systems (2003) IEEE Trans. Power Sys., 18, pp. 1173-1180; Teerathana, S., Yokoyama, A., Nakachi, Y., Yasumatsu, M., An optimal power flow control method of power system by Static Var Compensator (SVC) (2005) Proceeding 7th Int. Power Engineering Conference, pp. 1-6. , Singapore; Zhang, X.P., Advanced modeling of the multicontrol functional Static Synchronous Series Compensator (SSSC) in Newton power flow (2003) IEEE Trans. Power Syst., 18 (4), pp. 1410-1416; Zhang, X.P., Modeling of the interline power flow controller and the generalized unified power flow controller in Newton power flow (2003) Proc. Inst. Elect. Eng. Gen. Transm. Distrib., 150 (3), pp. 268-274; Xiao, Y., Song, Y.H., Sun, Y.Z., Power flow control approach to power systems with embedded FACTS devices (2002) IEEE Trans. Power Syst., 17 (4), pp. 943-950},
correspondence_address1={Mohammadi, M.; Department of Engineering, , Borujerd, Iran},
issn={20407459},
language={English},
abbrev_source_title={Res. J. Appl. Sci. Eng. Technol.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Liang20111114,
author={Liang, G.-T. and Meng, N. and Li, J.-H. and Zhong, H. and Zhang, L. and Wang, Q.-X.},
title={A semi-automatic extensible static defect analysis tool},
journal={Jisuanji Xuebao/Chinese Journal of Computers},
year={2011},
volume={34},
number={6},
pages={1114-1125},
doi={10.3724/SP.J.1016.2011.01114},
note={cited By 1},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-79960050608&doi=10.3724%2fSP.J.1016.2011.01114&partnerID=40&md5=4c6bf89a4df1806e404699454fd6794e},
affiliation={Key Laboratory for High Confidence Software Technologies of Ministry of Education, School of Electronics Engineering and Computer Science, Peking University, Beijing 100871, China},
abstract={The pattern based code defect analysis approach finds defects for subject programs with the aid of predefined defect pattern knowledge. The advantages of this kind of approach lie in the simplicity of its usage and the efficiency of its analysis, which make it a new technique with more rapid development among different approaches of static code defect analysis recently. However, among the available tools based on the approach, the extension modes provided by most of them are neither friendly nor efficient enough for users to extend their defect analysis capability. In order to solve this problem, the authors proposes a semi-automatic extensible static code defect analysis approach. Based on the approach, a tool named CODA (COde Defect Analysis tool) has been designed and implemented. In order to support the efficient extension of the defect pattern library, CODA provides not only enough "defect pattern description templates" to facilitate users' manual extension, but also a "semi-automatic extension mechanism" which accelerates the process of discovering, summarizing and extending new defect patterns. Once a new defect pattern is defined and added into the defect pattern library, CODA can automatically own the detecting ability for its related defects.},
author_keywords={Defect analysis;  Defect pattern;  Semi-automatic extensible;  Static analysis},
keywords={Defect analysis;  Defect analysis tools;  Defect pattern;  Defect patterns;  Detecting ability;  Rapid development;  Semi-automatics;  Static codes, Static analysis, Defects},
references={Flemming, N., Riis, N.H., Chris, H., (2005) Principles of Program Analysis, , Springer (Corrected 2nd printing); Cousot, P., Cousot, R., Abstract interpretation: A unified lattice model for static analysis of programs by construction or approximation of fixpoints (1977) Proceedings of the 4th ACM Symposium on Principles of Programming Languages (POPL), pp. 238-252; Detlefs, D.L., Nelson, G., Saxe, J.B., A theorem prover for program checking (2003), HP Laboratories Palo Alto, Technical Report; Clarke, E.M., Grumberg, Jr.O., Peled, D.A., (2000) Model Checking, , MIT Press; Boyer Robert, S., Bernard, E., Levitt Karl, N., SELECT - A formal system for testing and debugging programs by symbolic execution (1975) Proceedings of the International Conference on Reliable Software, pp. 234-245; Hallem, S., Chelf, B., Xie, Y., Engler, D., A system and language for building system-specific, static analyses (2002) Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation (PLDI), pp. 69-82; Hallem, S., Chelf, B., Xie, Y., Engler, D., A system and language for building system-specific, static analyses (2002) Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation (PLDI), pp. 69-82; Reimer, D., Schonberg, E., Srinivas, K., Srinivasan, H., Alpern, B., Johnson, R.D., Kershenbaum, A., Koved, L., SABER: Smart analysis based error reduction (2004) Proceedings of the International Symposium on Software Testing and Analysis (ISSTA), pp. 243-251; Yang, Z.-H., Gong, Y.-Z., Xiao, Q., Wang, Y.-W., A defect based model testing system (2008) Journal of Beijing University of Posts and Communications, 31 (5), pp. 1-4. , in Chinese; Zhong, H., Zhang, L., Mei, H., Early filtering of polluting method calls for mining temporal specifications (2008) Proceedings of the Asia-Pacific Software Engineering Conference (APSEC), pp. 9-16; Zhong, H., Zhang, L., Mei, H., Inferring specifications of object oriented APIs from API source code (2008) Proceedings of the Asia-Pacific Software Engineering Conference (APSEC), pp. 221-228; Zhong, H., Zhang, L., Xie, T., Mei, H., Inferring resource Specifications from natural language API documentation (2009) Proceedings of the International Conference on Automated Software Engineering (ASE), pp. 307-318; Weimer, W., Necula, G., Mining temporal specifications for error detection (2005) Proceedings of the International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS), pp. 461-476; Yang, J., Evans, D., Bhardwaj, D., Bhat, T., Das, M., Perracotta: Mining temporal API rules from imperfect traces (2006) Proceedings of the International Conference of Software Engineering (ICSE), pp. 282-229; Binkley, D., Source code analysis: A road map (2007) Proceedings of the 2007 Future of Software Engineering (FOSE), pp. 104-119},
correspondence_address1={Liang, G.-T.; Key Laboratory for High Confidence Software Technologies of Ministry of Education, , Beijing 100871, China; email: lianggt08@sei.pku.edu.cn},
issn={02544164},
coden={JIXUD},
language={Chinese},
abbrev_source_title={Jisuanji Xuebao},
document_type={Article},
source={Scopus},
}

@ARTICLE{Torkaman2011585,
author={Torkaman, H. and Toulabi, M.S. and Afjei, E.},
title={Electromagnetic analysis of the effects of static eccentricity fault on the radial force variations in switched reluctance motors},
journal={International Review on Modelling and Simulations},
year={2011},
volume={4},
number={2},
pages={585-590},
note={cited By 8},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-80155124020&partnerID=40&md5=2b803c7c94c5fb0b6b99b82b702fc8a0},
affiliation={Power Electronics, Motor Drives and Electric Machines Research Center, Faculty of Electrical and Computer Engineering, Shahid Beheshti University, G. C, Tehran, Iran},
abstract={The real performance of the Switched Reluctance Machines (SRMs) in industrial applications has widely been investigated by variety of studies during the recent decades. Thus the effects of the some abnormalities of their physical structures have also applied significant orientations on new research areas. One of the most important problems seen in the industrial applications of SRMs which has concerned users is the rotor eccentricity of this type of electric machine which may conclude the unbalanced distribution of flux linkage as well as acoustic noise and vibration due to the radial forces produced during the rotation of machine's rotor. In this paper, it is attempted to firstly introduce the radial force and secondly to analyze and obtain this type of force resulted from different values of static eccentricity faults based on a conventional model of 6/4 SRM via electromagnetic analysis done by three dimensional finite element method (3D FEM). Finally, it will be tried to detect the eccentricity faults via Fast Fourier Transform (FFT) of radial force component's pattern. © 2011 Praise Worthy Prize S.r.l. - All rights reserved.},
author_keywords={3D finite element method;  Eccentricity fault;  Radial force analysis;  Switched reluctance motor},
references={Fahimi, B., Emadi, A., Sepe, R.B., A switched reluctance machine-based starter/alternator for more electric cars (2004) IEEE Transactions On Energy Conversion, 19 (1), pp. 116-124; Yahia, H., Mimouni, M.F., Dhifaoui, R., New Control Strategy of Switched Reluctance Machine Drives (2010) International Review of Electrical Engineering, 3 (3), pp. 299-305; El-Kharashi, E.A., Best Operating Parameters of the Disc-Rotor Switched Reluctance Motor (2010) International Review of Electrical Engineering, 3 (4), pp. 546-552; Krishnan, R., (2001), CRC press; Miller, T.J.E., (2001) Electronic Control of Switched Reluctance Machines, , Newnes; Torkaman, H., Afjei, E., Comprehensive Magnetic Field-Based Study on Effects of Static Rotor Eccentricity in Switched Reluctance Motor Parameters Utilizing Three-Dimensional Finite Element (2009) Electromagnetics, Taylor and Francis, 29 (5), pp. 421-433; Torkaman, H., Afjei, E., Hybrid Method of Obtaining Degrees of Freedom for Radial Airgap Length in SRM under Normal and Faulty Conditions Based on Magnetiostatic Model (2010) Progress In Electromagnetics Research, PIER, 100, pp. 37-54; Torkaman, H., Afjei, E., FEM Analysis of Angular Misalignment Fault in SRM Magnetostatic Characteristics (2010) Progress In Electromagnetics Research, 104, pp. 31-48; Torkaman, H., Afjei, E., Magnetio Static Field Analysis Regarding the Effects of Dynamic Eccentricity in Switched Reluctance Motor (2009) Progress In Electromagnetics Research M, PIER, 8, pp. 163-180; Torkaman, H., Afjei, E., Determining Degrees of Freedom for Eccentricity Fault in SRM Based on Nonlinear Static Torque Function (2011) COMPEL:The International Journal For Computation and Mathematics In Electrical and Electronic Engineering, 30 (2), pp. 671-685; Afjei, E., Torkaman, H., Airgap Eccentricity Fault Diagnosis in Switched Reluctance Motor (2010) 1st Power Electronic & Drive Systems & Technologies Conference, PEDSTC, pp. 284-289. , Tehran, Iran; Sheth, N.K., Rajagopal, K.R., Effects of nonuniform airgap on the torque characteristics of a switched reluctance motor (2004) IEEE Transactions On Magnetics, 40 (4), pp. 2032-2034; Sheth, N.K., Rajagopal, K.R., Variations in overall developed torque of a switched reluctance motor with airgap nonuniformity (2005) IEEE Transactions On Magnetics, 41 (10), pp. 3973-3975; Dorrell, D.G., Chindurza, I., Cossar, C., Effects of rotor eccentricity on torque in switched reluctance Machines (2005) IEEE Transactions On Magnetics, 41 (10), pp. 3961-3963; Briso-Montiano, J.R., Karrelmeyer, R., Dilger, E., Simulation of Faults by means of Finite Element Analysis in a Switched Reluctance Motor (2005) Multiphysics Conference, pp. 1-6. , Frankfurt; Ohyama, K., Naguib, M., Nashed, F., Design using finite element analysis of a switched reluctance motor for electric vehicle (2006) Journal of Power Electronics, 6 (2), pp. 163-171; Husain, I., Radun, A., Nairus, J., Unbalanced force calculation in switched-reluctance machines (2000) IEEE Transactions On Magnetics, 36 (1), pp. 330-338; Kyung-Ho, H., Jung-Pyo, H., Gyu-Tak, K., Orbital analysis of rotor due to electromagnetic force for switched reluctance motor (2000) IEEE Transactions On Magnetics, 36 (4), pp. 1407-1411; Morrison, C.R., Siebert, M.W., Ho, E.J., Electromagnetic Forces in a Hybrid Magnetic-Bearing Switched-Reluctance Motor (2008) IEEE Transactions On Magnetics, 44 (12), pp. 4626-4638; Lin, F.C., Yang, S.M., Instantaneous Shaft Radial Force Control with Sinusoidal Excitations for Switched Reluctance Motors (2007) IEEE Transactions On Energy Conversion, 22 (3), pp. 629-636; Miller, T.J.E., Faults and unbalanced forces in the switched reluctance machine (1995) IEEE Transaction On Industry Applications, 31, pp. 319-328; Torkaman, H., Afjei, E., Amiri, H., Static Eccentricity Fault Diagnosis in Switched Reluctance Motor (2010) IEEE International Conference On Power and Energy (PECON), pp. 218-221. , Kuala Lumpur, Malaysia; (2007) User Manual, , Magnet CAD package, Infolytica Corporation Ltd},
correspondence_address1={Torkaman, H.; Power Electronics, , G. C, Tehran, Iran; email: H_torkaman@sbu.ac.ir},
publisher={Praise Worthy Prize S.r.l},
issn={19749821},
language={English},
abbrev_source_title={Int. Rev. Model. Stimul.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Heckman2011363,
author={Heckman, S. and Williams, L.},
title={A systematic literature review of actionable alert identification techniques for automated static code analysis},
journal={Information and Software Technology},
year={2011},
volume={53},
number={4},
pages={363-387},
doi={10.1016/j.infsof.2010.12.007},
note={cited By 77},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-79951811783&doi=10.1016%2fj.infsof.2010.12.007&partnerID=40&md5=a965feaaaf0a0f26d23a3c01c4577a7f},
affiliation={North Carolina State University, Campus Box 8206, 890 Oval Drive, Raleigh, NC 27695-8206, United States},
abstract={Context: Automated static analysis (ASA) identifies potential source code anomalies early in the software development lifecycle that could lead to field failures. Excessive alert generation and a large proportion of unimportant or incorrect alerts (unactionable alerts) may cause developers to reject the use of ASA. Techniques that identify anomalies important enough for developers to fix (actionable alerts) may increase the usefulness of ASA in practice. Objective: The goal of this work is to synthesize available research results to inform evidence-based selection of actionable alert identification techniques (AAIT). Method: Relevant studies about AAITs were gathered via a systematic literature review. Results: We selected 21 peer-reviewed studies of AAITs. The techniques use alert type selection; contextual information; data fusion; graph theory; machine learning; mathematical and statistical models; or dynamic detection to classify and prioritize actionable alerts. All of the AAITs are evaluated via an example with a variety of evaluation metrics. Conclusion: The selected studies support (with varying strength), the premise that the effective use of ASA is improved by supplementing ASA with an AAIT. Seven of the 21 selected studies reported the precision of the proposed AAITs. The two studies with the highest precision built models using the subject program's history. Precision measures how well a technique identifies true actionable alerts out of all predicted actionable alerts. Precision does not measure the number of actionable alerts missed by an AAIT or how well an AAIT identifies unactionable alerts. Inconsistent use of evaluation metrics, subject programs, and ASAs in the selected studies preclude meta-analysis and prevent the current results from informing evidence-based selection of an AAIT. We propose building on an actionable alert identification benchmark for comparison and evaluation of AAIT from literature on a standard set of subjects and utilizing a common set of evaluation metrics. © 2010 Elsevier B.V. All rights reserved.},
author_keywords={Actionable alert identification;  Actionable alert prediction;  Automated static analysis;  Systematic literature review;  Unactionable alert mitigation;  Warning prioritization},
keywords={Automation;  Classification (of information);  Data fusion;  Graph theory;  Learning systems;  Software design, Contextual information;  Evaluation metrics;  Identification techniques;  Prioritization;  Software development life cycle;  Static code analysis;  Systematic literature review;  Unactionable alert mitigation, Static analysis},
references={Aggarwal, A., Jalote, P., Integrating static and dynamic analysis for detecting vulnerabilities (2006) Proceedings - International Computer Software and Applications Conference, 1, pp. 343-350. , DOI 10.1109/COMPSAC.2006.55, 4020095, Proceedings - 30th Annual International Computer Software and Applications Conference, COMPSAC 2006; Artho, C., Biere, A., Applying static analysis to large-scale, multi-threaded java programs (2001) Proceedings of the 13th Australian Conference on Software Engineering, pp. 68-75. , Canberra, Australia, August 27-28; Bell, R.M., Ostrand, T.J., Weyuker, E.J., Looking for bugs in all the right places (2006) Proceedings of the 2006 International Symposium on Software Testing and Analysis, ISSTA 2006, 2006, pp. 61-71. , DOI 10.1145/1146238.1146246, Proceedings of the 2006 International Symposium on Software Testing and Analysis, ISSTA 2006; Boogerd, C., Moonen, L., Prioritizing software inspection results using static profiling (2006) Proceedings of the 6th IEEE Workshop on Source Code Analysis and Manipulation, pp. 149-160. , Philadelphia, PA, USA, September 27-29; Boogerd, C., Moonen, L., Ranking software inspection results using execution likelihood (2006) Proceedings of the Philips Software Conference, p. 10. , November; Boogerd, C., Moonen, L., Assessing the value of coding standards: An empirical study (2008) Proceedings of the IEEE International Conference on Software Maintenance, pp. 277-286. , Beijing, China, September 28-October 4; Boogerd, C., Moonen, L., On the use of data flow analysis in static profiling (2008) Proceedings of the Eighth IEEE International Working Conference on Source Code Analysis and Manipulation, pp. 79-88. , Beijing, China, September 28-29; Chen, P., Han, H., Wang, Y., Shen, S., Yin, X., Mao, B., Xie, L., Intfinder: Automatically detecting integer bugs in x86 binary program (2009) Proceedings of the International Conference on Information and Communications Security, pp. 336-345. , Beijing, China, December; Chess, B., Mcgraw, G., Static analysis for security (2004) IEEE Security and Privacy, 2 (6), pp. 76-79. , DOI 10.1109/MSP.2004.111; Chess, B., West, J., (2007) Secure Programming with Static Analysis, , first ed. Addison-Wesley Upper Saddle River, NJ; Cohen, J., A coefficient of agreement for nominal scales (1960) Educational and Psychological Measurement, 20, pp. 213-220; Csallner, C., Smaragdakis, Y., JCrasher: An automatic robustness tester for Java (2004) Software - Practice and Experience, 34 (11), pp. 1025-1050; Csallner, C., Smaragdakis, Y., Check 'n' crash: Combining static checking and testing (2005) Proceedings of the 27th International Conference on Software Engineering, pp. 422-431. , St. Louis, MO, USA; Csallner, C., Smaragdakis, Y., Xie, T., DSD-crasher: A hybrid analysis tool for bug finding (2008) ACM Transactions on Software Engineering and Methodology, 17 (2), pp. 1-36; Engler, D., Chelf, B., Chou, A., Hallem, S., (2000) Checking System Rules Using System-Specific, Programmer-Written Compiler Extensions, in Operating Systems Design and Implementation, , San Diego, CA; Ernst, M.D., Cockrell, J., Griswold, W.G., Notkin, D., Dynamically discovering likely program invariants to support program evolution (2001) IEEE Transactions on Software Engineering, 27 (2), pp. 99-123. , DOI 10.1109/32.908957; Flanagan, C., Leino, K.R.M., Lillibridge, M., Nelson, G., Saxe, J.B., Stata, R., Extended static checking for Java (2002) Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pp. 234-245; Fleiss, J.L., Cohen, J., Everitt, B.S., Large sample standard errors of kappa and weighted kappa (1969) Psychological Bulletin, 72, pp. 323-327; Haugh, E., Bishop, M., Testing C programs for buffer overflow vulnerabilities (2003) Proceedings of the Network and Distributed System Security Symposium, pp. 123-130. , San Diego, CA, February; Heckman, S., Williams, L., A measurement framework of alert characteristics for false positive mitigation models (2008) North Carolina State University TR-2008-23, , October 6; Heckman, S., Williams, L., On establishing a benchmark for evaluating static analysis alert prioritization and classification techniques (2008) Proceedings of the 2nd International Symposium on Empirical Software Engineering and Measurement, pp. 41-50. , Kaiserslautern, Germany, October 9-10; Heckman, S., Williams, L., A model building process for identifying actionable static analysis alerts (2009) Proceedings of the 2nd IEEE International Conference on Software Testing, Verification and Validation, pp. 161-170. , Denver, CO, USA; Heckman, S.S., (2009) A Systematic Model Building Process for Predicting Actionable Static Analysis Alerts, , Dissertation, Computer Science, North Carolina State University; Holzmann, G.J., (2003) The SPIN Model Checker: Primer and Reference Manual, , Addison-Wesley; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) Proceedings of the 19th ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications, pp. 132-136. , Vancouver, British Columbia, Canada, October 24-28; (1990) IEEE Standard Glossary of Software Engineering Terminology, , IEEE, IEEE Standard 610.12-1990; (2002) IEEE Standard for Software Reviews, , IEEE, IEEE 1028-1997 (R2002); (2008) 2008 Systems and Software Engineering Vocabulary, , IEEE, ISO/IEC 24765; Johnson, S.C., (1978) Lint, A C Program Checker, , Bell Laboratories Murray Hill, NJ; Jung, Y., Kim, J., Shin, J., Yi, K., Taming false alarms from a domain-unaware C analyzer by a Bayesian statistical post analysis (2005) Proceedings of the 12th International Static Analysis Symposium, pp. 203-217. , Imperial College London, UK; Kim, S., Ernst, M.D., Prioritizing warning categories by analyzing software history (2007) Proceedings of the International Workshop on Mining Software Repositories, p. 27. , Minneapolis, MN, USA, May 19-20; Kim, S., Ernst, M.D., Which warnings should i fix first? (2007) Proceedings of the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 45-54. , Dubrovnik, Croatia, September 3-7; Kitchenham, B., (2004) Procedures for Performing Systematic Reviews, Joint Technical Report, Keele University Technical Report (TR/SE-0401) and NICTA Technical Report (0400011T.1), , July 2004; Kong, D., Zheng, Q., Chen, C., Shuai, J., Zhu, M., Isa: A source code static vulnerability detection system based on data fusion (2007) Proceedings of the 2nd International Conference on Scalable Information Systems, p. 55. , Suzhou, China, June 6-8; Kremenek, T., Ashcraft, K., Yang, J., Engler, D., Correlation exploitation in error ranking (2004) Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 83-93. , Twelfth ACM SIGSOFT International Symposium on the Foundations of Software Engineering, SIGSOFT 2004/FSE-12; Kremenek, T., Engler, D., Z-ranking: Using statistical analysis to counter the impact of static analysis approximations (2003) Proceedings of the 10th International Static Analysis Symposium, pp. 295-315. , San Diego, California; Liang, G., Wu, L., Wu, Q., Wang, Q., Xie, T., Mei, H., Automatic construction of an effective training set for prioritizing static analysis warnings (2010) Proceedings of the 25th IEEE/ACM International Conference on Automated Software Engineering, pp. 93-102. , Antwerp, Belgium, September; Meng, N., Wang, Q., Wu, Q., Mei, H., An approach to merge results of multiple static analysis tools (short paper) (2008) Proceedings of the Eight International Conference on Quality Software, pp. 169-174. , Oxford, UK, August 12-13; Nanda, M.G., Gupta, M., Sinha, S., Chandra, S., Schmidt, D., Balachandran, P., Making defect-finding tools work for you (2010) Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering, 2, pp. 99-108. , Cape Town, South Africa, May 2-8; Ogasawara, H., Aizawa, M., Yamada, A., Experiences with program static analysis (1998) Proceedings of the 1998 Software Metrics Symposium, pp. 109-112. , Bethesda, MD, USA, November 20-21; Ostrand, T.J., Weyuker, E.J., Bell, R.M., Where the bugs are (2004) ISSTA 2004 - Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 86-96. , ISSTA 2004 - Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis; Pacheco, C., Ernst, M.D., Eclat: Automatic generation and classification of test inputs (2005) Lecture Notes in Computer Science, 3586, pp. 504-527. , ECOOP 2005 - Object-Oriented Programming: 19th European Conference. Proceedings; Rothermel, G., Untcn, R.H., Chu, C., Harrold, M.J., Prioritizing test cases for regression testing (2001) IEEE Transactions on Software Engineering, 27 (10), pp. 929-948. , DOI 10.1109/32.962562; Rungta, N., Mercer, E.G., A meta heuristic for effectively detecting concurrency errors (2008) Proceedings of the 4th International Haifa Verification Conference on Hardware and Software: Verification and Testing, pp. 23-37. , Haifa, Israel, October; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proceedings of the 30th International Conference on Software Engineering, pp. 341-350. , Leipzig, Germany, May 10-18; Shaw, M., Writing good software engineering research papers: Minitutorial (2003) Proceedings of the 25th International Conference on Software Engineering, pp. 726-736. , Portland, Oregon, USA, May 3-10; Sim, S.E., Easterbrook, S., Holt, R.C., Using benchmarking to advance research: A challenge to software engineering (2003) Proceedings of the 25th International Conference on Software Engineering, pp. 74-83. , Portland, Oregon, USA, May 3-10; Tichy, W.F., Should computer scientists experiment more? (1998) Computer, 31 (5), pp. 32-40; Vardeman, S.B., Jobe, J.M., (2001) Basic Engineering Data Collection and Analysis, , first ed. Duxbury Pacific Grove, CA; Viega, J., Floch, J.T., Kohno, Y., McGraw, G., Its4: A static vulnerability scanner for C and C++ code (2000) Proceedings of the 16th Annual Conference on Computer Security Applications, pp. 257-267. , New Orleans, LA, USA, December 11-15; Visser, W., Havelund, K., Brat, G., Park, S., Model checking programs (2000) Proceedings of the 15th IEEE International Conference on Automated Software Engineering, pp. 3-11. , Grenoble, France, September; Wagner, D., Jeffrey, S.F., Brewer, E.A., Aiken, A., A first step towards automated detection of buffer overrun vulnerabilities (2000) Proceedings of the Network and Distributed Systems Security Conference, pp. 3-17. , San Diego, CA, USA, February 2-4, 2000; Wagner, S., Deissenboeck, F., Aichner, M., Wimmer, J., Schwalb, M., An evaluation of two bug pattern tools for java (2008) Proceedings of the 1st International Conference on Software Testing, Verification, and Validation, pp. 248-257. , Lillehammer, Norway, April 9-11; Wall, D.W., Predicting program behavior using real or estimated profiles (1991) Proceedings of the ACM SIGPLAN 1991 Conference on Programming Language Design and Implementation, pp. 59-70. , Toronto, Ontario, Canada, June 26-28; Williams, C.C., Hollingsworth, J.K., Automatic mining of source code repositories to improve bug finding techniques (2005) IEEE Transactions on Software Engineering, 31 (6), pp. 466-480. , DOI 10.1109/TSE.2005.63; Witten, I.H., Frank, E., (2005) Data Mining: Practical Machine Learning Tools and Techniques, , second ed. Morgan Kaufman Amsterdam; Xiao, S., Pham, C., Performing high efficiency source code static analysis with intelligent extensions (2004) Proceedings - Asia-Pacific Software Engineering Conference, APSEC, pp. 346-355. , Proceedings - 11th Asia-Pacific Software Engineering Conference, APSEC 2004; Yi, K., Choi, H., Kim, J., Kim, Y., An empirical study on classification methods for alarms from a bug-finding static C analyzer (2007) Information Processing Letters, 102 (2-3), pp. 118-123. , DOI 10.1016/j.ipl.2006.11.004, PII S0020019006003371; Yu, L., Zhou, J., Yi, Y., Fan, J., Wang, Q., A hybrid approach to detecting security defects in programs (2009) Proceedings of the 9th International Conference on Quality Software, pp. 1-10. , Jeju, Korea, August 24-25; Zheng, J., Williams, L., Nagappan, N., Snipes, W., Hudepohl, J., Vouk, M., On the value of static analysis for fault detection in software (2006) IEEE Transactions on Software Engineering, 32 (4), pp. 240-253; Zimmermann, T., Premraj, R., Zeller, A., Predicting defects in eclipse (2007) Proceedings of the 3rd International Workshop on Predictor Models in Software Engineering, p. 9. , Minneapolis, MN, USA, May 20},
correspondence_address1={Heckman, S.; North Carolina State University, 890 Oval Drive, Raleigh, NC 27695-8206, United States; email: heckman@csc.ncsu.edu},
publisher={Elsevier B.V.},
issn={09505849},
coden={ISOTE},
language={English},
abbrev_source_title={Inf Software Technol},
document_type={Review},
source={Scopus},
}

@CONFERENCE{Liang201093,
author={Liang, G. and Wu, L. and Wu, Q. and Wang, Q. and Xie, T. and Mei, H.},
title={Automatic construction of an effective training set for prioritizing static analysis warnings},
journal={ASE'10 - Proceedings of the IEEE/ACM International Conference on Automated Software Engineering},
year={2010},
pages={93-102},
doi={10.1145/1858996.1859013},
note={cited By 16; Conference of 25th IEEE/ACM International Conference on Automated Software Engineering, ASE'10 ; Conference Date: 20 September 2010 Through 24 September 2010;  Conference Code:82616},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-78649769646&doi=10.1145%2f1858996.1859013&partnerID=40&md5=1930081ca79363371b69473844428539},
affiliation={Institute of Software, School of Electronics Engineering and Computer Science, China; Key Laboratory of High Confidence Software Technologies (Peking University), Ministry of Education, Peking University, Beijing, 100871, China; Department of Computer Science, North Carolina State University, Raleigh, NC 27695, United States},
abstract={In order to improve ineffective warning prioritization of static analysis tools, various approaches have been proposed to compute a ranking score for each warning. In these approaches, an effec-tive training set is vital in exploring which factors impact the ranking score and how. While manual approaches to build a training set can achieve high effectiveness but suffer from low efficiency (i.e., high cost), existing automatic approaches suffer from low effectiveness. In this paper, we propose an automatic approach for constructing an effective training set. In our approach, we select three categories of impact factors as input attributes of the training set, and propose a new heuristic for identifying actionable warnings to automatically label the training set. Our empirical evaluations show that the precision of the top 22 warnings for Lucene, 20 for ANT, and 6 for Spring can achieve 100% with the help of our constructed training set. © 2010 ACM.},
author_keywords={Generic-bug-related lines;  Static analysis tools;  Training-set construction;  Warning prioritization},
keywords={Automatic construction;  Empirical evaluations;  Generic-bug-related lines;  High costs;  Impact factor;  Prioritization;  Training sets, Software engineering, Static analysis},
references={Artho, C., Jlint - Find Bugs in Java Programs, , http://Jlint.sourceforge.net/; Ayewah, N., Hovemeyer, D., Morgenthaler, J.D., Penix, J., Pugh, W., Using static analysis to find bugs (2008) IEEE Software, 25 (5), pp. 22-29; Boogerd, C., Moonen, L., Prioritizing software inspection results using static profiling (2006) Proc. SCAM, pp. 149-160; Binkley, D., Source code analysis: A road map (2007) Proc. FOSE, pp. 104-119; Bevan, J., Whitehead Jr., E.J., Kim, S., Godfrey, M., Iden-tifying changed source code lines from revision repositories (2005) Proc. ESEC/FSE, pp. 177-186; Chess, B., West, J., (2007) Secure Programming with Static Analysis, , Aaison Wesley; Cubranic, D., Murphy, G.C., Hipikat: Recommending pertinent software development artifacts (2003) Proc. ICSE, p. 418; Chen, K., Schach, S.R., Yu, L., Offutt, J., Heller, G.Z., Open-source change logs (2004) Empirical Software Engineering, 9 (3), pp. 197-210; Engler, D., Chelf, B., Chou, A., Hallem, S., Bugs as deviate behavior: A general approach to inferring errors in system code (2001) Proc. SOSP, pp. 57-72; Engler, D., Musuvathi, M., Static analysis versus software model checking for bug finding (2004) Proc. VMCAI, pp. 191-210; Fischer, M., Pinzger, M., Gall, H., Populating a release history database from revision control and bug tracking systems (2003) Proc. ICSM, pp. 23-32; FindBugs, , http://findbugs-sourceforge-net.luisamigo.proxybk.com/, available at; Fortify, , http://www-fortify-net.luisamigo.proxybk.com/intro.html, available at; Hornik, K., Stinchcombe, M., White, H., Multilayer feed-forward networks are universal approximators (1989) Neural Net-works, 2, pp. 359-366; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) Proc. OOPSLA, pp. 132-136; Heckman, S., Williams, L., On establishing a benchmark for evaluating static analysis alert prioritization and classification techniques (2008) Pro. ESEM, pp. 41-50; Heckman, S.S., Adaptively ranking alerts generated from automated static analysis (2007) ACM Crossroads, 14 (1), pp. 1-11; Kim, S., Ernst, M.D., Which warnings should I fix first? (2007) Proc. ESEC/FSE, pp. 45-54; Kim, S., Ernst, M.D., Prioritizing warning categories by analyzing software history (2007) Proc.MSR, pp. 27-30; Kremenek, T., Ashcraft, K., Yang, J., Engler, D., Correlation exploitation in error ranking (2004) Proc. FSE, pp. 83-93; Kremenek, T., Engler, D.R., Z-ranking: Using statistical analysis to counter the impact of static analysis approximations (2003) Proc. SAS, pp. 295-315; Lint4j, , http://www-jutils-com.luisamigo.proxybk.com/, available at; Mockus, A., Votta, L.G., Identifying reasons for software changes using historic databases (2000) Proc. ICSM, pp. 120-130; PMD, , http://pmd-sourceforge-net.luisamigo.proxybk.com/, available at; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) Proc. ICSE, pp. 341-350; Rutar, N., Almazan, C.B., Foster, J.S., A comparison of bug finding tools for Java (2004) Proc. ISSRE, pp. 245-256; Salton, G., Wong, A., Yang, C.S., A vector space model for automatic indexing (1975) Communications of the ACM, 18 (11), pp. 613-620; Sim, S.E., Easterbrook, S., Holt, R.C., Using benchmark-ing to advance research: A challenge to software engineering (2003) Proc. ICSE, pp. 74-83; Spacco, J., Hovemeyer, D., Pugh, W., Tracking defect warnings across revisions (2006) Proc. MSR, pp. 133-136; Sliwerski, J., Zimmermann, T., Zeller, A., When do changes induce fixes? (2005) Proc. MSR 2005, pp. 1-5; Weka, , http://www-cs-waikato-ac-nz.luisamigo.proxybk.com/~ml/weka/, available at; Williams, C.C., Hollingsworth, J.K., Automatic mining of source code repositories to improve static analysis techniques (2005) IEEE Trans. Software Engineering, 31 (6), pp. 466-480},
correspondence_address1={Liang, G.; Key Laboratory of High Confidence Software Technologies (Peking University), , Beijing, 100871, China; email: lianggt08@sei.pku.edu.cn},
sponsors={SIGSOFT; SIGART; IEEE CS},
address={Antwerp},
isbn={9781450301169},
language={English},
abbrev_source_title={ASE - Proc. IEEE/ACM Int. Conf. Autom. Softw. Eng.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Merle2010845,
author={Merle, G. and Roussel, J.-M. and Lesage, J.-J.},
title={Improving the efficiency of dynamic fault tree analysis by considering gates FDEP as static},
journal={Reliability, Risk and Safety: Back to the Future},
year={2010},
pages={845-851},
note={cited By 10; Conference of European Safety and Reliability Annual Conference: Reliability, Risk and Safety: Back to the Future, ESREL 2010 ; Conference Date: 5 September 2010 Through 9 September 2010;  Conference Code:89976},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84861676255&partnerID=40&md5=7af3a867a3143214614f7bcdb47b9551},
affiliation={LURPA, ENS de Cachan, Cachan, France},
abstract={This paper focuses on one of the dynamic gates which are used in Dynamic Fault Trees (DFT), which is the Functional Dependency (FDEP) gate. Gate FDEP has been considered as equivalent to a set of OR gates in the literature, but this equivalence has seldom been exploited for the analysis of DFTs. In this paper, we show that in most cases, starting from a DFT including FDEP gates, the use of this static equivalence provides significant advantages for DFT Analysis. © 2010 Taylor & Francis Group.},
keywords={Dynamic fault tree analysis;  Dynamic fault trees;  Functional dependency;  Static equivalence, Fault tree analysis;  Forestry, Reliability, Forestry;  Mathematical Analysis;  Reliability},
references={Bobbio, A., Raiteri, D.C., Parametric fault trees with dynamic gates and repair boxes (2004) Proceedings of the IEEE Annual Reliability and Maintainability Symposium (RAMS 2004), pp. 459-465. , Los Angeles, CA, USA; Boudali, H., Crouzen, P., Stoelinga, M., Dynamic fault tree analysis through input/output interactive Markov chains (2007) Proceedings of the International Conference on Dependable Systems and Networks (DSN 2007), pp. 25-38; Chatterjee, P., Modularization of fault trees: A method to reduce cost of analysis (1975) Reliability and Fault Tree Analysis, pp. 101-137. , SIAM, Ed; Coudert, O., Madre, J.C., Fault Tree Analysis: 1020 prime implicants and beyond (1993) Proceedings of the IEEE Annual Reliability and Maintainability Symposium (RAMS 1993), pp. 240-245. , Atlanta, GA, USA; Dugan, J., Sullivan, K., Coppit, D., Developing a low-cost high-quality software tool for dynamic fault-tree analysis (2000) IEEE Transactions on Reliability, 49 (1), pp. 49-59; Dugan Joanne Bechta, Bavuso Salvatore, J., Boyd Mark, A., Dynamic fault-tree models for fault-tolerant computer systems (1992) IEEE Transactions on Reliability, 41 (3), pp. 363-377. , DOI 10.1109/24.159800; Dutuit, Y., Rauzy, A., A linear-time algorithm to find modules of fault trees (1996) IEEE Transactions on Reliability, 45 (3), pp. 422-425. , PII S0018952996073551; Rauzy, A., Dutuit, Y., Exact and truncated computations of prime implicants of coherent and non-coherent fault trees within Aralia (1997) Reliability Engineering and System Safety, 58 (2), pp. 127-144. , PII S0951832097000343; Ejlali, A., Miremadi, S., FPGA-based Monte Carlo simulation for fault tree analysis (2004) Microelectronics Reliability, 44 (6), pp. 1017-1028; Henley, E., Kumamoto, H., (1981) Reliability Engineering and Risk Assessment, , Englewood Cliffs: Prentice Hall; Leveson, N., (1995) Safeware: System Safety and Computers, , Addison-Wesley; Merle, G., Roussel, J.-M., Lesage, J.-J., Bobbio, A., Algebraic expression of the structure function of a subclass of dynamic fault trees (2009) Proceedings of the 2nd IFAC Workshop on Dependable Control of Discrete Systems (DCDS'09), pp. 129-134. , Bari, Italy; Merle, G., Roussel, J.M., Lesage, J.J., Bob-Bio, A., Probabilistic algebraic analysis of fault trees with priority dynamic gates and repeated events (2010) IEEE Transactions on Reliability, 59 (1), pp. 250-261; Rosenthal, A., Decomposition methods for fault tree analysis (1980) IEEE Transactions on Reliability, R-29 (2), pp. 136-138; Stamatelatos, M., Vesely, W., (2002) Fault Tree Handbook with Aerospace Applications, pp. 1-205. , Volume 1.1, NASA Office of Safety and Mission Assurance; Tang, Z., Dugan, J., Minimal cut set/sequence generation for dynamic fault trees (2004) Proceedings of the IEEE Annual Reliability and Maintainability Symposium (RAMS 2004), pp. 207-213. , Los Angeles, CA, USA},
correspondence_address1={Merle, G.; LURPA, , Cachan, France},
address={Rhodes},
isbn={9780415604277},
language={English},
abbrev_source_title={Reliab., Risk Saf.: Back Future},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Qing2010365,
author={Qing, X. and Hong, Y.Z. and Zhan, G.Y.},
title={A method of detecting vulnerability defects based on static analysis},
journal={Proceedings - 2010 International Forum on Information Technology and Applications, IFITA 2010},
year={2010},
volume={3},
pages={365-368},
doi={10.1109/IFITA.2010.217},
art_number={5634685},
note={cited By 0; Conference of 2010 International Forum on Information Technology and Applications, IFITA 2010 ; Conference Date: 16 July 2010 Through 18 July 2010;  Conference Code:83975},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-79952138042&doi=10.1109%2fIFITA.2010.217&partnerID=40&md5=14c75fd598f1365a2ff72ca128bfa7e6},
affiliation={State Key Laboratory of Networking and Switching Technology, Beijing University of Posts and Telecommunications, Beijing 100876, China; Department of Information Engineering, Academy of Armored Force Engineering, Beijing 100072, China},
abstract={This paper proposes a method for detecting vulnerability defects caused by tainted data based on state machine. It first uses state machine to define various defect patterns. If the states of state machine is considered as the value propagated in dataflow analysis and the union operation of the state sets as the aggregation operation of dataflow analysis, the defect detection can be treated as a forward dataflow analysis problem. To reduce the false positives caused by intraprocedural analysis, the dynamic information of program was represented approximately by abstract value of variables, and then infeasible path can be identified when some variable's abstract value is empty in the state condition. A function summary method is proposed to get the information needed for performing interprocedural defect detection. The method proposed has been implemented in a defect testing tools. © 2010 IEEE.},
author_keywords={Function summary;  Interval computation;  State machine;  Static analysis;  Vulnerability defects},
keywords={Aggregation operation;  Defect detection;  Defect patterns;  Dynamic information;  False positive;  Infeasible paths;  Inter-procedural;  Interval computation;  State machine;  State-sets;  Testing tools;  Vulnerability defects, Abstracting;  Contour followers;  Defects;  Information technology;  Static analysis, Data flow analysis},
references={Ball, T., Bounimova, E., Cook, B., Levin, V., Lichtenberg, J., McGarvey, C., Ondrusek, B., Ustuner, A., (2006) Thorough Static Analysis of Device Drivers,EuroSys; Yang, J., Sar, C., Engler, D., eXplode: A Lightweight,General System for Finding Serious Storage System Errors Proceedings of the USENIX Symposium on Operating Systems Design and Implementation (OSDI) Seattle,Washington, November,2006; Livshits, V.B., Lain, M.S., Finding Security Vulnerabilities in Java Applications with Static Analysis Proceedings of the 14th Usenix Security Symposium, 2005, pp. 271-286. , C; Chess, B., West, J., (2007) Secure Programming with Static Analysis [M], , Boston, Addison-Wesley; Aho, A., Lam, M., Sethi, R., Ullman, J., (2006) Compilers Principles,Techniques,and Tools[M], pp. 626-632. , New York: Addison-Wesley; Yang, Z.H., Gong, Y.Z., Xiao, Q., Wang, Y.W., The Application of Interval Computation in Software Testing Based on Defect Pattern (2008) Journal of Computer-aided Design & Computer Graphic, 20 (12), pp. 1630-1635. , J; Foster, J., Terauchi, T., Aiken, A., Flow-Sensitive Type Qualifiers (2002) Proceedings of the 2002 ACM SIGPLAN Conference on Programming Language Design and Implementation, Berlin, pp. 1-12. , C; Bush, W., Pincus, J., Sielaff, D., A static analyzer for finding dynamic programming errors (2000) Software Practice and Experience, 30 (7), pp. 775-802. , J; http://findbugs-sourceforge-net.luisamigo.proxybk.com/; http://www-coverity-com;.luisamigo.proxybk.com http://www-klocwork-com;.luisamigo.proxybk.com http://www-fortify-com.luisamigo.proxybk.com},
correspondence_address1={Qing, X.; State Key Laboratory of Networking and Switching Technology, , Beijing 100876, China; email: xqing0923@qq.com},
sponsors={Int. Inf. Technol. Appl. Assoc. (IITAA)},
address={Kunming},
isbn={9780769541150},
language={English},
abbrev_source_title={Proc. - Int. Forum Inf. Technol. Appl., IFITA},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Xiang2010241,
author={Xiang, J. and Yanoo, K.},
title={Automatic static fault tree analysis from system models},
journal={Proceedings - 16th IEEE Pacific Rim International Symposium on Dependable Computing, PRDC 2010},
year={2010},
pages={241-242},
doi={10.1109/PRDC.2010.35},
art_number={5703257},
note={cited By 7; Conference of 16th IEEE Pacific Rim International Symposium on Dependable Computing, PRDC 2010 ; Conference Date: 13 December 2010 Through 15 December 2010;  Conference Code:83907},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-79951819425&doi=10.1109%2fPRDC.2010.35&partnerID=40&md5=f4c68ea1094993fddd3ff8130272b5db},
affiliation={Service Platform Research Labs., NEC Corporation, Tokyo, 108-8557, Japan},
abstract={The manual development of system reliability models such as fault trees could be costly and error prone in practice. In this paper, we focus on the problems of some traditional dynamic fault trees and present our static solutions to represent dynamic relations such as functional and sequential dependencies. The implementation of a tool for the automatic synthesis of our static fault trees from SysML system models is introduced. © 2010 IEEE.},
keywords={Automatic synthesis;  Dynamic fault trees;  Dynamic relation;  Error prones;  Fault-trees;  Static solutions;  System models;  System reliability models, Fault tree analysis;  Quality assurance, Reliability},
references={Pai, G.J., Dugan, J.B., Automatic synthesis of dynamic fault trees from uml system models (2002) Prof. of the 13th International Symposium on Software Reliability Engineering (ISSRE'02), pp. 243-256; Tang, D., Zhu, J., Andrada, R., Automatic generation of availbility models in rascad (2002) Proc. of International Conference on Dependable Systems and Networks (DSN'02), pp. 488-492; Dugan Joanne Bechta, Bavuso Salvatore, J., Boyd Mark, A., Dynamic fault-tree models for fault-tolerant computer systems (1992) IEEE Transactions on Reliability, 41 (3), pp. 363-377. , DOI 10.1109/24.159800; Dugan, J.B., Bavuso, S.J., Boyd, M.A., Fault trees and sequence dependencies (1990) Proc. of Annual Reliability and Maintainability Symposium, pp. 286-293. , IEEE},
correspondence_address1={Xiang, J.; Service Platform Research Labs., , Tokyo, 108-8557, Japan; email: j-xiang@ah.jp.nec.com},
sponsors={IEEE Comput. Soc., Tech. Comm. Dependable Comput. Fault Tolerance},
address={Tokyo},
isbn={9780769542898},
language={English},
abbrev_source_title={Proc. - IEEE Pac. Rim Int. Symp. Dependable Comput., PRDC},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Xiang2010280,
author={Xiang, J. and Yanoo, K.},
title={Formal static fault tree analysis},
journal={Proceedings, ICCES'2010 - 2010 International Conference on Computer Engineering and Systems},
year={2010},
pages={280-286},
doi={10.1109/ICCES.2010.5674869},
art_number={5674869},
note={cited By 8; Conference of 2010 6th International Conference on Computer Engineering and Systems, ICCES'2010 ; Conference Date: 30 November 2010 Through 1 December 2010;  Conference Code:83578},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-78751616783&doi=10.1109%2fICCES.2010.5674869&partnerID=40&md5=74743f5602f0b21bd4de76dc5d8e0abe},
affiliation={Service Platform Research Labs., NEC Corporation, Kawasaki, 211-8666, Japan},
abstract={Fault tree analysis (FTA) is a traditional informal reliability and safety analysis technique. FTA is basically a combinational model in which standard Boolean logic constructs, such as AND and OR gates, are used to decompose the fault events. Several dynamic constructs, such as Functional Dependency (FDEP) and Priority AND (PAND) gates, are also proposed to handle dynamic behaviors of system failure mechanisms. In this article, we focus on some paradoxes and constraints of the traditional FDEP and PAND gates, and present our static solutions to these dynamic gates. The proposed static fault tree model is formalized with Maude, an executable algebraic formal specification language. Two example fault tolerant parallel processor (FTPP) configurations are used to demonstrate our static fault tree model. ©2010 IEEE.},
author_keywords={Fault tree analysis;  Formal methods;  Functional dependency;  Reliability;  Sequential dependency},
keywords={Boolean logic;  Dynamic behaviors;  Fault event;  Fault tree model;  Fault-tolerant;  Formal specification language;  Functional dependency;  Parallel processor;  Safety analysis;  Sequential dependency;  Static solutions;  System failures, Fault tree analysis;  Formal methods;  Logic gates;  Reliability analysis;  Specification languages, Quality assurance},
references={Vesely, W.E., Goldberg, F.F., Roberts, N.H., Haasl, D.F., (1981) Fault Tree Handbook, , U.S. Nuclear Regulatory Commission, Washington, D.C, Tech. Rep. NUREG-0492, Jan; Dugan, J.B., Bavuso, S., Boyd, M., Dynamic fault tree models for fault tolerant computer systems (1992) IEEE Transactions on Reliability, 41 (3), pp. 363-377; Relex Fault Tree, , http://www-relex-com.luisamigo.proxybk.com/products/faulttree.asp; Coppit, D., Sullivan, K.J., Dugan, J.B., Formal semantics of models for computational engineering: A case study on dynamic fault trees (2000) Proc. of the 11th International Symposium on Software Reliability Engineering, San Jose, California, USA, pp. 270-282. , Oct; Watson, H.A., Laboratories, B.T., (1961) Launch Control Safety Study, , Bell Telephone Laboratories, Murray Hill, NJ, Tech. Rep; Lyu, M.R., (1995) Handbook of Software Reliability Engineering, , McGraw-Hill; Xiang, J., Futatsugi, K., He, Y., Fault tree analysis of software reliability allocation (2003) Proc. of the 7th World Multiconference on Systemics, Cybernetics and Informatics, 2, pp. 460-465. , Computer Science and Engineering. Orlando, USA: International Institute of Informatics and Systemics, Jul; Dugan, J.B., Bavuso, S.J., Boyd, M.A., Fault trees and sequence dependencies Proc. of Annual Reliability and Maintainability Symposium. IEEE, 1990, pp. 286-293; Amari, S., Dill, G., Howald, E., A new approach to solve dynamic fault trees Proc. of Annual Reliability and Maintainability Symposium. IEEE, 2003, pp. 374-379; Dugan, J.B., Fault trees and imperfect coverage (1989) IEEE Transactions on Reliability, 38 (2), pp. 177-185. , June; Doyle, S.A., Dugan, J.B., Fault tree and imperfect coverage: A combinational approach, in Proc. of Annual Reliability and Maintainability Symposium. IEEE, 1993, pp. 214-219; Clavel, M., Eker, S., Lincoln, P., Meseguer, J., Principles of maude (1996) Electronic Notes in Theoretical Computer Science, 4. , Proceedings of The First International Workshop on Rewriting Logic and its Applications, J. Meseguer, Ed., Asilomar, California: Elsevier Science, Sep; Clavel, M., Durán, F., Eker, S., Lincoln, P., Martí-Oliet, N., Meseguer, J., Talcott, C., (2003) Maude 2.0 Manual: Version 1.0, , June; Xiang, J., Ogata, K., Futatsugi, K., Formal fault tree analysis of state transition systems (2005) Proc. of the 5th International Conference on Quality Software, pp. 124-131. , Melbourne, Australia: IEEE, Sep; Manna, Z., Pnueli, A., (1992) The Temporal Logic of Reactive and Concurrent Systems, , New York: Springer-Verlag; Harper, R.E., Lala, J.H., Deyst, J.J., Fault tolerant parallel processor architecuture overview (1988) Proc. 18th Symp. Fault Tolerant Computing, pp. 252-257; Harper, R.E., Reliability analysis of parellel processing systems Proc. 8th Digital Avionics Systems Conf., 1988, pp. 213-219},
correspondence_address1={Xiang, J.; Service Platform Research Labs., , Kawasaki, 211-8666, Japan; email: j-xiang@ah.jp.nec.com},
sponsors={Ain Shams University; IEEE Egypt Section},
address={Cairo},
isbn={9781424470426},
language={English},
abbrev_source_title={Proc., ICCES - Int. Conf. Comput. Eng. Syst.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Sagonas201013,
author={Sagonas, K.},
title={Using static analysis to detect type errors and concurrency defects in Erlang programs},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2010},
volume={6009 LNCS},
pages={13-18},
doi={10.1007/978-3-642-12251-4_2},
note={cited By 4; Conference of 10th International Symposium on Functional and Logic Programming, FLOPS 2010 ; Conference Date: 19 April 2010 Through 21 April 2010;  Conference Code:83275},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-78651258917&doi=10.1007%2f978-3-642-12251-4_2&partnerID=40&md5=12ff0b327577443c687512cb8a5608e9},
abstract={This invited talk will present the key ideas in the design and implementation of Dialyzer, a static analysis tool for Erlang programs. Dialyzer started as a defect detection tool using a rather ad hoc dataflow analysis to detect type errors in Erlang programs, but relatively early in its development it adopted a more disciplined approach to detecting definite type clashes in dynamically typed languages. Namely, an approach based on using a constraint-based analysis to infer success typings which are also enhanced with optional contracts supplied by the programmer. In the first part of the talk, we will describe this constraint-based approach to type inference and explain how it differs with past and recent attempts to type check programs written in dynamic languages. In the second part of the talk, we will present important recent additions to Dialyzer, namely analyses that detect concurrency defects (such as race conditions) in Erlang programs. For a number of years now, Dialyzer has been part of the Erlang/OTP system and has been actively used by its community. Based on this experience, we will also critically examine Dialyzer's design choices, show interesting cases of Dialyzer's use, and distill the main lessons learned from using static analysis in open source as well as commercial code bases of significant size. © 2010 Springer-Verlag Berlin Heidelberg.},
keywords={Commercial codes;  Constraint-based;  Constraint-based analysis;  Defect detection;  Detect type errors;  Dynamic languages;  Erlang programs;  Invited talk;  Open sources;  Race condition;  Type inferences, Data flow analysis;  Defects;  Errors;  Functional programming;  Logic programming;  Open systems, Static analysis},
references={Armstrong, J., (2007) Programming Erlang: Software for A Concurrent World, , The Pragmatic Bookshelf, Raleigh; Nagy, T., Nagyné Víg, A., Erlang testing and tools survey (2008) Proceedings of the 7th ACM SIGPLAN Workshop on Erlang, pp. 21-28. , ACM, New York; Lindahl, T., Sagonas, K., Detecting software defects in telecom applications through lightweight static analysis: A war story (2004) LNCS, 3302, pp. 91-106. , Wei-Ngan, C. (ed.) APLAS 2004. Springer, Heidelberg; Lindahl, T., Sagonas, K., Practical type inference based on success typings (2006) Proceedings of the 8th ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming, pp. 167-178. , ACM, New York; Christakis, M., Sagonas, K., Static detection of race conditions in Erlang (2010) LNCS, 5937, pp. 119-133. , Carro, M., Peña, R. (eds.) PADL 2010. Springer, Heidelberg; Sagonas, K., Experience from developing the Dialyzer: A static analysis tool detecting defects in Erlang applications (2005) Proceedings of the ACM SIGPLAN Workshop on the Evaluation of Software Defect Detection Tools; Marlow, S., Wadler, P., A practical subtyping system for Erlang (1997) Proceedings of the ACM SIGPLAN International Conference on Functional Programming, pp. 136-149. , ACM, New York; Nyström, S.O., A soft-typing system for Erlang (2003) Proceedings of ACM SIGPLAN Erlang Workshop, pp. 56-71. , ACM, New York; Jimenez, M., Lindahl, T., Sagonas, K., A language for specifying type contracts in Erlang and its interaction with success typings (2007) Proceedings of the 6th ACM SIGPLAN Workshop on Erlang, pp. 11-17. , ACM, New York; Findler, R.B., Clements, J., Flanagan, C., Flatt, M., Krishnamurthi, S., Steckler, P., Felleisen, M., DrScheme: A programming environment for Scheme (2002) Journal of Functional Programming, 12 (2), pp. 159-182; Sagonas, K., Luna, D., Gradual typing of Erlang programs: AWrangler experience (2008) Proceedings of the 7th ACM SIGPLAN Workshop on Erlang, pp. 73-82. , ACM, New York},
correspondence_address1={Sagonas, K.email: kostis@cs.ntua.gr},
sponsors={Japan Society for Software Science and Technology (JSSST) SIG-PPL; CERIES Global COE Program (Tohoku Univ. Electro-Related Dep.); Graduate School of Information Sciences (Tohoku University); International Information Science Foundation; Asian Association for Foundation of Software (AAFS)},
address={Sendai},
issn={03029743},
isbn={3642122507; 9783642122507},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Luo2010135,
author={Luo, Z.D. and Hillis, L. and Das, R. and Qi, Y.},
title={Effective static analysis to find concurrency bugs in Java},
journal={Proceedings - 10th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2010},
year={2010},
pages={135-144},
doi={10.1109/SCAM.2010.20},
art_number={5601820},
note={cited By 9; Conference of 10th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2010 ; Conference Date: 12 September 2010 Through 13 September 2010;  Conference Code:82443},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-78649396352&doi=10.1109%2fSCAM.2010.20&partnerID=40&md5=c5544ddc3552214618ee6c3e0f7eddc5},
affiliation={IBM China Development Lab., Beijing, China; IBM Software Group, Ottawa, Canada; IBM Software Group, Research Triangle Park, NC, United States},
abstract={Multithreading and concurrency are core features of the Java language. However, writing a correct concurrent program is notoriously difficult and error prone. Therefore, developing effective techniques to find concurrency bugs is very important. Existing static analysis techniques for finding concurrency bugs either sacrifice precision for performance, leading to many false positives, or require sophisticated analysis that incur significant overhead. In this paper, we present a precise and efficient static concurrency bugs detector building upon the Eclipse JDT and the open source WALA toolkit (which provides advanced static analysis capabilities). Our detector uses different implementation strategies to consider different types of concurrency bugs. We either utilize JDT to syntactically examine source code, or leverage WALA to perform inter-procedural data flow analysis. We describe a variety of novel heuristics and enhancements to existing analysis techniques which make our detector more practical, in terms of accuracy and performance. We also present an effective approach to use WALA for complex inter-procedural data flow analysis. Finally we justify our claims by presenting the results of applying our detector to a range of real-world applications and comparing our detector with other tools. © 2010 IEEE.},
author_keywords={Bug pattern;  Concurrency;  Multithread;  Static analysis},
keywords={Analysis capabilities;  Analysis techniques;  Bug pattern;  Concurrency;  Concurrent program;  Core features;  Error prones;  False positive;  Implementation strategies;  Inter-procedural;  Java language;  Multi-thread;  Multi-threading;  Open sources;  Real-world application;  Source codes, Data handling;  Detectors;  Java programming language;  Multitasking;  Static analysis, Data flow analysis},
references={Gosling, J., Joy, B., Steele, G., Bracha, G., (2000) Java Language Specification, Second Edition: The Java Series, , Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc; Goetz, B., Peierls, T., (2006) Java Concurrency in Practice, , Addison-Wesley; Manson, J., Pugh, W., Adve, S., The Java memory model (2005) Proceedings of the 32nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pp. 378-391. , ACM; Hovemeyer, D., Pugh, W., Finding concurrency bugs in Java (2004) Proceedings of the PODC Workshop on Concurrency and Synchronization in Java Programs, St. John's, Newfoundland, Canada, , Citeseer; Hallal, H., Alikacem, E., Tunney, W., Boroday, S., Petrenko, A., Antipattern-based detection of deficiencies in Java multithreaded software (2004) Proceedings of the Quality Software, Fourth International Conference, p. 267. , IEEE Computer Society; Savage, S., Burrows, M., Nelson, G., Sobalvarro, P., Anderson, T., Eraser: A Dynamic Data Race Detector for Multithreaded Programs (1997) ACM Transactions on Computer Systems, 15 (4), pp. 391-411; Edelstein, O., Farchi, E., Goldin, E., Nir, Y., Ratsaby, G., Ur, S., Framework for testing multi-threaded java programs (2003) Concurrency and Computation: Practice and Experience, 15 (3-5), pp. 485-499; Qi, Y., Das, R., Luo, Z.D., Trotter, M., Multicoresdk: A practical and efficient data race detector for real-world applications (2009) PADTAD '09: Proceedings of the 7th Workshop on Parallel and Distributed Systems, pp. 1-11. , New York, NY, USA: ACM; Engler, D., Ashcraft, K., Racerx: Effective, static detection of race conditions and deadlocks (2003) SIGOPS Oper. Syst. Rev., 37 (5), pp. 237-252; Flanagan, C., Leino, K.R.M., Lillibridge, M., Nelson, G., Saxe, J.B., Stata, R., Extended static checking for java (2002) PLDI '02: Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation, pp. 234-245. , New York, NY, USA: ACM; Sterling, N., WARLOCK-a static data race analysis tool (1993) Proceedings of the Winter 1993 USENIX Conference: January 25-29, 1993, San Diego, California, USA, p. 97. , Usenix Association; Visser, W., Havelund, K., Brat, G., Park, S., Model checking programs (2000) ASE '00: Proceedings of the 15th IEEE International Conference on Automated Software Engineering, p. 3. , Washington, DC, USA: IEEE Computer Society; Musuvathi, M., Qadeer, S., Ball, T., Chess: A systematic testing tool for concurrent software (2007) Microsoft Research, Tech. Rep. MSR-TR-2007-149; Artho, C., Biere, A., Applying static analysis to largescale, multi-threaded java programs (2001) ASWEC '01: Proceedings of the 13th Australian Conference on Software Engineering, p. 68. , Washington, DC, USA: IEEE Computer Society; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) SIGPLAN Not., 39 (12), pp. 92-106; Otto, F., Moschny, T., Finding synchronization defects in java programs: Extended static analyses and code patterns (2008) IWMSE '08: Proceedings of the 1st International Workshop on Multicore Software Engineering, pp. 41-46. , New York, NY, USA: ACM; Rational Software Analyzer, , http://www-01-ibm-com.luisamigo.proxybk.com/software/awdtools/swanalyzer/; Gamma, E., Helm, R., Johnson, R., Vlissides, J., (1995) Design Patterns: Elements of Reusable Object-oriented Software, , Addison-wesley Reading, MA; Holmes, R., Murphy, G., Using structural context to recommend source code examples (2005) Proceedings of the 27th International Conference on Software Engineering, p. 125. , ACM; http://wala-sourceforge-net.luisamigo.proxybk.com/wiki/index.php/Main_Page; Reps, T., Horwitz, S., Sagiv, M., Precise interprocedural dataflow analysis via graph reachability (1995) Proceedings of the 22nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pp. 49-61. , ACM; Lea, D., The java. util. concurrent synchronizer framework (2005) Science of Computer Programming, 58 (3), p. 309; Schmidt, D., Harrison, T., Double-checked locking: An optimization pattern for efficiently initializing and accessing thread-safe objects (1996) Pattern Languages of Program Design, 3; Bacon, D., Bloch, J., Bogda, J., Click, C., Haahr, P., Lea, D., May, T., Nilsen, K., The Doublechecked Locking Is Broken Declaration, , http://www-cs-umd-edu.luisamigo.proxybk.com/~ugh/java/memoryModel/DoubleCheckedLocking.html; http://findbugs-sourceforge-net.luisamigo.proxybk.com/},
correspondence_address1={Luo, Z. D.; IBM China Development Lab., Beijing, China; email: luozd@cn.ibm.com},
sponsors={IEEE Computer Society},
address={Timisoara},
isbn={9780769541785},
language={English},
abbrev_source_title={Proc. - IEEE Int. Work. Conf. Source Code Anal. Manip., SCAM},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Kester2010115,
author={Kester, D. and Mwebesa, M. and Bradbury, J.S.},
title={How good is static analysis at finding concurrency bugs?},
journal={Proceedings - 10th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2010},
year={2010},
pages={115-124},
doi={10.1109/SCAM.2010.26},
art_number={5601822},
note={cited By 11; Conference of 10th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2010 ; Conference Date: 12 September 2010 Through 13 September 2010;  Conference Code:82443},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-78649394800&doi=10.1109%2fSCAM.2010.26&partnerID=40&md5=76d9157803b545c52e45bb1af40a30a1},
affiliation={Software Quality Research Group, Faculty of Science (Computer Science), University of Ontario Institute of Technology, Oshawa, ON, Canada},
abstract={Detecting bugs in concurrent software is challenging due to the many different thread interleavings. Dynamic analysis and testing solutions to bug detection are often costly as they need to provide coverage of the interleaving space in addition to traditional black box or white box coverage. An alternative to dynamic analysis detection of concurrency bugs is the use of static analysis. This paper examines the use of three static analysis tools (FindBugs, JLint and Chord) in order to assess each tool's ability to find concurrency bugs and to identify the percentage of spurious results produced. The empirical data presented is based on an experiment involving 12 concurrent Java programs. © 2010 IEEE.},
author_keywords={Concurrency;  Data race;  Deadlock;  Empirical software engineering;  Static analysis},
keywords={Analysis and testing;  Analysis detection;  Black boxes;  Bug detection;  Concurrency;  Concurrent Java programs;  Concurrent software;  Data races;  Deadlock;  Detecting bugs;  Empirical data;  Empirical Software Engineering;  Interleavings;  White box, Computer software;  Dynamic analysis;  Java programming language;  Program debugging, Static analysis},
references={Asanovic, K., Bodik, R., Demmel, J., A view of the parallel computing landscape (2009) Communications of the ACM, 52 (10); Eytani, Y., Farchi, E., Ben-Asher, Y., Heuristics for finding concurrent bugs (2003) Proc. of the 1st International Workshop on Parallel and Distributed Systems: Testing and Debugging (PADTAD 2003); Musuvathi, M., Qadeer, S., Ball, T., Finding and reproducing heisenbugs in concurrent programs (2008) Proc. of the 8th USENIX Symposium on Operating Systems Design and Implementation (OSDI 08); FindBugs - Find Bugs in Java Programs, , http://findbugs-sourceforge-net.luisamigo.proxybk.com/, Web page, (last accessed May 07, 2010); Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) SIGPLAN Not., 39 (12), pp. 92-106; http://jlint-sourceforge-net.luisamigo.proxybk.com/, Web page, (last accessed May 07, 2010); Artho, C., (2001) Finding Faults in Multi-threaded Programs, , Master's thesis, Institute of Computer Systems, Federal Institute of Technology, Zurich/Austin; Engler, D., Ashcraft, K., RacerX: Effective, static detection of race conditions and deadlocks (2003) Proc. of the 19th ACM Symposium on Operating Systems Principles (SOSP'03), pp. 237-252; Voung, J.W., Jhala, R., Lerner, S., RELAY: Static race detection on millions of lines of code (2007) Proc. of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC-FSE '07), pp. 205-214; JChord - A Static and Dynamic Program Analysis Framework for Java, , http://code-google-com.luisamigo.proxybk.com/p/jchord/, Web page, (last accessed May 07, 2010); Naik, M., Aiken, A., Conditional must not aliasing for static race detection (2007) ACM SIGPLAN Notices, 42 (1); Naik, M., Park, C.-S., Sen, K., Gay, D., Effective static deadlock detection (2009) Proc. of the 31st International Conference on Software Engineering (ICSE 2009), pp. 386-396; Bessey, A., Block, K., Chelf, B., A few billion lines of code later: Using static analysis to find bugs in the real world (2010) Communications of the ACM, 53 (2); ConTest - A Tool for Testing Multi-threaded Java Applications, , http://www-haifa-ibm-com.luisamigo.proxybk.com/projects/verification/contest/, Web page, (last accessed May 07, 2010); Edelstein, O., Farchi, E., Nir, Y., Multithreaded Java program test generation (2002) IBM Systems Journal, 41 (1), pp. 111-125; Joshi, P., Naik, M., Park, C.-S., Sen, K., CalFuzzer:an extensible active testing framework for concurrent programs (2009) Proc. of the 21st International Conference on Computer Aided Verification (CAV'09), pp. 675-681; Musuvathi, M., Systematic concurrency testing using CHESS (2008) Proc. of the 6th Workshop on Parallel and Distributed Systems: Testing, Analysis, and Debugging (PADTAD 2008); Havelund, K., Pressburger, T., Model checking Java programs using Java PathFinder (2000) International Journal on Software Tools for Technology Transfer (STTT), 2 (4); http://babelfish-arc-nasa-gov.luisamigo.proxybk.com/trac/jpf, Web page, (last accessed May 07, 2010); Stobie, K., Too darned big to test (2005) Queue, 3 (1); Naik, M., Aiken, A., Whaley, J., Effective static race detection for Java (2006) ACM SIGPLAN Notices, 41 (6); Eytani, Y., Ur, S., Compiling a benchmark of documented multi-threaded bugs (2004) Proc. of the 2nd International Workshop on Parallel and Distributed Systems: Testing and Debugging (PADTAD 2004); Chamillard, A.T., (1996) An Empirical Comparison of Static Concurrency Analysis Techniques, , Ph.D. thesis, University of Massachusets Amherst; Corbett, J.C., Evaluating deadlock detection methods for concurrent software (1996) IEEE Transactions on Software Engineering, 22 (3), pp. 161-180; Wojcicki, M.A., Strooper, P., Maximising the information gained from a study of static analysis technologies for concurrent software (2007) Empirical Software Engineering Software Engineering, 12, pp. 617-645; Emanuelsson, P., Nilsson, U., A comparative study of industrial static analysis tools (2008) Electronic Notes in Theoretical Computer Science (ENTCS); Rutar, N., Almazan, C.B., Foster, J.S., A comparison of bug finding tools for Java (2004) Proc. of the 15th International Symposium on Software Reliability Engineering (ISSRE'04), pp. 245-256; Zitser, M., Lippmann, R., Leek, T., Testing static analysis tools using exploitable buffer overflows from open source code (2004) ACM SIGSOFT Software Engineering Notes, 29 (6); Wedyan, F., Alrmuny, D., Bieman, J., The effectiveness of automated static analysis tools for fault detection and refactoring prediction (2009) Proc. of the International Conference on Software Testing Verification and Validation, 2009 (ICST '09), pp. 141-150; Engler, D., Musuvathi, M., Static analysis versus software model checking for bug finding (2004) Proc. of the 5th International Conference on Verification, Model Checking, and Abstract Interpretation (VMCAI04) (Invited Paper), pp. 191-210; Lu, S., Li, Z., Qin, F., BugBench: Benchmarks for evaluating bug detection tools (2005) Proc. of the Workshop on the Evaluation of Software Defect Detection Tools; Bradbury, J.S., Cordy, J.R., Dingel, J., Comparative assessment of testing and model checking using program mutation (2007) Proc. of the 3rd Workshop on Mutation Analysis (Mutation 2007), pp. 210-219; Chen, J., MacDonald, S., Towards a better collaboration of static and dynamic analyses for testing concurrent programs (2008) Proc. of the 6th Workshop on Parallel and Distributed Systems (PADTAD '08), pp. 1-9},
correspondence_address1={Kester, D.; Software Quality Research Group, , Oshawa, ON, Canada; email: devin.kester@mycampus.uoit.ca},
sponsors={IEEE Computer Society},
address={Timisoara},
isbn={9780769541785},
language={English},
abbrev_source_title={Proc. - IEEE Int. Work. Conf. Source Code Anal. Manip., SCAM},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Ye2010,
author={Ye, K. and Huang, J. and Gong, Y. and Yang, X.},
title={A static analysis method of WSDL related defect pattern in BPEL},
journal={ICCET 2010 - 2010 International Conference on Computer Engineering and Technology, Proceedings},
year={2010},
volume={7},
pages={V7472-V7475},
doi={10.1109/ICCET.2010.5485541},
art_number={5485541},
note={cited By 3; Conference of 2010 2nd International Conference on Computer Engineering and Technology, ICCET 2010 ; Conference Date: 16 April 2010 Through 18 April 2010;  Conference Code:81865},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-77958061737&doi=10.1109%2fICCET.2010.5485541&partnerID=40&md5=6529e8764cddeca81198612af8be8d41},
affiliation={Institute of Networking Technology, Beijing University of Posts and Telecommunications, Beijing, China},
abstract={Business Process Execution Language (BPEL) is a language for Web service composition. BPEL process model is layered on top of the service model, providing and/or using one or more WSDL services. Incorrect definition of WSDL elements related to BPEL (B-WSDL Element) will influence the normal interaction between BPEL process and WSDL services, and further, cause exceptions in the process. So far, these exceptions would be thrown in the running phase of the system, and make prior work of design, creation and deployment meaningless. This paper firstly defines several defect patterns related to B-WSDL Element, and then proposes a corresponding static analysis method. This method could be used to find B-WSDL Element related defects in static analysis phase, reduce the possibility of exceptions and faults in running phase, and improve the robustness of the process. © 2010 IEEE.},
author_keywords={B-WSDL element;  BPEL static analysis;  Defect pattern;  Finite state machine;  WSDL related},
keywords={B-WSDL element;  BPEL static analysis;  Defect pattern;  Finite state machines;  WSDL related, Contour followers;  Static analysis;  Web services, Defects},
references={Web Services Business Process Execution Language Version 2.0, , http://docs-oasis-open-org.luisamigo.proxybk.com/wsbpel/2.0/OS/wsbpelv2.0-OS.html, OASIS Standard; Peterson, D.M., Power to the BPEL: A technology for web services (2003) Business Communications Review; Web Services Description Language (WSDL) 1.1, , http://www.w3.org/TR/2001/NOTE-wsdl-20010315; Mayer, P., Lübke, D., Towards a BPEL unit testing framework (2006) TAV-WEB; Bai, X., Dong, W., Tsai, W.T., Chen, Y., WSDL-based automatic test case generation for web services testing (2005) SOSE; Lapadula, A., Pugliese, R., Tiezzi, F., A WSDL-based type system for WS-BPEL (2006) Lecture Notes in Computer Science; http://www-eclipse-org.luisamigo.proxybk.com/modeling/emf/; Huynh, K., Fung, J., Breugel, F.V., O'Farrell, B., Analysis through reflection, walking the EMF model of BPEL4WS (2005) Report CS-2005-05, York University; Xiao, Q., Yang, Z., Bi, X., A test method based on defect pattern state machine (2007) Journal of Beijing University of Chemical Technology},
correspondence_address1={Ye, K.; Institute of Networking Technology, , Beijing, China; email: cocoy2006@gmail.com},
address={Chengdu},
isbn={9781424463503},
language={English},
abbrev_source_title={ICCET - Int. Conf. Comput. Eng. Technol., Proc.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Moy20105,
author={Moy, Y.},
title={Static analysis is not just for finding bugs},
journal={CrossTalk},
year={2010},
volume={23},
number={9-10},
pages={5-8},
note={cited By 4},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-77956754448&partnerID=40&md5=20df6364bfa3c5fc36c0b7d4a35d5736},
affiliation={AdaCore, 46 Rue d'Amsterdam, Paris, 75009, France},
abstract={Static analysis tools are gaining popularity for safeguarding against the most common causes of errors in software. The main focus of these tools is on automatic bug-finding-the first stage in a two-phase process where the tool finds bugs and the human then corrects them. This article explains that such a goal is too narrow for critical software assurance (SwA). Instead, static analysis tools should adopt a broader perspective: computing properties of software.},
keywords={Critical software;  Two-phase process, Static analysis},
references={Bessey, A.L., A few billion lines of code later: Using static analysis to find bugs in the real world (2010) Communications of the ACM, , http://cacm-acm-org.luisamigo.proxybk.com/magazines/2010/2/69354-a-few-billion-lines-of-code- later, 53.2. Feb; Ganssle Jack, G., (2010) A Guide to Code Inspections, , www-ganssle-com.luisamigo.proxybk.com/inspections.pdf, Vers. 2.1. Feb; Moy, Y., Nikolaj, B., Dave, S., Modular bug-finding for integer overflows in the large: Sound, efficient, bit-precise static analysis (2009) Microsoft Research, , http://research-microsoft-com.luisamigo.proxybk.com/apps/pubs/?id=80722, 11 May; Chess, B., Jacob, W., (2007) Secure Programming with Static Analysis, , http://media-techtarget-com.luisamigo.proxybk.com/searchSoftwareQuality/downloads/ Secure-Programming-CH03Chess.pdf, Chapter 3, "Static Analysis as Part of the Code Review Process." Upper Saddle River, NJ: Addison-Wesley; Taft, S.T., Robert, B.K.D., Making static analysis a part of code review (2009) Embedded Computing Design, , http://embedded-computing-com.luisamigo.proxybk.com/making-static-analysis-part-code-review, 16 June; Moy, Y., Angela, W., (2010) Tokeneer: Beyond Formal Program Verification, , www-open-do-org.luisamigo.proxybk.com/wp-content/uploads/2010/05/erts2010.pdf, Proc. of the Embedded Real Time Software and Systems Conference. Toulouse, France. 21 June; Ernst Michael, D., (2003) Static and Dynamic Analysis: Synergy and Duality, , www-cs-washington-edu.luisamigo.proxybk.com/homes/mernst/pubs/staticdynamic-woda2003.pdf, Proc. of the Workshop on Dynamic Analysis. Portland, OR. 9 May; Parnas, D.L., Really rethinking formal methods (2010) IEEE Computer, , 43.1 (Jan.); Souyris, J., (2009) Formal Verification of Avionics Software Products, , Proc. of the 16th Annual Symposium on Formal Methods. Eindhoven, The Netherlands, 2-6 Nov; Beck, K., (2001) Manifesto for Agile Software Development, , www-agilemanifesto-org.luisamigo.proxybk.com, Feb; Fisher, G., (2007), www-klocwork-com.luisamigo.proxybk.com/resources/white-paper/static-analysis-when-why-how, When, Why and How to Leverage Source Code Analysis." White Paper; Haddon-Cave, C., (2009) The Nimrod Review: An Independent Review into the Broader Issues Surrounding the Loss of the RAF Nimrod MR2 Aircraft XV230 in Afghanistan in 2006, , http://ethics-tamu-edu.luisamigo.proxybk.com/guest/XV230/1025%5B1%5D.pdf, Report. London: TSO. 28 Oct},
correspondence_address1={Moy, Y.; AdaCore, 46 Rue d'Amsterdam, Paris, 75009, France; email: moy@adacore.com},
language={English},
abbrev_source_title={CrossTalk},
document_type={Article},
source={Scopus},
}

@ARTICLE{Chen20101741,
author={Chen, P. and Han, H. and Shen, X.-B. and Yin, X.-C. and Mao, B. and Xie, L.},
title={Detecting integer bugs based on static and dynamic program analysis},
journal={Tien Tzu Hsueh Pao/Acta Electronica Sinica},
year={2010},
volume={38},
number={8},
pages={1741-1747},
note={cited By 7},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-77956360522&partnerID=40&md5=53c2029b083500050dced59c771b9018},
affiliation={State Key Laboratory for Novel Software Technology, Department of Computer Science and Technology, Nanjing University, Jiangsu Nanjing 210093, China; College of Information Engineering, Yangzhou University, Jiangsu Yangzhou 225009, China},
abstract={In recent years, Integer bugs have been rising sharply and become a potential threat as it is often hidden behind other bugs. In this paper, we propose a tool which can automatically detect Integer bugs. We implement the tool based on static and dynamic program analysis. In the static phase, the tool decompiles a binary and creates the suspect instruction set. In the dynamic phase, it monitors the instructions in the suspect set and generates the test cases to further detect which instructions are real Integer bugs. Our tool has two advantages. First, it provides more accurate and sufficient type information. Second, static analysis reduces the instructions which are monitored at runtime. Experimental results shows that our tool can efficiently detect the Integer bugs in several real-world programs. In addition, our tool has no false negatives and low false positives.},
author_keywords={Computer security;  Integer bugs;  Software security;  Software vulnerability},
keywords={Computer security;  Dynamic phase;  False negatives;  False positive;  Instruction set;  Integer bugs;  Potential threats;  Real-world;  Runtimes;  Software security;  Software vulnerabilities;  Static and dynamic;  Static phase;  Test case;  Type information, Computer software;  Dynamic analysis;  Security of data;  Security systems, Program debugging},
references={Brumley, D., RICH: Automatically protecting against integer-based vulnerabilities (2007) Proceedings of the 14th Annual Network and Distributed System Security Symposium (NDSS'07), pp. 351-363. , Reston, VA: Internet Society; (2007) Vulnerability Type Distributions in CEV, , http://cve-mitre-org.luisamigo.proxybk.com/docs/vuln-trends/vuln-trends.pdf, May; Lin, Z., Wang, Y., SafeBird: A dynamic and transparent toolkit for run-time buffer overflow preventions (2007) Acta Electronica Sinica, 35 (5), pp. 882-889. , in Chinese; Wojtczuk, R., UQBTng: A tool capable of automatically finding integer overflows in Win32 binaries (2005) 22nd Chaos Communication Congress, pp. 16-21. , Bielefeld: Verlag Art d'Ameublement; Wang, T., Wei, T., Lin, Z., Zou, W., IntScope: Automatically detecting integer overflow vulnerability in x86 binary using symbolic execution (2009) Proceedings of the 16th Annual Network and Distributed System Security Symposium (NDSS'09), pp. 208-221. , San Diego, CA: Internet Society; Molnar, D., Li, X.C., Wagner, D., Dynamic test generation to find integer bugs in x86 binary linux programs (2009) Proceedings of the USENIX'09 Annual Technical Conference, pp. 67-82. , San Jose, CA, USA: USENIX Association; Luk, C.-K., Pin: Building customized program analysis tools with dynamic instrumentation (2008) PLDI'05, pp. 190-200. , Chicago, IL, USA: ACM; van Emmerik, M.J., Static single assignment for decompilation (2007), Master Thesis of The University of Queensland; Integer overflow in parse decode path() of slocate (2003), http://www-cve-mitre-org.luisamigo.proxybk.com/cgi-bin/cvename.cgi?name=CVE-2003-0326; Integer overflow in zgv-5.8 (2004), http://www-cve-mitre-org.luisamigo.proxybk.com/cgi-bin/cvename.cgi?name=CVE-2004-1095; Signedness Error in python-2.5.2 (2008), http://www-cve-mitre-org.luisamigo.proxybk.com/cgi-bin/cvename.cgi?name=CVE-2008-1721; http://cve-mitre-org.luisamigo.proxybk.com/cgi-bin/cvekey.cgi?keyword=integer, CVE version: 20061101, CVE; Seward, J., Nethercote, N., Using valgrind to detect undefined memory errors with bit precision (2005) Proceedings of the USENIX05 Annual Technical Conference, pp. 17-30. , Anaheim, California, USA: USENIX Association; Integer underflow in ngIRCd before 0.8.2 (2005), http://cve-mitre-org.luisamigo.proxybk.com/cgi-bin/cvename.cgi?name=CVE-2005-0199; SSH CRC-32 compensation attack detector vulnerability, CVE (2001), http://www-cve-mitre-org.luisamigo.proxybk.com/cgi-bin/cvename.cgi?name=CVE-2001-0144; Computer organization and architecture designing for performance Willian Stallings 1996. By Prentice Hall, Inc; LeBlanc, D., Integer handling with the C++ SafeInt class (2004), http://msdn-microsoft-com.luisamigo.proxybk.com/library/default. asp?url=/library/enus/dncode/html/secure01142004.asp, Jan; Howard, M., Safe integer arithmetic in C (2006), http://blogs-msdn-com.luisamigo.proxybk.com/michaelhoward/archive/2006/02/02/523392.aspx; Integer underflow in the iso_recv_msg function (iso. c) in rdesktop 1.5.0 (2008), http://cve-mitre-org.luisamigo.proxybk.com/cgi-bin/cvename.cgi?name=CVE-2008-1801; Integer signedness error in the store_id3_text function in the ID3v2 code in mpg123 before 1.7.2 (2009), http://cve-mitre-org.luisamigo.proxybk.com/cgi-bin/cvename.cgi?name=CVE-2009-1301; Chen, P., BRICK: A binary tool for run-time detecting and locating integer-based vulnerability (2009) Availability, Reliability and Security, International Conference, pp. 208-215. , Los Alamitos, CA, USA: IEEE Computer Society; Xia, N., Guo, M., Program intrusion detection based on simplified control flow monitoring (2007) Acta Electronica Sinica, 35 (2), pp. 358-361. , in Chinese; Evans, D., LCLint: A tool for using specification to check code (1994) Proceedings of the ACM SIGSOFT 94 Symposium on the Foundations of Software Engineering, pp. 87-96. , New York, USA; Sarkar, D., Flow-insensitive static analysis for detecting integer anomalies in programs (2007) Proceedings of the 25th Conference on IASTED International Multi-Conference: Software Engineering, pp. 334-340. , Innsbruck, Austria: ACTA Press; Larus, J., Righting software (2004) IEEE Software, 21 (3), pp. 92-100; Necula, G.C., CCured: Type safe retrofitting of legacy code (2002) Proceedings of the Symposium on Principles of Programming Languages, pp. 128-139. , NY, USA: ACM Press; Jim, T., Morrisett, G., Cyclone: A safe dialect of c (2002) USENIX Annual Technical Conference, pp. 275-288. , Berkley, CA, USA: USENIX Association; Horovitz, O., Big loop integer protection Phrack Inc. (2002), http://www-phrack-org.luisamigo.proxybk.com/issues.html?issue=60&id=9JHJarticle; Lin, Z., Convicting exploitable software vulnerabilities: An efficient input provenance based approach (2008) Proceedings of the 38th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'08), pp. 247-256. , Anchorage, Alaska, USA: IEEE Computer Society},
correspondence_address1={Chen, P.; State Key Laboratory for Novel Software Technology, , Jiangsu Nanjing 210093, China; email: chenping@sns.nju.edu.cn},
issn={03722112},
coden={TTHPA},
language={Chinese},
abbrev_source_title={Tien Tzu Hsueh Pao},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Baca2010386,
author={Baca, D.},
title={Identifying security relevant warnings from static code analysis tools through code tainting},
journal={ARES 2010 - 5th International Conference on Availability, Reliability, and Security},
year={2010},
pages={386-390},
doi={10.1109/ARES.2010.108},
art_number={5438066},
note={cited By 4; Conference of 5th International Conference on Availability, Reliability, and Security, ARES 2010 ; Conference Date: 15 February 2010 Through 18 February 2010;  Conference Code:80252},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-77952357621&doi=10.1109%2fARES.2010.108&partnerID=40&md5=850065892090db1b5459268d3a86a9c3},
affiliation={Blekinge Institute of Technology, Box 520, Ericsson AB, Box 518, SE-37123, Karlskrona, Sweden},
abstract={Static code analysis tools are often used by developers as early vulnerability detectors. Due to their automation they are less time-consuming and error-prone then manual reviews. However, they produce large quantities of warnings that developers have to manually examine and understand. In this paper, we look at a solution that makes static code analysis tools more useful as an early vulnerability detector. We use flow-sensitive, interprocedural and context-sensitive data flow analysis to determine the point of user input and its migration through the source code to the actual exploit. By determining a vulnerabilities point of entry we lower the number of warnings a tool produces and we provide the developer with more information why this warning could be a real security threat. We use our approach in three different ways depending on what tool we examined. First,With the commercial static code analysis tool, Coverity, we reanalyze its results and create a set of warnings that are specifically relevant from a security perspective. Secondly, we altered the open source analysis tool Findbugs to only analyze code that has been tainted by user input. Third, we created an own analysis tool that focuses on XSS vulnerabilities in Java code. © 2010 IEEE.},
author_keywords={Component;  Formatting;  Style;  Styling},
keywords={Analysis tools;  Context-sensitive;  Error prones;  Inter-procedural;  Java codes;  Open sources;  Point of entries;  Security threats;  Source codes;  Static code analysis;  User input, Security of data, Data flow analysis},
references={Chess, B., McGraw, G., Static analysis for security (2004) IEEE Security and Privacy, 2 (6), pp. 76-79. , November-December; Evans, D., Larochelle, D., Improving security using extensible lightweight static analysis (2002) IEEE Software, 19 (1), pp. 42-51. , January/February; Viega, J., McGraw, G., Mutdosch, T., Feiten, E.W., Statically scanning java code: Finding security vulnerabilities (2000) IEEE Software, 17 (5), pp. 68-74. , September/October; Lipner, S., The trustworthy computing security development lifecycle, computer security applications conference, annual (2004) 20th Annual Computer Security Applications Conference (ACSAC'04), pp. 2-13; McGraw, G., Software security: Building security (2006) Software Reliability Engineering, International Symposium on, p. 6. , 17th International Symposium on Software Reliability Engineering (ISSRE'06); Baca, D., Petersen, K., Carlsson, B., Lundberg, L., Static code analysis to detect software security vulnerabilities - Does experience matter? (2009) Availability, Reliability and Security, International Conference on, pp. 804-810. , 2009 International Conference on Availability, Reliability and Security; Baca, D., Carlsson, B., Lundberg, L., Evaluating the cost reduction of static code analysis for software security (2008) Proceedings of the Third ACM SIGPLAN Workshop on Programming Languages and Analysis for Security, pp. 79-88. , (Tucson, AZ, USA, June 07 - 13, 2008). PLAS '08. ACM, New York, NY; Baca, D., Carlsson, B., Petersen, K., Static Analysis as a Security Touchpoint: An Industry Case Study, , To be published; Chen, J.-L., Wang, F.-J., Chen, Y.-L., Slicing object-oriented programs, asia-pacific software engineering conference (1997) Fourth Asia-Pacific Software Engineering and International Computer Science Conference (APSEC97 / ICSC'97), p. 395; Szegedi, A., Gergely, T., Beszedes, A., Gyi-Mothy, T., Toth, G., Verifying the concept of union slices on java programs, software maintenance and reengineering, European conference on (2007) 11th European Conference on Software Maintenance and Reengineering (CSMR'07), pp. 233-242; Aho, A.V., Sethi, R., Ullman, J.D., (1986) Compilers: Principles, Techniques, and Tools, , Addison-Wesley Longman Pub-lishing Co., Inc., Boston, MA, USA; Boogerd, C., Moonen, L., On the use of data flow analysis in static profiling, source code analysis and manipulation, IEEE international workshop on (2008) 2008 Eighth IEEE International Working Conference on Source Code Analysis and Manipulation, pp. 79-88; Wilson, R.P., Lam, M.S., Efficient context-sensitive pointer analysis for C programs (1995) SIGPLAN Not., 30. , 6 (Jun. 1995; Tok, T.B., Guyer, S.Z., Lin, C., Efficient flow-sensitive interpro ce dural data-flow analysis in the presence of pointers (2006) 15th International Conference on Compiler Construction (CC), p. 1731; (2009), www-cubewano-org;.luisamigo.proxybk.com (2009), wala.sourceforge.net; Boehm, B., (1981) Software Engineering Economics, , Prentice Hall},
correspondence_address1={Baca, D.; Blekinge Institute of Technology, Ericsson AB, Box 518, SE-37123, Karlskrona, Sweden; email: dejan.baca@bth.se},
address={Krakow},
isbn={9780769539652},
language={English},
abbrev_source_title={ARES - Int. Conf. Availab., Reliab., Secur.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Xing201043,
author={Xing, L. and Boddu, P. and Sun, Y. and Wang, W.},
title={Reliability analysis of static and dynamic fault-tolerant systems subject to probabilistic common-cause failures},
journal={Proceedings of the Institution of Mechanical Engineers, Part O: Journal of Risk and Reliability},
year={2010},
volume={224},
number={1},
pages={43-53},
doi={10.1243/1748006XJRR260},
note={cited By 30},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-77950669632&doi=10.1243%2f1748006XJRR260&partnerID=40&md5=31704b1f8ade36fd3deeca6e4a168946},
affiliation={University of Massachusetts Dartmouth, North Dartmouth, MA, United States; University of Rhode Island, Kingston, RI, United States; Applied Materials, Santa Clara, CA, United States},
abstract={Fault-tolerant systems designed with redundancy techniques are typically subject to common-cause failures, which are multiple dependent component failures caused by a shared root cause or a common cause (also known as a shock). There are two types of shocks: fatal and non-fatal. A fatal shock (FS) will fail all components of a system. A non-fatal shock (NFS) will affect only a subset of system components. Most of the existing shock models have assumed that the occurrence of an NFS results in deterministic and simultaneous failures of the affected components. In practice, however, the occurrence of an NFS may result in failures of different components with different probabilities of occurrence. This behaviour is referred to as probabilistic NFS. In this paper, we consider the effects of probabilistic NFS in the reliability analysis of fault-tolerant systems. Both an explicit method and an implicit method are proposed for incorporating probabilistic NFS in the reliability analysis of static systems. A Markov approach combined with the Poisson decomposition law is proposed for incorporating probabilistic NFS in the reliability analysis of dynamic systems. The proposed approaches are illustrated through the analyses of several examples.},
author_keywords={Binary decision diagram;  Dynamic system;  Markov model;  Poisson decomposition law;  Probabilistic common-cause failure;  Reliability;  Static system;  Total probability theorem},
keywords={Common cause failure;  Dynamic Systems;  Markov model;  Probabilistic common-cause failure;  Static system;  Static systems;  Total probability theorem, Binary decision diagrams;  Dynamic analysis;  Dynamic programming;  Dynamical systems;  Markov processes;  Probability;  Quality assurance;  Wireless sensor networks, Reliability analysis},
references={Borcsok, J., Schaefer, S., Ugljesa, E., (2007) Estimation and Evaluation of Common cause Failures; Mitra, S., Saxena, N.R., McCluskey, E.J., Common-mode failures in redundant VLSI systems: A survey (2000) IEEE Trans. Reliability, 49 (3); Xing, L., Wang, W., Probabilistic Common-cause Failures Analysis; Dai, Y., Xie, M., Poh, K.L., Ng, S.H., A model for correlated failures in N-version programming (2004) IIE Trans., 36 (12); Vaurio, J.K., Fault tree analysis of phased mission systems with repairable and non-repairable components (2001) Reliability Engng and System Safety, 74 (2); Fleming, K.N., Mosleh, A., (1985) Common-cause Data Analysis and Implications in System Modeling, , EPRI NP-3912-SR; Vaurio, J.K., An implicit method for incorporating common-cause failures in system analysis (1998) IEEE Trans. Reliability, 47 (2); Tang, Z., Dugan, J.B., An Integrated Method for Incorporating Common Cause Failures in System Analysis; Tang, Z., Xu, H., Dugan, J.B., Reliability Analysis of Phased Mission Systems with Common Cause Failures; Xing, L., Reliability evaluation of phased-mission systems with imperfect fault coverage and common-cause failures (2007) IEEE Trans. Reliability, 56 (1); Xing, L., Shrestha, A., Meshkat, L., Wang, W., Incorporating common-cause failures into the modular hierarchical systems analysis (2009) IEEE Trans. Reliability, 58 (1); Chae, K.C., System Reliability using Binomial Failure Rate; Dugan, J.B., Doyle, S.A., New results in fault-tree analysis (1997) Tutorial Notes Annual Reliability and Maintainability Symposium, , Philadelphia, Pennsylvania, January; Hsueh, M., Tsai, T.K., Iyer, R.K., Fault injection techniques and tools (1997) IEEE Computer, 30 (4); Cukier, M., Powell, D., Ariat, J., Coverage estimation methods for stratified fault-injection (1999) IEEE Trans. Computers, 48 (7); Modarres, M., (1993) What Every Engineer Should Know about Reliability and Risk Analysis, , New York: Marcel Dekker ch. 6; Vaurio, J.K., Uncertainties and quantification of common cause failure rates and probabilities for system analyses (2005) Reliability Engng and System Safety, 90 (2-3); Xie, L., Zhou, J., Wang, X., Data mapping and the prediction of common cause failure probability (2005) IEEE Trans. Reliability, 54 (2); Hokstad, P., Maria, A., Tomis, P., Estimation of common cause factors from systems with different numbers of channels (2006) IEEE Trans. Reliability, 55 (1); Rauzy, A., New algorithms for fault tree analysis (1993) Reliability Engng and System Safety, 40; Xing, L., Meshkat, L., Donohue, S.K., Reliability analysis of hierarchical computer-based systems subject to common-cause failures (2007) Reliability Engng and System Safety, 92 (3); Trivedi, K.S., (2001) Probability and Statistics with Reliability, Queuing, Computer Science Applications, , New York: John Wiley; Gulati, R., Dugan, J.B., A Modular Approach for Analyzing Static and Dynamic Fault Trees; Wood, A., Stankovic, J., Denial of service in sensor networks (2002) IEEE Computer, 35 (10); Perrig, A., Stankovic, J., Wagner, D., Security in wireless sensor networks (2004) Commun. ACM, 47 (6); Li, M., Koutsopoulos, I., Poovendran, R., Optimal Jamming Attacks and Network Defense Policies in Wireless Sensor Networks; Xu, W., Ma, K., Trappe, W., Zhang, Y., Jamming sensor networks: Attack and defense strategies (2006) IEEE Networks, 20 (3); Ma, K., Zhang, Y., Trappe, W., Mobile Network Management and Robust Spatial Retreats Via Network Dynamics; Noubir, G., Lin, G., Low-power DoS attacks in data wireless LANs and countermeasures (2003) ACM SIGMOBILE Mobile Computing and Commun. Rev., 7 (3); Xing, L., Boddu, P., Sun, Y., System Reliability Analysis Considering Fatal and Non-fatal Shocks},
correspondence_address1={Xing, L.; University of Massachusetts Dartmouth, North Dartmouth, MA, United States},
issn={1748006X},
language={English},
abbrev_source_title={Proc. Inst. Mech. Eng. Part O J. Risk Reliab.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Bessey201066,
author={Bessey, A. and Block, K. and Chelf, B. and Chou, A. and Fulton, B. and Hallem, S. and Henri-Gros, C. and Kamsky, A. and McPeak, S. and Engler, D.},
title={A few billion lines of code later: Using static analysis to find bugs in the real world},
journal={Communications of the ACM},
year={2010},
volume={53},
number={2},
pages={66-75},
doi={10.1145/1646353.1646374},
note={cited By 390},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-75749147262&doi=10.1145%2f1646353.1646374&partnerID=40&md5=d726a8885a2c393637a665260d77ac52},
affiliation={Coverity, Inc., San Francisco, CA, United States; Department of Computer Science and Electrical Engineering, Stanford University, Stanford, CA, United States; Technical Advisor to Coverity, Inc., San Francisco, CA, United States},
abstract={How Coverity built a bug-finding tool, and a business, around the unlimited supply of bugs in software systems. © 2010 ACM.},
keywords={Bug-finding tool;  Lines of code;  Software systems, Program debugging},
references={Ball, T., Rajamani, S.K., Automatically validating temporal safety properties of interfaces (2001) Proceedings of the Eighth International SPIN Workshop on Model Checking of Software, pp. 103-122. , Toronto, ontario, canada M. Dwyer, Ed. Springer-Verlag, New york; Bush, W., Pincus, J., Sielaff, D., A static analyzer for fnding dynamic programming errors (2000) Software: Practice and Experience, 30 (7), pp. 775-802. , June; http://www-coverity-com.luisamigo.proxybk.com, coverity static analysis; Das, M., Lerner, S., Seigle, M., ESP: Path-sensitive program verifcation in polynomial time (2002) Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation, pp. 57-68. , (berlin, germany, June 17-19). acM Press, New york; http://www-edg-com.luisamigo.proxybk.com, Edison Design group. EDg c compiler front-end; Engler, D., Chelf, B., Chou, A., Hallem, S., Checking system rules using system-specifc, programmer-written compiler extensions (2000) Proceedings of the Fourth Conference on Operating System Design & Implementation, pp. 1-1. , (San Diego, oct. 22-25) USENiX association, berkeley, ca; Flanagan, C., Leino, K.M., Lillibridge, M., Nelson, G., Saxe, J.B., Stata, R., Extended static checking for Java (2002) Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 234-245. , (berlin, germany, June 17-19). acM Press, New york; Foster, J.S., Terauchi, T., Aiken, A., Flow-sensitive type qualifers Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation, 2002, pp. 1-12. , (berlin, germany, June 17-19). acM Press, New york; Hallem, S., Chelf, B., Xie, Y., Engler, D., A system and language for building system-specifc, static analyses (2002) Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 69-82. , (berlin, germany, June 17-19) acM Press, New york; Hastings, R., Joyce, B.E., Purify: Fast detection of memory leaks and access errors (1992) Proceedings of the Winter 1992 USENIX Conference (Berkeley, Ca, Jan. 20-24) USENiX Association, Berkeley, Ca, pp. 125-138; Xie, Y., Aiken, A., Context-and path-sensitive memory leak detection (2005) Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 115-125. , (Lisbon, Portugal, Sept. 5-9). acM Press, New york},
correspondence_address1={Bessey, A.; Coverity, Inc., San Francisco, CA, United States},
issn={00010782},
coden={CACMA},
language={English},
abbrev_source_title={Commun ACM},
document_type={Article},
source={Scopus},
}

@ARTICLE{Wolfmaier2009312,
author={Wolfmaier, K. and Ramler, R. and Guta, G. and Dobler, H.},
title={Observable runtime behavior for defects indicated by automated static analysis},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2009},
volume={5717 LNCS},
pages={312-319},
doi={10.1007/978-3-642-04772-5_41},
note={cited By 0; Conference of 12th International Conference on Computer Aided Systems Theory, EUROCAST 2009 ; Conference Date: 15 February 2009 Through 20 February 2009;  Conference Code:83267},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-78651229653&doi=10.1007%2f978-3-642-04772-5_41&partnerID=40&md5=0872e014126b5c6e182d6e9978951178},
affiliation={Software Competence Center Hagenberg, Softwarepark 21, 4232 Hagenberg, Austria; University of Applied Sciences, Softwarepark 11, 4232 Hagenberg, Austria},
abstract={For the efficient and effective use of automated static analysis of software systems it is crucial to know what kind of errors can be detected and how seriously a reported problem can or should be taken. In the study conducted for this paper we applied a widely used tool (PC-lint) for automated static analysis (ASA) to check C++ code fragments from student exercises. The goal of this research was to discover which types of defects can be identified by automated static analysis. In this paper we present our findings; furthermore the results from classifying the defects are set in relation to detection rules and severity levels provided by ASA, in order to derive insights for calibrating ASA tools in a specific application context. © 2009 Springer-Verlag Berlin Heidelberg.},
author_keywords={Automated static analysis;  Defect classification},
keywords={Application contexts;  Automated static analysis;  C++ codes;  Defect classification;  Detection rules;  Runtime behaviors;  Software systems;  Application contexts;  C++ codes;  Defect classification;  Detection rules;  Runtime behaviors;  Software systems, Automation;  Defects;  System theory;  Teaching;  Automation;  C++ (programming language);  Defects;  System theory, Static analysis;  Static analysis},
references={Ayewah, N., Pugh, W., Morgenthaler, J.D., Penix, J., Zhou, Y., Evaluating static analysis defect warnings on production software (2007) PASTE 2007: Proceedings of the 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, pp. 1-8. , ACM, New York; Barr, A., (2004) Find the Bug: A Book of Incorrect Programs, , Addison-Wesley Professional, Reading; Chillarege, R., Bhandari, I., Chaar, J., Halliday, M., Moebus, D., Ray, B., Wong, M., Orthogonal defect classification: A concept for in-process measurements (1992) IEEE Transactions on Software Engineering, 18 (11), pp. 943-956; Cousot, P., Cousot, R., Feret, J., Mauborgne, L., Miné, A., Monniaux, D., Rival, X., Varieties of static analyzers: A comparison with ASTRÉE (2007) First IEEE & IFIP International Symposium on Theoretical Aspects of Software Engineering, TASE 2007, pp. 3-17. , Shanghai, China; Dobler, H., Ramler, R., Wolfmaier, K., A study of tool support for the evaluation of student's solutions of exercises in programming (2007) EuroCAST; Emanuelsson, P., Nilsson, U., (2008) A Comparative Study of Industrial Static Analysis Tools (Extended Version), , Technical report, Linkoping University, Linköping University Electronic Press; Huber, J.T., A comparison of IBM's orthogonal defect classification to hewlett packard's defect origins (1989) Types, and Modes, , http://www-stickyminds-com.luisamigo.proxybk.com/sitewide.asp?Function=edetail&ObjectType= ART&ObjectId=2883; Jaspan, C., Chen, I., Sharma, A., Understanding the value of program analysis tools (2007) OOPSLA 2007: Companion to the 22nd ACM SIGPLAN Conference on Object Oriented Programming Systems and Applications Companion, pp. 963-970. , ACM, New York; Knuth, D.E., The errors of TEX (1989) Softw. Pract. Exper., 19 (7), pp. 607-685; Meyers, S., (2005) Effective C++: 55 Specific Ways to Improve Your Programs and Designs, , 3rd edn. Addison-Wesley, Reading; Rutar, N., Almazan, C.B., Foster, J.S., A comparison of bug finding tools for Java (2004) ISSRE 2004: Proceedings of the 15th International Symposium on Software Reliability Engineering, pp. 245-256. , IEEE Computer Society, Washington; Zheng, J., Williams, L., Nagappan, N., Snipes, W., Hudepohl, J.P., Vouk, M.A., On the value of static analysis for fault detection in software (2006) IEEE Transactions on Software Engineering, 32 (4), pp. 240-253},
correspondence_address1={Wolfmaier, K.; Software Competence Center Hagenberg, Softwarepark 21, 4232 Hagenberg, Austria; email: Klaus.Wolfmaier@scch.at},
address={Las Palmas de Gran Canaria},
issn={03029743},
isbn={3642047718; 9783642047718},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Favreau2009733,
author={Favreau, P. and Wolf, S.},
title={Theoretical and numerical stress analysis at edges of interacting faults: Application to quasi-static fault propagation modelling},
journal={Geophysical Journal International},
year={2009},
volume={179},
number={2},
pages={733-750},
doi={10.1111/j.1365-246X.2009.04314.x},
note={cited By 1},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-70350413138&doi=10.1111%2fj.1365-246X.2009.04314.x&partnerID=40&md5=409611b024f15fd18c2881a4713a1b03},
affiliation={Institut de Physique du Globe de Paris-CNRS UMR 7154, 4 Place Jussieu, 75252 Paris Cedex 05, France; Institut des Sciences de la Terre de Paris, Université Pierre et Marie Curie-CNRS UMR 7193, 4 Place Jussieu, 75252 Paris Cedex 05, France},
abstract={We study theoretically and numerically the process of fault interactions within a quasi-static faulting model at long, tectonic timescale. The model handles birth, growth and sliding of multiple straight but non-coplanar interacting faults, regardless of any coseismic dynamic slip events. The study is restricted to the 2-D elastic antiplane case, an idealization of the normal faulting process. The model handles a general slip-dependent friction law for faults, to take into account a possible long-term fault weakening process. At fault tips, finite stress and progressive weakening lead to fault tip cohesive zones and ensure stability. We introduce a new numerical method based on a series development of slip profiles using a Chebyshev basis, which provides an accurate computation of large stress gradients at fault tips. Here simulations are limited to two parallel faults, which is enough to investigate many important features such as slip partitioning between faults, variable fault tip velocities and the state of stress in fault relay zones, responsible for the fault linking process. We study both a quasi-static problem and the associated spectral problem and show the link between them. We compare our quasi-static simulations with experimental results concerning the acceleration/deceleration of fault tips submitted to stress interaction and concerning the geometrical parameters that favour the linking of two normal faults. We find that the linking (coalescence) process should most likely occur during the deceleration phase of the faults tips subject to stress shadowing in the fault relay. Furthermore, for large ratios of fault lengths to separation, the linking process should begin for fault overlaps comparable to the values observed by Soliva & Benedicto in small natural fault relays (typically 2.9 times the fault separation). © 2009 The Authors Journal compilation © 2009 RAS.},
author_keywords={Dynamics and mechanics of faulting;  Instability analysis;  Numerical solutions;  Rheology and friction of fault zones},
keywords={fault propagation;  fault slip;  fault zone;  friction;  modeling;  normal fault;  numerical model;  rheology;  stress analysis, Soliva},
references={Aochi, H., Madariaga, R., The 1999 Izmit, Turkey, earthquake: non planar fault structure, dynamic rupture process and strong ground motion (2003) Bull. seism. Soc. Am., 93, pp. 1249-1266; Barr, T.D., Houseman, G.A., Deformation fields around a fault embedded in a non-linear ductile medium (1996) Geophys. J. Int., 125, pp. 473-490; Barrenblatt, G.I., The mathematical theory of equilibrium cracks in brittle fracture (1962) Adv. Appl. Mech., 7, pp. 55-125; Baud, P., Reuschlé, T., A theoretical approach to the propagation of interacting cracks (1997) Geophys. J. Int., 130, pp. 460-468; Ben-Zion, Y., Dahmen, K., Lyakovsky, V., Ertas, D., Agnon, A., Self driven mode switching of earthquake activity in fault system (1999) Earth planet. Sci. Lett., 172, pp. 11-21; Bonafede, M., Dragoni, M., Boschi, E., Quasi-static crack models and the frictional stress threshold criterion for slip arrest (1986) Geophys. J. R. astr. Soc., 83, pp. 615-637; Bürgmann, R., Pollard, D.D., Martel, S.J., Slip distribution on faults: effects of stress gradients, inelastic deformation, heterogeneous host-rock stiffness, and fault interaction (1994) J. Struct. Geol., 16, pp. 1675-1690; Chen, Y., Knopoff, L., Static shear crack with a zone of slip-weakening (1986) Geophys. J. R. astr. Soc., 87, pp. 1005-1024; Cowie, P.A., Scholz, C.H., Physical explanation for the displacement-length relationship of faults using a post-yield fracture mechanics model (1992) J. Struct. Geol., 14, pp. 1133-1148; Cowie, P.A., Shipton, Z.K., Fault tip displacement gradients and process zone dimensions (1998) J. Struct. Geol., 20, pp. 983-997; Crider, G.C., Pollard, D.D., Fault linkage: three-dimensional mechanical interaction between echelon normal faults (1998) J. geophys. Res., 103, pp. 24 373-24 391; Dascalu, C., Ionescu, I.R., Campillo, M., Fault finiteness and initiation of dynamic shear instability (2000) Earth planet. Sci. Lett., 177, pp. 163-176; Gupta, A., Scholz, C.H., A model of normal fault interaction based on observations and theory (2000) J. Struct. Geol., 22, pp. 865-879; Harris, R.A., Day, S.M., Dynamic 3D simulations of earthquakes on en echelon faults (1999) Geophys. Res. Lett., 26, pp. 2089-2092; Ionescu, I., Wolf, S., Interaction of faults under slip-dependent friction. Non-linear eigenvalue analysis (2005) Math. Method Appl. Sci., 28, pp. 77-100; Kame, N., Yamashita, T., Simulation of the spontaneous growth of a dynamic crack without constraints on the crack tip path (1999) Geophys. J. Int., 139, pp. 345-358; Kame, N., Saito, S., Oguni, K., Quasi-static analysis of strike fault growth in layered media (2008) Geophys. J. Int., 173 (1), pp. 309-314. , doi; Lin, J., Parmentier, M., Quasistatic propagation of a normal fault: a fracture mechanics model (1988) J. Struct. Geol., 10, pp. 249-262; Manighetti, I., King, G.C.P., Gaudemer, Y., Scholz, C.H., Doubre, C., Slip accumulation and lateral propagation of active normal faults in Afar (2001) J. geophys. Res., 106, pp. 13 667-13 696; Manighetti, I., Campillo, M., Sammis, C.G., Mai, P.M., King, G., Evidence for self-similar, triangular slip distributions on earthquakes; implications for earthquake and fault mechanics (2005) J. geophys. Res., 110, pp. B05302. , doi; Martel, S.J., Effects of cohesive zones on small faults and implications for secondary fracturing and fault trace geometry (1997) J. Struct. Geol., 19, pp. 835-847; Narteau, C., Formation and evolution of a population of strike-slip faults in a multiscale cellular automaton model (2007) Geophys. J. Int., 168, pp. 723-744; Oglesby, D.D., Day, S.M., O'Connell, D.R.H., The dynamic and static interaction of two thrust faults: a case study with general implications (2003) J. geophys. Res., 108, p. 2489. , doi; Palmer, A.C., Rice, J.R., The growth of slip surfaces in the progressive failure of overconsolidated clay (1973) Proc. R. Soc. Lond., A332, pp. 527-548; Peacock, D.C.P., Propagation, interaction and linkage in normal fault system (2002) Earth-Sci. Rev., 58, pp. 121-142; Peacock, D.C.P., Sanderson, D.J., Displacements, segment linkage and relay ramps in normal fault zones (1991) J. Struct. Geol., 13, pp. 721-733; Segall, P., Pollard, D.D., Mechanics of discontinuous faults (1980) J. geophys. Res., 85, pp. 4337-4350; Soliva, R., Benedicto, A., A linkage criterion for segmented normal faults (2004) J. Struct. Geol., 26, pp. 2251-2257; Spyropoulos, C., Scholz, C., Shaw, E., Transition regimes for growing crack populations (2002) Phys. Rev. E, 65, p. 056105. , doi; Taylor, S.K., Bull, J.M., Lamarche, G., Barnes, P.M., Normal fault growth and linkage in the Whakatane Graben, New Zealand, during the last 1.3 Myr (2004) J. geophys. Res., 109. , doi; Uenishi, K., Rice, J.R., Universal nucleation length for slip-weakening rupture instability under nonuniform fault loading (2003) J. geophys. Res., 108 (B1), p. 2042. , doi; Voisin, C., Ionescu, I., Campillo, M., Crack growth resistance and dynamic rupture arrest under slip dependent friction (2002) Phys. Earth planet. Int., 131, pp. 279-1274; Willemse, J.M.E., Segmented normal faults: correspondence between three-dimensional mechanical models and field data (1997) J. geophys. Res., 102, pp. 675-692; Wolf, S., Manighetti, I., Campillo, M., Ionescu, I.R., Mechanics of normal fault networks subject to slip-weakening friction (2006) Geophys. J. Int., 165, pp. 677-691; Yamashita, T., Knopoff, L., Model for intermediate-term precursory clustering of earthquakes (1992) J. geophys. Res., 97, pp. 19 873-19 879},
correspondence_address1={Favreau, P.; Institut de Physique du Globe de Paris-CNRS UMR 7154, 4 Place Jussieu, 75252 Paris Cedex 05, France; email: pfavre@ipgp.jussieu.fr},
issn={0956540X},
language={English},
abbrev_source_title={Geophys. J. Int.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Fehnker2009267,
author={Fehnker, A. and Huuck, R. and Schlich, B. and Tapp, M.},
title={Automatic bug detection in microcontroller software by static program analysis},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2009},
volume={5404 LNCS},
pages={267-278},
doi={10.1007/978-3-540-95891-8_26},
note={cited By 9; Conference of 35th Conference on Current Trends in Theory and Practice of Computer Science, SOFSEM 2009 ; Conference Date: 24 January 2009 Through 30 January 2009;  Conference Code:76539},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-67650702319&doi=10.1007%2f978-3-540-95891-8_26&partnerID=40&md5=df0636a90d9e153ec52cd2a1cdd2a1f4},
affiliation={National ICT Australia Ltd. (NICTA), University of New South Wales, Locked Bag 6016, Sydney NSW 1466, Australia; RWTH Aachen University, Embedded Software Laboratory, Ahornstr.55, 52074 Aachen, Germany},
abstract={Microcontroller software typically consists of a few hundred lines of code only, but it is rather different from standard application code. The software is highly hardware and platform specific, and bugs are often a consequence of neglecting subtle specifications of the microcontroller architecture. Currently, there are hardly any tools for analyzing such software automatically. In this paper, we outline specifics of microcontroller software that explain why those programs are different to standard C/C++ code. We develop a static program analysis for a specific microcontroller, in our case the ATmega16, to spot code deficiencies, and integrate it into our generic static analyzer Goanna. Finally, we illustrate the results by a case study of an automotive application. The case study highlights that - even without formal proof - the proposed static techniques can be valuable in pinpointing software bugs that are otherwise hard to find. © Springer-Verlag Berlin Heidelberg 2009.},
keywords={Application codes;  Automotive applications;  Bug detection;  Formal proofs;  Lines of code;  Microcontroller architecture;  Software bug;  Static analyzers;  Static program analysis;  Static techniques, Computer science;  Controllers;  Microcontrollers;  Program debugging;  Software architecture, Computer software},
references={Clarke, E., Kröning, D., Lerda, F., A tool for checking ANSI-C programs (2004) TACAS 2004, 2988, pp. 168-176. , In: Jensen, K., Podelski, A. (eds.). LNCS. Springer, Heidelberg; Clarke, E., Kroening, D., Sharygina, N., Yorav, K., SATABS: SAT-based predicate abstraction for ANSI-C (2005) Lecture Notes in Computer Science, 3440, pp. 570-574. , Tools and Algorithms for the Construction and Analysis of Systems - 11th Int. Conference, TACAS 2005, held as part of the Joint European Conf. on Theory and Practice of Software, ETAPS 2005, Proc; Henzinger, T.A., Jhala, R., Majumdar, R., Sutre, G., Software verification with BLAST (2003) Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), 2648, pp. 235-239; Coverity: Prevent for C and C++, , http://www-coverity-com;.luisamigo.proxybk.com Flexelint for C/C++, , http://www-gimpel-com.luisamigo.proxybk.com/html/flex.htm; Klocwork: K7, , http://www-klocwork-com.luisamigo.proxybk.com/products/klocworkk7.asp; Microsoft: Prefast, , http://www.microsoft.com/whdc/devtools/tools/PREfast.mspx; Emanuelsson, P., Nilsson, U., A comparative study of industrial static analysis tools (2008) SSV 2008, 127. , ENTCS; Schlich, B., Kowalewski, S., Model checking C source code for embedded systems (2005) Proc. of the IEEE/NASA Workshop on Leveraging Applications of Formal Methods Verification and Validation, , NASA/CP-2005-212788 (September; Fehnker, A., Huuck, R., Jayet, P., Lussenburg, M., Rauch, F., Model checking software at compile time (2007) TASE 2007, , IEEE Computer Society Press, Los Alamitos; Schlich, B., (2008) Model Checking of Software for Microcontrollers, , Dissertation thesis, RWTH Aachen University; Dams, D., Namjoshi, K., Orion: High-precision methods for static error analysis of C and C++ programs (2004) Bell Labs Tech. Mem. ITD-04-45263Z, Lucent Technologies; Holzmann, G.J., Static source code checking for user-defined properties (2002) IDPT 2002, , Pasadena, CA, USA (June; Schmidt, D., Steffen, B., Program Analysis as Model Checking of Abstract Interpretations (1998) LECTURE NOTES IN COMPUTER SCIENCE, (1503), pp. 351-380. , Static Analysis; Cimatti, A., Clarke, E., Giunchiglia, E., Giunchiglia, F., Pistore, M., Roveri, M., Sebastiani, R., Tacchella, A., NuSMV version 2 (2002) CAV 2002, 2404, p. 359. , In: Brinksma, E., Larsen, K.G. (eds.). LNCS. Springer, Heidelberg; Salewski, F., Wilking, D., Kowalewski, S., Diverse hardware platforms in embedded systems lab courses: A way to teach the differences (2005) ACM SIGBED Review, 2 (4); Schlich, B., Salewski, F., Kowalewski, S., Applying model checking to an automotive microcontroller application (2007) SIES 2007, , IEEE, Los Alamitos},
correspondence_address1={Fehnker, A.; National ICT Australia Ltd. (NICTA), Locked Bag 6016, Sydney NSW 1466, Australia},
address={Spindleruv Mlyn},
issn={03029743},
isbn={3540958908; 9783540958901},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Wedyan2009141,
author={Wedyan, F. and Alrmuny, D. and Bieman, J.M.},
title={The effectiveness of automated static analysis tools for fault detection and refactoring prediction},
journal={Proceedings - 2nd International Conference on Software Testing, Verification, and Validation, ICST 2009},
year={2009},
pages={141-150},
doi={10.1109/ICST.2009.21},
art_number={4815346},
note={cited By 37; Conference of 2nd International Conference on Software Testing, Verification, and Validation, ICST 2009 ; Conference Date: 1 April 2009 Through 4 April 2009;  Conference Code:76415},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-67650122584&doi=10.1109%2fICST.2009.21&partnerID=40&md5=bccfeb5634dd0b2e2b2f709f43ad4179},
affiliation={Colorado State University, Computer Science Department, Fort Collins, CO 80523-1873, United States},
abstract={Many automated static analysis (ASA) tools have been developed in recent years for detecting software anomalies. The aim of these tools is to help developers to eliminate software defects at early stages and produce more reliable software at a lower cost. Determining the effectiveness of ASA tools requires empirical evaluation. This study evaluates coding concerns reported by three ASA tools on two open source software (OSS) projects with respect to two types of modifications performed in the studied software CVS repositories: corrections of faults that caused failures, and refactoring modifications. The results show that fewer than 3% of the detected faults correspond to the coding concerns reported by the ASA tools. ASA tools were more effective in identifying refactoring modifications and corresponded to about 71% of them. More than 96% of the coding concerns were false positives that do not relate to any fault or refactoring modification.},
keywords={CVS repositories;  Empirical evaluations;  False positive;  Lower cost;  Open source software projects;  Refactoring;  Software defects, Fault detection;  Open systems;  Software testing;  Static analysis;  Verification, Computer software selection and evaluation},
references={(2007), http://artho-com.luisamigo.proxybk.com/jlint, artho.com. Jlint, Java program checker. Last access: 12/25/2007; Basili Victor, R., Rombach H.Dieter, TAME PROJECT: TOWARDS IMPROVEMENT-ORIENTED SOFTWARE ENVIRONMENTS. (1988) IEEE Transactions on Software Engineering, 14 (6), pp. 758-773. , DOI 10.1109/32.6156; Basili Victor, R., Weiss David, M., METHODOLOGY FOR COLLECTING VALID SOFTWARE ENGINEERING DATA. (1984) IEEE Transactions on Software Engineering, SE-10 (6), pp. 728-738; Campbell, D., Stanley, J., (1966) Experimental and Quasi- Experimental Designs for Research. Houghton Mifflin Co, , Boston; Chillarege, R., Bhandari, I.S., Chaar, J.K., Halliday, M.J., Moebus, D.S., Ray, B.K., Wang, M.Y., On the value of static analysis for fault detection in software measurements (1992) IEEE Trans. Software Engineering, 18 (11), pp. 943-956. , Nov; Crowston, K., Howison, J., Annabi, H., Information systems success in free and open source software development: Theory and measures (2006) Software Process Improvement and Practice, 11 (2), pp. 123-148. , DOI 10.1002/spip.259; Friesen, J., Tools of the Trade, Part 1: Creating PDF documents with iText (2005) AdobePress; (2007), http://www-jedit-org.luisamigo.proxybk.com/, Jedit.com. jEdit - Programmer's Text Editor Last access: 12/25/2007; (2007), http://www-jetbrains-com.luisamigo.proxybk.com/idea/, JetBrains Co. IntelliJ® IDEA 7.0., Last access: 12/25/2007; Kerlinger, F., (1986) Foundations of Behavioral Research, Third Edition, , Harcourt Brace Jovaonvich College Publishers, Orlando, Florida; Kitchenham, B.A., Pfleeger, S.L., Pickard, L.M., Jones, P.W., Hoaglin, D.C., Emam, K.E., Rosenberg, J., Preliminary guidelines for empirical research in software engineering (2002) IEEE Trans. Software Engineering, 28, pp. 721-734. , Aug; Kothari, S.C., Bishop, L., Sauceda, J., Daugherty, G., A pattern-based framework for software anomaly detection (2004) Software Quality Journal, 12 (2), pp. 99-120. , DOI 10.1023/B:SQJO.0000024058.90885.6a; Lowagie, B., Soares, O., (2007) Itext, a Free JAVA-PDF Library, , http://www-lowagie-com.luisamigo.proxybk.com/iText/, Last access: 12/25/2007; Munger, W., Bieman, J., Alexander, R., Coding concerns: do they matter? (2002) In Workshop on Empirical Studies of Software Maintenance (WESS 2002); Nagappan, N., Ball, T., Static analysis tools as early indicators of pre-release defect density (2005) In Proc. 27th Int. Conf. Software engineering (ICSE'05), pp. 580-586; Nunnally, J., (1978) Psychometric Theory, Second Edition, , McGraw-Hill, New York; University of Maryland (2007) FindBugs, Find Bugs in Java Programs., , http://findbugs-sourceforge-net.luisamigo.proxybk.com, Last access: 12/25/2007; Reasoning Inc. Automated software inspection: A new approach to increase software quality and productivity (2003) Technical report, Reasoning, LLC, , http://www-reasoning-com.luisamigo.proxybk.com/pdf/ASI.pdf; Rutar, N., Almazan, C.B., Foster, J.S., A comparison of bug finding tools for Java (2004) Proceedings - International Symposium on Software Reliability Engineering, ISSRE, pp. 245-256. , ISSRE 2004 Proceedings; 15th International Symposium on Software Reliability Engineering; (2007) SourceForge Project. The Open Source software development web site, , http://sourceforge-net.luisamigo.proxybk.com/index.php, Last access: 12/25/2007; Votta, L., Porter, A., Experimental software engineering: A report on the state of the art (1995) Proc. 17th Int. Conf. Software Engineering (ICSE'95); Wohlin, C., Runeson, P., Host, M., Ohlsson, M., Regnell, B., Wesslen, A., Experimentation in software engineering: An introduction (2000) Kluwer Academic Publishers, , Norwell, MA; Zheng, J., Williams, L., Nagappan, N., Snipes, W., Hudepohl, J., Vouk, M., On the value of static analysis for fault detection in software (2006) IEEE Trans. Software Engineering, 32 (4), pp. 240-253. , April},
correspondence_address1={Wedyan, F.; Colorado State University, , Fort Collins, CO 80523-1873, United States; email: wedyan@cs.colostate.edu},
sponsors={IEEE Computer Society},
address={Denver, CO},
isbn={9780769536019},
language={English},
abbrev_source_title={Proc. - Int. Conf. Softw. Test., Verif., Validation, ICST},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Heckman2009161,
author={Heckman, S. and Williams, L.},
title={A model building process for identifying actionable static analysis alerts},
journal={Proceedings - 2nd International Conference on Software Testing, Verification, and Validation, ICST 2009},
year={2009},
pages={161-170},
doi={10.1109/ICST.2009.45},
art_number={4815348},
note={cited By 35; Conference of 2nd International Conference on Software Testing, Verification, and Validation, ICST 2009 ; Conference Date: 1 April 2009 Through 4 April 2009;  Conference Code:76415},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-67650098688&doi=10.1109%2fICST.2009.45&partnerID=40&md5=8dd57384532980639fe1bef1fdfbae3a},
affiliation={North Carolina State University, United States},
abstract={Automated static analysis can identify potential source code anomalies early in the software process that could lead to field failures. However, only a small portion of static analysis alerts may be important to the developer (actionable). The remainder are false positives (unactionable). We propose a process for building false positive mitigation models to classify static analysis alerts as actionable or unactionable using machine learning techniques. For two open source projects, we identify sets of alert characteristics predictive of actionable and unactionable alerts out of 51 candidate characteristics. From these selected characteristics, we evaluate 15 machine learning algorithms, which build models to classify alerts. We were able to obtain 88-97% average accuracy for both projects in classifying alerts using three to 14 alert characteristics. Additionally, the set of selected alert characteristics and best models differed between the two projects, suggesting that false positive mitigation models should be project-specific.},
keywords={Best model;  Building process;  False positive;  Field failure;  Machine learning algorithms;  Machine learning techniques;  Open source projects;  Potential sources;  Software process, Computer software selection and evaluation;  Model buildings;  Robot learning;  Software testing;  Static analysis;  Verification, Learning algorithms},
references={Arisholm, E., Briand, L.C., Fuglerud, M., Data mining techniques for building fault-proneness models in telecom java software (2007) 18th IEEE International Symposium on Software Reliability Engineering, 5-9, pp. 215-224. , Trollhattan, Sweden, November; Ayewah, N., Hovemeyer, D., Morgenthaler, J.D., Penix, J., Pugh, W., "Using static analysis to find bugs," (2008) in IEEE Software., 25 (5), pp. 22-29; Ayewah, N., Pugh, W., Morgenthaler, J.D., Penix, J., Zhou, Y., Evaluating static analysis defect warnings on production software (2007) 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, 13-14, pp. 1-8. , San Diego, CA, USA, June; Bell, R.M., Ostrand, T.J., Weyuker, E.J., Looking for bugs in all the right places (2006) Proceedings of the 2006 International Symposium on Software Testing and Analysis, ISSTA 2006, 2006, pp. 61-71. , DOI 10.1145/1146238.1146246, Proceedings of the 2006 International Symposium on Software Testing and Analysis, ISSTA 2006; Brun, Y., Ernst, M.D., Finding latent code errors via machine learning over program executions (2004) 26th International Conference on Software Engineering, pp. 480-490. , Edinburgh, Scotland, May 26-28; Heckman, S., Williams, L., A measurement framework of alert characteristics for false positive mitigation models (2008) North Carolina State University TR-2008-23, , October 6; Heckman, S., Williams, L., On establishing a benchmark for evaluating static analysis alert prioritization and classification techniques (2008) 2nd International Symposium on Empirical Software Engineering and Measurement, pp. 41-50. , Kaiserslautern, Germany, October 9-10; Heckman, S.S., Adaptively ranking alerts generated from automated static analysis (2007) in ACM Crossroads., 14 (1), pp. 16-20; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) 19th ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications, pp. 132-136. , Vancouver, British Columbia, Canada, October 24-28; Kim, S., Ernst, M.D., Prioritizing warning categories by analyzing software history (2007) International Workshop on Mining Software Repositories, , Minneapolis, MN, USA, May 19-20; Kim, S., Ernst, M.D., Which Warnings Should I Fix First? (2007) 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 45-54. , Dubrovnik, Croatia, September 3-7; Kremenek, T., Ashcraft, K., Yang, J., Engler, D., Correlation exploitation in error ranking (2004) Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 83-93. , Twelfth ACM SIGSOFT International Symposium on the Foundations of Software Engineering, SIGSOFT 2004/FSE-12; Kremenek, T., Engler, D., Z-Ranking: Using statistical analysis to counter the impact of static analysis approximations (2003) 10th International Static Analysis Symposium, pp. 295-315. , San Diego, California; Nagappan, N., Ball, T., Zeller, A., Mining metrics to predict component failures (2006) Proceedings - International Conference on Software Engineering, 2006, pp. 452-461. , Proceeding of the 28th International Conference on Software Engineering 2006, ICSE '06; Ostrand, T.J., Weyuker, E.J., Bell, R.M., Where the bugs are (2004) ISSTA 2004 - Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis, pp. 86-96. , ISSTA 2004 - Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis; Pressman, R.S., Software engineering: A practitioner's approach (2005) 6th ed. Boston, , McGraw Hill; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) 30th International Conference on Software Engineering, pp. 341-350. , Leipzig, Germany, May 10-18; Song, Q., Shepperd, M., Cartwright, M., Mair, C., Software defect association mining and defect correction effort prediction (2006) IEEE Transactions on Software Engineering, 32 (2), pp. 69-82. , DOI 10.1109/TSE.2006.1599417; Williams, C.C., Hollingsworth, J.K., Automatic mining of source code repositories to improve bug finding techniques (2005) IEEE Transactions on Software Engineering, 31 (6), pp. 466-480. , DOI 10.1109/TSE.2005.63; Witten, I.H., Frank, E., Data mining: Practical machine learning tools and techniques (2005) 2nd ed. Amsterdam: Morgan Kaufmann},
correspondence_address1={Heckman, S.; North Carolina State UniversityUnited States; email: sarah_heckman@ncsu.edu},
sponsors={IEEE Computer Society},
address={Denver, CO},
isbn={9780769536019},
language={English},
abbrev_source_title={Proc. - Int. Conf. Softw. Test., Verif., Validation, ICST},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Nagy200937,
author={Nagy, C. and Mancoridis, S.},
title={Static security analysis based on input-related software faults},
journal={Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
year={2009},
pages={37-46},
doi={10.1109/CSMR.2009.51},
art_number={4812737},
note={cited By 10; Conference of 13th European Conference on Software Maintenance and Reengineering, CSMR 2009 ; Conference Date: 24 March 2009 Through 27 March 2009;  Conference Code:76983},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-67649834042&doi=10.1109%2fCSMR.2009.51&partnerID=40&md5=da3855858a3bd894e63a714591892a09},
affiliation={Department of Software Engineering, University of Szeged, Szeged, Hungary; Department of Computer Science, Drexel University, Philadelphia, United States},
abstract={It is important to focus on security aspects during the development cycle to deliver reliable software. However, locating security faults in complex systems is difficult and there are only a few effective automatic tools available to help developers. In this paper we present an approach to help developers locate vulnerabilities by marking parts of the source code that involve user input. We focus on inputrelated code, since an attacker can usually take advantage of vulnerabilities by passing malformed input to the application. The main contributions of this work are two metrics to help locate faults during a code review, and algorithms to locate buffer overflow and format string vulnerabilities in C source code. We implemented our approach as a plugin tothe Grammatech CodeSurfer tool. We tested and validated our technique on open source projects and we found faults in software that includes Pidgin and cyrus-imapd. © 2009 IEEE.},
keywords={Automatic tools;  Buffer overflows;  Code review;  CodeSurfer;  Complex systems;  Development cycle;  Format string;  Open source projects;  Plug-in;  Software fault;  Source codes;  Static security analysis;  User input, Computer software maintenance;  Quality assurance;  Software reliability, Codes (symbols)},
references={E. L. (Aleph1). Smashing the stack for fun and profit. Phrack, 49, November 1996; Anderson, P., Codesurfer/path inspector (2004) ICSM '04: Proceedings of the 20th IEEE International Conference on Software Maintenance, p. 508. , Washington, DC, USA, IEEE Computer Society; P. Anderson, D. Binkley, G. Rosay, and T. Teitelbaum. Flow insensitive points-to sets. Source Code Analysis and Manipulation, IEEE International Workshop on, 0:0081, 2001; Anderson, P., Teitelbaum, T., Software inspection using codesurfer (2001) Workshop on Inspection in Software Engineering (CAV 2001), , Paris, France, July; Avots, D., Dalton, M., Livshits, V.B., Lam, M.S., Improving software security with a c pointer analysis (2005) ICSE '05: Proceedings of the 27th international conference on Software engineering, pp. 332-341. , New York, NY, USA, ACM; Bates, S., Horwitz, S., Incremental program testing using program dependence graphs (1993) POPL '93: Proceedings of the 20th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, pp. 384-396. , New York, NY, USA, ACM; Binkley, D., Gold, N., Harman, M., An empirical study of static program slice size (2007) ACMTrans. Softw. Eng.Methodol, 16 (2), p. 8; Chess, B., McGraw, G., Static analysis for security (2004) IEEE Security and Privacy, 2 (6), pp. 76-79; Chess, B., West, J., (2007) Secure programming with static analysis, , Addison-Wesley Professional; (2008) Opensource report, , Coverity, Inc; Dhurjati, D., Adve, V., Backwards-compatible array bounds checking for c with very low overhead (2006) ICSE '06: Proceedings of the 28th international conference on Software engineering, pp. 162-171. , New York, NY, USA, ACM; Eichin, M.W., Rochlis, J.A., Withmicroscope and tweezers: An analysis of the internet virus of november 1988 (1989) IEEE Computer Society Symposium on Security and Privacy, pp. 326-343. , IEEE Computer Society Press; Evans, D., Guttag, J., Horning, J., Tan, Y.M., Lclint: A tool for using specifications to check code (1994) SIGSOFT Softw. Eng. Notes, 19 (5), pp. 87-96; Ferrante, J., Ottenstein, K.J., Warren, J.D., The program dependence graph and its use in optimization (1987) ACM Trans. Program. Lang. Syst, 9 (3), pp. 319-349; Hammer, C., Krinke, J., Nodes, F., Intransitive noninterference in dependence graphs (2006) ISOLA '06: Proceedings of the Second International Symposium on Leveraging Applications of Formal Methods, Verification and Validation (isola 2006), pp. 119-128. , Washington, DC, USA, IEEE Computer Society; Harman, M., Okulawon, M., Sivagurunathan, B., Danicic, S., Slice-based measurement of function coupling (1997) IEEE/ACM ICSE workshop on Process Modelling and Empirical Studies of Software Evolution ( PMESSE'97), pp. 28-32. , May; Horwitz, S., Reps, T., The use of program dependence graphs in software engineering (1992) Proceedings of the Fourteenth International Conference on Software Engineering, pp. 392-411. , New York, NY, USA, ACM; Horwitz, S., Reps, T., Binkley, D., Interprocedural slicing using dependence graphs (1990) ACM Trans. Program. Lang. Syst, 12 (1), pp. 26-60; Howard, M., LeBlanc, D., Viega, J., (2005) 19 Deadly Sins of Software Security: Programming Flaws and How to Fix Them, , McGraw-Hill; Kildall, G.A., A unified approach to global program optimization (1973) POPL '73: Proceedings of the 1st annual ACM SIGACT-SIGPLAN symposium on Principles of programming languages, pp. 194-206. , New York, NY, USA, ACM; Kong, J., Zou, C.C., Zhou, H., Improving software security via runtime instruction-level taint checking (2006) ASID '06: Proceedings of the 1st workshop on Architectural and system support for improving software dependability, pp. 18-24. , New York, NY, USA, ACM; Kuck, D.J., Muraoka, Y., Chen, S.-C., On the number of operations simultaneously executable in fortran-like programs and their resulting speedup (1972) IEEE Trans. Comput, 21 (12), pp. 1293-1310; Larson, E., Austin, T., High coverage detection of inputrelated security facults (2003) SSYM'03: Proceedings of the 12th conference on USENIX Security Symposium, pp. 9-9. , Berkeley, CA, USA, USENIX Association; Lhee, K.-S., Chapin, S.J., Buffer overflow and format string overflow vulnerabilities (2003) Softw. Pract. Exper, 33 (5), pp. 423-460; Lipner, S., The trustworthy computing security development lifecycle (2004) ACSAC '04: Proceedings of the 20th Annual Computer Security Applications Conference, pp. 2-13. , Washington, DC, USA, IEEE Computer Society; Livshits, V.B., Lam, M.S., Tracking pointers with path and context sensitivity for bug detection in C programs (2003) SIGSOFT Softw. Eng. Notes, 28 (5), pp. 317-326; Ruwase, O., Lam, M.S., A practical dynamic buffer overflow detector (2004) Proceedings of the 11th Annual Network and Distributed System Security Symposium, pp. 159-169; Scholz, B., Zhang, C., Cifuentes, C., User-input dependence analysis via graph reachability (2008) Eighth IEEE International Working Conference on Source Code Analysis and Manipulation (SCAM'08), pp. 25-34. , Beijing, September; Snelting, G., Robschink, T., Krinke, J., Efficient path conditions in dependence graphs for software safety analysis (2006) ACM Trans. Softw. Eng. Methodol, 15 (4), pp. 410-457; Tevis, J.-E.J., Hamilton, J.A., Methods for the prevention, detection and removal of software security vulnerabilities (2004) ACM-SE 42: Proceedings of the 42nd annual Southeast regional conference, pp. 197-202. , New York, NY, USA, ACM; Wagner, D., Foster, J.S., Brewer, E.A., Aiken, A., A first step towards automated detection of buffer overrun vulnerabilities (2000) In Network and Distributed System Security Symposium, pp. 3-17; Xu, J., Nakka, N., Defeating memory corruption attacks via pointer taintedness detection (2005) DSN '05: Proceedings of the 2005 International Conference on Dependable Systems and Networks, pp. 378-387. , Washington, DC, USA, IEEE Computer Society; Zitser, M., Lippmann, R., Leek, T., Testing static analysis tools using exploitable buffer overflows from open source code (2004) SIGSOFT Softw. Eng. Notes, 29 (6), pp. 97-106},
correspondence_address1={Nagy, C.; Department of Software Engineering, , Szeged, Hungary; email: ncsaba@inf.u-szeged.hu},
sponsors={Reengineering Forum, REF},
address={Kaiserslautern},
issn={15345351},
isbn={9780769535890},
language={English},
abbrev_source_title={Proc. Eur. Conf. Software Maint. Reeng.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Ayewah200911,
author={Ayewah, N. and Pugh, W.},
title={Using checklists to review static analysis warnings},
journal={DEFECTS 2009 - Proceedings of the 2nd International Workshop on Defects in Large Software Systems, Held in conjunction with the ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2009},
year={2009},
pages={11-15},
doi={10.1145/1555860.1555864},
note={cited By 10; Conference of 2nd International Workshop on Defects in Large Software Systems, DEFECTS 2009 ; Conference Date: 19 July 2009;  Conference Code:128833},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85010718168&doi=10.1145%2f1555860.1555864&partnerID=40&md5=97dff4f7a2ccbc217a75b616b35db98c},
affiliation={Dept. of Computer Science, Univ. of Maryland, College Park, MD, United States},
abstract={Static analysis tools find silly mistakes, confusing code, bad practices and property violations. But software developers and organizations may or may not care about all these warnings, depending on how they impact code behavior and other factors. In the past, we have tried to identify important warnings by asking users to rate them as severe, low impact or not a bug. In this paper, we observe that the user's rating may be more complicated depending on whether the warning is feasible, changes code behavior, occurs in deployed code and other factors. To better model this, we ask users to review warnings using a checklist which enables more detailed reviews. We find that reviews are consistent across users and across checklist questions, though some users may disagree about whether to fix or filter out certain bug classes. © 2009 ACM.},
author_keywords={Bug patterns;  Bugs;  False positives;  Findbugs;  Java;  Software defects;  Software quality;  Static analysis},
keywords={Codes (symbols);  Computer software;  Computer software selection and evaluation;  Defects;  Program debugging;  Quality control;  Software testing, Bug patterns;  Bugs;  False positive;  Findbugs;  Java;  Software defects;  Software Quality, Static analysis},
references={Ayewah, N., Pugh, W., A report on a survey and study of static analysis users (2008) DEFECTS'08: Proceedings of the 2008 Workshop on Defects in Large Software Systems, pp. 1-5. , New York, NY, USA, ACM; Ayewah, N., Pugh, W., Morgenthaler, J.D., Penix, J., Zhou, Y., Evaluating static analysis defect warnings on production software (2007) PASTE'07: Proceedings of the 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, pp. 1-8. , New York, USA, ACM; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) OOPSLA'04: Companion to the 19th Annual ACM SIGPLAN Conference on Object-oriented Programming Systems, Languages, and Applications, pp. 132-136. , New York, NY, USA, ACM; Hovemeyer, D., Pugh, W., Finding more null pointer bugs, but not too many (2007) PASTE'07: Proceedings of the 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, pp. 9-14. , New York, USA, ACM; Khoo, Y.P., Foster, J.S., Hicks, M., Sazawal, V., Path projection for user-centered static analysis tools (2008) PASTE'08: Proceedings of the 8th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, pp. 57-63. , New York, NY, USA, ACM; Kim, S., Ernst, M.D., Which warnings should i fix first? (2007) ESEC-FSE'07: Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 45-54. , New York, NY, USA, ACM; Nagappan, N., Ball, T., Static analysis tools as early indicators of pre-release defect density (2005) ICSE'05: Proceedings of the 27th International Conference on Software Engineering, pp. 580-586. , New York, NY, USA, ACM},
editor={Liblit B., Nagappan N., Zimmermann T.},
sponsors={ACM Special Interest Group on Programming Languages (SIGPLAN); ACM Special Interest Group on Software Engineering (SIGSOFT)},
publisher={Association for Computing Machinery, Inc},
isbn={9781605586540},
language={English},
abbrev_source_title={DEFECTS - Proc. Int. Workshop Defects Large Softw. Syst., Held conjunction ACM SIGSOFT Int. Symp. Softw. Test. Anal., ISSTA},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Jetley2009,
author={Jetley, R. and Chelf, B.},
title={Diagnosing medical device software defects using static analysis},
journal={Medical Device and Diagnostic Industry},
year={2009},
volume={31},
number={5},
note={cited By 1},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-77952117233&partnerID=40&md5=de520a00876dfc2ba18209186c8ca1a6},
affiliation={FDA's Center for Devices and Radiological Health, Office of Science and Engineering Laboratories, San Francisco, United States},
abstract={Some of the key criteria that need to be considered when selecting an automated static analysis tool used as part of the verification and validation (V&V) process to improve reliability of medical device software are presented. The success of implementation of static analysis in the development process depends upon two key factors such as developer adoption and integration into the existing development work flow. The most important criteria for selecting a static analysis tool include precision, recall, and performance. Various qualitative factors for static analysis tools include configurability, integration with existing development processes, persistent tracking of defects, developer prioritization of defects, and user-defined defect detection. A manufacturer could use an IDE-based tool with a high recall rate to uncover defects at the developer desktop level, and a high-precision, scalable tool to check for anomalies during central build.},
references={Guidance for the Content of Premarket Submissions for Software Contained in Medical Devices, , www-fda-gov.luisamigo.proxybk.com/cdrh/ode/guidance/337.html, available from Internet; General Principles of Software Validation - Final Guidance for Industry and Staff, , www-fda-gov.luisamigo.proxybk.com/cdrh/comp/guidance/938.html, available from Internet; (2005) Guidance for the Content of Premarket Submissions for Software Contained in Medical Devices, , www-fda-gov.luisamigo.proxybk.com/cdrh/ode/guidance/337.html, available from Internet; Rushby, J., Theorem Proving for Verification (2001) LECTURE NOTES IN COMPUTER SCIENCE, (2067), pp. 39-57. , Modeling and Verification of Parallel Processes; Clarke, E.M., Grumberg, O., Peled, D., (1999) Model Checking, , Cambridge, MA: MIT Press; Johnson, S.L., AC program checker (1978) Unix Programmer's Manual, , (Murray-Hill, NJ: AT&T Bell Laboratories); Dhurjati, D., Das, M., Yang, Y., Path-sensitive dataflow analysis with iterative refinement (2006) Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), pp. 425-442. , Static Analysis - 13th International Symposium, SAS 2006, Proceedings; Lakshmi Narasimhan, V., A risk management toolkit for integrated engineering asset maintenance (2006) Proceedings of the World Congress on Engineering Asset Management (WCEAM), , July; Mantle, M., Chelf, B., Gracenote and Coverity Customer Case Study, , www-coverity-com.luisamigo.proxybk.com/html/research-library.html, available from Internet; Cooper, J., Chelf, B., Ip.access and Coverity Customer Case Study, , www-coverity-com.luisamigo.proxybk.com/html/research-library.html, available from Internet at; Ballou, M., (2008) Improving Software Quality to Drive Business Agility, , (Framingham, MA: International Data Corp.); Javascript: Middle, , http://www-devicelink-com.luisamigo.proxybk.com/mddi/archive/09/05/u21c_57906_550.jpg, '283','580'; Javascript: Middle, , http://www-devicelink-com.luisamigo.proxybk.com/mddi/archive/09/05/u23d_57914_550.jpg, '330','580'; Javascript: Middle, , http://www-devicelink-com.luisamigo.proxybk.com/mddi/archive/09/05/u25d_57915_550.jpg, '146','580'; Javascript: Middle, , http://www-devicelink-com.luisamigo.proxybk.com/mddi/archive/09/05/u2ba_57916_550.jpg, '229','580'; Javascript: Middle, , http://www-devicelink-com.luisamigo.proxybk.com/mddi/archive/09/05/u2a9_57917_550.jpg, '108','580'; Javascript: Middle, , http://www-devicelink-com.luisamigo.proxybk.com/mddi/archive/09/05/u2fa_57918_550.jpg, '183','580'; http://www-mddionline-com.luisamigo.proxybk.com/mddi/archive/09/05/static_analysis.html; http://www-fda-gov.luisamigo.proxybk.com/cdrh/comp/guidance/938.html; http://www-fda-gov.luisamigo.proxybk.com/cdrh/ode/guidance/337.html; http://www-coverity-com.luisamigo.proxybk.com/html/research-library.html},
correspondence_address1={Jetley, R.; FDA's Center for Devices and Radiological Health, , San Francisco, United States},
issn={0194844X},
coden={MDIID},
language={English},
abbrev_source_title={Med. Device Diagn. Ind.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Moser2008181,
author={Moser, R. and Pedrycz, W. and Succi, G.},
title={A Comparative analysis of the efficiency of change metrics and static code attributes for defect prediction},
journal={Proceedings - International Conference on Software Engineering},
year={2008},
pages={181-190},
doi={10.1145/1368088.1368114},
note={cited By 518; Conference of 30th International Conference on Software Engineering 2008, ICSE'08 ; Conference Date: 10 May 2008 Through 18 May 2008;  Conference Code:74416},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-57349133760&doi=10.1145%2f1368088.1368114&partnerID=40&md5=1befcae32d6b3fbf7b2669f87aa41254},
affiliation={Free University of Bolzano-Bozen, Piazza Domenicani 3, 1-39100 Bolzano, Italy; University of Alberta, T6G 2V4 Edmonton, AB, Canada},
abstract={In this paper we present a comparative analysis of the predictive power of two different sets of metrics for defect prediction. We choose one set of product related and one set of process related software metrics and use them for classifying Java files of the Eclipse project as defective respective defect-free. Classification models are built using three common machine learners: logistic regression, Naive Bayes, and decision trees. To allow different costs for prediction errors we perform cost-sensitive classification, which proves to be very successful: >75% percentage of correctly classified files, a recall of >80%, and a false positive rate <30%. Results indicate that for the Eclipse data, process metrics are more efficient defect predictors than code metrics. Copyright 2008 ACM.},
author_keywords={Cost-sensitive classification;  Defect prediction;  Software metrics},
keywords={Costs;  Decision theory;  Decision trees;  Defects;  Software engineering;  Metric system, Classification models;  Code metrics;  Comparative analysis;  Cost-sensitive classification;  Defect prediction;  False positive rates;  Logistic regressions;  Machine learners;  Naive bayes;  Prediction errors;  Predictive power;  Process metrics;  Software metrics;  Static codes, Computer software, Classification models;  Code metrics;  Comparative analysis;  Cost-sensitive classification;  Defect prediction;  Defect-free;  False positive rates;  Logistic regressions;  Machine learners;  Prediction errors;  Predictive power;  Process metrics;  Software metrics;  Static codes},
references={Basili, V.R., Briand, L.C., Melo, W.L., A Validation of Object Oriented Design Metrics as Quality Indicators (1996) IEEE Transactions on Software Engineering, 22 (10), pp. 267-271; Bell, R. M., Ostrand, T. J., Weyuker, E. J. 2006. Looking For Bugs in All the Right Places. International Symp. on Software Testing and Analysis, (Portland, Maine, USA, July 17-20, 2006), ISSTA'06; Duda, R. O., Hart, and P. E., Stork, D. G. 2002. Pattern Classification. 2nd edition, Wiley Interscience; Fenton, N., Neil, M., A Critique of Software Defect Prediction Models (1999) IEEE Transactions on Software Engineering, 25 (5), pp. 675-689. , October; Gall, H., Jazayeri, M., Ratzinger, J., CVS release history data for detecting logical couplings (2003) Proc. of the International Workshop on Principles of Software Evolution, pp. 13-23. , Lisbon, Portugal, IEEE Computer Society Press, pp; Graves, T.L., Karr, A.F., Marron, J.S., Siy, H., Predicting fault incidence using software change history (2000) IEEE Transactions on Software Engineering, 26 (7), pp. 653-661. , July; Hassan, A.E., Holt, R.C., The Top Ten List: Dynamic Fault Prediction (2005) Proc. 21st IEEE International Conference on Software Maintenance, , Budapest, Hungary, September 25-30; Hollander, M., Wolfe, D.A., (1973) Nonparametric Statistical Methods, , Wiley; Hall, M.M., Holmes, G., Benchmarking Attribute Selection Techniques for Discrete Class Data Mining (2003) IEEE Trans. Knowledge and Data Eng, 15 (6), pp. 1437-1447. , June; Khoshgoftaar, T.M., Bhattacharyya, B.B., Richardson, G.D., Predicting Software Errors, During Development, Using Nonlinear Regression Models: A Comparative Study (1992) IEEE Transactions on Reliability, 41 (3), pp. 390-395. , September; Khoshgoftaar, T. M., Geleyn, E., Nguyen, L., and Bullard, L. 2002. Cost-Sensitive Boosting In Software Quality Modeling. Proc. of the 7 th IEEE international Symposium on High Assurance Systems Engineering (October 23 - 25, 2002), Hase'02; Knab, P., Pinzger, M., Bernstein, A., Predicting Defect Densities in Source Code Files with Decision Tree Learners (2006) Proc. International Workshop on Mining Software Repositories (Shanghai, China, May 22-23, 2006), MSR'06; Lanubile, F., Visaggio, G., Evaluating Predictive Quality Models Derived from Software Measures: Lessons Learned (1997) Journal Systems Software, 38, pp. 225-234; Menzies, T., Greenwald, J., Frank, A., Data Mining Static Code Attributes to Learn Defect Predictors (2007) IEEE Transactions on Software Engineering, 32 (11), pp. 1-12. , January; Moser, R., Pedrycz, W., Succi, G. 2007. Incremental effort prediction models in Agile Development using Radial Basis Functions. Proc. 19th International Conf. on Software Engineering & Knowledge Engineering (Boston, MA, USA, July 9-11, 2007), SEKE'07, pp. 519-522; Nagappan, N., Ball, T. 2005. Use of Relative Code Churn Measures to Predict System Defect Density. Proc. of 27th International Conference on Software Engineering (St. Louis, MO, USA, May 15-21, 2005), ICSE '05; Nagappan, N., Ball, T., Zeller, A., Mining Metrics to Predict Component Failures (2006) Proc. of 28th International Conference on Software Engineering (Shanghai, China, May 20-28, 2006), ICSE'06; Ohlsson, N., Alberg, H., Predicting Error-Prone Software Modules in Telephone Switches (1996) IEEE Transactions on Software Engineering, 22 (12), pp. 886-894; Ohlsson, N., Fenton, N., Quantitative Analysis of Faults and Failures in a Complex Software System (2000) IEEE Transactions on Software Engineering, 26 (8), pp. 797-814; Ostrand, T.J., Weyuker, E.J., Bell, R.M., Predicting the Location and Number of Faults in Large Software Systems (2005) IEEE Transactions on Software Engineering, 31 (4), pp. 340-355. , April; Quinlan, R. 1993. C4.5: Programs for Machine Learning. Morgan Kaufmann Publishers (San Mateo, CA, 1993); Ratzinger, J., Pinzger, M., Gall, H., EQ-Mine: Predicting Short-Term Defects for Software Evolution (2007) Proc. of FASE'07, pp. 12-26. , Braga, Portugal, 24 March, 1 April; Schröter, A., Zimmermann, T., Zeller, A., Predicting Component Failures at Design Time (2006) Proc. of ACM-IEEE 5th International Symposium on Empirical Software Engineering (Rio de Janeiro, Brazil, 2006), ISESE'06; Schröter, A., Zimmermann, T., Premraj, R., and Zeller, A. 2006. If Your Bug Database Could Talk .... Proc. of ACM-IEEE 5th International Symposium on Empirical Software Engineering, II: Short Papers and Posters (Rio de Janeiro, Brazil, 2006), ISESE'06; Shull, F., Boehm, V.B., Brown, A., Costa, P., Lindvall, M., Port, D., Rus, I., Zelkowitz, M., What We Have Learned About Fighting Defects (2002) Proc. of 8th Int'l Software Metrics Symp, pp. 249-258; Subramanyam, R., Krishnan, M.S., Empirical Analysis of CK Metrics for Object-Oriented Design Complexity: Implications for Software Defects. 2003 (2003) IEEE Transactions on Software Engineering, 29 (4), pp. 297-310. , April; Weyuker, E. J., Ostrand, T. J., Bell, R. M. 2007. Using Developer Information as a Factor for Fault Prediction. Proc. 3rd International Workshop on Predictor Models in Software Engineering (Minneapolis, MN, USA, May 20, 2007), PROMISE'07; Witten, I.H., Frank, E., (2005) Data Mining: Practical machine learning tools and techniques, , 2nd Edition, Morgan Kaufmann San Francisco; Zhou, Y., Leung, H., Empirical Analysis of Object-Oriented Design Metrics for Predicting High and Low Severity Faults. 2006 (2006) IEEE Transactions on Software Engineering, 32 (10), pp. 771-789. , October; Zimmermann, T., and Weiβgerber, P. 2004. Preprocessing CVS Data for Fine-Grained Analysis. Proc. of International Workshop on Mining Software Repositories (Edinburgh, Scotland, UK, May 25, 2004), MSR'04; Zimmermann, T., Premraj, R., Zeller, A. 2007. Predicting Defects for Eclipse. Proc. 3rd International Workshop on Predictor Models in Software Engineering (Minneapolis, MN, USA, May, 2007), PROMISE'07},
correspondence_address1={Moser, R.; Free University of Bolzano-Bozen, Piazza Domenicani 3, 1-39100 Bolzano, Italy; email: Raimund.Moser@unibz.it},
sponsors={ACM SIGSOFT; IEEE CSE},
address={Leipzig},
issn={02705257},
isbn={9781605580791},
coden={PCSED},
language={English},
abbrev_source_title={Proc Int Conf Software Eng},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Ruthruff2008341,
author={Ruthruff, J.R. and Penix, J. and Morgenthaler, J.D. and Elbaum, S. and Rothermel, G.},
title={Predicting accurate and actionable static analysis warnings: An experimental approach},
journal={Proceedings - International Conference on Software Engineering},
year={2008},
pages={341-350},
doi={10.1145/1368088.1368135},
note={cited By 77; Conference of 30th International Conference on Software Engineering 2008, ICSE'08 ; Conference Date: 10 May 2008 Through 18 May 2008;  Conference Code:74416},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-57349111758&doi=10.1145%2f1368088.1368135&partnerID=40&md5=43d485649ac363dadb3bcf97aedc6a36},
affiliation={University of Nebraska-Lincoln, Lincoln, NE, United States; Google Inc., Mountain View, CA, United States},
abstract={Static analysis tools report software defects that may or may not be detected by other verification methods. Two challenges complicating the adoption of these tools are spurious false positive warnings and legitimate warnings that are not acted on. This paper reports automated support to help address these challenges using logistic regression models that predict the foregoing types of warnings from signals in the warnings and implicated code. Because examining many potential signaling factors in large software development settings can be expensive, we use a screening methodology to quickly discard factors with low predictive power and cost-effectively build predictive models. Our empirical evaluation indicates that these models can achieve high accuracy in predicting accurate and actionable static analysis warnings, and suggests that the models are competitive with alternative models built without screening. Copyright 2008 ACM.},
author_keywords={Experimental program analysis;  Logistic regression analysis;  Screening;  Software quality;  Static analysis tools},
keywords={Computer software selection and evaluation;  Logistics;  Regression analysis;  Software engineering;  Static analysis;  Verification, Experimental program analysis;  Logistic regression analysis;  Screening;  Software quality;  Static analysis tools, Quality control, Empirical evaluations;  Experimental approaches;  Experimental program analysis;  False positive;  Logistic models;  Logistic regression analysis;  Predictive power;  Software defects;  Software development;  Software quality;  Verification method},
references={Find Bugs, , http://findbugs-sourceforge-net;.luisamigo.proxybk.com http://r-project-org;.luisamigo.proxybk.com Ayewah, N., Pugh, W., Morgenthaler, J.D., Penix, J., Zhou, Y., Evaluating static analysis defect warnings on production software (2007) Proc. 7 th ACM Workshop on Prog. Analysis for Softw. Tools and Eng, pp. 168-179; Bell, R.M., Ostrand, T.J., Weyuker, E.J., Looking for bugs in all the right places (2006) Proc. ACM Int'l Symp. On Softw. Testing and Analysis, pp. 61-71; Engler, D., Chelf, B., Chou, A., Hallem, S., Bugs as deviant behavior: A general approach to inferring errors in systems code (2001) Proc. 18 th ACM Symp. on OS Principles; Hastie, T.J., Pregibon, D., (1992) Statistical Models in S, , Wadsworth & Brooks/Cole; Heckman, S.S., Adaptively ranking alerts generated from automated static analysis (2007) ACM Crossroads, 14 (1); Hosmer, D.W., Lemeshow, S., (2000) Applied Logistic Regression, , John Wiley & Sons, 2nd ed; Hovemeyer, D., Pugh, W., Finding bugs is easy (2004) Companion to Proc. OOPSLA, pp. 132-136; Johnson, D.E., (1998) Applied Multivariate Methods for Data Analysis, , Duxbury Press; Kim, S., Ernst, M.D., Prioritizing warning categories by analyzing software history (2007) Proc. Int'l Workshop on Mining Softw. Repositories; Kim, S., Ernst, M.D., Which warnings should I fix first? (2007) Proc. 6th Joint ESEC/SIGSOFT Foundations of Softw. Eng, pp. 45-54; Kremenek, T., Ashcraft, K., Yang, J., Engler, D., Correlation exploitation in error ranking (2004) Proc. 12th ACM Int'l Symp. Foundations of Softw. Eng, pp. 83-93; Kremenek, T., Engler, D., Z-Ranking: Using statistical analysis to counter the impact of static analysis approximations (2003) Proc. 10 th Static Analysis Symp; Markosian, L.Z., O'Malley, O., Penix, J., Brew, W., Hosted services for advanced V & V technologies: An approach to achieving adoption without the woes of usage (2003) Proc. ICSE Workshop on Adoption-Centric Softw. Eng; N. Nagappan, T. Ball, and A. Zeller. Mining metrics to predict component failures. In Proc. 28th Int'l Conf. on Softw. Eng., pages 452-461, 2006; Neter, J., Kutner, M.H., Nachtsheim, C.J., Wasserman, W., (1996) Applied Linear Statistical Models, , Irwin, 4th edition; Ostrand, T.J., Weyuker, E.J., Bell, R.M., Where the bugs are (2004) Proc. ACM SIGSOFT Int'l Symp. on Softw. Testing and Analysis, pp. 86-96; Ostrand, T.J., Weyuker, E.J., Bell, R.M., Automating algorithms for the identification of fault-prone files (2007) Proc. ACM SIGSOFT Int'l Symp. on Softw. Testing and Analysis, pp. 219-227; Ruthruff, J.R., Elbaum, S., Rothermel, G., Experimental program analysis: A new program analysis paradigm (2006) Proc. ACM SIGSOFT Int'l Symp. on Softw. Testing and Analysis, pp. 49-59; Spacco, J., Hovemeyer, D., Pugh, W., Tracking defect warnings across versions (2006) Proc. Int'l Workshop on Mining Softw. Repositories, pp. 133-136. , ACM Press; Wohlin, C., Runeson, P., Host, M., Regnell, B., Wesslen, A., (2000) Experimentation in Software Engineering, , Kluwer Academic Publishers},
correspondence_address1={Ruthruff, J. R.; University of Nebraska-Lincoln, Lincoln, NE, United States; email: ruthruff@cse.unl.edu},
sponsors={ACM SIGSOFT; IEEE CSE},
address={Leipzig},
issn={02705257},
isbn={9781605580791},
coden={PCSED},
language={English},
abbrev_source_title={Proc Int Conf Software Eng},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Otto200841,
author={Otto, F. and Moschny, T.},
title={Finding synchronization defects in Java programs: Extended static analyses and code patterns},
journal={Proceedings - International Conference on Software Engineering},
year={2008},
pages={41-46},
note={cited By 6; Conference of 30th International Conference on Software Engineering, ICSE 2008 Co-located Workshops - 1st International Workshop on Multicore Software Engineering, IWMSE 2008 ; Conference Date: 10 May 2008 Through 18 May 2008;  Conference Code:85195},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-79959444848&partnerID=40&md5=1cef3de5ddc59adf15d77b0dcc9c084d},
affiliation={University of Karlsruhe, 76131 Karlsruhe, Germany},
abstract={Concurrent programming is getting more and more important. Managing concurrency requires the usage of synchronization mechanisms, which is error-prone. Well-known examples for synchronization defects are deadlocks and race conditions. Detecting such errors is known to be difficult. There are several approaches to identify potential errors, but they either produce a high number of false positives or suffer from high computational overhead, catching only a small number of defects. Our approach uses static analysis techniques combined with points-to and may-happen-in-parallel (MHP) information to reduce the number of false positives. Additionally, we present code patterns indicating possible synchronization problems. We have implemented our approach using the Java framework Soot. Our tool was tested with small code examples, an open source web server, and commercial software. First results show that the number of false positives is reduced significantly. Copyright 2008 ACM.},
author_keywords={Anti-pattern detection;  Java;  Lockset analysis;  Synchronization defects},
keywords={Analysis techniques;  Anti-pattern detection;  Code-patterns;  Commercial software;  Computational overheads;  Concurrent programming;  Error prones;  False positive;  Java;  Java program;  Lockset analysis;  Open sources;  Potential errors;  Synchronization mechanisms;  Synchronization problem;  Web servers, Errors;  Java programming language;  Multicore programming;  Open systems;  Software engineering;  Software testing;  Synchronization;  User interfaces, Static analysis},
references={Artho, C., Biere, A., Applying static analysis to large-scale, multi-threaded Java programs (2001) ASWEC '01: Proceedings of the 13th Australian Conference on Software Engineering, pp. 68-75. , Washington, DC, USA, IEEE Computer Society; http://www-eclipse-org.luisamigo.proxybk.com/; Edelstein, O., Farchi, E., Goldin, E., Nir, Y., Ratsaby, G., Ur, S., Framework for testing multi-threaded Java programs (2003) Concurrency and Computation: Practice and Experience, 15 (3-5), pp. 485-499; Engler, D., Ashcraft, K., RacerX: Effective, static detection of race conditions and deadlocks (2003) Operating Systems Review (ACM), 37 (5), pp. 237-252. , SOSP'03: Proceedings of the 19th ACM Symposium on Operating Systems Principles; Farchi, E., Nir, Y., Ur, S., Concurrent bug patterns and how to test them (2003) IPDPS '03: Proceedings of the 17th International Symposium on Parallel and Distributed Processing, p. 2862. , Washington, DC, USA, IEEE Computer Society; http://findbugs-sourceforge-net.luisamigo.proxybk.com/; Flanagan, C., Leino, K.R.M., Lillibridge, M., Nelson, G., Saxe, J.B., Stata, R., Extended static checking for Java (2002) PLDI '02: Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation, pp. 234-245. , New York, NY, USA, ACM; The Java ME Platform, , http://java-sun-com.luisamigo.proxybk.com/javame/; Java Technology, , http://java-sun-com.luisamigo.proxybk.com/; Lea, D., (2000) Concurrent Programming in Java. Second Edition: Design Principles and Patterns, , Addison-Wesley, Boston, MA, USA; Lhoták, O., Hendren, L., Scaling Java points-to analysis using Spark (2003) Compiler Construction, 12th International Conference, pp. 153-169. , volume 2622 of LNCS, Warsaw, Poland, April Springer; Li, L., Verbrugge, C., A practical MHP information analysis for concurrent Java programs (2004) LCPC, pp. 194-208; Mobile Information Device Profile (MIDP), , http://java-sun-com.luisamigo.proxybk.com/products/midp/; Naumovich, G., Avrunin, G.S., Clarke, L.A., An efficient algorithm for computing MHP information for concurrent Java programs (1999) ESEC / SIGSOFT FSE, pp. 338-354; Nielson, F., Nielson, H.R., Hankin, C., (1999) Principles of Program Analysis, , Springer-Verlag New York, Inc., Secaucus, NJ, USA; Savage, S., Burrows, M., Nelson, G., Sobalvarro, P., Anderson, T., Eraser: A dynamic data race detector for multi-threaded programs (1997) SOSP '97: Proceedings of the Sixteenth A CM Symposium on Operating Systems Principles, pp. 27-37. , New York, NY, USA, ACM; Soot: A Java Optimization Framework. Http, , www-sable-mcgill-ca.luisamigo.proxybk.com/soot/; http://tornado-sourceforge-net.luisamigo.proxybk.com/; Visser, W., Havelund, K., Brat, G., Park, S., Model checking programs (2000) ASE '00: Proceedings of the 15th IEEE International Conference on Automated Software Engineering, p. 3. , Washington, DC, USA, IEEE Computer Society; Von Praun, C., (2004) Detecting Synchronization Defects in Multi-Threaded Object-Oriented Programs, , PhD thesis, Swiss Federal Institute of Technology, Zurich, Switzerland},
correspondence_address1={Otto, F.; University of Karlsruhe, 76131 Karlsruhe, Germany; email: otto@ipd.uka.de},
sponsors={Agilent Technologies; Intel; Microsoft},
address={Leipzig},
issn={02705257},
isbn={9781605580319},
coden={PCSED},
language={English},
abbrev_source_title={Proc Int Conf Software Eng},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Channakeshava200883,
author={Channakeshava, V. and Chavan, S. and Shanbhag, V.},
title={Bug detection through static analysis of MSIL},
journal={Proceedings of the 9th IASTED International Conference on Software Engineering and Applications, SEA 2008},
year={2008},
pages={83-88},
note={cited By 1; Conference of 9th IASTED International Conference on Software Engineering and Applications, SEA 2008 ; Conference Date: 16 November 2008 Through 18 November 2008;  Conference Code:79202},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-74549170428&partnerID=40&md5=6fb877054c6457c3c55d5e2d6e5eef63},
affiliation={Philips Healthcare, Bangalore, India; IIIT, Bangalore, India},
abstract={Skilled software professionals also occasionally do make mistakes when writing programs that lead to software-bugs. Code walk-through's and software testing are therefore a crucial component of the software-development process, industry-wide. Detecting and correcting certain classes of such software defects has been demonstrated to be conveniently, and cost-effectively possible through static analysis of intermediate code generated by compilers. This approach has been reported to be substantially more effective than testing in detecting all occurrences of many classes of bugs. In this paper we explore the use of static analysis techniques to inspect MSIL (Microsoft Intermediate Language), generated from compiling C# source. We investigate a few well known classes of bugs that require merely a single pass through the disassembled MSIL.},
author_keywords={Bug patterns;  Code walk-through;  Intermediate language;  Static analysis},
keywords={Bug detection;  Bug patterns;  Development process;  Intermediate languages;  MicroSoft;  Single pass;  Software defects, Computer software selection and evaluation;  Linguistics;  Software engineering;  Software testing;  Static analysis, Program debugging},
references={FindBugs, , http://findbugs-sourceforge-net;.luisamigo.proxybk.com Robinson, S., Nagel, C., Glynn, J., Skinner, M., Watson, K., Evjen, B., Professional C; Introduction to IL Assembly Language, , http://www-codeproject-com.luisamigo.proxybk.com/KB/msil/ilassembly.aspx; MSIL Tutorial, , http://www-codeguru-com.luisamigo.proxybk.com/csharp/.net/net-general/il/article.php/c4635; Hangal, S., Lam, M.S., Traking Down Software Bugs Using Automatic Anomaly Detection (2002) Proceedings of the 24th International Conference on Software Engineering; Skevoulis, S., Jia, X., Generic Invariant-Based Static Analysis Tool for Detection of Runtime Errors in Java Programs (2000) Proceedings 37th International Conference on Technology of Object-Oriented Languages and Systems; MSIL Disassembler (Ildasm.exe) http://msdn-microsoft-com.luisamigo.proxybk.com/en-us/library/ f7dy01k1(VS.80).aspx},
correspondence_address1={Channakeshava, V.; Philips Healthcare, Bangalore, India; email: vijaykumar.channakeshava@philips.com},
sponsors={Int. Assoc. Sci. Technol. Dev. (IASTED); Technical Committee on Software Engineering},
address={Orlando, FL},
isbn={9780889867765},
language={English},
abbrev_source_title={Proc. IASTED Int. Conf. Softw. Eng. Appl., SEA},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Heckman200841,
author={Heckman, S. and Williams, L.},
title={On establishing a benchmark for evaluating static analysis alert prioritization and classification techniques},
journal={ESEM'08: Proceedings of the 2008 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
year={2008},
pages={41-50},
doi={10.1145/1414004.1414013},
note={cited By 56; Conference of 2nd International Symposium on Empirical Software Engineering and Measurement, ESEM 2008 ; Conference Date: 9 October 2008 Through 10 October 2008;  Conference Code:75651},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-62949138527&doi=10.1145%2f1414004.1414013&partnerID=40&md5=4026f7eed8da5f334a8299ba786c35fe},
affiliation={North Carolina State University, Department of Computer Science, Campus Box 8206, Raleigh, NC 27695-8206, United States},
abstract={Benchmarks provide an experimental basis for evaluating software engineering processes or techniques in an objective and repeatable manner. We present the FAULTBENCH v0.1 benchmark, as a contribution to current benchmark materials, for evaluation and comparison of techniques that prioritize and classify alerts generated by static analysis tools. Static analysis tools may generate an overwhelming number of alerts, the majority of which are likely to be false positives (FP). Two FP mitigation techniques, alert prioritization and classification, provide an ordering or classification of alerts, identifying those likely to be anomalies. We evaluate FAULTBENCH using three versions of a FP mitigation technique within the AWARE adaptive prioritization model. Individual FAULTBENCH subjects vary in their optimal FP mitigation techniques. Together, FAULTBENCH subjects provide a precise and general evaluation of FP mitigation techniques. Copyright 2008 ACM.},
author_keywords={Alert classification;  Alert prioritization;  Automated static analysis;  Benchmark creation;  False positive mitigation},
keywords={Software engineering;  Static analysis, Alert classification;  Alert prioritization;  Automated static analysis;  Benchmark creation;  False positive mitigation, Computer software selection and evaluation},
references={Ayewah, N., Pugh, W., Morgenthaler, J.D., Penix, J., Zhou, Y., Evaluating Static Analysis Defect Warnings On Production Software (2007) Proceedings of the 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, pp. 1-8. , San Diego, CA, USA, June 13-14; Boehm, B.W., Turner, R., (2003) Balancing Agility and Discipline: A Guide for the Perplexed, , Addison-Wesley; Boetticher, G., Menzies, T., Ostrand, T., (2007) PROMISE Repository of Empirical Software Engineering Data, , http://promisedata-org.luisamigo.proxybk.com/repository, West Virginia University, Department of Computer Science; Boogerd, C., Moonen, L., Prioritizing Software Inspection Results using Static Profiling (2006) Proceedings of the 6th IEEE Workshop on Source Code Analysis and Manipulation, pp. 149-160. , Philadelphia, PA, USA, September 27-29; Heckman, S.S., Adaptively Ranking Alerts Generated from Automated Static Analysis (2007) ACM Crossroads, 14 (1), pp. 16-20; Hovemeyer, D., Pugh, W., Finding Bugs is Easy (2004) Proceedings of the 19th ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications, pp. 132-136. , Vancouver, British Columbia, Canada, October 24-28; Hutchins, M., Foster, H., Goradia, T., Ostrand, T., Experiments on the Effectiveness of Dataflow- and Controlflow-Based Test Adequacy Criteria (1994) Proceedings of the 19th International Conference on Software Engineering, pp. 191-200. , Sorrento, Italy, May 16-21; (1990) IEEE Standard 610.12-1990, IEEE Standard Glossary of Software Engineering Terminology, , IEEE; (2002) IEEE 1028-1997 (R2002) IEEE Standard for Software Reviews, , IEEE; Kim, S., Ernst, M.D., Prioritizing Warning Categories by Analyzing Software History (2007) Proceedings of the International Workshop on Mining Software Repositories, p. 27. , Minneapolis, MN, USA, May 19-20; Kim, S., Ernst, M.D., Which Warnings Should I Fix First? (2007) Proceedings of the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, pp. 45-54. , Dubrovnik, Croatia, September 3-7; Kim, S., Zimmermann, T., James Whitehead, J.E., Zeller, A., Predicting Faults from Cached History (2007) Proceedings of the 29th International Conference on Software Engineering, pp. 489-498. , Minneapolis, MN, USA, May 23-25; Kremenek, T., Ashcroft, K., Yang, J., Engler, D., Correlation Exploitation in Error Ranking (2004) Proceedings of the 12th ACM SIGSOFTInternational Symposium on Foundations of Software Engineering, pp. 83-93. , Newport Beach, CA, USA; Kremenek, T., Engler, D., Z-Ranking: Using Statistical Analysis to Counter the Impact of Static Analysis Approximations (2002) Proceedings of the 10th International Static Analysis Symposium, , San Diego, California; Lu, S., Li, Z., Oin, F., Tan, L., Zhou, P., Zhou, Y., BugBench: Benchmarks for Evaluating Bug Detection Tools (2005) Proceedings of the Workshop on the Evaluation of Software Defect Detection Tools, , Chicago, Illinois; Naik, M., Aiken, A., Effective Static Race Detection for Java (2006) Proceedings of the ACM SIGPLAN 2006 Conference on Programming Language Design and Implementation, pp. 308-319. , Ottawa, Canada, June 10-16; Rothermel, G., Untch, R.H., Chu, C., Harrold, M.J., Prioritizing Test Cases For Regression Testing (2001) IEEE Transactions on Software Engineering, 27 (10), pp. 929-948. , October; Sim, S.E., Easterbrook, S., Holt, R.C., Using Benchmarking to Advance Research: A Challenge to Software Engineering (2003) Proceedings of the 25th International Conference on Software Engineering, pp. 74-83. , Portland, Oregon, USA, May 3-10; Tichy, W.F., Should Computer Scientists Experiment More? (1998) Computer, 31 (5), pp. 32-40; S. Wagner and M. A. Florian Deissenboeck, Johann Wimmer, Markus Schwalb, An Evaluation of Two Bug Pattern Tools for Java, Proceedings of the 1st IEEE International Conference on Software Testing, Verification, and Validation, Lillehammer, Norway, to appear, 2008; Williams, C.C., Hollingsworth, J.K., Automatic Mining of Souce Code Repositories to Improve Bug Finding Techniques (2005) IEEE Transactions on Software Engineering, 31 (6), pp. 466-480; Witten, I.H., Frank, E., (2005) Data Mining: Practical Machine Learning Tools and Techniques, , 2nd ed. Amsterdam: Morgan Kaufmann; Zheng, J., Williams, L., Nagappan, N., Snipes, W., Hudepohl, J., Vouk, M., On the Value of Static Analysis for Fault Detection in Software (2006) IEEE Transactions on Software Engineering, 32 (4), pp. 240-253. , April; Zimmermann, T., Premraj, R., Zeller, A., Predicting Defects in Eclipse (2007) Proceedings of the 3rd International Workshop on Predictor Models in Software Engineering, p. 9. , Minneapolis, MN, USA, May 20},
correspondence_address1={Heckman, S.; North Carolina State University, , Raleigh, NC 27695-8206, United States; email: sarah_heckman@ncsu.edu},
address={Kaiserslautern},
isbn={9781595939715},
language={English},
abbrev_source_title={ESEM: Proc. ACM-IEEE Int. Symp. Empir. Softw. Eng. Meas.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Kowalski200864,
author={Kowalski, C.T. and Wolkiewicz, M. and Ewert, P.},
title={Analysis of stator faults of the induction motor ted from net and static converter [Analiza zwarć zwojowych stojana silnika indukcyjnego zasilanego z sieci i przemiennika czȩstotliwości]},
journal={Przeglad Elektrotechniczny},
year={2008},
volume={84},
number={12},
pages={64-67},
note={cited By 5},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-58049160190&partnerID=40&md5=5141601cbb3aa6c230150776ffa83d4b},
affiliation={Politechnika Wrooławska, Instytut Maszyn, Napȩdów i Pomiarów Elektrycznych; Politechnika Wrocławska, Instytut Maszyn, Napȩdów i Pomiarów elektryczny'Ch, ul. Smoluchowskiego 19, 50-372 Wroclaw},
abstract={This paper deals with the problem of the early stator faults detection (the short-circuits) of the induction motors supplied directly from net and from the frequency converter. The method based on the FFT algorithm is used for the spectral analysis of modulus of the spatial current vector, the instantaneous active and reactive power and the estimated electromagnetic torque. Tests were realized for different supply frequencies, what enabled the evaluating of the usefulness of the proposed analysis in the diagnostics of the stator faults in the converter-fed induction motor drives. I.},
author_keywords={Diagnosis;  Fft analysis;  Induction motor;  Monitoring;  Stator short-circuits},
references={Akagi, H., Kanazawa, Y., Nabae, A., Instantaneous Reactive Power Compensators Comprising Switching Devices without Energy Storage Components (1984) IEEE Trans. on Industrial Applications, IA-20, pp. 625-630; Watanabe, E.H., Akagi, H., Aredes, M., Instantaneous p-q Power Theory for Compensating Nonsinusoidal Systems (2008) Przegla̧d Elektrotechniczny, R, 84 (NR6), pp. 12-21. , s; Ferrero, A., Superti-Furga, G., A New Approach to the Definition of Power Components in Three-Phase Systems Under Nonsinusoidal Conditions (1991) IEEE Trans, on Instrumentation and Measurement, 40 (3), pp. 568-577; Kowalski Cz. T., Wolkiewicz M., Analiza możliwości zastosowania sygnałów mocy chwilowej i momentu elektro-magnetycznego do diagnostyki silników indukcyjnych, Prace Naukowe Inst. Maszyn, Napȩdów i Pomiarów Elektr. PWr, Studia i Materiały, nr 27, Zeszyt 60, 2007 str.248-259; Siddique, A., Yadava, G., Sigh, B., A Review of Stator Fault Monitoring Techniques of Induction Motors (2005) IEEE Trans. On Energy Conversion, 20 (1), pp. 106-114; Nandi, S., Toliyat, A.T., Li, X., Condition Monitoring and Fault Diagnosis of Electrical Motors - A Review (2005) IEEE Trans, on Energy Conversion, 20 (4), pp. 719-729},
correspondence_address1={Kowalski, C. T.; Politechnika Wrooławska, email: czeslaw.t.kowalski@pwr.wroc.pl},
issn={00332097},
language={Polish},
abbrev_source_title={Prz. Elektrotech.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Kang2008679,
author={Kang, H.},
title={Security assessment framework using static analysis and fault injection},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2008},
volume={5226 LNCS},
pages={679-687},
doi={10.1007/978-3-540-87442-3_84},
note={cited By 1; Conference of 4th International Conference on Intelligent Computing, ICIC 2008 ; Conference Date: 15 September 2008 Through 18 September 2008;  Conference Code:74268},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-56549092420&doi=10.1007%2f978-3-540-87442-3_84&partnerID=40&md5=7234ce3200861b7159428852dd70b74f},
affiliation={Financial Supervisory Service, 27 Yoido-dong, Youngdeungpo-gu, Seoul 150-743, South Korea},
abstract={For large scale and residual software like network service, reliability is a critical requirement. Recent research has shown that most of network software still contains a number of bugs. Methods for automated detection of bugs in software can be classified into static analysis based on formal verification and runtime checking based on fault injection. In this paper, a framework for checking software security vulnerability is proposed. The framework is based on automated bug detection technologies, i.e. static analysis and fault injection, which are complementary each other. The proposed framework provides a new direction, in which various kinds of software can be checked its vulnerability by making use of static analysis and fault injection technology. In experiment on proposed framework, we find unknown vulnerability as well as known vulnerability in Windows network module. © 2008 Springer-Verlag Berlin Heidelberg.},
author_keywords={Buffer overflow;  Fault injection;  RPC (Remote Procedure Call);  Security assessment;  Software security;  Static analysis},
keywords={Fault detection;  Nuclear materials safeguards;  Software reliability;  Static analysis;  Verification, Buffer overflow;  Fault injection;  RPC (Remote Procedure Call);  Security assessment;  Software security, Program debugging},
references={Wheeler, D.A., Flawfinder, , http://www-dwheeler-com.luisamigo.proxybk.com/flawfinder; http://www-securesw-com.luisamigo.proxybk.com/rats, RATS; Viega, J., Bloch, J.T., Kohno, T., McGraw, G., ITS4: A Static Vulnerability Scanner for C and C++ Code (2002) ACM Transactions on Information and System Security, 5 (2); Kang, H., Kim, K., Hong, S., Lee: A Model for Security Vulnerability Pattern (2006) LNCS, 3982, pp. 385-394. , Gavrilova, M.L, Gervasi, O, Kumar, V, Tan, C.J.K, Taniar, D, Laganá, A, Mun, Y, Choo, H, eds, ICCSA 2006, Springer, Heidelberg; Wagner, D., Foster, J.S., Brewer, E.A., Aiken, A., A First Step towards Automated Detection of Buffer Overrun Vulnerabilities (2000) Network and distributed system security symposium, pp. 3-17. , San Diego, CA, pp; Foster, J., (2002) Type qualifiers: Lightweight Specifications to Improve Soft-ware Quality, , Ph.D. thesis, University of California, Berkeley; Evans, D.: SPLINT, http://www-splint-org.luisamigo.proxybk.com/; Blanchet, B., Cousot, P., Cousot, R., Feret, J., Mauborgne, L., Mine, A., Monniaux, D., Rival, X., (2003) A Static Analyzer for Large Safety-Critical Software; (2001) Abstract interpretation, , http://www-polyspace-com.luisamigo.proxybk.com/downloads.htm; Zitser, M., Lippmann, R., Leek, T.: Testing Static Analysis Tools using Exploitable Buffer Overflows from Open Source Code, In: SIGSOFT 2004, pp. 97-106 (2004); Ball, T., Majumdar, R., Millstein, T., Rajamani, S., Automatic Predicate Abstraction of C Programs. PLDI (2001) ACM SIGPLAN Not, 36 (5), pp. 203-213; Ball, T., Podelski, A., Rajamani, S., Relative Completeness of Abstraction Refinement for Software Model Checking (2002) LNCS, 2280, pp. 158-172. , Katoen, J.-P, Stevens, P, eds, TACAS 2002, Springer, Heidelberg; Ball, T., Rajamani, S., The SLAM project: Debugging System Software via Static Analysis (2002) LNCS, 1254, pp. 72-83. , 29th ACM POPL, Springer, Heidelberg; Chen, H., Wagner, D., MOPS: An Infrastructure for Examining Security Properties of Software (2002) Proceedings of the 9th ACM Conference on Computer and Communications Security, , CCS, Washington, DC; Chen, H., Wagner, D., Dean, D.: Setuid Semystified. In: Proceedings of the Eleventh Usenix Security Symposium, San Francisco, CA (2002); Voas, J.M, McGraw, G, Software Fault Inoculating Programs Against Errors. Wiley Computer Publishing, Chichester; Fabre, J.C., Rodriguez, M., Arlat, J., Sizun, J.M., Building Dependable COTS Microkernel-based Systems using MAFALDA (2000) Pacific Rim International Symposium on Dependable Computing (PRDC, pp. 85-92; Miller, B.P., Fredriksen, L., So, B., An Empirical Study of the Reliability of UNIX Utilities (1990) Communications of the ACM, 33 (12); Koopman, P., Sung, J., Dingman, C., Siewiorek, D., Marz, T., Comparing Operating Systems using Robustness Benchmarks (1997) 16th IEEE Symposium on Reliable Distributed Systems, pp. 72-79; Kropp, N.P., Koopman, P.J., Siewiorek, D.P., Automated Robustness Testing of Off-the-Shelf Software Components (1998) 28th International Symposium on Fault-Tolerant Computing, pp. 464-468; Justin, E.F., Barton, P.M., An Empirical Study of the Robustness of Windows NT Applications using Random Testing, , http://www-cs-wisc-edu.luisamigo.proxybk.com/_bart/fuzz/fuzz.html; Aitel, D., (2002) The Advantages of Block-based Protocol Analysis for Security Testing, , http://www-immunitysec-com.luisamigo.proxybk.com/resources-papers.shtml; http://www-immunitysec.luisamigo.proxybk.com/spike.html, SPIKE Development Home; Kang, H., Lee, D., Security Assessment for Application network Service using Fault Injection (2007) LNCS, 4430, pp. 172-183. , Yang, C.C, Zeng, D, Chau, M, Chang, K, Yang, Q, Cheng, X, Wang, J, Wang, F.-Y, Chen, H, eds, PAISI 2007, Springer, Heidelberg; Security Testing of Protocol Implementation, , http://www-ee-oulu-fi.luisamigo.proxybk.com/research/ouspg/protos, PROTOS; Holodeck, , http://www-securityinnovation-com;.luisamigo.proxybk.com James, A.W, Herbert, H.T, How to Break Software Security. Addison Wesley, Reading; Mangleme, , http://freshmeat-net.luisamigo.proxybk.com/projects/managlerne; Michael, S., Adam, G., (2005) The Art of File Format Fuzzing, Blackhat, , USA; Microsoft Security Bulletin MS0.3-026. Microsoft (2003), http://www.microsoft.com/technet/security/bulletin/MS03-026.mspx},
correspondence_address1={Kang, H.; Financial Supervisory Service, 27 Yoido-dong, Youngdeungpo-gu, Seoul 150-743, South Korea; email: kanghw@fss.or.kr},
sponsors={IEEE Computational Intelligence Society; International Neural Network Society; National Science Foundation of China},
address={Shanghai},
issn={03029743},
isbn={3540874402; 9783540874409},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Ayewah200822,
author={Ayewah, N. and Hovemeyer, D. and Morgenthaler, D.J. and Penix, J. and Pugh, W.},
title={Using static analysis to find bugs},
journal={IEEE Software},
year={2008},
volume={25},
number={5},
pages={22-29},
doi={10.1109/MS.2008.130},
note={cited By 309},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-50549091105&doi=10.1109%2fMS.2008.130&partnerID=40&md5=c97fb7f59018aa1d18cf1f12cf521f9b},
affiliation={University of Maryland, College Park, MD, United States; York College of Pennsylvania, York, PA, United States; Google, University of California, Berkeley, CA, United States; Google},
abstract={Static analysis examines code in the absence of input data and without running the code. It can detect potential security violations (SQL injection), runtime errors (dereferencing a null pointer) and logical inconsistencies (a conditional test that can't possibly be true). Although a rich body of literature exists on algorithms and analytical frameworks used by such tools, reports describing experiences in industry are much harder to come by. The authors describe FindBugs, an open source static-analysis tool for Java, and experiences using it in production settings. FindBugs evaluates what kinds of defects can be effectively detected with relatively simple techniques and helps developers understand how to incorporate such tools into software development. © 2008 IEEE.},
author_keywords={Book reviews;  Bug patterns;  Code quality;  Computer bugs;  Detectors;  FindBugs;  Interviews;  Java;  Programming;  Software;  Software defects;  Software quality;  Static analysis},
keywords={Book reviews;  Bug patterns;  Code quality;  Computer bugs;  Detectors;  FindBugs;  Interviews;  Java;  Programming;  Software;  Software defects;  Software quality, Static analysis},
references={Darwin, I.F., (1988) Checking C Programs with Lint, , O'Reilly; Hallem, S., Park, D., Engler, D., Uprooting Software Defects at the Source, ACM Press (2003) Queue, 1 (8), pp. 64-71; Chess, B., West, J., (2007) Secure Programming with Static Analysis, , 1st ed, Addison-Wesley Professional; Bush, W.R., Pincus, J.D., Sielaff, D.J., A Static Analyzer for Finding Dynamic Programming Errors (2000) Software Practice and Experience, 30 (7), pp. 775-802; Hovemeyer, D., Spacco, J., Pugh, W., Evaluating and Tuning a Static Analysis to Find Null Pointer Bugs (2005) Proc. 6th ACM SIGPLAN-SIGSOFT Workshop Program Analysis for Software Tools and Eng. (PASTE 05), pp. 13-19. , ACM Press; Spacco, J., Hovemeyer, D., Pugh, W., Tracking Defect Warnings across Versions (2006) Proc. 2006 Int'l Workshop Mining Software Repositories (MSR 06), pp. 133-136. , ACM Press; Hovemeyer, D., Pugh, W., Finding More Null Pointer Bugs, but Not Too Many (2007) Proc. 7th ACM SSIGPLAN-SIGSOFTWorkshop Program Analysis for Software Tools and Eng. (PASTE 07), pp. 9-14. , ACM Press; Reasoning Inspection Service Defect Data Report for Tomcat, Version 4.1.24, tech. report, Reasoning, Inc, Jan. 2003; Copeland, T., (2005) PMD Applied, , Centennial Books; Chelf, B., Engler, D., Hallem, S., How to Write System-Specific, Static Checkers in Metal (2002) Proc. 2002 ACM SIGPLAN-SIGSOFT Workshop Program Analysis for Software Tools and Eng. (PASTE 02), pp. 51-60. , ACM Press; Ayewah, N., Evaluating Static Analysis Defect Warnings on Production Software (2007) Proc. 7th ACM SIGPLAN-SIGSOFT Workshop Program Analysis for Software Tools and Eng. (PASTE 07), pp. 1-8. , ACM Press; Mondrian: Code Review on the Web, , http://video-google-com.luisamigo.proxybk.com/videoplay?docid=-8502904076440714866, Dec. 2006; Hovemeyer, D., Pugh, W., Status Report on JSR-305: Annotations for Software Defect Detection (2007) Companion to the 22nd ACM SIGPLAN Conf. Object-Oriented Programming Systems and Applications, pp. 799-800. , ACM Press; JSR 305: Annotations for Software Defect Detection, , http://jcp-org.luisamigo.proxybk.com/en/jsr/detail?id=305},
correspondence_address1={Ayewah, N.; University of Maryland, College Park, MD, United States; email: ayewah@cs.umd.edu},
issn={07407459},
coden={IESOE},
language={English},
abbrev_source_title={IEEE Software},
document_type={Article},
source={Scopus},
}

@ARTICLE{Liblit200818,
author={Liblit, B.},
title={Reflections on the role of static analysis in cooperative bug isolation},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2008},
volume={5079 LNCS},
pages={18-31},
doi={10.1007/978-3-540-69166-2_2},
note={cited By 1; Conference of 15th International Static Analysis Symposium, SAS 2008 ; Conference Date: 16 July 2008 Through 18 July 2008;  Conference Code:72911},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-48949083113&doi=10.1007%2f978-3-540-69166-2_2&partnerID=40&md5=fdbeb918d348f8849b0fac4d0915f077},
affiliation={Computer Sciences Department, University of Wisconsin, Madison, WI, United States},
abstract={Cooperative Bug Isolation (CBI) is a feedback-directed approach to improving software quality. Developers provide instrumented applications to the general public, and then use statistical methods to mine returned data for information about the root causes of failure. Thus, users and developers form a feedback loop of continuous software improvement. Given CBI's focus on statistical methods and dynamic data collection, it is not clear how static program analysis can most profitably be employed. We discuss current uses of static analysis during CBI instrumentation and failure modeling. We propose novel ways in which static analysis could be applied at various points along the CBI feedback loop, from fairly concrete low-level optimization opportunities to hybrid failure-modeling approaches that may cut across current static/dynamic/statistical boundaries. © 2008 Springer-Verlag.},
keywords={Computer software selection and evaluation;  Failure analysis;  Quality assurance;  Reliability;  Statistical methods;  Statistics;  Synthetic aperture sonar, Bug isolation;  Dynamic data;  Feed back loops;  General Public;  International symposium;  Modeling approaches;  Root causes;  Software-quality;  Static program analysis, Static analysis},
funding_details={National Science FoundationNational Science Foundation, NSF, CCF-0621487, CCF-0701957, CNS-0720565},
funding_details={Air Force Office of Scientific ResearchAir Force Office of Scientific Research, AFOSR, FA9550-07-1-0210},
funding_text 1={Supported in part by AFOSR Grant FA9550-07-1-0210 and NSF Grants CCF-0621487, CCF-0701957, and CNS-0720565. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author and do not necessarily reflect the views of AFOSR, NSF, or other institutions.},
references={Liblit, B.:Cooperative Bug Isolation (Winning Thesis of the 2005 ACM Doctoral Dissertation Competition). LNCS, 4440. Springer, Heidelberg (2007); Driscoll, E., Cooksey, G.: CBI++. CS706 class project, University of Wisconsin-Madison (December 2006); Hunter, J., Kolpin, G., Saeed, U., (2005) CBI instrumentation for Java bytecode, , CS706 class project, University of Wisconsin-Madison December; Kolpin, G., (2006) Jikes CBI implementation details, , Independent study project, University of Wisconsin-Madison May; Liblit, B., Guide to the bug isolation sampler, , http://www-cs-wisc-edu.luisamigo.proxybk.com/cbi/developers/guide, January 2008; Necula, G.C., McPeak, S., Rahul, S.P., Weimer, W., CIL: Intermediate language and tools for analysis and transformation of C programs (2002) LNCS, 2304, pp. 213-228. , Horspool, R.N, ed, CC 2002 and ETAPS 2002, Springer, Heidelberg; Ernst, M.D., Perkins, J.H., Guo, P.J., McCamant, S., Pacheco, C., Tschantz, M.S., Xiao, C., The Daikon system for dynamic detection of likely invariants (2007) Sci. Comput. Program, 69 (1-3), pp. 35-45; Liblit, B., Aiken, A., Zheng, A.X., Jordan, M.I.: Bug isolation via remote program sampling. In: PLDI, pp. 141-154. ACM, New York (2003); Arnold, M., Ryder, B.G., A framework for reducing the cost of instrumented code (2001) PLDI, pp. 168-179; Hirzel, M., Chilimbi, T., (2001) Bursty tracing: A framework for low-overhead temporal profiling, , November 24; Zheng, A.X., Jordan, M.I., Liblit, B., Aiken, A.: Statistical debugging of sampled programs. In: Thrun, S., Saul, L.K., Schölkopf, B. (eds.) NIPS, MIT Press, Cambridge (2003); Liu, C., Yan, X., Fei, L., Han, J., Midkiff, S.P.: SOBER: statistical model-based bug localization. In:Wermelinger, M., Gall, H. (eds.) ESEC/SIGSOFT FSE, pp. 286-295. ACM, New York (2005); Jones, J.A., Harrold, M.J.: Empirical evaluation of the Tarantula automatic fault-localization technique. In: Redmiles, D.F., Ellman, T., Zisman, A. (eds.) ASE, pp. 273-282. ACM, New York (2005); Liblit, B., Naik, M., Zheng, A.X., Aiken, A., Jordan, M.I.: Scalable statistical bug isolation. In: Sarkar, V., Hall, M.W. (eds.) PLDI, pp. 15-26. ACM, New York (2005); Zheng, A.X., Jordan, M.I., Liblit, B., Naik, M., Aiken, A., Statistical debugging: Simultaneous identification of multiple bugs (2006) Conference Proceeding Series, 148, pp. 1105-1112. , Cohen, W.W, Moore, A, eds, ICML. ACM International, ACM, New York; Wassel, H.M.G.H., (2007) An enhanced bi-clustering algorithm for automatic multiple software bug isolation, , Master's thesis, Alexandria University, Egypt September; Arumuga Nainar, P., Chen, T., Rosin, J., Liblit, B.: Statistical debugging using compound Boolean predicates. In: Rosenblum, D.S., Elbaum, S.G. (eds.) ISSTA, pp. 5-15. ACM, New York (2007); Jiang, L., Su, Z.: Context-aware statistical debugging: from bug predictors to faulty control flow paths. In: Stirewalt, R.E.K., Egyed, A., Fischer, B. (eds.) ASE, pp. 184-193. ACM, New York (2007); Andrzejewski, D., Mulhern, A., Liblit, B., Zhu, X.: Statistical debugging using latent topic models. In: Kok, J.N., Koronacki, J., de Mántaras, R.L., Matwin, S., Mladenic, D., Skowron, A. (eds.) ECML 2007. LNCS (LNAI), 4701, pp. 6-17. Springer, Heidelberg (2007); Liblit, B., Aiken, A., Building a better backtrace: Techniques for postmortem program analysis (2002), Technical Report CSD-02-1203, University of California, Berkeley October; Lal, A., Lim, J., Polishchuk, M., Liblit, B., Path optimization in programs and its application to debugging (2006) LNCS, 3924, pp. 246-263. , Sestoft, P, ed, ESOP 2006 and ETAPS 2006, Springer, Heidelberg; Reps, T.W., Schwoon, S., Jha, S., Melski, D., Weighted pushdown systems and their application to interprocedural dataflow analysis (2005) Sci. Comput. Program, 58 (1-2), pp. 206-263; Lal, A., Reps, T.W., Balakrishnan, G.: Extended weighted pushdown systems. In: Etessami, K., Rajamani, S.K. (eds.) CAV 2005. LNCS, 3576, pp. 434-448. Springer, Heidelberg (2005); Cleve, H., Zeller, A.: Locating causes of program failures. In: Roman, G.C., Griswold, W.G., Nuseibeh, B. (eds.) ICSE, pp. 342-351. ACM, New York (2005); Renieris, M., Reiss, S.P., Fault localization with nearest neighbor queries. In: ASE (2003) IEEE Computer Society, pp. 30-39. , Los Alamitos; Nimmer, J.W., Ernst, M.D., Static verification of dynamically detected program invariants: Integrating Daikon and ESC/Java. Electr (2001) Notes Theor. Comput. Sci, 55 (2); Canfora, G., Cimitile, A., Lucia, A.D., Conditioned program slicing (1998) Information & Software Technology, 40 (11-12), pp. 595-607; Getoor, L., Taskar, B., (2007) Introduction to Statistical Relational Learning (Adaptive Computation and Machine Learning), , MIT Press, Cambridge},
correspondence_address1={Liblit, B.; Computer Sciences Department, , Madison, WI, United States; email: liblit@cs.wisc.edu},
sponsors={Departamento de Sistemas Informaticos y Computacion; EAPLS; ERCIM; Generalitat Valenciana; MEC (Feder) TIN2007-30509-E; Universidad Politecnica de Valencia},
address={Valencia},
issn={03029743},
isbn={3540691634; 9783540691631},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Kame2008309,
author={Kame, N. and Saito, S. and Oguni, K.},
title={Quasi-static analysis of strike fault growth in layered media},
journal={Geophysical Journal International},
year={2008},
volume={173},
number={1},
pages={309-314},
doi={10.1111/j.1365-246X.2008.03728.x},
note={cited By 12},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-41249095325&doi=10.1111%2fj.1365-246X.2008.03728.x&partnerID=40&md5=d81d325059e3a648fa4040c2cbcbc5d3},
affiliation={Department of Earth and Planetary Sciences, Faculty of Sciences, Kyushu University, Hakozaki 6-10-1, Higashi-ku, Fukuoka 812-8581, Japan; Earthquake Research Institute, University of Tokyo, Yayoi 1-1-1, Bunkyo-ku, Tokyo 113-0032, Japan},
abstract={We study the effects of structural inhomogeneity on the quasi-static growth of strike-slip faults. A layered medium is considered, made up of an upper layer bounded by a free surface and welded to a lower half-space with different elastic property. Mode III crack is employed as a mathematical model of strike-slip fault, which is nucleated in the lower half-space and then propagates towards the interface. We adopt FEM-β, newly proposed analysis method for failure, to simulate the quasi-statistic crack growth governed by the stress distribution in layered media. Our results show that along planar traces across interfaces a compliant upper layer has significant effects on promoting/ suppressing crack growth before/after its extension into the layer and vice versa for a rigid one. This proposes a possibility that surface breaks due to strike-slip faulting could be arrested by deposit layers at the topmost part of the Earth's crust. © Journal compilation © 2008 RAS.},
author_keywords={Dynamics and mechanics of faulting;  Earthquake dynamics;  Fracture and faults;  Mechanics, theory and modelling;  Numerical solutions},
keywords={crack;  crustal structure;  earthquake;  elastic property;  faulting;  finite element method;  numerical method;  numerical model;  stress;  strike-slip fault},
references={Ben-Zion, Y., Katz, S., Leary, P., Joint inversion of fault zone head waves and direct P arrivals for crustal structure near major faults (1992) J. Geophys. Res., 97 (B2), pp. 1943-1951; Bhat, H.S., Dmowska, R., Rice, J.R., Kame, N., Dynamic slip transfer from the Denali to Totschunda faults, Alaska: Testing theory for fault branching (2004) Bull. Seism. Soc. Am., 94, pp. 202-213; Bonafede, M., Parenti, B., Rivata, E., On strike-slip faulting in layered media (2002) Geophys. J. Int., 149, pp. 698-723; Das, S., Aki, K., A numerical study of two-dimensional spontaneous rupture propagation (1977) Geophys. J. R. Astr. Soc., 50, pp. 643-668; Hori, M., Oguni, K., Sakaguchi, H., Proposal of FEM implemented with particle discretization for analysis of failure phenomena (2005) J. Mech. Phys. Solids, 53, pp. 681-703; Husseini, M.I., Jovanovich, D.B., Randall, M.J., Freund, L.B., The fracture energy of earthquakes (1975) Geophys. J. R. Astr. Soc., 43, pp. 367-385; Kame, N., Yamashita, T., Simulation of the spontaneous growth of a dynamic crack without constraints on the crack tip path (1999) Geophys. J. Int., 139, pp. 345-358; Kame, N., Yamashita, T., A new light on arresting mechanism of dynamic earthquake faulting (1999) Geophys. Res. Lett., 26, pp. 1997-2000; Kame, N., Yamashita, T., Dynamic branching, arresting of rupture and the seismic wave radiation in a self-chosen crack path modelling (2003) Geophys. J. Int., 155, pp. 1042-1050; Kame, N., Rice, J.R., Dmowska, R., Effects of pre-stress state and rupture velocity on dynamic fault branching (2003) J. Geophys. Res., 108 (B5), p. 2265; Kostrov, B.V., Unsteady propagation of longitudinal shear cracks (1966) J. Appl. Math. Mech., 30, pp. 1241-1248; Pollard, D.D., Segall, P., Theoretical displacements and stresses near fractures in rock: With applications to faults, joints, veins, dikes, and solution surfaces (1987) Fracture Mechanics of Rock, pp. 277-349. , in ed. Atokinson, B.K., Academic Press, London; Rivalta, E., Mangiavillano, W., Bonafede, M., The edge dislocation problem in a layered elastic medium (2002) Geophys. J. Int., 149 (2), pp. 508-523; Rybicki, K.R., Yamashita, T., Faulting in vertically inhomogeneous media and its geophysical implications (1998) Geophys. Res. Lett., 25 (5), pp. 2893-2896; Rybicki, K.R., Yamashita, T., On faulting in inhomogeneous media (2002) Geophys. Res. Lett., 29 (10)},
correspondence_address1={Saito, S.; Department of Earth and Planetary Sciences, Hakozaki 6-10-1, Higashi-ku, Fukuoka 812-8581, Japan; email: kame@geo.kyushu-u.ac.jp},
issn={0956540X},
language={English},
abbrev_source_title={Geophys. J. Int.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Ayewah20071,
author={Ayewah, N. and Pugh, W. and Morgenthaler, J.D. and Penix, J. and Zhou, Y.},
title={Evaluating static analysis defect warnings on production software},
journal={ACM SIGPLAN/SIGSOFT Workshop on Program Analysis for Software Tools and Engineering},
year={2007},
pages={1-7},
doi={10.1145/1251535.1251536},
note={cited By 138; Conference of 7th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering ; Conference Date: 13 June 2007 Through 14 June 2007;  Conference Code:70652},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-36549070602&doi=10.1145%2f1251535.1251536&partnerID=40&md5=0e049754553ea0f087cf684d6ee44a0c},
affiliation={Univ. of Maryland, United States; Google, Inc., United States},
abstract={Static analysis tools for software defect detection are becoming widely used in practice. However, there is little public information regarding the experimental evaluation of the accuracy and value of the warnings these tools report. In this paper, we discuss the warnings found by FindBugs, a static analysis tool that finds defects in Java programs. We discuss the kinds of warnings generated and the classification of warnings into false positives, trivial bugs and serious bugs. We also provide some insight into why static analysis tools often detect true but trivial bugs, and some information about defect warnings across the development lifetime of software release. We report data on the defect warnings in Sun's Java 6 JRE, in Sun's Glassfish JEE server, and in portions of Google's Java codebase. Finally, we report on some experiences from incorporating static analysis into the software development process at Google. Copyright © 2007 ACM.},
author_keywords={Bug patterns;  Bugs;  False positives;  FindBugs;  Java;  Software defects;  Software quality;  Static analysis},
keywords={Bug patterns;  Software defects;  Software quality, Computer software maintenance;  Java programming language;  Static analysis, Computer software},
references={Almossawi, A., Lim, K., Sinha, T., (2006) Analysis tool evaluation: Coverity prevent, , http://www-cs-cmu-edu.luisamigo.proxybk.com/aldrich/courses/654/tools/cure- coverity-06.pdf, May; Boudnik, K.I., (2006) Static analyzers comparison, , http://weblogs-java-net.luisamigo.proxybk.com/blog/cos/archive/2006/10/static_analyzer.html, October; Chelf, B., Engler, D., Hallem, S., How to write system-specific, static checkers in metal (2002) PASTE '02: Proceedings of the 2002 ACM SIGPLAN-SIGSOFT workshop on Program analysis for software tools and engineering, pp. 51-60. , New York, NY, USA, ACM Press; Copeland, T., (2005) PMD Applied, , Centennial Books, November; Engler, D., Chen, D.Y., Hallem, S., Chou, A., Chelf, B., Bugs as deviant behavior: A general approach to inferring errors in systems code (2001) SOSP '01: Proceedings of the eighteenth ACM symposium on Operating systems principles, pp. 57-72. , New York, NY, USA, ACM Press; Isil Dillig, T.D., Aiken, A., Static error detection using semantic inconsistency inference (2007) Proceedings of the Conference on Programming Language Design and Implementation, , June; Li, Z., Tan, L., Wang, X., Lu, S., Zhou, Y., Zhai, C., Have things changed now?: An empirical study of bug characteristics in modern open source software (2006) ASID '06: Proceedings of the 1st workshop on Architectural and system support for improving software dependability, pp. 25-33. , New York, NY, USA, ACM Press; O'Callahan, R., (2006) Static analysis and scary headlines, , http://weblogs-mozillazine-org.luisamigo.proxybk.com/roc/archives/2006/09/ static_analysis_and_scar_head.html, September; Rutar, N., Almazan, C.B., Foster, J.S., A comparison of bug finding tools for java (2004) ISSRE '04: Proceedings of the 15th International Symposium on Software Reliability Engineering (ISSRE'04), pp. 245-256. , Washington, DC, USA, IEEE Computer Society; Spacco, J., Hovemeyer, D., Pugh, W., Tracking defect warnings across versions (2006) MSR '06: Proceedings of the 2006 international workshop on Mining software repositories, pp. 133-136. , New York, NY, USA, ACM Press; Wagner, S., Deissenboeck, F., Wimmer, M.A.J., Schwalb, M., An evaluation of bug pattern tools for java (2007), January, unpublished; Wagner, S., Jurjens, J., Koller, C., Trischberger, P., Comparing bug finding tools with reviews and tests (2005) Proc. 17th International Conference on Testing of Communicating Systems, pp. 40-55; Zitser, M., Lippmann, R., Leek, T., Testing static analysis tools using exploitable buffer overflows from open source code (2004) SIGSOFT '04/FSE-12: Proceedings of the 12th ACM SIGSOFT twelfth international symposium on Foundations of software engineering, pp. 97-106. , New York, NY, USA, ACM Press},
correspondence_address1={Ayewah, N.; Univ. of MarylandUnited States; email: ayewah@cs.umd.edu},
sponsors={ACM Special Interest Group on Programming Languages; ACM Special Interest Group on Software Engineering},
address={San Diego, CA},
isbn={1595935959; 9781595935953},
language={English},
abbrev_source_title={ACM SIGPLAN SIGSOFT Workshop Program Anal Software Tools Eng},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Tain2007,
author={Tain, L.-L. and Liang, W. and Li, L.-M. and Mai, H.-C.},
title={Three-dimensional finite element initial analysis on the structure defect restoration of mandibular first molar under static and impact loads},
journal={Hua xi kou qiang yi xue za zhi = Huaxi kouqiang yixue zazhi = West China journal of stomatology},
year={2007},
volume={25},
number={6},
pages={595-8, 602},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84930410729&partnerID=40&md5=299eb57a5c20ca60089ec6f86fc1212c},
affiliation={Dept of Stomatology, Cina-Japan Friendship Hospital, Beijing, 100029, China},
abstract={OBJECTIVE: To make a mechanical analysis on three-dimensional finite element models of the mandibular first molar with the maximum distal occlusal (DO) structure defect after the root canal therapy and filling and crown restoration under static and impact loads and to provide a guideline for planning restoration for the clinic.
METHODS: The research adopted reverse engineering technology to build the model of three-dimensional finite element. The form of the intercuspal occlusion and cusp to cusp occlusion during the circulation of posterior teeth occlusion movement were simulated. Half-sine pulse/impact was chosen for the impact dynamic. The impact ratio was indicated to the stress change between impact loads and static loads.
RESULTS: Under the two kinds of loads, the maximum Mohr stress values of the metal crowns were shown in all models. The restoration effects between the two kinds of models were compared, the maximum Mohr stress value of the crown metal and dentin was not obviously difference. The maximum Mohr stress values of dentin were all obviously smaller than the stretch limit strength of dentin. The impact ratio closed to 1.
CONCLUSION: The impact loads accorded with the oral actual situation more than the static loads, but the suitable analysis of the static loads could be accepted. The restoration of metal crown is necessary. The effects between the amalgam filling and full crown restoration and composite resin filling and full crown restoration is not difference obviously.},
keywords={resin, dentin;  finite element analysis;  human;  molar tooth;  tooth crown, Composite Resins;  Crowns;  Dentin;  Finite Element Analysis;  Humans;  Molar},
chemicals_cas={Composite Resins},
issn={10001182},
pubmed_id={18306635},
language={Chinese},
abbrev_source_title={Hua Xi Kou Qiang Yi Xue Za Zhi},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Sherriff2007276,
author={Sherriff, M. and Heckman, S.S. and Lake, M. and Williams, L.},
title={Identifying fault-prone files using static analysis alerts through singular value decomposition},
journal={Proceedings of the 2007 Conference of the Center for Advanced Studies on Collaborative Research, CASCON '07},
year={2007},
pages={276-279},
doi={10.1145/1321211.1321247},
note={cited By 4; Conference of 2007 Conference of the Center for Advanced Studies on Collaborative Research, CASCON '07 ; Conference Date: 22 October 2007 Through 25 October 2007;  Conference Code:80613},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-77953582287&doi=10.1145%2f1321211.1321247&partnerID=40&md5=0a700a0da17bfe1817447f2136bbf52f},
affiliation={IBM, 3901 S. Miami Blvd., Durham, NC, United States; NC State University, 890 Oval Dr., Raleigh, NC, United States; Computer Science Department, NC State University, United States},
abstract={Static analysis tools tend to generate more alerts than a development team can reasonably examine without some form of guidance. In this paper, we propose a technique for leveraging field failures and historical change records to determine which sets of alerts are often associated with a field failure using singular value decomposition. We performed a case study on six major components of an industrial software system at IBM over six builds spanning eighteen months of development. Our technique identified fourteen alert types that comprised sets of alerts that could identify, on average, 45% of future fault-prone files and up to 65% in some instances. Copyright © 2007 Mark Sherriff, Sarah Smith Heckman, Mike Lake, Laurie Williams, and IBM Corp.},
keywords={Fault-prone files;  Field failure;  Historical changes;  Industrial software, Research;  Static analysis;  Statistical process control, Singular value decomposition},
references={Chess, B., West, J., (2007) Secure Programming with Static Analysis, , Upper Saddle River, NJ: Addison-Wesley; (1990) IEEE Standard 610.12-1990, IEEE Standard Glossary of Software Engineering Terminology, , IEEE},
correspondence_address1={Sherriff, M.; IBM, 3901 S. Miami Blvd., Durham, NC, United States; email: mark.sherriff@ncsu.edu},
sponsors={IBM Toronto Software Lab; IBM Centers for Advanced Studies (CAS)},
address={Richmond Hill, ON},
language={English},
abbrev_source_title={Proc. Conf. Center Adv. Stud. Collab. Res., CASCON},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Sherriff2007565,
author={Sherriff, M.S. and Heckman, S.S. and Lake, J.M. and Williams, L.A.},
title={Using groupings of static analysis alerts to identify files likely to contain field failures},
journal={6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2007},
year={2007},
pages={565-568},
doi={10.1145/1287624.1287711},
note={cited By 0; Conference of 6th Joint Meeting of the European Software Engineering Conference and the 14th ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2007 ; Conference Date: 3 September 2007 Through 7 September 2007;  Conference Code:70917},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-57149147239&doi=10.1145%2f1287624.1287711&partnerID=40&md5=9851273160d35521f5ea85b05159b3b4},
affiliation={NC State University, IBM, 890 Oval Drive, Raleigh, NC, United States; IBM, 3901 S. Miami Blvd., Durham, NC, United States; NC State University, 890 Oval Drive, Raleigh, NC, United States},
abstract={In this paper, we propose a technique for leveraging historical field failure records in conjunction with automated static analysis alerts to determine which alerts or sets of alerts are predictive of a field failure. Our technique uses singular value decomposition to generate groupings of static analysis alert types, which we call alert signatures, that have been historically linked to field failure-prone files in previous releases of a software system. The signatures can be applied to sets of alerts from a current build of a software system. Files that have a matching alert signature are identified as having similar static analysis alert characteristics to files with known field failures in a previous release of the system. We performed a case study involving an industrial software system at IBM and found three distinct alert signatures that could be applied to the system. We found that 50% of the field failures reported since the last static analysis run could be discovered by examining the 10% of the files and static analysis alerts indicated by these three alert signatures. The remaining failures were either not detected by a signature which could be an indication of a new type of error in the field, or they were on areas of the code where no static analysis alerts were detected. Copyright 2007 ACM.},
author_keywords={Field failures;  Singular value decomposition;  Static analysis},
keywords={Error analysis;  Failure analysis;  Predictive control systems;  Singular value decomposition;  Static analysis;  Computer software;  Quality assurance;  Software engineering;  Statistical process control, Field failure records;  Field failures;  Case studies;  Industrial softwares;  Singular values;  Software systems, Software engineering;  Safety engineering},
references={Chess, B., McGraw, G., Static Analysis for Security (2004) IEEE Security and Privacy, pp. 32-35. , November/December 2004 ed; (1990) IEEE Standard 610.12-1990, IEEE Standard Glossary of Software Engineering Terminology, , IEEE; Nagappan, N., Ball, T., Static Analysis Tools as Early Indicator of Pre-Release Defect Density (2005) International Conference on Software Engineering, pp. 580-586. , St. Louis, MO, USA; Nagappan, N., Ball, T., Static Analysis Tools as Early Indicators of Pre-Release Defect Density (2005) International Conference on Software Engineering (ICSE), , St. Louis, MO; Nagappan, N., Williams, L., Vouk, M., Hudepohl, J., Snipes, W., A Preliminary Investigation of Automated Software Inspection (2004) IEEE International Symposium on Software Reliability Engineering (ISSRE), pp. 429-439. , St. Malo, France; Osinski, S., Stefanowski, J., Weiss, D., Lingo: Search Results Clustering Algorithm Based on Singular Value Decomposition (2004) Advances in Soft Computing, Intelligent Information Processing and Web Mining, pp. 359-368. , Zakopane, Poland; Will, T., Introduction to the Singular Value Decomposition (1999) UW-La Crosse, 2006; Zheng, J., Williams, L., Nagappan, N., Snipes, W., Hudepohl, J., Vouk, M., On the Value of Static Analysis for Fault Detection in Software (2006) IEEE Transactions on Software Engineering, 32 (4), pp. 240-253. , April},
correspondence_address1={Sherriff, M.S.; NC State University, 890 Oval Drive, Raleigh, NC, United States; email: mssherri@ncsu.edu},
sponsors={ACM Special Interest Group on Software Engineering},
address={Dubrovnik},
isbn={9781595938114},
language={English},
abbrev_source_title={Joint Meet. Eur. Softw. Eng. Conf. ACM SIGSOFT Symp. Found. Softw. Eng.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Turhan2007231,
author={Turhan, B. and Bener, A.},
title={A multivariate analysis of static code attributes for defect prediction},
journal={Proceedings - International Conference on Quality Software},
year={2007},
pages={231-237},
doi={10.1109/QSIC.2007.4385500},
art_number={4385500},
note={cited By 38; Conference of 7th International Conference on Quality Software, QSIC 2007 ; Conference Date: 11 October 2007 Through 12 October 2007;  Conference Code:72503},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-46449116712&doi=10.1109%2fQSIC.2007.4385500&partnerID=40&md5=0d5b2d18b5c8b23382bf48c05336148d},
affiliation={Department of Computer Engineering, Bogazici University, 34342, Bebek, Istanbul, Turkey},
abstract={Defect prediction is important in order to reduce test times by allocating valuable test resources effectively. In this work, we propose a model using multivariate approaches in conjunction with Bayesian methods for defect predictions. The motivation behind using a multivariate approach is to overcome the independence assumption of univariate approaches about software attributes. Using Bayesian methods gives practitioners an idea about the defectiveness of software modules in a probabilistic framework rather than the hard classification methods such as decision trees. Furthermore the software attributes used in this work are chosen among the static code attributes that can easily be extracted from source code, which prevents human errors or subjectivity. These attributes are preprocessed with feature selection techniques to select the most relevant attributes for prediction. Finally we compared our proposed model with the best results reported so far on public dataseis and we conclude that using multivariate approaches can perform better. ©2007 IEEE.},
author_keywords={Defect prediction;  Naïve bayes;  Software metrics},
keywords={Bayesian networks;  Codes (standards);  Codes (symbols);  Decision making;  Decision theory;  Decision trees;  Errors;  Forecasting;  Multivariant analysis;  Random variables;  Regression analysis;  Static analysis;  Testing, Bayesian methods;  defect prediction;  Feature selection (FS);  Hard classification;  Human errors;  In order;  Independence assumption;  international conferences;  Multivariate Analysis (MVA);  Probabilistic frameworks;  quality software;  software modules;  Source coding;  Static codes;  Univariate, Computer software selection and evaluation},
references={Alpaydin, E., (2004) Introduction to Machine Learning, , The MIT Press, October; Ceylan, E., Kutlubay, F.O., Bener, A.B., Software defect identification using machine learning techniques (2006) Proceedings of the 32nd EUROMICRO Conference on Software Engineering and Advanced Applications, pp. 240-247. , IEEE Computer Society, Washington, DC, USA; Cohen, P.R., (1995) Empirical Methods for Artificial Intlligence, , The MIT Press, London, England; Cox, T., Cox, M., (1994) Multidimensional Scaling, , Chapman & Hall, London; V. de Silva and J. B. Tenenbaum, Global versus local methods in nonlinear dimensionality reduction, In S. Becker, S. Thrun, and K. Obermayer, editors, Advances in Neural Information Processing Systems, 15, MIT Press, Cambridge, MA, 2003, pp. 705-712; Fenton, N.E., Neil, M., A critique of software defect prediction models (1999) IEEE Transactions, on Software. Engineering, 25 (5), pp. 675-689; Guyon and Elisseff, An introduction to variable and feature selection, Journal of Machine Learning Research, 3, 2003, pp 1157-1182; Khoshgoftaar, T.M., Munson, J.C., Predicting software development errors using software complexitymetrics (1990) IEEE Journal on Selected Areas in Communications, 8 (2), pp. 253-261. , Feb; Lee, J.A., Lendasse, A., Donckers, N., Verleysen, M., A robust nonlinear projection method (2000) Proceedings of ESANN 2000, European Symposium on Artificial Neural Networks, pp. 13-20. , Bruges Belgium; Menzies, T., Greenwald, J., Frank, A., Data mining static code attributes to learn defect predictors (2007) IEEE Transactions on Software Engineering, 33 (1), pp. 2-13; Munson, J., Khoshgoftaar, Y.M., Regression modelling of software quality: Empirical investigation (1990) J. Electron. Mater, 19 (6), pp. 106-114; NASA/WVU IV&V Facility, Metrics Data Program, , http://mdp-iw-nasa-gov.luisamigo.proxybk.com, available from; Neil, M., Multivariate assessment of software products (1992) Softw. Test., Verif. Reliab, 1 (4), pp. 17-37; Neumann, D.E., An enhanced neural network technique for software risk analysis, IEEE Tranactions on (2002) Software Engineering, 28 (9), pp. 904-912; G. Boetticher, T. Menzies and T. Ostrand, PROMISE Repository of empirical software engineering data http://promisedata-org.luisamigo.proxybk.com/repository, West Virginia University, Department of Computer Science, 2007; Tenenbaum, J.B., de Silva, V., Langford, J.C., A global geometric framework for nonlinear dimensionality reduction (2000) Science, 290, pp. 2319-2323; Wolpert, D.H., Macready, W.G., No free lunch theorems for optimization (1997) IEEE Transactions on Evolutionary Computation, 1 (1), pp. 67-82. , April},
correspondence_address1={Turhan, B.; Department of Computer Engineering, , 34342, Bebek, Istanbul, Turkey; email: turhanb@boun.edu.tr},
sponsors={The University of Hong Kong, Hong Kong},
address={Portland, OR},
issn={15506002},
isbn={0769530354; 9780769530352},
language={English},
abbrev_source_title={Proc. Int. Conf. Qual. Softw.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Sherriff2007565,
author={Sherriff, M.S. and Heckman, S.S. and Lake, J.M. and Williams, L.A.},
title={Using groupings of static analysis alerts to identify files likely to contain field failures},
journal={ESEC/FSE'07: 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering - Companion Papers},
year={2007},
pages={565-568},
doi={10.1145/1295014.1295042},
note={cited By 4; Conference of ESEC/FSE'07: 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering ; Conference Date: 3 September 2007 Through 7 September 2007;  Conference Code:71638},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-37849005779&doi=10.1145%2f1295014.1295042&partnerID=40&md5=d992d4263f90b70a28a26401dc97839b},
affiliation={NC State University, IBM 890 Oval Drive, Raleigh, NC, United States; IBM, 3901 S. Miami Blvd., Durham, NC, United States; NC State University, 890 Oval Drive, Raleigh, NC, United States},
abstract={In this paper, we propose a technique for leveraging historical field failure records in conjunction with automated static analysis alerts to determine which alerts or sets of alerts are predictive of a field failure. Our technique uses singular value decomposition to generate groupings of static analysis alert types, which we call alert signatures, that have been historically linked to field failure-prone files in previous releases of a software system. The signatures can be applied to sets of alerts from a current build of a software system. Files that have a matching alert signature are identified as having similar static analysis alert characteristics to files with known field failures in a previous release of the system. We performed a case study involving an industrial software system at IBM and found three distinct alert signatures that could be applied to the system. We found that 50% of the field failures reported since the last static analysis run could be discovered by examining the 10% of the files and static analysis alerts indicated by these three alert signatures. The remaining failures were either not detected by a signature which could be an indication of a new type of error in the field, or they were on areas of the code where no static analysis alerts were detected. © 2007 ACM.},
author_keywords={Field failures;  Singular value decomposition;  Static analysis},
keywords={Singular value decomposition;  Static analysis, Alert signatures;  Field failures, Software testing},
references={Chess, B., McGraw, G., Static Analysis for Security (2004) IEEE Security and Privacy, pp. 32-35. , November/December 2004 ed; (1990) IEEE Standard 610.12-1990, IEEE Standard Glossary of Software Engineering Terminology, , IEEE; Nagappan, N., Ball, T., Static Analysis Tools as Early Indicator of Pre-Release Defect Density (2005) International Conference on Software Engineering, pp. 580-586. , St. Louis, MO, USA; Nagappan, N., Ball, T., Static Analysis Tools as Early Indicators of Pre-Release Defect Density (2005) International Conference on Software Engineering (ICSE), , St. Louis, MO; Nagappan, N., Williams, L., Vouk, M., Hudepohl, J., Snipes, W., A Preliminary Investigation of Automated Software Inspection (2004) IEEE International Symposium on Software Reliability Engineering (ISSRE), pp. 429-439. , St. Malo, France; Osinski, S., Stefanowski, J., Weiss, D., Lingo: Search Results Clustering Algorithm Based on Singular Value Decomposition (2004) Advances in Soft Computing, Intelligent Information Processing and Web Mining, pp. 359-368. , Zakopane, Poland; Will, T., Introduction to the Singular Value Decomposition (1999) UW-La Crosse, 2006; Zheng, J., Williams, L., Nagappan, N., Snipes, W., Hudepohl, J., Vouk, M., On the Value of Static Analysis for Fault Detection in Software (2006) IEEE Transactions on Software Engineering, 32 (4), pp. 240-253. , April},
correspondence_address1={Sherriff, M. S.; NC State University, IBM 890 Oval Drive, Raleigh, NC, United States; email: mssherri@ncsu.edu},
sponsors={The Council of European Professional Informatics Societies, CEPIS; ACM Special Interest Group on Software Engineering, SIGSOFT},
address={Dubrovnik},
isbn={9781595938121},
language={English},
abbrev_source_title={ESEC/FSE: Joint Meeting Eur. Softw. Eng. Conf. ACM SIGSOFT Symp. Found. Eng. - Companion Papers},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Heckman200789,
author={Heckman, S.S.},
title={Adaptive probabilistic model for ranking code-based static analysis alerts},
journal={Proceedings - International Conference on Software Engineering},
year={2007},
pages={89-90},
doi={10.1109/ICSECOMPANION.2007.16},
art_number={4222694},
note={cited By 2; Conference of 29th International Conference on Software Engineering, ICSE 2007 ; Conference Date: 20 May 2007 Through 26 May 2007;  Conference Code:70209},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-34548714120&doi=10.1109%2fICSECOMPANION.2007.16&partnerID=40&md5=3212fd6b7c0df58ec0a112d692b269ce},
affiliation={North Carolina State University, Campus Box 8206, Raleigh, NC 27695},
abstract={Software engineers tend to repeat mistakes when developing software. Automated static analysis tools can detect some of these mistakes early in the software process. However, these tools tend to generate a significant number of false positive alerts. Due to the need for manual inspection of alerts, the high number of false positives may make an automated static analysis tool too costly to use. In this research, we propose to rank alerts generated from automated static analysis tools via an adaptive model that predicts the probability an alert is a true fault in a system. The model adapts based upon a history of the actions the software engineer has taken to either filter false positive alerts or fix true faults. We hypothesize that by providing this adaptive ranking, software engineers will be more likely to act upon highly ranked alerts until the probability that remaining alerts are true positives falls below a subjective threshold. © 2007 IEEE.},
keywords={Adaptive systems;  Automatic test pattern generation;  Probability distributions;  Static analysis, Adaptive probabilistic models;  Adaptive ranking;  Automated static analysis tools;  False positive alerts, Software engineering},
references={Csallner, C., Smaragdakis, Y., Check 'n' Crash: Combining Static Checking and Testing (2005) 27th International Conference on Software Engineering, pp. 422-431. , St. Louis, MO, USA; Hovemeyer, D., Pugh, W., Finding Bugs is Easy (2004) 19th ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications, pp. 132-136. , Vancouver, British Columbia, Canada; Kremenek, T., Ashcraft, K., Yang, J., Engler, D., Correlation Exploitation in Error Ranking (2004) 12th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 83-93. , Newport Beach, CA, USA; Wagner, S., Jrjens, J., Koller, C., Trischberger, P., Comparing Bug Finding Tools with Reviews and Tests (2005) 17th International Conference on Testing of Communicating Systems, pp. 40-55},
correspondence_address1={Heckman, S.S.; North Carolina State University, , Raleigh, NC 27695; email: sarah_heckman@ncsu.edu},
sponsors={IEEE Computer Society Technical Council on Software Engineering; ACM Special Interest Group on Software Engineering, SIGSOFT},
address={Minneapolis, MN},
issn={02705257},
isbn={0769528929; 9780769528922},
coden={PCSED},
language={English},
abbrev_source_title={Proc Int Conf Software Eng},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Sagonas200737,
author={Sagonas, K.},
title={Detecting defects in Erlang programs using static analysis},
journal={PPDP'07: Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming},
year={2007},
pages={37},
doi={10.1145/1273920.1273926},
note={cited By 4; Conference of 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming, PPDP'07 ; Conference Date: 14 July 2007 Through 16 July 2007;  Conference Code:70106},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-34548071729&doi=10.1145%2f1273920.1273926&partnerID=40&md5=5f9ce70aed5f6750377a70e353f8e5d8},
affiliation={National Technical University of Athens, Greece},
abstract={This talk will review the main techniques used in the Dialyzer (Discrepancy AnaLYZer of ERlang programs) defect detection tool. Dialyzer employs various forms of static program analysis to automatically identify software errors in large applications written in Erlang, a concurrent functional language developed by Ericsson and commonly used for developing telecommunications software. Dialyzer is completely automatic, relatively fast, requires no annotations from its user to detect defects, and is exceptional in that it does not report any false positives. The heart of Dialyzer's analysis is inter-modular inference of success typings for Erlang functions and the talk will explain what success typings are and how they differ from type inference in statically typed language. Dialyzer, which nowadays is part of the Erlang/OTP (Open Telecom Platform) system, has been applied to large code bases of Erlang code and has identified a significant number of software defects that have remained unnoticed after years of extensive testing. The talk will also describe experiences and main lessons learned from Dialyzer's development and from feedback from its user community.},
author_keywords={Language;  Reliability;  Security;  Verification},
keywords={Computer programming languages;  Reliability theory;  Security of data;  User interfaces;  Verification, Erlang codes;  Open Telecom Platform, Computer aided software engineering},
correspondence_address1={Sagonas, K.; National Technical University of AthensGreece; email: kostis@cs.ntua.gr},
sponsors={ACM Special Interest Group on Programming Languages},
address={Wroclaw},
isbn={1595937692; 9781595937698},
language={English},
abbrev_source_title={Proc. Int. ACM SIGPLAN Conf. Princ. Pract. Declar. Program.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Marchenko2007137,
author={Marchenko, A. and Abrahamsson, P.},
title={Predicting software defect density: A case study on automated static code analysis},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2007},
volume={4536 LNCS},
pages={137-140},
doi={10.1007/978-3-540-73101-6_18},
note={cited By 6; Conference of 8th International Conference on Agile Processes in Software Engineering and eXtreme Programming, XP 2007 ; Conference Date: 18 June 2007 Through 22 June 2007;  Conference Code:70864},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-38149037259&doi=10.1007%2f978-3-540-73101-6_18&partnerID=40&md5=aa7ddad3e147ae9225bd1a5a666b6200},
affiliation={Nokia, Hatanpäänkatu 1, FIN-33100 Tampere, Finland; VTT Technical Research Centre of Finland, P.O. Box 1100, FIN-90571 Oulu, Finland},
abstract={The number of defects is an important indicator of software quality. Agile software development methods put an explicit requirement on automation and permanently low defect rates. Code analysis tools are seen as a prominent way to facilitate the defect prediction. There are only few studies addressing the feasibility of predicting a defect rate with the help of static code analysis tools in the area of embedded software. This study addresses the usefulness of two selected tools in the Symbian C++ environment. Five projects and 137 KLOC of the source code have been processed and compared to the actual defect rate. As a result a strong positive correlation with one of the tools was found. It confirms the usefulness of a static code analysis tool as a way for estimating the amount of defects left in the product. © Springer-Verlag Berlin Heidelberg 2007.},
author_keywords={Agile software development;  Automation;  Case study;  Defect estimation;  Embedded software;  Quality;  Static code analysis},
keywords={Automation;  C (programming language);  Codes (symbols);  Embedded systems, Agile software development;  Defect estimation;  Embedded software;  Static code analysis, Software engineering},
references={Reel, J.S., Critical success factors in software projects. Software (1999) IEEE, 16 (3), pp. 18-23; Fenton, N.E., Neil, M., A critique of software defect prediction models. Software Engineering (1999) IEEE Transactions on, 25 (5), pp. 675-689; Chess, B., McGraw, G., Static analysis for security (2004) Security & Privacy Magazine, 2 (6), pp. 76-79. , IEEE; Dromey, R.G., Concerning the Chimera [software quality]. Software (1996) IEEE, 13 (1), pp. 33-43; Nachiappan, N., Thomas, B., Static analysis tools as early indicators of pre-release defect density (2005) Proceedings of the 27th international conference on Software engineering, , St. Louis, MO, USA; Lauesen, S., Younessi, H., Is software quality visible in the code. Software (1998) IEEE, 15 (4), pp. 69-73; Newsletter, S.O.C., Symbian, O.S., (2004) Community Newsletter, , http://developer-symbian-com.luisamigo.proxybk.com/main/ getstarted/newsletterarchive/newsletter31.jsp, October 19th, [cited 24 January] Available from: 2004; Donner, I., Computer-Related Inventions: When 'Obvious' is Not So Obvious (1995) Computer, 28 (2), pp. 78-79},
correspondence_address1={Marchenko, A.; Nokia, Hatanpäänkatu 1, FIN-33100 Tampere, Finland; email: artem.marchenko@nokia.com},
publisher={Springer Verlag},
address={Como},
issn={03029743},
isbn={9783540731009},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Gegick200718,
author={Gegick, M. and Williams, L.},
title={Toward the use of automated static analysis alerts for early identification of vulnerability- and attack-prone components},
journal={Second International Conference on Internet Monitoring and Protection, ICIMP 2007},
year={2007},
pages={18},
doi={10.1109/ICIMP.2007.46},
art_number={4271764},
note={cited By 15; Conference of 2nd International Conference on Internet Monitoring and Protection, ICIMP 2007 ; Conference Date: 1 July 2007 Through 5 July 2007;  Conference Code:70428},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-35348918737&doi=10.1109%2fICIMP.2007.46&partnerID=40&md5=a547c03443ac23ce32a2548754ee4bf9},
affiliation={Department of Computer Science, North Carolina State University, United States},
abstract={Extensive research has shown that software metrics can be used to identify fault- and failure-prone components. These metrics can also give early indications of overall software quality. We seek to parallel the identification and prediction of fault- and failure-prone components in the reliability context with vulnerability- and attack-prone components in the security context. Our research will correlate the quantity and severity of alerts generated by source code static analyzers to vulnerabilities discovered by manual analyses and testing. A strong correlation may indicate that automated static analyzers (ASA), a potentially early technique for vulnerability identification in the development phase, can identify high risk areas in the software system. Based on the alerts, we may be able to predict the presence of more complex and abstract vulnerabilities involved with the design and operation of the software system. An early knowledge of vulnerability can allow software engineers to make informed risk management decisions and prioritize redesign, inspection, and testing efforts. This paper presents our research objective and methodology. © 2007 IEEE.},
keywords={Automation;  Computer crime;  Identification (control systems);  Risk analysis;  Software design;  Static analysis, Automated static analyzers (ASA);  Software engineers;  Software metrics;  Software quality, Fault tolerant computer systems},
references={Basili, V.R., Briand, L.C., Melo, W.L., A Validation of Object Orient Design Metrics as Quality Indicators (1996) IEEE Transactions on Software Engineering, 21, pp. 751-761; Boehm, B.W., (1981) Software Engineering Economics, , Englewood Cliffs, NJ: Prentice-Hall, Inc; Briand, L.C., Wust, J., Lounis, H., Investigating Quality Factors in Object-Oriented Designs: An Industrial Case Study (1998) ISERN-98-29; Chandra, P., Chess, B., Steven, J., Putting the Tools to Work: How to Succeed with Source Code Analysis (2006) IEEE Security & Privacy, 4, pp. 80-83; Chess, B., Improving Computer Security using Extended Static Checking (2002) IEEE Symposium on Security and Privacy, pp. 160-173. , Berkeley, CA; Chess, B., McGraw, G., Static Analysis for Security (2004) IEEE Security and Privacy, 2, pp. 76-79; Denaro, G., Morasca, S., Popek, G., Deriving models of software fault-proneness International Conference on Software Engineering and Knowledge Engineering, pp. 361-368; Denaro, G., Polini, A., Emmerich, W., Early Performance Testing of Distributed Software Applications (2004) Workshop on Software and Performance, pp. 94-103. , Redwood Shores, California; Dowd, M., McDonald, J., Schuh, J., (2007) The Art of Software Security Assessment: Identifying and Preventing Software Vulnerabilities, , Boston, MA: Addison-Wesley; El Emam, K., Benlarbi, S., Goel, N., Rai, S.N., The Confounding Effect of Class Size on the Validity of Object-Oriented Metrics (2001) IEEE Trans. Software Eng, 27, pp. 630-650. , July; Gyimothy, T., Ference, R., Siket, L., Empirical Validation of Object-Oriented Metrics on Open Source Software for Fault Prediction (2005) IEEE Trans. Software Eng, 31, pp. 897-910. , Oct; Hochman, R., Khoshgoftaar, T.M., Allen, E.B., Hudepohl, J., Evolutionary Neural Networks: A Robust Approach to Software Reliability Problems (1997) Eighth Int'l Symp. Software Reliability Eng, pp. 13-26; Hochman, R., Khoshgoftaar, T.M., Allen, E.B., Hudepohl, J., Using the Genetic Algorithm to Build Optimal Neural Networks for Fault-Prone Model Detection (1996) Seventh Int'l Symp. Software Reliability Eng, p. 152162; Howard, M., LeBlanc, D., (2003) Writing Secure Code, , Redmond, WA: Microsoft Press; Hudepohl, J., Aud, S.J., Khoshgoftaar, T., Allen, E.B., Mayrand, J., Emerald: Software Metrics and Models on the Desktop (1996) IEEE Software, 13, pp. 56-59. , September; Hudepohl, J., Jones, W., Lague, B., EMERALD: A Case Study in Enhancing Software Reliability (1997) Eighth International Symposium on Software Reliability Engineering (Case Studies), pp. 85-91. , Albuquerque, New Mexico; (1990) IEEE Standard 610.12-1990, IEEE Standard Glossary of Software Engineering Terminology, , IEEE; Khoshgoftaar, T.M., Allen, E.B., Deng, J., Using Regression Trees to Classify Fault-Prone Software Modules (2002) IEEE Transactions on Reliability, 51, pp. 455-562. , December; Khoshgoftaar, T.M., Allen, E.B., Goel, N., Nandi, A., McMullan, J., Detection of Software Modules with High Debug Code Chum in a Very Large Telecommunications System (1996) International Sympoisum on Software Reliability Engineering, pp. 364-371. , White Plains, NY; Khoshgoftaar, T.M., Allen, E.B., Hudepohl, J.P., Aud, S.J., Applications of Neural Networks to Software Quality Modeling of a Very Large Telecommunications System (1997) Trans. Neural Networks, 8, pp. 902-909; Khoshgoftaar, T.M., Allen, E.B., Hudepohl, J.P., Jones, W., Classification Tree Models of Software Quality over Multiple Releases (1999) 10th Int'l Symp. Software Reliability Engineering, pp. 116-125; Khoshgoftaar, T.M., Allen, E.B., Kalaichelvan, K.S., Goel, N., Hudepohl, J.P., Mayrand, J., Detection of faultprone program modules in a very large telecommunications system (1995) IEEE International Symposium on Software Reliability Engineering, pp. 24-33. , Toulouse, France; Khoshgoftaar, T.M., Allen, E.B., Naik, A., Jones, W., Hudepohl, J.P., Using Classification Trees for Software Quality Models: Lessons Learned (1999) Int'l J. Software Eng. and Knowledge Eng, 9, pp. 2127-2231; Khoshgoftaar, T.M., Munson, J.C., Predicting Software Development Errors using Software Complexity Metrics (1990) EEE Journal on Selected Areas in Communications, 8, pp. 253-261; I. Krsul, Software Vulnerability Analysis, in Computer Science, PhD West Lafayette: Purdue University, 1998; McGraw, G., (2006) Software Security: Building Security In, , Boston: Addison-Wesley; Menzies, T., Greenwald, J., Frank, A., Data Mining Static Code Attributes to Learn Defect Predictors (2007) IEEE Trans. Software Eng, 33, pp. 2-13; Munson, J., Khoshgoftaar, T., The Detection of Fault-Prone Programs (1992) IEEE Transactions on Software Engineering, 18, pp. 423-433; Nagappan, N., A Software Testing and Reliability Early Warning (STREW) Metric Suite (2005) Computer Science, , Raleigh, NC: North Carolina State University; Nagappan, N., Ball, T., Static Analysis Tools as Early Indicators of Pre-release Defect Density (2005) International Conference on Software Engineering, pp. 580-586. , St. Louis, MO; Nagappan, N., Ball, T., Murphy, B., Using Historical In-Process and Product Metrics for Early Estimation of Software Failures (2006) International Symposium on Software Reliability Engineering, pp. 62-74. , Raleigh, NC; Nagappan, N., Williams, L., A Software Reliability Estimation Framework for Extreme Programming (2003) International Symposium on Software Reliability Engineering (ISSRE) Student Paper, , Denver, CO; N. Nagappan, L. Williams, J. Osborne, M. Vouk, and P. Abrahamsson, Providing Test Quality Feedback Using Static Source Code and Automatic Test Suite Metrics, in Chicago, IL, International Symposium on Software Reliability Engineering (ISSRE) 2005, 2005, pp. 85-94; Nagappan, N., Williams, L., Vouk, M., Initial Results of Using In-Process Testing Metrics to Estimate Software Reliability (2004) North Carolina State Department of Computer Science CSC TR-2004-5, , January 25; Nagappan, N., Williams, L., Vouk, M., Hudepohl, J., Snipes, W., A Preliminary Investigation of Automated Software Inspection (2004) IEEE International Symposium on Software Reliability Engineering, pp. 429-439. , St. Malo, France; Nagappan, N., Williams, L., Vouk, M., Osborne, J., Using In-Process Testing Metrics to Estimate Software Reliability: A Feasibility Study (2004) Fast Abstract at the International Symposium on Software Reliability Engineering (ISSRE) 2004, pp. 21-22. , St. Malo, France; Nagappan, N., Williams, L., Vouk, M.A., Towards a Metric Suite for Early Software Reliability Assessment (2003) International Symposium on Software Reliability Engineering Fast Abstract, , Denver, CO; Ostrand, T.J., Weyuker, E.J., Bell, R.M., Where the bugs are (2004) International Symposium on Software Testing and Analysis, pp. 86-96. , Boston, Massachusetts; Subramanyam, R., Krishnan, M.S., Empirical Analysis of CK Metrics for Object-Oriented Design Complexity: Implications for Software Defects (2003) IEEE Transactions on Software Engineering, 29, pp. 297-310. , April; Voas, J., Ghosh, A., McGraw, G., Charron, F., Miller, K., Defining an Adaptive Software Security Metric from a Dynamic Software Failure Tolerance Measure (1996) COMPASS '96, pp. 250-263. , Gaithersburg, MD; Wysopal, C., Nelson, L., Dai Zovi, D., Dustin, E., (2006) The Art of Software Security Testing: Identifying Software Security Flaws, , Boston: Addison Wesley; Zheng, J., Williams, L., Snipes, W., Nagappan, N., Hudepohl, J., Vouk, M., On the Value of Static Analysis Tools for Fault Detection (2006) IEEE Transactions on Software Engineering, 32, pp. 240-253; Zhou, Y., Hareton, L., Empirical Analysis of Object-Oriented Design Metrics for Predicting High and Low Severity Faults (2006) IEEE Transactions on Software Engineering, 32, pp. 771-789. , October},
correspondence_address1={Gegick, M.; Department of Computer Science, United States; email: mcgegick@ncsu.edu},
publisher={IEEE Computer Society},
address={San Jose, CA},
isbn={0769529119; 9780769529110},
language={English},
abbrev_source_title={Second Int. Conf. Internet Monitor. Prot.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Cole2006673,
author={Cole, B. and Hakim, D. and Hovemeyer, D. and Lazarus, R. and Pugh, W. and Stephens, K.},
title={Improving your software using static analysis to find bugs},
journal={Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications, OOPSLA},
year={2006},
volume={2006},
pages={673-674},
doi={10.1145/1176617.1176667},
art_number={1176667},
note={cited By 26; Conference of 21st Annual ACM SIGPLAN Conference on Object-oriented Programming Systems, Languages, and Applications, OOPSLA 2006 ; Conference Date: 22 October 2006 Through 26 October 2006;  Conference Code:69594},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-34248375660&doi=10.1145%2f1176617.1176667&partnerID=40&md5=3639144f2888797a24fc2aed692d18a3},
affiliation={Dept. of Computer Science, University of Maryland, College Park, MD 20742, United States; Dept. of Physical Science, York College of Pennsylvania, United States},
abstract={FindBugs looks for bugs in Java programs. It is based on the concept of bug patterns. A bug pattern is a code idiom that is often an error. Bug patterns arise for a variety of reasons, such as difficult language features, misunderstood API semantics, misunderstood invariants when code is modified during maintenance, garden variety mistakes: typos, use of the wrong boolean operator and simple mistakes such as typos.FindBugs uses static analysis to inspect Java bytecode for occurrences of bug patterns. We have found that FindBugs finds real errors in most Java software. Because its analysis is sometimes imprecise, FindBugs can report false warnings, which are warnings that do not indicate true errors. In practice, the rate of false warnings reported by FindBugs is generally lower than 50%, often much lower.},
author_keywords={FindBugs;  Java;  Static analysis},
keywords={Boolean operator;  Bug patterns;  Java bytecode, Boolean algebra;  Error analysis;  Java programming language;  Semantics;  Static analysis, Software engineering},
correspondence_address1={Cole, B.; Dept. of Computer Science, , College Park MD 20742, United States},
sponsors={ACM Special Interest Group on Programming Languages},
address={Portland, OR},
isbn={159593491X; 9781595934918},
language={English},
abbrev_source_title={Proc Conf Object Orient Program Syst Lang Appl OOPSLA},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Faiz20062004,
author={Faiz, J. and Pakdelian, S.},
title={Finite-element analysis of a switched reluctance motor under static eccentricity fault},
journal={IEEE Transactions on Magnetics},
year={2006},
volume={42},
number={8},
pages={2004-2008},
doi={10.1109/TMAG.2006.875997},
art_number={1661943},
note={cited By 29},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-33746891257&doi=10.1109%2fTMAG.2006.875997&partnerID=40&md5=000b0587f069212bcc564b213699652e},
affiliation={Centre of Excellence on Applied Electromagnetic Systems, Department of Electrical and Computer Engineering, University of Tehran, Tehran, Iran},
abstract={This paper describes a two-dimensional finite-element analysis of an 8/6 switched reluctance motor with static eccentricity. It describes the influence of the eccentricity on the static characteristics of the motor and shows how to obtain flux lines, flux density distribution, and the flux-linkage/rotor angular position characteristic of the motor in both healthy and faulty conditions, as well as the static torque profiles of phases for different degrees of eccentricity. It shows that, at low current, the effect of the eccentricity is considerable compared to that at the rated current. Fourier analysis of the torque profile is used to study the variations of static torque harmonic contents. © 2006 IEEE.},
author_keywords={Eccentricity;  Finite-element analysis;  Switched reluctance motor (SRM)},
keywords={Electric fault currents;  Harmonic analysis;  Magnetic flux;  Motors;  Rotors;  Switching systems;  Torque, Eccentricity;  Flux density distribution;  Static eccentricity faults;  Switched reluctance motor (SRM), Finite element method},
references={Husain, I., Radun, A., Nairus, J., Unbalanced force calculation in switched-reluctance machines (2000) IEEE Trans. Magn., 36 (1), pp. 330-338. , Jan; Sheth, N.K., Rajagopal, K.R., Effects of nonuniform airgap on the torque characteristics of a switched reluctance motor (2004) IEEE Trans. Magn., Pt. 2, 40 (4), pp. 2032-2034. , Jul; Miller, T.J.E., Faults and unbalance forces in the switched reluctance machine (1995) IEEE Trans. Ind. Appl., 31 (2), pp. 319-328. , Mar.-Apr; Chindurza, I., Dorrell, D.G., Cossar, C., Non-invasive fault diagnosis for switched-reluctance machines with incorrect winding turns, interturn winding faults and eccentric rotors (2003) Proc. Fifth Int. Conf. Power Electronics and Drive Systems, 1, pp. 485-490; Chindurza, I., Dorrell, D.G., Cossar, C., Vibration analysis of a switched-reluctance machine with eccentric rotor (2004) Proc. Second Int. Conf. Power Electronics, Machines, and Drives, , Conf. Publ. no. 498; Dorrell, D.G., Chindurza, I., Cossar, C., Effects of rotor eccentricity on torque in switched reluctance machines (2005) IEEE Trans. Magn., 41 (10), pp. 3961-3963. , Oct; Heidrich, P., Hanitsch, R., Simulation of a completely controlled switched reluctance drive with eccentric rotor using a time-stepping technique realized outside numerical field calculation programs (1996) IEEE Trans. Magn., Pt. 1, 32 (3), pp. 1565-1568. , May; Sheth, N.K., Rajagopal, K.R., Variations in overall developed torque of a switched reluctance motor with airgap nonuniformity (2005) IEEE Trans. Magn., 41 (10), pp. 3973-3975. , Oct},
correspondence_address1={Faiz, J.; Centre of Excellence on Applied Electromagnetic Systems, , Tehran, Iran; email: jfaiz@ut.ac.ir},
issn={00189464},
coden={IEMGA},
language={English},
abbrev_source_title={IEEE Trans Magn},
document_type={Article},
source={Scopus},
}

@ARTICLE{Zheng2006240,
author={Zheng, J. and Williams, L. and Nagappan, N. and Snipes, W. and Hudepohl, J.P. and Vouk, M.A.},
title={On the value of static analysis for fault detection in software},
journal={IEEE Transactions on Software Engineering},
year={2006},
volume={32},
number={4},
pages={240-253},
doi={10.1109/TSE.2006.38},
note={cited By 164},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-33646501895&doi=10.1109%2fTSE.2006.38&partnerID=40&md5=cf41ba20d947b214645cd870894a3c1d},
affiliation={Department of Computer Science, North Carolina State University, Raleigh, NC 27695, United States; Microsoft Research, Redmond, WA 98052, United States; Nortel Networks, Software Dependability Design (SWDD), Research Triangle Park, NC 27709, United States},
abstract={No single software fault-detection technique is capable of addressing all fault-detection concerns. Similarly to software reviews and testing, static analysis tools (or automated static analysis) can be used to remove defects prior to release of a software product. To determine to what extent automated static analysis can help in the economic production of a high-quality product, we have analyzed static analysis faults and test and customer-reported failures for three large-scale industrial software systems developed at Nortel Networks. The data indicate that automated static analysis is an affordable means of software fault detection. Using the Orthogonal Defect Classification scheme, we found that automated static analysis is effective at identifying Assignment and Checking faults, allowing the later software production phases to focus on more complex, functional, and algorithmic faults. A majority of the defects found by automated static analysis appear to be produced by a few key types of programmer errors and some of these types have the potential to cause security vulnerabilities. Statistical analysis results indicate the number of automated static analysis faults can be effective for identifying problem modules. Our results indicate static analysis tools are complementary to other fault-detection techniques for the economic production of a high-quality software product. © 2006 IEEE.},
author_keywords={Code inspections;  Walkthroughs},
keywords={High-quality software product;  Orthogonal defect classification scheme;  Software fault detection;  Static analysis, Algorithms;  Computational complexity;  Error detection;  Personnel;  Program debugging;  Program diagnostics;  Quality assurance;  Statistical methods, Computer aided software engineering},
funding_details={National Science FoundationNational Science Foundation, NSF, 0346903},
funding_text 1={The authors would like to thank the North Carolina State University (NCSU) Software Engineering reading group for their helpful suggestions on this paper. In particular, they would like to thank Michael Gegick for his help on the security aspects of this paper and Kiem Ngo for his help with data collection and for explaining aspects of the Nortel development process. This work was funded in part by a Nortel-funded NCSU Center for Advanced Computing and},
references={Ackerman, A.F., Buchwalk, L.S., Lewski, F.H., "Software Inspections: An Effective Verification Process" (1989) IEEE Software, 6 (3), pp. 31-36. , May; Basili, V., Caldiera, G., Rombach, D.H., "The Goal Question Metric Paradigm" (1994) Encyclopedia of Software Eng., 2, pp. 528-532; Basili, V.R., Green, S., Laitenberger, O., Lanubile, F., Shull, F., Sorumgard, S., Zelkowitz, M.V., "The Empirical Investigation of Perspective-Based Reading" (1996) Empirical Software Eng. - An Int'l J., 1 (2); Beizer, B., (1990) Software Testing Techniques, , London: Int'l Thompson Computer Press; Boehm, B.W., (1981) Software Engineering Economics, , Prentice-Hall; Chess, B., "Improving Computer Security Using Extended Static Checking" (2002) Proc. IEEE Symp. Security and Privacy, pp. 160-173; Chess, B., McGraw, G., "Static Analysis for Security" (2004) IEEE Security & Privacy, 2 (6), pp. 76-79; Chillarege, R., Bhandari, I.S., Chaar, J., Halliday, M.J., Moebus, D.S., Ray, B.K., Wong, M.Y., "Orthogonal Defect Classification - A Concept for In-Process Measurements" (1992) IEEE Trans. Software Eng., 18 (11), pp. 943-956. , Nov; Differding, C., Hoisl, B., Lott, C.M., "Technology Package for the Goal Question Metric Paradigm" (1996), Fraunhofer Inst. for Empirical Software Eng. Internal Report 261/96, Apr; Emam, K.E., Wieczorek, I., "The Repeatability of Code Defect Classifications" (1998) Proc. Ninth Int'l Symp. Software Reliability Eng., p. 322. , Nov; Fenton, N.E., Pfleeger, S.L., (1997) Software Metrics, , Boston: Int'l Thompson Publishing; Hochman, R., Khoshgoftaar, T.M., Allen, E.B., Hudepohl, J.P., "Using the Genetic Algorithm to Build Optimal Neural Networks for Fault-Prone Module Detection" (1996) Proc. Seventh Int'l Symp. Software Reliability Eng., pp. 152-162; Hochman, R., Khoshgoftaar, T.M., Allen, E.B., Hudepohl, J.P., "Evolutionary Neural Networks: A Robust Approach to Software Reliability Problems" (1997) Proc. Eighth Int'l Symp. Software Reliability Eng., pp. 13-26; Hovemeyer, D., Pugh, W., "Finding Bugs is Easy" (2004) Proc. Conf. Object Oriented Programming Systems Languages and Applications (OOSPLA) Companion, pp. 132-135; Humphrey, W.S., (1995) A Discipline for Software Engineering, , Addison Wesley; "IEEE Standard Glossary of Software Engineering Terminology" (1990), IEEE, IEEE Standard 610.12-1990; "IEEE Standard Classification for Software Anomalies" (1993), IEEE, IEEE Standard 1044-1993; Jones, C., "Software Defect Removal Efficiency" (1996) Computer, 29 (4), pp. 94-95. , Apr; Jones, C., (2000) Software Assessments, Benchmarks, and Best Practices, , Addison-Wesley, May; Kelly, D., Shepard, T., "A Case Study in the Use of Defect Classification in Inspections" (2001) Proc. IBM Centre for Advanced Studies Conf., pp. 7-90; Khoshgoftaar, T.M., Allen, E.B., Hudepohl, J.P., Aud, S.J., "Application of Neural Networks to Software Quality Modeling of a Very Large Telecommunications System" (1997) Trans. Neural Networks, 8 (4), pp. 902-909; Khoshgoftaar, T.M., Allen, E.B., Hudepohl, J.P., Jones, W., "Classification Tree Models of Software Quality over Multiple Release" (1999) Proc. 10th Int'l Symp. Software Reliability Eng., pp. 116-125; Khoshgoftaar, T.M., Allen, E.B., Kalaichelvan, K.S., Goel, N., Hudepohl, J.P., Maynard, J., "Detection of Fault-Prone Program Modules in a Very Large Telecommunications System" (1995) Proc. Sixth Int'l Symp. Software Reliability Eng., pp. 24-33; Khoshgoftaar, T.M., Allen, E.B., Naik, A., Jones, W., Hudepohl, J.P., "Using Classification Trees for Software Quality Models: Lessons Learned" (1999) Int'l J. Software Eng. and Knowledge Eng., 9 (2), pp. 217-231; Khoshgoftaar, T.M., Munson, J.C., "The Lines of Code Metric as a Predictor or Program Faults: A Critical Analysis" (1990) Proc. 14th Computer Software and Applications. Conf. (COMPSAC), pp. 408-413; Khoshgoftaar, T.M., Munson, J.C., Lanning, D.L., "A Comparative Study of Predictive Models for Program Changes During System Testing and Maintenance" (1993) Proc. Ninth Int'l Conf. Software Maintenance, pp. 72-79; Kikuchi, N., Kikuno, T., "Improving the Testing Process by Program Static Analysis" (2001) Proc. Asia-Pacific Software Eng. Conf. (APSEC), pp. 195-201; Larus, J.R., Ball, T., Das, M., Deline, R., Fahndrich, M., Pincus, J., Rajamani, S.K., Venkatapathy, R., "Righting Software" (2004) IEEE Software, 21 (3), pp. 92-100; Munson, J.C., Khoshgoftaar, T.M., "Regression Modelling of Software Quality: Empirical Investigation" (1990) Information and Software Technology, 32 (2), pp. 106-114; Munson, J.C., Khoshgoftaar, T.M., "The Detection of Fault-Prone Programs" (1992) IEEE Trans. Software Eng., 18 (5), pp. 423-433. , May; Nagappan, N., Ball, T., "Static Analysis Tools as Early Indicators of Pre-Release Defect Density" (2005) Proc. Int'l Conf. Software Eng. (ICSE), pp. 580-586; Nagappan, N., Williams, L., Vouk, M., Hudepohl, J., Snipes, W., "A Preliminary Investigations of Automated Software Inspection" (2004) Proc. IEEE Int'l Symp. Software Reliability Eng. (ISSRE), pp. 429-439; Osterweil, L., "Integrating the Testing, Analysis, and Debugging of Programs" (1984) Proc. Symp. Software Validation; Porter, A.A., Johnson, P.M., "Assessing Software Review Meetings: Results of a Comparative Analysis of Two Experimental Studies" (1997) IEEE. Trans. Software Eng., 23 (3), pp. 129-145; "Automated Software Inspection: A New Approach to Increase Software Quality and Productivity" (2003), http://www-reasoning-com.luisamigo.proxybk.com/pdf/ASI.pdf, Reasoning Inc; Rus, I., Shull, F., Donzelli, P., "Decision Support for Using Software Inspections" (2003) Proc. 28th Ann. NASA Goddard Software Eng. Workshop, p. 11; Rutar, N., Almazan, C.B., Foster, J.S., "A Comparison of Bug Finding Tools for Java" (2004) Proc. IEEE Int'l Symp. Software Reliability Eng. (ISSRE), pp. 245-256; Schneider, G.M., Martin, J., Tsai, W.T., "An Experimental Study of Fault Detection in User Requirements Documents" (1992) ACM Trans. Software Eng. and Methodology, 1 (2), pp. 188-204. , Apr; Travassos, G.H., Shull, F., Fredericks, M., Basili, V.R., "Detecting Defects in Object Oriented Designs: Using Reading Techniques to Improve Software Quality" (1999) Proc. Conf. Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA), pp. 47-56. , Nov; Young, M., Taylor, R.N., "Rethinking the Taxonomy of Fault Detection Techniques" (1989) Proc. Int'l Conf. Software Eng., pp. 53-62},
correspondence_address1={Zheng, J.; Department of Computer Science, , Raleigh, NC 27695, United States; email: jzheng4@ncsu.edu},
issn={00985589},
coden={IESED},
language={English},
abbrev_source_title={IEEE Trans Software Eng},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Slember2006,
author={Slember, J.G. and Narasimhan, P.},
title={Static analysis meets distributed fault-tolerance: Enabling state-machine replication with nondeterminism},
journal={Proceedings of the 2nd Workshop on Hot Topics in System Dependability, HotDep 2006},
year={2006},
note={cited By 5; Conference of 2nd Workshop on Hot Topics in System Dependability, HotDep 2006 ; Conference Date: 8 November 2006;  Conference Code:163341},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84946110545&partnerID=40&md5=f20d45511b93e4edd4fc2fb69333064a},
affiliation={Electrical and Computer Engineering Department, Carnegie Mellon University, Pittsburgh, PA  15213, United States},
abstract={Midas is an inter-disciplinary approach to supporting state-machine replication for nondeterministic distributed applications. The approach exploits compile-time static analysis to identify both first-hand and second-hand sources of nondeterminism. Subsequent runtime compensation occurs through either the transfer of nondeterministic checkpoints or the re-execution of inserted code, and restores consistency among replicas before each new client request. The approach avoids the need for lock-step synchronization and leverages application-level insight to address only the nondeterminism that matters. Our preliminary evaluation demonstrates Midas' feasibility and current performance overheads. © Workshop on Hot Topics in System Dependability, HotDep 2006.All rights reserved.},
keywords={Fault tolerance, Application level;  Client request;  Compile time;  Current performance;  Distributed applications;  Non-determinism;  Re-execution;  State machine replication, Static analysis},
funding_details={National Science FoundationNational Science Foundation, NSF, CCR-0238381},
funding_details={Army Research OfficeArmy Research Office, ARO, DAAD19-02-1-0389},
funding_text 1={* Partially supported by the NSF CAREER grant CCR-0238381 and the ARO grant number DAAD19-02-1-0389},
references={Slember, J. G., Narasimhan, P., Living with nondeterminism in replicated middleware systems (2006) ACM/IFIP Conference on Middleware, , Melbourne, Australia, Nov; Alvisi, L., Napper, J., A transparent fault tolerant Java Virtual Machine (2003) IEEE Conference on Dependable Systems and Networks, pp. 425-434. , San Francisco, CA, June; Friedman, R., Kama, A., Transparent fault-tolerant Java Virtual Machine (2003) IEEE Symposium on Reliable Distributed Systems, pp. 319-328. , Florence, Italy, Oct; Alvisi, L., Elnozahy, E., Wang, Y. M., Johnson, D. B., A survey of rollback-recovery protocols in message-passing systems (2002) ACM Computing Surveys, 34 (3), pp. 375-408. , Sept; Patino-Martinez, M., Jimenez-Peris, R., Kemme, B., Alonso, G., MIDDLE-R: Consistent database replication at the middleware level (2005) ACM Transactions on Computer Systems, 23 (4), pp. 375-423. , Nov; Basile, C., Kalbarczyk, Z., Iyer, R., A preemptive deterministic scheduling algorithm for multithreaded replicas (2003) IEEE Conference on Dependable Systems and Networks, pp. 149-158. , San Francisco, CA, June; Bestaoui, S., One solution for the nondeterminism problem in the SCEPTRE 2 fault tolerance technique (1995) Euromicro Workshop on Real-Time Systems, pp. 352-358. , Odense, Denmark, June; Bressoud, T. C., TFT: A software system for application-transparent fault tolerance (1998) International Symposium on Fault-Tolerant Computing, pp. 128-137. , Munich, Germany, June; Bressoud, T. C., Schneider, F. B., Hypervisor-based fault-tolerance (1996) ACM Transactions on Computer Systems, 14 (1), pp. 80-107. , Feb; Narasimhan, P., Moser, L. E., Melliar-Smith, P. M., Enforcing determinism for the consistent replication of multithreaded CORBA applications (1999) IEEE Symposium on Reliable Distributed Systems, pp. 263-273. , Lausanne, Switzerland, Oct; Schneider, F. B., Implementing fault-tolerant services using the state machine approach: A tutorial (1990) ACM Computing Surveys, 22 (4), pp. 299-319. , Dec; Wolf, T., (1988) Replication of Non-Deterministic Objects, , PhD thesis, EPFL, Switzerland, Nov},
sponsors={Aster Data Systems},
publisher={USENIX Association},
language={English},
abbrev_source_title={Proc. Workshop Hot Top. Syst. Dependability, HotDep},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Hovemeyer200513,
author={Hovemeyer, D. and Spacco, J. and Pugh, W.},
title={Evaluating and tuning a static analysis to find null pointer bugs},
journal={ACM SIGPLAN/SIGSOFT Workshop on Program Analysis for Software Tools and Engineering},
year={2005},
pages={13-19},
doi={10.1145/1108792.1108798},
note={cited By 76; Conference of 6th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, PASTE 2005 ; Conference Date: 5 September 2005 Through 6 September 2005;  Conference Code:99972},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84885200306&doi=10.1145%2f1108792.1108798&partnerID=40&md5=c99bf5820abc35a84d915a2d2a27acc8},
affiliation={Dept. of Computer Science, University of Maryland, College Park, MD 20742, United States},
abstract={Using static analysis to detect memory access errors, such as null pointer dereferences, is not a new problem. However, much of the previous work has used rather sophisticated analysis techniques in order to detect such errors.In this paper we show that simple analysis techniques can be used to identify many such software defects, both in production code and in student code. In order to make our analysis both simple and effective, we use a non-standard analysis which is neither complete nor sound. However, we find that it is effective at finding an interesting class of software defects.We describe the basic analysis we perform, as well as the additional errors we can detect using techniques such as annotations and inter-procedural analysis.In studies of both production software and student projects, we find false positive rates of around 20% or less. In the student code base, we find that our static analysis techniques are able to pinpoint 50% to 80% of the defects leading to a null pointer exception at runtime. © 2005 ACM.},
author_keywords={static analysis;  testing},
keywords={Analysis techniques;  False positive rates;  Inter-procedural;  Memory access;  Production software;  Simple analysis;  Software defects;  Student project, Computer programming languages;  Computer software;  Defects;  Errors;  Students;  Testing, Static analysis},
references={Bush, W.R., Pincus, J.D., Sielaff, D.J., A static analyzer for finding dynamic programming errors (2000) Software - Practice and Experience, 30, pp. 775-802; Das, M., Lerner, S., Seigle, M., ESP: Path-sensitive program verification in polynomial time (2002) Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation, pp. 57-68. , ACM Press; (2005), http://www-eclipse-org;.luisamigo.proxybk.com Engler, D., Chelf, B., Chou, A., Hallem, S., Checking system rules using system-specific, programmer-written compiler extensions Proceedings of the Fourth Symposium on Operating Systems Design and Implementation, San Diego, CA, October 2000; Evans, D., Static detection of dynamic memory errors Proceedings of the SIGPLAN Conference on Programming Languages, Design, and Implementation, 1996; Fähndrich, M., Rustan, K., Leino, M., Declaring and checking non-null types in an object-oriented language (2003) OOPSLA '03: Proceedings of the 18th Annual ACM SIGPLAN Conference on Object-oriented Programing, Systems, Languages, and Applications, pp. 302-312. , New York, NY, USA, ACM Press; Flanagan, C., Leino, K., Lillibridge, M., Nelson, C., Saxe, J., Stata, R., (2002) Extended Static Checking for Java; Hovemeyer, D., Pugh, W., Finding bugs is easy Companion of the 19th ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications, Vancouver, BC, October 2004; Rountev, A., Kagan, S., Gibas, M., Evaluating the imprecision of static analysis (2004) PASTE '04: Proceedings of the ACM-SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, pp. 14-16. , Washington DC, USA; Spacco, J., Strecker, J., Hovemeyer, D., Pugh, W., Software repository mining with Marmoset: An automated programming project snapshot and testing system Proceedings of the Mining Software Repositories Workshop (MSR 2005), St. Louis, Missouri, USA, May 2005; Xie, Y., Engler, D., Using redundancies to find errors (2002) SIGSOFT '02/FSE-10: Proceedings of the 10th ACM SIGSOFT Symposium on Foundations of Software Engineering, pp. 51-60. , Charleston, South Carolina, USA},
correspondence_address1={Dept. of Computer Science, , College Park, MD 20742, United States},
sponsors={ACM Special Interest Group on Software Engineering (SIGSOFT); ACM Special Interest Group on Programming Languages (SIGPLAN)},
address={Lisbon},
isbn={1595932399; 9781595932396},
language={English},
abbrev_source_title={ACM SIGPLAN SIGSOFT Workshop Program Anal Software Tools Eng},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Keller2005449,
author={Keller, D.S. and Hasan, A.},
title={Characterization of streak defects in fibrous webs by wavelet static/stochastic analysis},
journal={Joint INDA-TAPPI Conference - INTC 2005: International Nonwovens Technical Conference},
year={2005},
pages={449-463},
note={cited By 0; Conference of Joint INDA-TAPPI Conference - INTC 2005: International Nonwovens Technical Conference ; Conference Date: 19 September 2005 Through 22 September 2005;  Conference Code:67496},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-33745197375&partnerID=40&md5=2c4e46856b904b4b875c94268429cb7e},
affiliation={Faculty of Paper Science and Engineering, College of Environmental Science and Forestry, SUNY, Syracuse, NY, United States},
abstract={This paper describes an analytical method for characterizing structural non-uniformities, such as formation, that may vary as a function of position across the web. Streaks are spatially persistent non-uniformity defects that can occur in fibrous materials such as paper, paperboard and nonwovens as a result of the complexity of distributing the fibers in a planar web at high forming rates. For paper, streak defects are generated by the hydrodynamics in the headbox and forming zone of a paper machine. Since their occurrence is related to the machine speed, streaks may appear stationary or mobile, they may be intermittent or continuous, and may occur at regular or irregular intervals across the machine width. In this investigation we used spectral analysis method introduced by Kellomäki et al [1], based on the continuous wavelet transform, to isolate the directionally dependant, static and stochastic components of grammage variability of machine made papers. Several pilot machine samples with streaks generated under controlled conditions and commercially made samples were examined. The spectral analysis of the pilot machine samples showed substantial differences in the static and stochastic spectral energy components for each. Careful examination of the spectra revealed the scale differences of streaks, and of flocs, and variation of such, across the samples. Comprehensive spectral plots were simplified by calculation of the dominant wavelength, which essentially provides the mean feature size as a function of cross machine position. Thus, single profiles for the static component permitted the streak periodicity, and its change with position, to be readily obtained. The results of this study provide the technical specialist in nonwovens with a new method for identifying and characterizing non-uniformities that will negatively impact product quality and end use performance.},
keywords={Fibrous materials;  Product quality;  Stochastic analysis;  Stochastic components;  Streak defects, Paperboards;  Spectrum analysis;  Wavelet transforms, Nonwoven fabrics, Fibers;  Nonwovens;  Paper;  Spectra},
references={Kellomaki, M., Pawlak, J.J., Sung, Y.J., Keller, D.S., Characterization of non-stationary structural non-uniformities in paper (2001) Proceedings 12 th Fundamental Research Symposium the Pulp and Paper Fundamental Research Society, pp. 1313-1342. , Oxford, UK; Kerekes, R.J., Schekk, C.J., Effects of fiber length and coarseness on pulp flocculation (1995) Tappi.J., 78 (2), pp. 133-139; Kiviranta, A.J., Fiber and forming-related mechanisms affecting formation (1996) Proceedings Papermakers Conference, pp. 239-245. , Philadelphia, Mar, 24-27, 1996; Waterhouse, J.F., Effect of papermaking variables on formation (1993) Tappi.J., 76 (9), pp. 129-134; Chatterjee, A., (1995) Physio-chemical Aspects of Flocculation in Cellulose Fibre Suspensions and Effects on Paper Formation, , Ph.D. Thesis, University of Toronto; Aidun, C.K., Hydrodynamics of streaks on the forming table (1997) Tappi J., 80 (8); Aidun, C.K., Growth and decay of streaks and waves on the forming table (1998) Tappi J., 81 (5), pp. 159-162; Norman, B., Wahren, D., A comprehensive method for the description of mass distribution in sheets and flocculation and turbulence in suspensions (1972) Svensk Papper-stidning, 75 (20), pp. 807-818; Parker, J.R., Corscadden, K.W., Flocculation and other random defects (1999) Paper Tech., 40 (4), pp. 36-42; Keller, D.S., Lewalle, J., Luner, P., The analysis of paper variability using the wavelet transform (1999) Paperi Puu, 81 (6), pp. 440-446; Keller, D.S., Lewalle, J., Luner, P., Wavelet analysis of simulated paper formation (1999) Paperi Puu, 81 (7), pp. 499-505; Kaiser, G., (1994) A Friendly Guide to Wavelets, , Boston: Birkhauser; (1993) Wavelets, Fractals, and Fourier Transforms, , Farge M., Hunt J.C.R., Vassilicos J.C., editors. Oxford, Clarendon Press; Deng, M., Dodson, C.T.J., (1994) Paper: An Engineered Stochastic Structure, , TAPPI Press, Atlanta, GA; Johansson, P.A., Norman, B., Methods for evaluating formation, print unevenness, and gloss variations developed at Stfi (1996) Proceedings Tappi Process and Product Quality Conf., pp. 139-145. , TAPPI Press, Atlanta, GA; Hasan, A., Keller, D.S., Characterization of streaky papers by wavelet static/stochastic analysis (2004) Proceedings 2004 Progress in Paper Physics Seminar, , ed.. Gregersen, NTNU and PFI, Trondheim, NO; Keller, D.S., Pawlak, J.J., B-Radiographic imaging of paper formation using storage phosphor screens (2001) J.Pulp Pap.Sci., 27 (4), pp. 117-123; Pawlak, J.J., Keller, D.S., Analytical technique for the comparison of paper formation imaging methods (2001) J.Pulp Pap.Sci., 27 (5), pp. 171-176},
correspondence_address1={Keller, D.S.; Faculty of Paper Science and Engineering, , Syracuse, NY, United States},
sponsors={INDA, Association of the Onowovens Fabrics Industry; TAPPI},
address={St. Louis, MO},
isbn={1595101136; 9781595101136},
language={English},
abbrev_source_title={Joint INDA TAPPI Conf. INTC Int. Nonwovens Tech. Conf.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Nagappan2005580,
author={Nagappan, N. and Ball, T.},
title={Static analysis tools as early indicators of pre-release defect density},
journal={Proceedings - 27th International Conference on Software Engineering, ICSE05},
year={2005},
pages={580-586},
note={cited By 194; Conference of 27th International Conference on Software Engineering, ICSE05 ; Conference Date: 15 May 2005 Through 21 May 2005;  Conference Code:66729},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-33244495065&partnerID=40&md5=60b1d46278c8766a8f1dcb7e6778e136},
affiliation={Department of Computer Science, North Carolina State University, Raleigh, NC 27606, United States; Microsoft Research, Redmond, WA 98052, United States},
abstract={During software development it is helpful to obtain early estimates of the defect density of software components. Such estimates identify fault-prone areas of code requiring further testing. We present an empirical approach for the early prediction of pre-release defect density based on the defects found using static analysis tools. The defects identified by two different static analysis tools are used to fit and predict the actual pre-release defect density for Windows Server 2003. We show that there exists a strong positive correlation between the static analysis defect density and the pre-release defect density determined by testing. Further, the predicted pre-release defect density and the actual pre-release defect density are strongly correlated at a high degree of statistical significance. Discriminant analysis shows that the results of static analysis tools can be used to separate high and low quality components with an overall classification rate of 82.91%. Copyright 2005 ACM.},
author_keywords={Defect density;  Fault-proneness;  Static analysis tools;  Statistical methods},
keywords={Defect density;  Fault-proneness;  Static analysis tools;  Discriminant analysis;  Fault proneness, Automatic testing;  Computer operating systems;  Computer software;  Servers;  Statistical methods;  Codes (symbols);  Computer hardware;  Computer software selection and evaluation, Software engineering},
references={Basili, V., Briand, L., Melo, W., A validation of object oriented design metrics as quality indicators (1996) IEEE Transactions on Software Engineering, 22 (10), pp. 751-761; Brace, N., Kemp, R., Snelgar, R., (2003) SPSS for Psychologists, , Palgrave Macmillan; Briand, L.C., Thomas, W.M., Hetmanski, C.J., Modeling and managing risk early in software development (1993) Proceedings of International Conference on Software Engineering, pp. 55-65; Briand, L.C., Wuest, J., Daly, J.W., Porter, D.V., Exploring the relationship between design measures and software quality in object oriented systems (2000) Journal of Systems and Software, 51 (3), pp. 245-273; Briand, L.C., Wuest, J., Ikonomovski, S., Lounis, H., Investigating quality factors in object-oriented designs: An industrial case study (1999) Proceedings of International Conference on Software Engineering, pp. 345-354; Bush, W.R., Pincus, J.D., Sielaff, D.J., A static analyzer for finding dynamic programming errors (2000) Software-practice and Experience, 20 (7), pp. 775-802; Chidamber, S.R., Kemerer, C.F., A metrics suite for object oriented design (1994) IEEE Transactions on Software Engineering, 20 (6); Denaro, G., Morasca, S., Pezze, M., Deriving models of software fault-proneness (2002) Proceedings of Software Engineering Knowledge Engineering, pp. 361-368; Denaro, G., Pezze, M., An empirical evaluation of fault-proneness models (2002) Proceedings of International Conference on Software Engineering, pp. 241-251; Engler, D., Chelf, B., Chou, A., Hallem, S., Checking system rules using system-specific, programmer-written compiler extensions (2000) Proceedings of OSDI 2000; Evans, D., Guttag, J., Horning, J., Tan, Y.M., LCLint: A tool for using cpecifications to check code (1994) Proceedings of ACM-SIGSOFT Foundations in Software Engineering, pp. 87-96; Fenton, N.E., Pfleeger, S.L., (1997) Software Metrics, , Boston, MA: International Thompson Publishing; Khoshgoftaar, T.M., Allen, E.B., Deng, J., Using regression trees to classify fault-prone software modules (2002) IEEE Transactions on Reliability, 51 (4), pp. 455-462; Khoshgoftaar, T.M., Allen, E.B., Goel, N., Nandi, A., McMullan, J., Detection of software modules with high debug code chum in a very large legacy system (1996) Proceedings of International Symposium on Software Reliability Engineering, pp. 364-371; Khoshgoftaar, T.M., Allen, E.B., Hudepohl, J.P., Aud, S.J., Application of neural networks to software quality modeling of a very large telecommunications system (1997) IEEE Transactions on Neural Networks, 8 (4), pp. 902-909; Khoshgoftaar, T.M., Allen, E.B., Jones, W.D., Hudepohl, J.P., Classification-tree models of software quality over multiple releases (2000) IEEE Transactions on Reliability, 49 (1), pp. 4-11; Khoshgoftaar, T.M., Allen, E.B., Kalaichelvan, K.S., Goel, N., Hudepohl, J.P., Mayrand, J., Detection of fault-prone program modules in a very large telecommunications system (1995) Proceedings of International Symposium Software Reliability Engineering, pp. 24-33; Khoshgoftaar, T.M., Munson, J.C., Lanning, D.L., A comparative study of predictive models for program changes during system testing and maintenance (1993) Proceedings of International Conference on Software Maintenance, pp. 72-79; Khoshgoftaar, T.M., Seliya, N., Fault prediction modeling for software quality estimation: Comparing commonly used techniques (2003) Empirical Software Engineering, 8 (3), pp. 255-283; Larus, J.R., Ball, T., Das, M., Deline, R., Fahndrich, M., Pincus, J., Rajamani, S.K., Venkatapathy, R., Righting software (2004) IEEE Software, 21, pp. 92-100; Munson, J.C., Khoshgoftaar, T.M., The detection of fault-prone programs (1992) IEEE Transactions on Software Engineering, 18 (5), pp. 423-433; Munson, J.C., Khoshgoftaar, T.M., Regression modeling of software quality: Empirical investigation (1990) Information and Software Technology, 32 (2), pp. 106-114; Nagappan, N., Williams, L., Hudepohl, J., Snipes, W., Vouk, M., Preliminary results on using static analysis tools for software inspection (2004) Proceedings of Fifteenth IEEE International Symposium on Software Reliability Engineering, pp. 429-439. , St. Malo, France; Schneidewind, N.F., Methodology for validating software metrics (1992) IEEE Transactions on Software Engineering, 18, pp. 410-422; Subramanyam, R., Krishnan, M.S., Empirical analysis of CK metrics for object-oriented design complexity: Implications for software defects (2003) IEEE Transactions on Software Engineering, 29 (4), pp. 297-310; Tang, M.-H., Kao, M.-H., Chen, M.-H., An empirical study on object-oriented metrics (1999) Proceedings of Sixth International Software Metrics Symposium, pp. 242-249},
correspondence_address1={Nagappan, N.; Department of Computer Science, , Raleigh, NC 27606, United States; email: nnagapp@ncsu.edu},
sponsors={ACM SIGSOFT; IEEE Computer Society},
address={St. Louis, MO},
language={English},
abbrev_source_title={Proc. Int. Conf. Softw. Eng.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Feamster200543,
author={Feamster, N. and Balakrishnan, H.},
title={Detecting BGP configuration faults with static analysis},
journal={2nd Symposium on Networked Systems Design and Implementation, NSDI 2005},
year={2005},
pages={43-56},
note={cited By 225; Conference of 2nd Symposium on Networked Systems Design and Implementation, NSDI 2005 ; Conference Date: 2 May 2005 Through 4 May 2005;  Conference Code:163485},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84894553762&partnerID=40&md5=58702e671090a78500bc2519b158ebb5},
affiliation={MIT Computer Science and Artificial Intelligence Laboratory},
abstract={The Internet is composed of many independent autonomous systems (ASes) that exchange reachability information to destinations using the Border Gateway Protocol (BGP). Network operators in each AS configure BGP routers to control the routes that are learned, selected, and announced to other routers. Faults in BGP configuration can cause forwarding loops, packet loss, and unintended paths between hosts, each of which constitutes a failure of the Internet routing infrastructure. This paper describes the design and implementation of rcc, the router configuration checker, a tool that finds faults in BGP configurations using static analysis. rcc detects faults by checking constraints that are based on a high-level correctness specification. rcc detects two broad classes of faults: route validity faults, where routers may learn routes that do not correspond to usable paths, and path visibility faults, where routers may fail to learn routes for paths that exist in the network. rcc enables network operators to test and debug configurations before deploying them in an operational network, improving on the status quo where most faults are detected only during operation. rcc has been downloaded by more than sixty-five network operators to date, some of whom have shared their configurations with us. We analyze network-wide configurations from 17 different ASes to detect a wide variety of faults and use these findings to motivate improvements to the Internet routing infrastructure. © NSDI 2005.},
keywords={Fault detection;  Gateways (computer networks);  Routing protocols;  Static analysis;  Systems analysis, Autonomous systems;  Design and implementations;  Internet routing;  Network operator;  Operational network;  Reachability;  Router configuration;  Status quo, Border Gateway Protocol},
funding_details={National Science FoundationNational Science Foundation, NSF, ANI-0225660},
funding_text 1={This work would not have been possible without the support and patience of many in the network operations community. We are grateful to Randy Bush, Jennifer Rex-ford, and Guy Tal for inspiration, suggestions, and feedback. We thank David Andersen, Tom Barron, Rob Beverly, Jay Borkenhagen, Grover Browning, Andres Gasson, Michael Hallgren, John Heasley, Jaroslaw Kowalczyk, Ar-naud Le Taillanter, Simon Leinen, Ratul Mahajan, Hank Nussbacher, Scott Poretsky, Jeff Schiller, Nicolas Strina, and Matt Zekauskas for their help. We also thank Eddie Kohler (this paper’s “shepherd”), Mike Walfish, and the anonymous NSDI reviewers for thoughtful feedback that improved this paper. This work was supported by a Cisco URP grant and by the NSF under Cooperative Agreement ANI-0225660. Nick Feamster is partially supported by an NSF Graduate Research Fellowship.},
references={BASU, A., Route oscillations in IBGP with route reflection (2002) Proc. ACM SIGCOMM, , ET AL (Pittsburgh, PA, Aug); BATES, T., CHANDRA, R., CHEN, E., BGP Route Reflection - An Alternative to Full Mesh IBGP (2000) Internet Engineering Task Force, , Apr. RFC 2796; BEIJNUM, I. V., (2002) BGP, , O'Reilly and Associates, Sept; BHARGAVAN, K., OBRADOVIC, D., GUNTER, C. A., Formal verification of standards for distance vector routing protocols (2002) Journal of the ACM, 49 (4), pp. 538-576. , (July); CAESAR, M., FEAMSTER, N., REXFORD, J., SHAIKH, A., VAN DER MERWE, K., Design and Implementation of a Routing Control Platform (2005) Proc. 2nd Symposium on Networked Systems Design and Implementation, , (Boston, MA, May); CALDWELL, D., GILBERT, A., GOTTLIEB, J., GREENBERG, A., HJALMTYSSON, G., REXCORD, J., The cutting EDGE of IP router configuration (2003) Proc. 2nd ACM Workshop on Hot Topics in Networks (Hotnets-II), , (Cambridge, MA, Nov); Team Cymru bogon route server project, , http://www-cymru-com.luisamigo.proxybk.com/BGP/bogon-rs.html; DUBE, R., A comparison of scaling techniques for BGP (1999) ACM Computer Communications Review, 29 (3), pp. 44-46. , (July); FEAMSTER, N., Practical verification techniques for wide-area routing (2003) Proc. 2nd ACM Workshop on Hot Topics in Networks (Hotnets-II), , (Cambridge, MA, Nov); FEAMSTER, N., BALAKRISHNAN, H., Towards a logic for wide-area Internet routing (2003) ACM SIGCOMM Workshop on Future Directions in Network Architecture, , (Karlsruhe, Germany, Aug); FEAMSTER, N., JOHARI, R., BALAKRISHNAN, H., (2005) Stable policy routing with provider independence, , Tech. Rep. MIT-LCS-TR-981, Massachusetts Institute of Technology, Feb; FEAMSTER, N., JUNG, J., BALAKRISHNAN, H., An empirical study of “bogon” route advertisements (2004) ACM Computer Communications Review, , (Nov); FEAMSTER, N., MAO, Z. M., REXFORD, J., BorderGuard: Detecting cold potatoes from peers (2004) Proc. ACM SIGCOMM Internet Measurement Conference, , (Taormina, Sicily, Italy, Oct); FEAMSTER, N., WINICK, J., REXFORD, J., A model of BGP routing for network engineering (2004) Proc. ACM SIGMETRICS, , (New York, NY, June); FELDMANN, A., REXFORD, J., IP network configuration for intradomain traffic engineering (2001) IEEE Network, , (Sept); GAO, L., On inferring automonous system relationships in the Internet (2001) IEEE/ACM Transactions on Networking, 9 (6), pp. 733-745. , (Dec); GAO, L., GRIFFIN, T. G., REXFORD, J., Inherently safe backup routing with BGP (2001) Proc. IEEE INFOCOM, , (Anchorage, AK, Apr); GODEFROID, P., Model Checking for Programming Languages using VeriSoft (1997) Proc. ACM Symposium on Principles of Programming Languages; GRIFFIN, T., WILFONG, G., An analysis of BGP convergence properties (1999) Proc. ACM SIGCOMM, , (Cambridge, MA, Sept); GRIFFIN, T., WILFONG, G., On the correctness of IBGP configuration (2002) Proc. ACM SIGCOMM, , (Pittsburgh, PA, Aug); GRIFFIN, T. G., SHEPHERD, F. B., WILFONG, G., The stable paths problem and interdomain routing (2002) IEEE/ACM Transactions on Networking, 10 (1), pp. 232-243; HAJEK, J., Automatically verified data transfer protocols (1978) Proc. ICCC, pp. 749-756; LABOVITZ, C., AHUJA, A., BOSE, A., JAHANIAN, F., Delayed Internet Routing Convergence (2001) IEEE/ACM Transactions on Networking, 9 (3), pp. 293-306. , (June); MAHAJAN, R., WETHERALL, D., ANDERSON, T., Understanding BGP misconfiguration (2002) Proc. ACM SIGCOMM, pp. 3-17. , (Pittsburgh, PA, Aug); MUSUVATHI, M., ENGLER, D., Some lessons from using static analysis and software model checking for bug finding (2003) Workshop on Software Model Checking, , (Boulder, CO, July); MUSUVATHI, M., ENGLER, D., A framework for model checking network protocols (2004) Proc. First Symposium on Networked Systems Design and Implementation (NSDI), , (San Francisco, CA, Mar); The North American Network Operators' Group mailing list archive, , http://www-cctec-com.luisamigo.proxybk.com/maillists/nanog/; NORTON, W., Internet service providers and peering, , http://www-equinix-com.luisamigo.proxybk.com/press/whtppr.htm; Opnet NetDoctor, , http://opnet-com.luisamigo.proxybk.com/products/modules/netdoctor.htm; (2004) Really Awesome New Cisco ConfIg Differ (RANCID), , http://www-shrubbery-net.luisamigo.proxybk.com/rancid/; REKHTER, Y., LI, T., A Border Gateway Protocol 4 (BGP-4) (1995) Internet Engineering Task Force, , Mar. RFC 1771; (1997), http://news-com-com.luisamigo.proxybk.com/2100-1033-279235.html, Router Glitch Cuts Net Access. Apr; SPRING, N., MAHAJAN, R., ANDERSON, T., Quantifying the causes of path inflation (2003) Proc. ACM SIGCOMM, , (Karlsruhe, Germany, Aug); http://www-cs-washington-edu.luisamigo.proxybk.com/research/networking/policy-inference/donation.html, BGP config donation; VARADHAN, K., GOVINDAN, R., ESTRIN, D., Persistent route oscillations in inter-domain routing (2000) Computer Networks, 32 (1), pp. 1-16},
sponsors={HP; Microsoft Research; Nation Science Foundation; USENIX Association},
publisher={USENIX Association},
language={English},
abbrev_source_title={Symp. Networked Syst. Des. Implement., NSDI},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Engler20051,
author={Engler, D.},
title={Static analysis versus model checking for bug finding},
journal={Lecture Notes in Computer Science},
year={2005},
volume={3653},
pages={1},
doi={10.1007/11539452_1},
note={cited By 5; Conference of 16th International Conference on Concurrency Theory, CONCUR 2005 ; Conference Date: 23 August 2005 Through 26 August 2005;  Conference Code:65876},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-27244445942&doi=10.1007%2f11539452_1&partnerID=40&md5=d80558b8379ae73eea9625690e5cc44f},
affiliation={Computer Systems Laboratory, Stanford University, Stanford, CA 94305, United States},
abstract={This talk tries to distill several years of experience using both model checking and static analysis to find errors in large software systems. We initially thought that the tradeoffs between the two was clear: static analysis was easy but would mainly find shallow bugs, while model checking would require more work but would be strictly better it would find more errors, the errors would be deeper and the approach would be more powerful. These expectations were often wrong. This talk will describe some of the sharper tradeoffs between the two, as well as a detailed discussion of one domain -finding errors in file systems code - where model checking seems to work very well. © Springer-Verlag Berlin Heidelberg 2005.},
keywords={Codes (symbols);  Computer software;  Error analysis;  File organization;  Mathematical models;  Program debugging, Bug finding;  File systems codes;  Large software systems;  Static analysis, Error detection},
correspondence_address1={Engler, D.; Computer Systems Laboratory, , Stanford, CA 94305, United States},
publisher={Springer Verlag},
address={San Francisco, CA},
issn={03029743},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Sengupta2004,
author={Sengupta, J. and Bansal, P.K.},
title={Performance analysis of static and dynamic fault-tolerant irregular networks},
journal={IEEE Region 10 Annual International Conference, Proceedings/TENCON},
year={2004},
volume={B},
pages={B5-B8},
note={cited By 4; Conference of IEEE TENCON 2004 - 2004 IEEE Region 10 Conference: Analog and Digital Techniques in Electrical Engineering ; Conference Date: 21 November 2004 Through 24 November 2004;  Conference Code:66073},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-27944437545&partnerID=40&md5=16956c19cab1f898ae6421fd529f99e4},
affiliation={Deptt. Computer Science and Engg., Punjabi University, Patiala, 147002, India; G.S.Z.Engg. College, Bathinda, Punjab, India},
abstract={Notwithstanding the ever growing traffic on the internet, and At fundamental issue of decision on the fast and static network or the adaptable dynamic network, this paper presents the assessment of analytic performance of two irregular MTNs, a static MIN -THN and a dynamic MDf - PHN. The performance has been analyzed on the basis of routing, fault-tolerance, the available bandwidth and cost. Results show that for the two irregular MINs, optimization of the performance and cost are essential for sustained fault-tolerant operation of the network. Whereas the static MIN gains on cost and speed, the dynamic MIN gains on fault-tolerance and reliable operation. © 2004 IEEE.},
keywords={Bandwidth;  Computer networks;  Costs;  Internet;  Optimization;  Reliability, Dynamic network;  Fault-tolerance;  Performance analysis;  Static network, Fault tolerant computer systems},
references={Hwang, K., Advanced parallel processing with supercomputer architecture (1987) Proc. IEEE OC-75, pp. 1348-1379. , October; Dao, B.V., Duato, J., Yalamanchili, S., Architectural support for reducing communication overheads multiprocessor interconnection networks (1997) Proc. Third International Symposium on High Performance Computer Architecture, , Feb. 1-5 San Antonio, Texas, USA; Bhuyan, L.N., Yang, Q., Agrawal, D.P., Performance of multiprocessor interconnection networks (1989) IEEE Computer, 22 (2), pp. 25-37. , February; Lubazewski, M., Coutois, B., A reliable fail-safe system (1998) Parallel and Distributed Systems, 47 (2), pp. 236-241. , IEEE Computer Society, Feb; Bansal, P.K., Singh, K., Joshi, R.C., Quad tree: A cost-effective fault-tolerant multistage interconnection network (1992) International Conference IEEE INFOCOM 92, , ITALY, May},
correspondence_address1={Sengupta, J.; Deptt. Computer Science and Engg., , Patiala, 147002, India; email: jsengupta1@lycos.com},
sponsors={IEEE Region 10},
address={Chiang Mai},
coden={85QXA},
language={English},
abbrev_source_title={IEEE Reg 10 Annu Int Conf Proc TENCON},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Phadoongsidhi2004437,
author={Phadoongsidhi, M. and Saluja, K.K.},
title={Static timing analysis of irreversible crosstalk noise pulse faults},
journal={Proceedings of the IEEE International Conference on VLSI Design},
year={2004},
volume={17},
pages={437-442},
note={cited By 0; Conference of Proceedings - 17th International Conference on VLSI Design, Concurrently with the 3rd International Conference on Embedded Systems Design ; Conference Date: 5 January 2004 Through 9 January 2004;  Conference Code:62895},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-2342622646&partnerID=40&md5=0eada4ede56e96c9619ab46c359726a3},
affiliation={Dept. of Electrical Engineering, University of Wisconsin, Madison, United States},
abstract={In a large scale deep sub-micron VLSI design it is impractical to consider all possible aggressor-victim pairs as candidates for crosstalk coupling faults. Inevitably, a significant portion of these crosstalk pairs can be safely discarded from a target faultlist. In this paper, we have developed a static timing analysis technique to identify pairs which can be identified as redundant from crosstalk point of view. Experimental results on ISCAS'89 and ITC'99 benchmark circuits show that our algorithm achieves a reasonable level of crosstalk-induced pulse faultlist reduction without being unduly demanding on computational resources.},
keywords={Computational resources;  Coupling faults;  Signal integrity;  Static timing analysis, Algorithms;  Benchmarking;  Computational methods;  Crosstalk;  Failure analysis;  Logic design;  Spurious signal noise;  VLSI circuits, Electric fault currents},
references={Arunachalam, R., Blanton, R.D., Pileggi, L.T., False coupling interactions in static timing analysis (2001) Proceedings of the 38th Conference on Design Automation, pp. 726-731; Chai, D., Kondratyev, A., Ran, Y., Tseng, K.H., Watanabe, Y., Marek-Sadowska, M., Temporofunctional crosstalk noise analysis (2003) Proceedings of the 40th Conference on Design Automation, pp. 860-863; Chen, P., Keutzer, K., Towards true crosstalk noise analysis (1999) IEEE/ACM International Conference on Computer Aided Design, pp. 132-137; Chen, P., Kirkpatrick, D., Keutzer, K., Switching window computation for static timing analysis in presence of crosstalk noise (2000) IEEE/ACM International Conference on Computer Aided Design, pp. 331-337; Chen, W.Y., Gupta, S.K., Breuer, M.A., Test generation in VLSI circuits for crosstalk noise (1998) Proc. International Test Conference, pp. 641-650; Chen, W.Y., Gupta, S.K., Breuer, M.A., Test generation for crosstalk-induced delay in integrated circuits (1999) Proc. International Test Conference, pp. 191-200; Chen, W.Y., Gupta, S.K., Breuer, M.A., Analytical models for crosstalk excitation and propagation in VLSI circuits (2002) IEEE Transactions on Computer-aided Design of Integrated Circuits and Systems, 21 (10), pp. 1117-1131. , October; Cormen, T.H., Leiserson, C.R., Rivest, R.L., (1990) Introduction to Algorithms, , McGraw-Hill; Glebov, A., Gavrilov, S., Blaauw, D., Sirichotiyakul, S., Oh, C., Zolotov, V., False-noise analysis using logic implications (2001) IEEE/ACM International Conference on Computer Aided Design, pp. 515-521; Keller, K.J., Takahashi, H., Saluja, K.K., Takamatsu, Y., On reducing the target fault list of crosstalk-induced delay faults in synchronous sequential circuits (2001) Proc. International Test Conference, pp. 568-577; Kundu, R., Blanton, R.D., Identification of crosstalk switch failures in domino CMOS circuits (2000) Proc. International Test Conference, pp. 502-509; Levy, R., Blaauw, D., Braca, G., Dasgupta, A., Grinshpon, A., Oh, C., Orshav, B., Zolotov, V., Clarinet: A noise analysis tool for deep submicron design (2000) Proceedings of the 37th Conference on Design Automation, pp. 233-238; Phadoongsidhi, M., Le, K.T., Saluja, K.K., A concurrent fault simulation for crosstalk faults in sequential circuits (2002) Proc. 11th Asian Test Symposium, pp. 182-187; Phadoongsidhi, M., Saluja, K.K., Event-centric simulation of crosstalk pulse faults in sequential circuits (2003) To Appear in the International Conference on Computer Design; Shepard, K.L., Narayanan, V., Rose, R., Harmony: Static noise analysis of deep submicron digital integrated circuits (1999) IEEE Transactions on Computer-aided Design of Integrated Circuits and Systems, 18 (8), pp. 1132-1150. , August; Shimizu, K., Shirai, T., Takamura, M., Itazaki, N., Kinoshita, K., Reduction of the target fault list and fault simulation method for crosstalk faults in clock-delayed domino circuits (2002) IEICE Transactions on Information and Systems, pp. 1526-1533; Sylvester, D., Hu, C., Analytical modeling and characterization of deep-submicrometer interconnect (2001) Proceedings of the IEEE, pp. 634-664; Tseng, K., Kariat, V., Static noise analysis with noise windows (2003) Proceedings of the 40th Conference on Design Automation},
correspondence_address1={Phadoongsidhi, M.; Dept. of Electrical Engineering, , Madison, WI, United States; email: phadoong@ece.wisc.edu},
sponsors={VLSI Society of India (VSI); Ministry of Information and Communication Technologies; IEEE Circuits and Systems Society; IEEE Electron Devices Society; ACM-SIGDA},
address={Mumbai},
issn={10639667},
coden={PIVDE},
language={English},
abbrev_source_title={Proc IEEE Int Conf VLSI Des},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Engler2004191,
author={Engler, D. and Musuvathi, M.},
title={Static analysis versus software model checking for bug finding},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2004},
volume={2937},
pages={191-210},
doi={10.1007/978-3-540-24622-0_17},
note={cited By 60; Conference of 5th International Conference on Verification, Model Checking, and Abstract Interpretation, VMCAI 2004 ; Conference Date: 11 January 2004 Through 13 January 2004;  Conference Code:126369},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84944198800&doi=10.1007%2f978-3-540-24622-0_17&partnerID=40&md5=e45270673da463ee5a0460d76a369164},
affiliation={Computer Systems Laboratory, Stanford University, Stanford, CA  94305, United States},
references={Kuskin, J., Ofelt, D., Heinrich, M., Heinlein, J., Simoni, R., Gharachorloo, K., Chapin, J., Hennessy, J., The Stanford FLASH multiprocessor (1994) Proceedings of the 21St International Symposium on Computer Architecture; Chou, A., Chelf, B., Engler, D., Heinrich, M., Using meta-level compilation to check FLASH protocol code (2000) Ninth International Conference on Architecture Support for Programming Languages and Operating Systems; Lie, D., Chou, A., Engler, D., Dill, D., A simple method for extracting models from protocol code (2001) Proceedings of the 28Th Annual International Symposium on Computer Architecture; Perkins, C., Royer, E., Das, S., Ad Hoc On Demand Distance Vector (AODV) Routing (2002) IETF Draft, , http://www-ietf-org.luisamigo.proxybk.com/internet-drafts/draft-ietf-manet-aodv-10.txt; Musuvathi, M., Park, D., Chou, A., Engler, D.R., Dill, D.L., CMC: A Pragmatic Approach to Model Checking Real Code (2002) Proceedings of the Fifth Symposium on Operating Systems Design and Implementation; Dill, D.L., Drexler, A.J., Hu, A.J., Yang, C.H., (1992) Protocol Verification as a Hardware Design Aid. In, pp. 522-525. , IEEE International Conference on Computer Design: VLSI in Computers and Processors; Holzmann, G.J., The model checker SPIN (1997) Software Engineering, 23, pp. 279-295; Corbett, J., Dwyer, M., Hatcliff, J., Laubach, S., Pasareanu, C., Robby, Zheng, H., : Bandera: Extracting finite-state models from Java source code (2000) ICSE 2000; Holzmann, G., Smith, M., Software model checking: Extracting verification models from source code (1999) Invited Paper. Proc. PSTV/FORTE99 Publ, , Kluwer; Godefroid, P., Model Checking for Programming Languages using VeriSoft (1997) Proceedings of the 24Th ACM Symposium on Principles of Programming Languages; Chandra, S., Godefroid, P., Palm, C., Software model checking in practice: An industrial case study (2002) Proceedings of International Conference on Software Engineering (ICSE); Brat, G., Havelund, K., Park, S., Visser, W., Model checking programs (2000) In: IEEE International Conference on Automated Software Engineering (ASE); Bush, W., Pincus, J., Sielaff, D., A static analyzer for finding dynamic programming errors (2000) Software: Practice and Experience, 30, pp. 775-802; Das, M., Lerner, S., Seigle, M., Esp: Path-sensitive program verification in polynomial time (2002) Conference on Programming Language Design and Implementation; Flanagan, C., Leino, M., Lillibridge, M., Nelson, C., Saxe, J., Stata, R., Extended static checking for Java (2002) In: 2002 Conference on Programming Language Design and Implementation, pp. 234-245; Chen, H., Wagner, D., MOPS: An infrastructure for examining security properties of software (2002) In: Proceedings of the 9Th ACM Conference on Computer and Communications Security, pp. 235-244. , ACM Press; Ball, T., Majumdar, R., Millstein, T., Rajamani, S.K., Automatic predicate abstraction of C programs (2001) Proceedings of the SIGPLAN’01 Conference on Programming Language Design and Implementation; Engler, D., Chelf, B., Chou, A., Hallem, S., Checking system rules using systemspecific, programmer-written compiler extensions (2000) Proceedings of Operating Systems Design and Implementation (OSDI); Hallem, S., Chelf, B., Xie, Y., Engler, D., A system and language for building system-specific, static analyses (2002) SIGPLAN Conference on Programming Language Design and Implementation; Engler, D., Chen, D., Hallem, S., Chou, A., Chelf, B., Bugs as deviant behavior: A general approach to inferring errors in systems code (2001) Proceedings of the Eighteenth ACM Symposium on Operating Systems Principles; Park, S., Dill, D., Verification of FLASH cache coherence protocol by aggregation of distributed transactions (1996) In: Proceedings of the 8Th ACM Symposium on Parallel Algorithsm and Architectures, pp. 288-296; Stern, U., Dill, D.L., A New Scheme for Memory-Efficient Probabilistic Verification (1996) IFIP TC6/WG6.1 Joint International Conference on Formal Description Techniques for Distributed Systems and Communication Protocols, and Protocol Specification, , Testing, and Verification; Lilieblad, F., Mad-Hoc AODV Implementation, , http://mad-hoc-flyinglinux-net.luisamigo.proxybk.com/; Klein-Berndt, L., Kernel AODV Implementation, , http://w3-antd-nist-gov.luisamigo.proxybk.com/wctg/aodvkernel/; E.N.: AODV-UU Implementation, , http://user-it-uu-se.luisamigo.proxybk.com/henrikl/aodv/; Lundgren, H., Lundberg, D., Nielsen, J., Nordstrom, E., Tschudin, C., A largescale testbed for reproducible ad hoc protocol evaluations (2002) IEEE Wireless Communications and Networking Conference; http://user-mode-linux-sourceforge-net.luisamigo.proxybk.com/},
editor={Steffen B., Levi G.},
sponsors={EAPLS},
publisher={Springer Verlag},
issn={03029743},
isbn={9783540208037},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Lindahl200491,
author={Lindahl, T. and Sagonas, K.},
title={Detecting software defects in telecom applications through lightweight static analysis: A war story},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2004},
volume={3302},
pages={91-106},
doi={10.1007/978-3-540-30477-7_7},
note={cited By 33},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-32044471874&doi=10.1007%2f978-3-540-30477-7_7&partnerID=40&md5=cebb414e6693fbac49b387317900b1c8},
affiliation={Computing Science, Dept. of Information Technology, Uppsala University, Sweden},
abstract={In safety-critical and high-reliability systems, software development and maintenance are costly endeavors. The cost can be reduced if software errors can be identified through automatic tools such as program analyzers and compiletime software checkers. To this effect, this paper describes the architecture and implementation of a software tool that uses lightweight static analysis to detect discrepancies (i.e., software defects such as exception-raising code or hidden failures) in large commercial telecom applications written in Erlang. Our tool, starting from virtual machine bytecode, discovers, tracks, and propagates type information which is often implicit in Erlang programs, and reports warnings when a variety of type errors and other software discrepancies are identified. Since the analysis currently starts from bytecode, it is completely automatic and does not rely on any user annotations. Moreover, it is effective in identifying software defects even in cases where source code is not available, and more specifically in legacy software which is often employed in high-reliability systems in operation, such as telecom switches. We have applied our tool to a handful of real-world applications, each consisting of several hundred thousand lines of code, and describe our experiences and the effectiveness of our techniques.},
author_keywords={Compile-time program checking;  Defect detection;  Software development;  Software quality assurance;  Software tools},
keywords={Application programs;  Codes (symbols);  Computer aided software engineering;  Computer software;  Computer software selection and evaluation;  Defects;  Java programming language;  Legacy systems;  Quality assurance;  Software design;  Software engineering;  Software reliability, Defect detection;  High-reliability systems;  Program checking;  Software defects;  Software development and maintenances;  Software quality assurance;  Telecom applications;  User annotations, Static analysis},
references={Armstrong, J., Virding, R., Wikström, C., Williams, M., (1996) Concurrent Programming in Erlang, , Prentice Hall Europe, Herfordshire, Great Britain, second edition; Blau, S., Rooth, J., AXD 301 - A new generation ATM switching system (1998) Ericsson Review, 75 (1), pp. 10-17; Cytron, R., Ferrante, J., Rosen, B.K., Wegman, M.N., Zadeck, F.K., Efficiently computing static single assignment form and the control dependence graph (1991) ACM Trans. Prag. Lang. Syst., 13 (4), pp. 451-1190. , Oct; Dor, N., Rodeh, M., Sagiv, M., CSSV: Towards a realistic tool for statically detecting all buffer overflows in C (2003) Proceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation, pp. 155-167. , ACM Press, June; Engler, D., Musuvathi, M., Static analysis versus software model checking for bug finding (2004) Verification, Model Checking, and Abstract Interpretation. Proceedings of the 5th International Conference, (2937), pp. 191-210. , B. Steffen and G. Levi, editors, LNCS, Springer, Jan; Evans, D., Larochelle, D., Improving security using extensible lightweight static analysis (2002) LEEE Software, 19 (1), pp. 42-51. , Jan./Feb; Findler, R.B., Clements, J., Flanagan, C., Flatt, M., Krishnamurthi, S., Steckler, P., Felleisen, M., DrScheme: A programming environment for Scheme (2002) Journal of Functional Programming, 12 (2), pp. 159-182. , Mar; Flanagan, C., Leino, K.R.M., Lillibridge, M., Nelson, G., Saxe, J.B., Stata, R., Extended static checking for Java (2002) Proceedings of the ACM SIGPLAN 2002 Conference on Programming Language Design and Implementation, pp. 234-245. , ACM Press, June; Hermenegildo, M.V., Puebla, G., Bueno, F., López-García, P., Program development using abstract interpretation (and the Ciao system preprocessor) (2003) Static Analysis: Proceedings of the 10th International Symposium, (2694), pp. 127-152. , R. Cousot, editor, LNCS, Berlin, Germany, June Springer; Johansson, E., Pettersson, M., Sagonas, K., HiPE: A High Performance Erlang system (2000) Proceedings of the ACM SIGPLAN Conference on Principles and Practice of Declarative Programming, pp. 32-43. , New York, NY, Sept. ACM Press; Marlow, S., Wadler, P., A practical subtyping system for Erlang (1997) Proceedings of the ACM SIGPLAN International Conference on Functional Programming, pp. 136-149. , ACM Press, June; Mishra, P., Reddy, U.S., Declaration-free type checking (1984) In Proceedings of the Twelfth Annual ACM Symposium on the Principles of Programming Languages, pp. 7-21. , ACM Press; Muchnick, S.S., (1997) Advanced Compiler Design & Implementation, , Morgan Kaufman Publishers, San Fransisco, CA; Naish, L., Dart, P.W., Zobel, J., The NU-Prolog debugging environment (1989) Proceedings of the Sixth International Conference on Logic Programming, pp. 521-536. , A. Porto, editor, The MIT Press, June; Nyström, S.-O., A soft-typing system for Erlang (2003) Proceedings of ACM SIGPLAN Erlang Workshop, pp. 56-71. , ACM Press, Aug; Pettersson, M., Sagonas, K., Johansson, E., The HiPE/x86 Erlang compiler: System description and performance evaluation (2002) Proceedings of the Sixth International Symposium on Functional and Logic Programming, (2441), pp. 228-244. , Z. Hu and M. Rodríguez-Artalejo, editors, LNCS, Berlin, Germany, Sept. Springer; Wiger, U., Ask, G., Boortz, K., World-class product certification using Erlang (2002) SIGPLAN Notices, 37 (12), pp. 25-34. , Dec; Wright, A., Cartwright, R., A practical soft type system for Scheme (1997) ACM Trans. Prag. Lang. Syst., 19 (1), pp. 87-152. , Jan},
editor={Chin W.-N.},
publisher={Springer Verlag},
issn={03029743},
isbn={3540237240; 9783540237242},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Park20032144,
author={Park, S.-T. and Khrabrov, A. and Pennock, D.M. and Lawrence, S. and Giles, C.L and Ungar, L.H.},
title={Static and dynamic analysis of the Internet's susceptibility to faults and attacks},
journal={Proceedings - IEEE INFOCOM},
year={2003},
volume={3},
pages={2144-2154},
note={cited By 43; Conference of 22nd Annual Joint Conference on the IEEE Computer and Communications Societies ; Conference Date: 30 March 2003 Through 3 April 2003;  Conference Code:61377},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0042474016&partnerID=40&md5=7c69b3fdd53f7ab9837df10d8c353bc9},
affiliation={Department of Computer Science, Pennsylvania State University, University Park, PA 16802, United States; NEC Labs, 4 Independence Way, Princeton, NJ 08540, United States; Sch. of Info. Sci. and Technology, Pennsylvania State University, University Park, PA 16802, United States; Department of Computer Science, University of Pennsylvania, 566 Moore Building, 200 S. 33rd St, Philadelphia, PA 19104, United States},
abstract={We analyze the susceptibility of the Internet to random faults, malicious attacks, and mixtures of faults and attacks. We analyze actual Internet data, as well as simulated data created with network models. The network models generalize previous research, and allow generation of graphs ranging from uniform to preferential, and from static to dynamic. We introduce new metrics for analyzing the connectivity and performance of networks which improve upon metrics used in earlier research. Previous research has shown that preferential networks like the Internet are more robust to random failures compared to uniform networks. We find that preferential networks, including the Internet, are more robust only when more than 95% of failures are random faults, and robustness is measured with average diameter. The advantage of preferential networks disappears with alternative metrics, and when a small fraction of faults are attacks. We also identify dynamic characteristics of the Internet which can be used to create improved network models. This model should allow more accurate analysis for the future Internet, for example facilitating the design of network protocols with optimal performance in the future, or predicting future attack and fault tolerance. We find that the Internet is becoming more preferential as it evolves. The average diameter has been stable or even decreasing as the number of nodes has been increasing. The Internet is becoming more robust to random failures over time, but has also become more vulnerable to attacks.},
keywords={Graph theory;  Mathematical models;  Network protocols;  Random processes;  Computer simulation;  Dynamic analysis;  Fault tolerance;  Internet;  Internet protocols;  Research, Nodes, Internet;  Computer aided network analysis, Accurate analysis;  Average diameter;  Dynamic characteristics;  Future internet;  Internet data;  Malicious attack;  Network models;  Optimal performance;  Random failures;  Random faults;  Simulated data;  Static and dynamic analysis},
references={Barabási, A., Albert, R., Emergence of scaling in random networks (1999) Science, 286, pp. 509-512; Liljeros, F., Edling, C.R., Amaral, L.A.N., Stanley, H.E., Aberg, Y., The web of human sexual contacts (2001) Nature, 411, pp. 907-908; Bollobás, B., (2001) Random Graphs, , Cambridge Mathematical Library. Cambridge University Press; Dorogovtsev, S.N., Mendes, J.F.F., Evolution of networks (2001) Adv. Phys., , arXiv:cond-mat/0106144; Albert, R., Jeong, H., Barabási, A., Error and attack tolerance of complex networks (2000) Nature, 406, pp. 378-382; Faloutsos, M., Faloutsos, P., Faloutsos, C., On power-law relation-ships of the Internet topology (1999) SIGCOMM, pp. 251-262; Lowekamp, B., O'Hallaron, D.R., Gross, T., Topology discovery for large Ethernet networks (2001) SIGCOMM; Alexander, D.S., Shaw, M., Nettles, S., Smith, J.M., Active bridging (1997) SIGCOMM, pp. 101-111; Allman, M., Paxson, V., On estimating end-to-end network path properties (1999) SIGCOMM, pp. 263-274; Cohen, E., Krishnamurthy, B., Rexford, J., Improving end-to-end performance of the web using server volumes and proxy filters (1998) SIGCOMM, pp. 241-253; Veres, A., Kenesi, Z., Molnár, S., Vattay, G., The propagation of long-range dependence in the Internet (2000) SIGCOMM; Lai, K., Baker, M., Measuring link bandwidths using a deterministic model of packet delay (2000) SIGCOMM, pp. 283-294; Downey, A.B., Using pathchar to estimate Internet link characteris-tics (1999) SIGCOMM, pp. 222-223; Medina, A., Matta, I., Byers, J., On the origin of power laws in Internet topologies (2000) ACM Computer Communication Review, 30 (2), pp. 18-28; Padmanabhan, V.N., Qui, L., The content and access dynamics of a busy web site: Findings and implications (2000) SIGCOMM, pp. 111-123; Krishnamurthy, B., Wang, J., On network-aware clustering of web clients (2000) SIGCOMM, pp. 97-110; Byers, J.W., Luby, M., Mitzenmacher, M., Rege, A., A digital fountain approach to reliable distribution of bulk Data (1998) SIGCOMM, pp. 56-67; Cheshire, S., Baker, M., Internet mobility 4x4 (1996) SIGCOMM; Fredj, S.B., Bonald, T., Proutiere, A., Régnié, G., Roberts, J.W., Statistical bandwidth sharing: A study of congestion at flow level (2001) SIGCOMM; Breslau, L., Shenker, S., Best-effort versus reservations: A simple comparative analysis (1998) SIGCOMM, pp. 3-16; Amir, E., McCanne, S., Katz, R.H., An active service frame-work and its application to real-time multimedia transcoding (1998) SIGCOMM, pp. 178-189; Oram, A., (2001) Peer-to-Peer: Harnessing the Power of Disruptive Technologies, , O'Reilly; Khrabrov, A., Sobti, S., Yianilos, P.N., Synchronizable databases for the web (2000) Tech. Rep., , NEC Research Institute, 4 Independence Way, Princeton, NJ, December; Chen, Y., Edler, J., Goldberg, A., Gottlieb, A., Sobti, S., Yianilos, P., A prototype implementation of archival intermemory (1999) Proceedings of the Fourth ACM Conference on Digital Libraries (DL '99); Goldberg, A.V., Yianilos, P.N., Towards an archival intermemory (1998) Proc. IEEE International Forum on Research and Technology Advances in Digital Libraries (ADL'98), pp. 147-156. , April, IEEE Computer Society; Reddy, A., Govindan, R., Estrin, D., Fault isolation in multicast trees (2000) SIGCOMM, pp. 29-40; Cohen, R., Erez, K., Ben-Avraham, D., Havlin, S., Breakdown of the Internet under intentional attack (2001) Physical Review Letters, 86. , arXiv:cond-mat/0010251; Cohen, R., Erez, K., Ben-Avraham, D., Havlin, S., Resilience of the Internet to random breakdowns (2000) Physical Review Letters, 85. , arXiv:cond-mat/0007048; Dorogovtsev, S., Mendes, J., Samukhin, A., Structure of growing networks with preferential linking (2000) Physical Review Letters, 85 (21); Dorogovtsev, S.N., Mendes, J.F.F., Samukhin, A.N., Giant strongly connected component of directed networks (2001) Phys. Rev. E, 64, pp. 025101R. , arXiv:cond-mat/0103629, 2001; Callaway, D.S., Newman, M.E.J., Strogatz, S.H., Watts, D.J., Network robustness and fragility: Percolation on random graphs (2000) Physical Review Letters, 85 (25), pp. 5468-5471. , December; Newman, M.E.J., Moore, C., Watts, D.J., Mean-field solution of the small-world network model (2000) Physical Review Letters, 84 (14), pp. 3201-3204. , April; Labovitz, C., Ahuja, A., Wattenhofer, R., Srinivasan, V., The impact of Internet policy and topology on delayed routing convergence (2001) INFOCOM, pp. 537-546; Palmer, C.R., Steffan, J.G., Generating network topologies that obey power laws (2000) Proceedings of GLOBECOM '2000, , November; Waxman, B.M., Routing of multipoint connections (1988) IEEE Journal of Selected Areas in Communication, 6 (9), pp. 1617-1622. , Dec; Calvert, K.L., Doar, M.B., Zegura, E.W., Modeling internet topology (1997) IEEE Communications Magazine, 35 (6), pp. 160-163. , June; Doar, M., A better model for generating test networks (1996) Globecom; Tangmunarunkit, H., Govindan, R., Jamin, S., Shenker, S., Willinger, W., Network topology generators: Degree-based vs. structural (2002) SIGCOMM; Jin, C., Chen, Q., Jamin, S., (2000) Inet: Internet Topology Generator; Aiello, W., Chung, F., Lu, L., A random graph model for massive graphs (2000) Proceedings of the 32rd Annual ACM Symposium on Theroy of Computing, pp. 171-180; Albert, R., Barabási, A., Topology of evolving networks: Local events and universality (2000) Tech. Rep., , LANL ArXiv; Bu, T., Towsley, D., On distinguishing between Internet power law topology generators (2002) Proceedings of INFOCOM; Pastor-Satorras, R., Vazquez, A., Vespignani, A., Dynamical and correlation properties of the Internet (2001) Physics Review Letter, 87; Pennock, D.M., Flake, G.W., Lawrence, S., Glover, E.J., Giles, C.L., Winners don't take all: Characterizing the competition for links on the web (2002) Proceedings of the National Academy of Sciences (PNAS), 99 (8), pp. 5207-5211; Mehlhorn, K., Näher, S., (1999) LEDA: A Platform for Combinatorial and Geometric Computing, , Cambridge University Press; Broder, A., Kumar, R., Maghoul, F., Raghavan, P., Rajagopalan, S., Stata, R., Tomkins, A., Wiener, J., Graph structure in the Web (2000) Proceedings of WWW9 Conference; (2002) Oregon RouteViews, , http://moat-nlanr-net.luisamigo.proxybk.com/routing/rawdata/; Crovella, M., (2002), Personal communication; (2002) Topology Project, , http://topology-eecs-umich-edu.luisamigo.proxybk.com/data.html},
correspondence_address1={Park, S.-T.; Department of Computer Science, , University Park, PA 16802, United States; email: separk@cse.psu.edu},
sponsors={IEEE Computer Society; IEEE Communications Society; National Science Foundation},
address={San Francisco, CA},
issn={0743166X},
coden={PINFE},
language={English},
abbrev_source_title={Proc IEEE INFOCOM},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Reorda2002263,
author={Reorda, M.S. and Violante, M.},
title={Fault list compaction through static timing analysis for efficient fault injection experiments},
journal={Proceedings - IEEE International Symposium on Defect and Fault Tolerance in VLSI Systems},
year={2002},
volume={2002-January},
pages={263-271},
doi={10.1109/DFTVS.2002.1173523},
art_number={1173523},
note={cited By 10; Conference of 17th IEEE International Symposium on Defect and Fault Tolerance in VLSI Systems, DFT 2002 ; Conference Date: 6 November 2002 Through 8 November 2002;  Conference Code:116181},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84948959517&doi=10.1109%2fDFTVS.2002.1173523&partnerID=40&md5=0b7a20b1c473ba6cab4e041520e18617},
affiliation={Politecnico di Torino, Dip. Automatica e Informatica, C.so Duca degli Abruzzi 24, Torino, 10129, Italy},
abstract={With the adoption of deep sub-micron technologies, faults modeled as single event transients (SETS) on combinational gates are becoming an issue, but efficient and accurate techniques for assessing their impact on VLSI designs are still missing. This paper presents a new approach for generating the list of faults to be addressed during fault injection experiments tackling SET effects. By resorting to static timing analysis, the approach is able to prune the set of possible faults and to identify a superset of the ones that may produce effects on the circuit outputs. Experimental results are reported on standard benchmarks assessing the effectiveness of the proposed approach. © 2002 IEEE.},
author_keywords={Circuit faults;  Circuit simulation;  Compaction;  Error correction;  Fault diagnosis;  Formal verification;  Prototypes;  Timing;  Transient analysis;  Very large scale integration},
keywords={Circuit simulation;  Compaction;  Defects;  Electric network analysis;  Error correction;  Failure analysis;  Fault detection;  Fault tolerance;  Formal verification;  High electron mobility transistors;  Radiation hardening;  Software testing;  Transient analysis;  Transients;  VLSI circuits, Circuit faults;  Deep sub-micron technology;  Fault injection;  New approaches;  Prototypes;  Single event transients;  Static timing analysis;  Timing, Timing circuits},
references={Hsueh, M.-C., Tsai, T.K., Iyer, R.K., Fault injection techniques and tools (1997) IEEE Computer, 30 (4), pp. 75-82; Anghel, L., Nicolaidis, M., Cost Reduction of a temporary faults detecting technique DATE'2000: ACM/IEEE Design, Automation and Test in Europe Conference, pp. 591-598; Bhuva, B.L., Paulos, J.J., Gyurcsik, R.S., Kerns, S.E., Switch-Level simulation of total dose effects on CMOS VLSI circuits (1989) IEEE Transactions on Nuclear Science, 8 (9), pp. 933-938; Kaul, N., Bhuva, B.L., Kerns, S.E., Simulation of SEU transients in CMOS IC (1991) IEEE Transactions on Nuclear Science, 38 (6), pp. 1514-1520; Baze, M.P., Buchner, S., Bartholet, W.G., Dao, T.A., An SEU analysis approach for error propagation in digital VLSI CMOS ASICs (1995) IEEE Transactions on Nuclear Science, 42 (6), pp. 1863-1869; Dahlgren, P., Liden, P., A switch-level algorithm for simulation of transients in combination logic (1995) Proc. Fault Tolerant Computing, FTCS-25, pp. 207-216; Jenn, E., Arlat, J., Rimen, M., Ohlsson, J., Karlsson, J., Fault Injection into VHDL Models: The MEFISTO Tool (1994) Proc. Fault Tolerant Computing, FTCS-24, pp. 66-75; Delong, T.A., Johnson, B.W., Profeta, J.A., III, A fault injection technique for VHDL Behavioral-Level models (1996) IEEE Design & Test of Computers Winter, pp. 24-33; Gil, D., Martinez, R., Busquets, J.V., Baraza, J.C., Gil, P.J., Fault injection into VHDL Models: Experimental validation of a fault tolerant microcomputer system (1999) European Conference of Dependable Computing (EDCC-3), pp. 191-208; Boué, J., Pétillon, P., Crouzet, Y., MEFISTO-L: A VHDL-Based fault injection tool for the experimental assessment of fault tolerance (1998) Proc. Fault-Tolerant Computing, (FTCS-28), pp. 168-173; Massengill, L.W., Baranski, A.E., Van Nort, D.O., Meng, J., Bhuva, B.L., Analysis of Single-Event effects in combinational Logic-Simulation of the AM2901 bitslice processor (2000) IEEE Transactions on Nuclear Science, 47 (6), pp. 2609-2615; Cha, H., Rudnick, E.M., Patel, J., Iyer, R.K., Choi, G.S., A Gate-Level simulation environment for Alpha-Particle-Induced transient faults (1996) IEEE Transaction on Computers, 45 (11), pp. 1248-1256. , November; Parrotta, B., Rebaudengo, M., Sonza Reorda, M., Violante, M., New techniques for accelerating fault injection in VHDL descriptions (2000) IEEE International On-Line Testing Workshop, pp. 61-66. , July},
correspondence_address1={Violante, M.; Politecnico di Torino, C.so Duca degli Abruzzi 24, Italy; email: violante@polito.it},
sponsors={},
publisher={Institute of Electrical and Electronics Engineers Inc.},
issn={15505774},
isbn={0769518311},
language={English},
abbrev_source_title={Proc. IEEE Int. Symp. Defect Fault Tolerance VLSI Syst.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Worsman2002443,
author={Worsman, M. and Wong, M.W.T. and Lee, Y.S.},
title={Enhancing the static D.C. fault diagnosis of a resistance temperature detector sensor circuit using equivalent fault analysis},
journal={Proceedings - 1st IEEE International Workshop on Electronic Design, Test and Applications, DELTA 2002},
year={2002},
pages={443-446},
doi={10.1109/DELTA.2002.994669},
art_number={994669},
note={cited By 0; Conference of 1st IEEE International Workshop on Electronic Design, Test and Applications, DELTA 2002 ; Conference Date: 29 January 2002 Through 31 January 2002;  Conference Code:112154},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84931056798&doi=10.1109%2fDELTA.2002.994669&partnerID=40&md5=e9b69210cdbb66be603db8af3276038b},
affiliation={Department of Electronic and Information Engineering, Hong Kong Polytechnic University, Hung Hom, Kowloon, Hong Kong},
abstract={Analysis of equivalent single parametric component faults in a Resistance-Temperature-Detector (RTD) sensor circuit under steady-state d.c. condition is used to systematically adjust component parameters for enhanced fault diagnosis. Component tolerances are accounted for when evaluating the effectiveness of the proposed changes. © 2002 IEEE.},
keywords={Failure analysis;  Fault detection;  Temperature sensors, Component parameters;  Component tolerances;  Equivalent faults;  Parametric components;  Resistance temperature detectors;  Sensor circuit;  Steady state, Temperature measuring instruments},
references={Worsman, M., Wong, M.W.T., Lee, Y.S., Analog circuit equivalent faults in the d.c. Domain (2000) Proc. IEEE Asian Test Symp., pp. 84-89; Worsman, M., Wong, M.W.T., Lee, Y.S., The use of equivalent fault analysis to improve static d.c. Fault diagnosis-A potentiometric dac case study (2001) IEEE European Test Workshop, pp. 73-78; Boyd, R.R., (1999) Tolerance Analysis of Electronic Circuits Using MATLAB, , CRC Press, Washington, D.C},
editor={Renovell M., Kajihara S., Demidenko S., Al-Bahadly I.},
sponsors={IEEE Computer Society Test Technology Technical Council (TTTC); Massey University},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={0769514537; 9780769514536},
language={English},
abbrev_source_title={Proc. - IEEE Int. Workshop Electron. Des., Test Appl., DELTA},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Paul2002384,
author={Paul, B.C. and Roy, K.},
title={Testing cross-talk induced delay faults in static CMOS circuit through dynamic timing analysis},
journal={IEEE International Test Conference (TC)},
year={2002},
pages={384-390},
note={cited By 18; Conference of Proceedings International Test Conference ; Conference Date: 7 October 2002 Through 10 October 2002;  Conference Code:60343},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0036446483&partnerID=40&md5=904231116766e147d74da1177a2778c6},
affiliation={Sch. of Elec. and Comp. Eng., Purdue University, W. Lafayette, IN 47907-1285, United States},
abstract={In deep submicron (DSM) circuits the critical path obtained from static timing analysis may often be incorrect due to significant effect of cross-talk. In this paper we present a new algorithm based on timed automatic test pattern generation (ATPG) to generate a list of critical paths of a circuit and the corresponding input vectors to sensitize these paths under cross-talk. The algorithm based on modified PODEM handles multiple aggressors to a victim node and properly activates the aggressors to obtain maximum coupling to the victim. Several circuits were tested using this algorithm and results were verified by HSPICE simulation.},
keywords={Algorithms;  Automatic testing;  CMOS integrated circuits;  Computer simulation;  Crosstalk;  Electric network synthesis;  Vectors, Automatic test pattern generation;  Dynamic timing analysis;  Software Package HSPICE, Integrated circuit testing},
references={Gal, L., On-chip cross talk - the new signal integrity challenge IEEE Custom Integrated Circuit Conference, 1995; Paul, B., Choi, S.H., Im, Y., Roy, K., Design verification and robust design technique for cross-talk faults (2001) 10th Asian Test Symposium, Japan, pp. 449-454. , Nov; Devadas, S., Keutzer, K., Malik, S., Computation of floating mode delay in combinational circuits: Theory and algorithm (1993) IEEE Trans. on CAD, 12 (12), pp. 1913-1923; Chang, H., Abraham, J.A., CHAN: An efficient critical path analysis algorithm (1993) Design Automation Conference (DAC'93), pp. 444-448; Chen, H., Du, D., Path sensitization in critical path problem (1993) IEEE Trans. on CAD, 12 (2), pp. 196-207; Chen, W., Gupta, S., Breuer, M.A., Test generation for crosstalk induced delay in integrated circuits (1999) Intl. Test Conference (ITC), pp. 95-104; Cormen, T.H., Leiserson, C.E., Rivest, R.L., Introduction to algorithms (1991), McGraw Hill; Sakurai, T., A simple model for circuit analysis (1991) IEEE Trans. on Electron Devices, 38 (4), pp. 887-894; Kahng, A.B., Muddu, S., Sarto, E., On switch factor based analysis of coupled RC interconnects Design Automation Conference, 2000; Goel, P., An implicit enumeration algorithm to generate tests for combinational logic circuits (1981) IEEE Trans. on Computers, C-30 (3), pp. 215-222; Wang, C., Roy, K., Maximum power estimation for CMOS circuits using deterministic and statistical approaches (1998) IEEE Trans. on VLSI Systems, 6 (1), pp. 134-140},
correspondence_address1={Paul, B.C.; Sch. of Elec. and Comp. Eng., , W. Lafayette, IN 47907-1285, United States; email: paulb@ecn.purdue.edu},
sponsors={IEEE},
address={Baltimore, MD},
issn={10893539},
coden={PITCF},
language={English},
abbrev_source_title={IEEE Int Test Conf TC},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Illgen2001911,
author={Illgen, T.},
title={Program modeling for fault definition based static analysis},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2001},
volume={2070},
pages={911-918},
doi={10.1007/3-540-45517-5_100},
note={cited By 0; Conference of 14th International Conference on Industrial and Engineering Applications of Artificial Intelligence and Expert Systems, IEA/AIE 2001 ; Conference Date: 4 June 2001 Through 7 June 2001;  Conference Code:133899},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-84947562960&doi=10.1007%2f3-540-45517-5_100&partnerID=40&md5=ee5dfc1e58f2ced86a1b90c5af866a4c},
affiliation={University of Paderborn, Paderborn, 33095, Germany},
abstract={Generating effective test data to show that a faulty structure could produce a failure poses many complexity problems. Code reviews are known as an effective method for detecting potential critical program structures. But detecting this structures in a code review takes a lot of effort and is error prone. This paper presents a method to detect potential faulty structures by program modeling. Therefore we build a database containing informations about classified faults. For analyzing the program we generate a first order predicate logic model implemented in horn clauses. We show how to detect the fault structures defined in the database and how to reduce the effort for the code review by slicing the relevant parts of the program. © Springer-Verlag Berlin Heidelberg 2001.},
keywords={Codes (symbols);  Expert systems;  Intelligent systems;  Logic programming, Code review;  Error prones;  Fault structure;  First order;  Horn clause;  Predicate logic;  Program modeling;  Program structures, Static analysis},
references={Jack, O., Belli, F., A test coverage notation for logic programming (1995) Proceedings of the Sixth International Symposium on Sofiware Reliability Engineering, pp. 133-142; John, H.R., Zhu, M.H., Patrick, A.V., Hall. Software unit test coverage and adequacy (1997) ACM Computer Surveys, 29, pp. 366-427. , December; Weiser, M., Lyle, J.R., Automateic program bug location by program slicing (1987) IEEE Symposium on Computers and Applications, pp. 877-883; Ottenstein, L.M., Ottenstein, K.J., The program dependence graph in a software developement environment (1984) ACM Sigsoft/Sigplan Software Engineering Symposium on Practical Software Development Environments, 19 (5), pp. 177-184; Kamkar, M., An overview and comparative classification of program slicing techniques (1995) J. Systems Software, 31, pp. 197-214; Binkley, D., Horwitz, S., Reps, T., Interprocedural slicing using dependence graphs (1990) ACM Trans. Progr. Lang. Syst, 12, pp. 26-61; Weyuker, E.J., Rapps, S., Selecting Software test data using data flow information (1985) IEEE Transactions on Sofiware Engineering, pp. 367-375; Tip, F., A Survey of program slicing techniques (1995) Journal of Programming Languages, 3, pp. 121-189; Weiser, M., Program slicing (1984) IEEE Transactions on Software Engineering, 10, pp. 352-357},
correspondence_address1={Illgen, T.; University of PaderbornGermany; email: tho@adt.upb.de},
editor={Monostori L., Vancza J., Ali M.},
sponsors={European Research Consortium for Informatics and Mathematics (ERCIM); Hungarian Academy of Sciences; International Society of Applied Intelligence (ISAI); Ministry of Education, Hungary},
publisher={Springer Verlag},
issn={03029743},
isbn={3540422196; 9783540422198},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Worsman200173,
author={Worsman, M. and Wong, M.W.T. and Lee, Y.S.},
title={The use of equivalent fault analysis to improve static D.C. fault diagnosis - A potentiometric DAC case study},
journal={Proceedings of the European Test Workshop},
year={2001},
volume={2001-January},
pages={73-78},
doi={10.1109/ETW.2001.946666},
art_number={946666},
note={cited By 2; Conference of IEEE European Test Workshop, ETW 2001 ; Conference Date: 29 May 2001 Through 1 June 2001;  Conference Code:116445},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0041938217&doi=10.1109%2fETW.2001.946666&partnerID=40&md5=ed785d4c0a4f0a7e3b166b8b9f68f1a4},
affiliation={Department of Electronic and Information Engineering, Hong Kong Polytechnic University, Hung Hom, Kowloon, Hong Kong},
abstract={Equivalence amongst the single and double catastrophic component faults of a Potentiometrie DAC under steady-state d.c. conditions is investigated. Easily identifiable equivalent faults are shown to populate the fault list in significant numbers. By facilitating a systematic test-design approach focused on the prevention of equivalent fault conditions during test, equivalent fault analysis is used to greatly increase the percentage of catastrophic component faults diagnosable with a Built-in Self-Test (BIST) in [13]. The effect on analysis of component tolerances and other nonidealities is yet to be considered. © 2001 IEEE.},
keywords={Fault detection, Component faults;  Component tolerances;  Equivalent faults;  Non-idealities;  Potentiometric;  Steady state;  Systematic test, Built-in self test},
references={Soma, M., Probabilistic measures of fault equivalence in mixed-signal systems (1991) IEEE VLSI Test Symp., pp. 67-70; Slamani, M., Kaminska, B., Multifrequency testability analysis for analog circuits (1994) Proc. IEEE VLSI Test Symp., pp. 54-59; Soma, M., Fault modeling and test generation for sample-and-hold circuits (1991) IEEE Int'l Symp. on Circuits and Systems, pp. 2072-2075; Lin, P.M., Elcherif, Y.S., Computational approaches to fault dictionary (1988) Analog Circuits: Computer Aided Analysis, pp. 325-363. , T. Ozawa Marcel Dekker, New York; Chakrabarti, S., Chatterjee, A., Diagnostic test pattern generation for analog circuits using hierarchical models (1999) Proc. Int'I Conf. on VLSI Design, pp. 518-523; Worsman, M., Wong, M.W.T., Lee, Y.S., Analog circuit equivalent faults in the D.C. Domain (2000) Proc. IEEE Asian Test Symp., pp. 84-89; Bell, I.M., Spinks, S.J., Evaluation and comparison of structural test methodologies for analogue and mixed signal circuits (1998) IEEE Int'I Conf. on Electronics, Circuits and Systems, pp. 433-436; Milne, A., Taylor, D., Saunders, J., Talbot, A.D., Generation of optmised fault lists for simulation of analogue circuits and test programs (1999) IEE Proc. Circuits Devices and Systems, pp. 355-360; Spiegel, G., Stroele, A.P., A unified approach to the extraction of realistic multiple bridging and break faults (1995) Proc. Euro. Design Automation Conf., pp. 184-189; Spinks, S.J., Bell, I.M., Beyond fault coverage: Estimating test quality for comparing test methodologies or evaluating testability (1997) Proc. IEEE Int'l Mixed Signal Testing Workshop, pp. 156-161; Wegener, C., Kennedy, M.P., Incorporation of hard fault-coverage in model-based testing of mixed-signal ICs (2000) Proc. Design, Automation and Test in Euro. Conf. and Exh., p. 765; Ko, U., Schenck, S., Nishimura, H., Mixed-signal ASIC for increased definition television (IDTV) applications (1991) Proc. IEEE Infi ASIC Conf. and Exh., pp. P10-214; Nejad, M.S., Sebaa, L., Ladick, A., Kuo, H., Analog built-in self-test (1994) Proc. IEEE Int'l ASIC Conf. and Exh., pp. 407-411; Huang, J.-L., Ong, C.-K., Cheng, K.-T., A BIST scheme for on-chip ADC and DAC testing (2000) Proc. Design, Auto. and Test in Euro. Conf. and Exh., pp. 216-220},
sponsors={IEEE Computer Society Test Technology Council (TTTC); Linkoping University (LiU)},
publisher={Institute of Electrical and Electronics Engineers Inc.},
issn={15301877},
isbn={0769510167},
language={English},
abbrev_source_title={Proc. European Test Workshop},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Zarrineh2000119,
author={Zarrineh, Kamran and Deo, Aneesha P. and Adams, R.Dean},
title={Defect analysis and realistic fault model extensions for static random access memories},
journal={Records of the IEEE International Workshop on Memory Technology, Design and Testing},
year={2000},
pages={119-124},
note={cited By 10; Conference of 2000 IEEE International Workshop on Memory Technology, Design and Testing ; Conference Date: 7 August 2000 Through 8 August 2000;  Conference Code:57262},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0033699075&partnerID=40&md5=e499da1ecf75a6cb5c8e5a325e81d818},
affiliation={IBM Microelectronics, Endicott, United States},
abstract={Resistive short defects were injected in the sense amplifier, memory cells and the address decoder of an SRAM memory. The behavior of these defects were examined using a transistor-level simulation framework. Three types of defects were injected in the dynamic logic address decoder. The defects affecting the pulldown and the input to the N-FETs manifested themselves as the address decoder selects more than one or zero memory cell. The defects affecting the restore unit and the word address line resulted in not selecting any cell in the memory. The injected defects in the restore unit could not be detected without the addition of DfT logic to the unit.},
keywords={Amplifiers (electronic);  CMOS integrated circuits;  Computer simulation;  Digital circuits;  Failure analysis;  Field effect transistors;  Logic devices;  Short circuit currents, Defect analysis;  Resistive shorts;  Sense amplifiers;  Static random access memory, Random access storage},
correspondence_address1={Zarrineh, Kamran; IBM Microelectronics, Endicott, United States},
sponsors={IEEE},
publisher={IEEE, Los Alamitos, CA, United States},
address={San Jose, CA, USA},
issn={10874852},
language={English},
abbrev_source_title={Rec IEEE Int Workshop Mem Technol Des Test},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Aggarwal20003480,
author={Aggarwal, A.N. and Gupta, D. and Behera, D. and Jindal, S.K.},
title={Analysis of static pulmonary mechanics helps to identify functional defects in survivors of acute respiratory distress syndrome},
journal={Critical Care Medicine},
year={2000},
volume={28},
number={10},
pages={3480-3483},
doi={10.1097/00003246-200010000-00018},
note={cited By 12},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0033783099&doi=10.1097%2f00003246-200010000-00018&partnerID=40&md5=4f4ffd61d5c2fb0a7cd08dfddad00f8d},
affiliation={Department of Pulmonary Medicine, Postgrad. Inst. of Med. Educ./Res., Chandigarh, India},
abstract={Objective: To assess the utility of static lung pressure-volume measurements in identifying and categorizing pulmonary function test defects in survivors of acute respiratory distress syndrome (ards). Design: Cross-sectional. Setting: Pulmonary function laboratory at a tertiary referral hospital in northern India. Patients: Six survivors of Ards reporting for their first follow-up visit after discharge. Measurements and Main Results: Spirometry and whole body plethysmography were performed to evaluate lung volumes and to collect static lung pressure-volume data; the latter were subjected to monoexponential analysis. Three patients had a restrictive ventilatory defect as evidenced by diminished vital capacity and total lung capacity, but only one had reduced static lung compliance. The other two patients had reduced recoil pressure at total lung capacity, suggestive of respiratory muscle weakness. Two other patients with normal lung volumes bad reduced static lung compliance. Exponential analysis of pressure-volume data in the three patients with reduced static lung compliance was consistent with reduced distensibility and loss of lung units in one patient each. Additionally, two patients bad high values for shape constant of the exponential curve, indicative of air space distention. Conclusions: Detailed analysis of static pressure-volume data can identify pulmonary function abnormality and categorize the dominant mechanism responsible for restrictive ventilatory defects in survivors of Ards, even in patients with normal lung volumes. In addition to lung fibrosis, neuromuscular weakness also contributes to decline in pulmonary function.},
author_keywords={Acute respiratory distress syndrome;  Exponential analysis;  Lung compliance;  Lung volume measurements;  Mechanical ventilatory support;  Muscle weakness;  Pulmonary fibrosis;  Respiratory function tests;  Survivors;  Transpulmonary pressure;  Whole body plethysmography},
keywords={adolescent;  adult;  adult respiratory distress syndrome;  article;  artificial ventilation;  breathing muscle;  clinical article;  clinical trial;  female;  human;  lung compliance;  lung function test;  lung mechanics;  lung pressure;  lung volume;  male;  muscle weakness;  neuromuscular disease;  plethysmography;  priority journal;  spirometry;  total lung capacity},
references={Ghio, A.J., Elliott, C.G., Crapo, R.O., Impairment after adult respiratory distress syndrome: An evaluation based on American Thoracic Society recommendations (1989) Am Rev Respir Dis, 139, pp. 1158-1162; McHugh, L.G., Milberg, J.A., Whitcomb, M.E., Recovery of function in survivors of the acute respiratory distress syndrome (1994) Am J Respir Crit Care Med, 150, pp. 90-94; Peters, J.I., Bell, R.C., Prihoda, T.J., Clinical determinants of abnormalities in pulmonary function in survivors of adult respiratory distress syndrome (1989) Am Rev Respir Dis, 139, pp. 1163-1168; Bernard, G.R., Artigas, A., Brigham, K.L., The American European Consensus Conference on ARDS: Definitions, mechanisms, relevant outcomes and clinical trial coordination (1994) Am J Respir Crit Care Med, 149, pp. 818-824; Jindal, S.K., Wahi, P.L., Pulmonary function laboratory in the tropics: Needs, problems and solutions (1991), pp. 523-542. , Lung Disease in the Tropics. Sharma OP (Ed). New York, Marcel Dekker; Jain, S.K., Ramiah, T.J., Influence of age, height and body surface area on lung functions in healthy women 15-40 years old (1967) Indian J Chest Dis, 9, pp. 13-19; Jain, S.K., Ramiah, T.J., Normal standards of pulmonary function tests for healthy men 15-40 years old: Comparison of different prediction equations (prediction formulae) (1969) Indian J Med Res, 57, pp. 1453-1466; DeTroyer, A., Yernault, J.C., Inspiratory muscle force in normal subjects and patients with interstitial lung disease (1980) Thorax, 35, pp. 92-100; Colebatch, H.J., Ng, C.K., Nikov, N., Use of an exponential function for elastic recoil (1979) J Appl Physiol, 46, pp. 337-343; Colebatch, H.J., Greaves, I.A., Ng, C.K., Exponential analysis of elastic recoil and aging in healthy males and females (1979) J Appl Physiol, 47, pp. 683-691; Chan, C.C., Cheong, T.H., Poh, S.C., Lung elastic recoil in normal young adult Chinese compared with Caucasians (1995) Eur Respir J, 8, pp. 446-449; Gibson, G.J., Pride, N.B., Lung distensibility. The static pressure-volume curve of the lungs and its use in clinical assessment (1976) Br J Dis Chest, 70, pp. 143-184; Leatherman, J.W., Fleugel, W.L., David, W.S., Muscle weakness in mechanically ventilated patients with severe asthma (1996) Am J Respir Crit Care Med, 153, pp. 1686-1690; Witt, N.J., Zochodow, D.W., Bolton, C.F., Peripheral nerve function in sepsis and multiple organ failure (1991) Chest, 99, pp. 176-184; Gorson, K.C., Ropper, A.H., Acute respiratory failure neuropathy: A variant of critical illness neuropathy (1993) Crit Care Med, 21, pp. 267-271; Leifen, F.S.S., Harinck-DeWeerd, J.E., Poortvliet, D.C.J., The role of polyneuropathy in motor convalescence after prolonged mechanical ventilation (1995) JAMA, 274, pp. 1221-1225; DeTroyer, A., Borenstein, S., Cordier, R., Analysis of lung volume restriction in patients with respiratory muscle weakness (1980) Thorax, 35, pp. 603-610; Rouby, J.J., Lherm, T., De Lassale, E., Histologic aspects of pulmonary barotrauma in critically ill patients with acute respiratory failure (1993) Intensive Care Med, 19, pp. 383-389},
correspondence_address1={Aggarwal, A.N.; Department of Pulmonary Medicine, , Chandigarh, India},
publisher={Lippincott Williams and Wilkins},
issn={00903493},
coden={CCMDC},
pubmed_id={11057804},
language={English},
abbrev_source_title={Crit. Care Med.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Liang20001,
author={Liang, Xu and Wang, Qiang and Jiang, Qirong and Liu, Wenhua and Wang, Zhonghong},
title={Operation analysis of advanced static var generator under power system fault conditions},
journal={Qinghua Daxue Xuebao/Journal of Tsinghua University},
year={2000},
volume={40},
number={1},
pages={1-3},
note={cited By 4},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0033699170&partnerID=40&md5=3e63254ae1eb76c5ca83b50edb6ec6e2},
abstract={Analysis of the advanced static var generator (ASVG) in a power system should not only include the ASVG's contribution to the power system, but also the effect of the system on the ASVG. This paper gives the equivalent circuit of an ASVG for system faulty conditions using the symmetry component method. The circuit parameters are then analyzed. The calculation results point out that, under the symmetrical modulation of the ASVG, the controller can regulate the positive sequence current and the DC component of the capacitor voltage on the DC side. The negative and zero sequence currents and the AC component of the capacitor voltage are determined by the main circuit parameters and the pattern of the ASVG transformer connection with the power system.},
keywords={Electric equipment protection;  Failure analysis;  Operations research;  Reactive power, Advanced static var generator;  Power system fault, Electric power systems},
correspondence_address1={Liang, Xu},
issn={10000054},
coden={QDXKE},
language={Chinese},
abbrev_source_title={Qinghua Daxue Xuebao},
document_type={Article},
source={Scopus},
}

@ARTICLE{Liang20004,
author={Liang, Xu and Wang, Qiang and Jiang, Qirong and Liu, Wenhua and Wang, Zhonghong},
title={Controllability analysis of a static var generator at the moment of fault occurrence in a power system},
journal={Qinghua Daxue Xuebao/Journal of Tsinghua University},
year={2000},
volume={40},
number={1},
pages={4-6},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0033685648&partnerID=40&md5=72e17c24ebdedd199ebefa439d03f4f4},
abstract={Research and experience in the development of a 20 Mvar advanced static var generator (ASVG) were used to analyze the effect of the system on the ASVG at the moment of a sudden fault in the power system. Digital simulations and vector graphs of the voltages and currents in the system and in the ASVG were used to analyze the transition of the ASVG from the normal operating conditions to the fault condition. When the system voltage, especially the phase of the voltage, changes suddenly, the proper selection of the control strategy and synchronous signal can minimize or avoid the ASVG faults to some extend. Thus, the ASVG survival ability in the power system can be enhanced.},
keywords={Computer simulation;  Controllability;  Electric equipment protection;  Failure analysis;  Reactive power, Advanced static var generator;  Vector graph, Electric power systems},
correspondence_address1={Liang, Xu},
issn={10000054},
coden={QDXKE},
language={Chinese},
abbrev_source_title={Qinghua Daxue Xuebao},
document_type={Article},
source={Scopus},
}

@ARTICLE{Yang1996614,
author={Yang, L. and Ågren, H. and Carravetta, V. and Pettersson, L.G.M.},
title={Static exchange and quantum defect analysis of X-ray absorption spectra of carbonyl compounds},
journal={Physica Scripta},
year={1996},
volume={54},
number={6},
pages={614-624},
doi={10.1088/0031-8949/54/6/011},
note={cited By 33},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0000136771&doi=10.1088%2f0031-8949%2f54%2f6%2f011&partnerID=40&md5=c1d1b46271edd591c495eae222a3acd7},
affiliation={Inst. of Phys. and Msrmt. Technology, Linköping University, S-58183, Linköping, Sweden; Ist. Chim. Quantistica ed E., C.N.R., Via Risorgimento 35, 56100 Pisa, Italy; FYSIKUM, University of Stockholm, Box 6730, S-113 85 Stockholm, Sweden; Department of Physics, Zhengzhou Inst. of Surv. and Mapping, 450052 Zhengzhou, China},
abstract={We have performed quantum chemical calculations of carbon and oxygen X-ray absorption spectra for a series of carbonyl containing molecules. Systematic variations in energy positions and intensities of the spectra have been investigated. Based on the good reproduction of experimental spectra, quantum defect and population analyses were utilized for detailed assignments. In some cases new assignments are proposed.},
references={Manne, R., (1970) J. Chem. Phys., 52, p. 5733; Stöhr, J., (1992) NEXAFS Spectroscopy, , Springer-Verlag, Berlin; Sheehy, J.A., Gil, T.J., Winstead, C.L., Farren, R.E., Langhoff, P.W., (1991) J. Chem. Phys., 91, p. 1796; Carravetta, V., Ågren, H., Pettersson, L.G.M., Vahtras, O., (1995) J. Chem. Phys., 102, p. 5589; Pettersson, L.G.M., Ågren, H., Vahtras, O., Carravetta, V., (1995) J. Chem. Phys., 103, p. 8713; Ågren, H., Carravetta, V., Vahtras, O., Pettersson, L.G.M., (1994) Chem. Phys. Lett., 222, p. 75; Aa. Jensen, H.J., Ågren, H., Olsen, J., (1990) Modern Techniques in Computational Chemistry, , (Edited by Enrico Clementi) ESCOM Science Publishers B.V; Ågren, H., Carravetta, V., Vahtras, O., Pettersson, L.G.M., (1994) Chem. Phys. Lett., 222, p. 75; Petterson, L.G.M., Ågren, H., Vahtras, O., Carravetta, V., (1996) Surf. Sci.; Carravetta, V., Pettersson, L.G.M., Ågren, H., Vahtras, O., (1996) Surf. Sci.; Ågren, H., Luo, Y., Gelmukhanov, F., Jensen, H.J.Aa., (1996) J. Electron Spectrosc.; Widmark, P.-O., Malmquist, P.Å., Roos, B.O., (1990) Theor. Chim. Acta, 77, p. 291; Ågren, H., Flores-Riveros, A., Aa. Jensen, H.J., (1989) Physica Scripta, 40, p. 745; Malmqvist, P.Å., (1986) Int. J. Quant. Chem., 30, p. 479; Aa. Jensen, H.J., Jørgensen, P., Ågren, H., (1987) J. Chem. Phys., 87, p. 451; Stener, M., Lisini, A., Decleva, P., (1995) Chem. Phys., 191, p. 141; Ågren, H., Carravetta, V., Vahtras, O., Pettersson, L.G.M., (1995) Phys. Rev., B51, p. 17848; Robin, M.B., Ishii, I., McLaren, R., Hitchcock, A.P., (1988) J. Electron Spectrosc. Rel. Phen., 47, p. 53; Naves De Brito, A., Correia, N., Svensson, S., Ågren, H., (1991) J. Chem. Phys., 95, p. 2965; Lisini, A., (1992) Chem. Phys., 169, p. 379; Weinelt, M., Hitchcock, A., Nilsson, A., Stöhr, J., , 1996. , To be published; Carravetta, V., Ågren, H., Cesar, A., (1988) Chem. Phys. Lett., 148, p. 210; Hitchcock, A.P., Brion, C.E., (1980) J. Electron Spectrosc. Rel. Phen., 19, p. 231; Domke, M., (1990) Chem. Phys. Lett., 173, p. 122; Sham, T.K., Yang, B.X., Kirz, J., Tse, J.S., (1989) Phys. Rev., A40, p. 652; Yokoyama, T., Seki, K., Morisada, I., Edamatsu, K., Ohta, T., (1990) Physica Scripta, 41, p. 189; Ågren, H., Carravetta, V., Vahtras, O., (1995) Chem. Phys., 195, p. 47; Ågren, H., Arneberg, R., (1984) Physica Scripta, 30, p. 55; Cooper, G., Sze, K.H., Brion, C.E., (1989) J. Am. Chem. Soc., 111, p. 5051; Kay, R.B., Van Der Leeuw, Ph.E., Van Der Wiel, M.J., (1977) J. Phys. B: At. Mol. Phys., 10, p. 2513; Rühl, E., Hitchcock, A.P., (1989) J. Am. Chem. Soc., 111, p. 2614; McLean, R., Clark, S.A.C., Ishii, I., Hitchcock, A.P., (1987) Phys. Rev., A26, p. 1683; Schirmer, J., Angonoa, G., Svensson, S., Nordfors, D., Gelius, U., (1987) J. Phys. B: At. Mol. Phys., 20, p. 6031; Sodhi, R.N.S., Brion, C.E., (1985) J. Am. Chem. Soc., 111, p. 5051; Hitchcock, A.P., Ishii, I., (1987) J. Electron Spectroc Rel. Phen., 42, p. 11; Sivkov, V.N., Akimov, V.N., Vinogradov, A.S., Zimkina, T.M., (1984) Opt. Spectrosc, 57, p. 160. , USSR},
correspondence_address1={Yang, L.; Inst. of Phys. and Msrmt. Technology, , S-58183, Linköping, Sweden},
publisher={Royal Swedish Academy of Sciences},
issn={00318949},
coden={PHSTB},
language={English},
abbrev_source_title={Phys Scr},
document_type={Article},
source={Scopus},
}

@ARTICLE{Tschappu1985324,
author={Tschappu, Von Fred},
title={Analysis of Fault Influences and Measurement Inaccuracies When Defining the Metering Characteristics of Static Electricity Meters of the Highest Precision Category. [ANALYSE DER FEHLEREINFLUESSE UND MESSUNSICHERHEITEN BEIM BESTIMMEN DER MESSEIGENSCHAFTEN VON STATISCHEN ELEKTRIZITAETSZAEHLERN DER HOECHSTEN GENAUIGKEITSKLASSE.]},
journal={Elektrizitatswirtschaft},
year={1985},
volume={84},
number={9},
pages={324-327},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0022052701&partnerID=40&md5=fc848816194ee33b28f2c57b23c1ad08},
affiliation={Landis & Gyr Zug AG, Zug, Switz, Landis & Gyr Zug AG, Zug, Switz},
abstract={Information is presented concerning the causes and effects of various factors which lead to uncertainty when defining the measuring characteristics of static electricity meters of the highest precision category.},
keywords={STATIC ELECTRICITY METERS, ELECTRIC MEASURING INSTRUMENTS},
correspondence_address1={Tschappu, Von Fred; Landis & Gyr Zug AG, , Landis & Gyr Zug AG, Zug, Switz},
issn={00135496},
coden={EKZWA},
language={German},
abbrev_source_title={Elektrizitaetswirtschaft},
document_type={Article},
source={Scopus},
}

@ARTICLE{Crawford198537,
author={Crawford, S.G. and McIntosh, A.A. and Pregibon, D.},
title={An analysis of static metrics and faults in C software},
journal={The Journal of Systems and Software},
year={1985},
volume={5},
number={1},
pages={37-48},
doi={10.1016/0164-1212(85)90005-6},
note={cited By 26},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0022017891&doi=10.1016%2f0164-1212%2885%2990005-6&partnerID=40&md5=d6bf4dcfa5212ad9bdfc1c1ef6a9fb86},
affiliation={AT and T Bell Laboratories U.S.A.},
abstract={In this empirical study, we evaluate the extent to which a set of software measures are correlated with the number of faults and the total estimated repair effort for a large software system. The measures we use are basic counts reflecting program size and structure and metrics proposed by McCabe and Halstead. The effect of program size has a major influence on these metrics, and we present a suitable method of adjusting the metrics for size. In modeling faults or repair effort as a function of one variable, a number of measures individually explain approximately one-quarter of the variation observed in the fault data. No one measure does significantly better than size in explaining the variation in faults found across software units, and thus multiple variable models are necessary to find metrics of importance in addition to program size. The "best" multivariate model explains approximately one-half the variation in the fault data. The metrics included in this model (in addition to size) are: the ratio of block comments to total lines of code, the number of decisions per function, and the relative vocabulary of program variables and operators. These metrics have potential for future use in the quality control of software. © 1985.},
keywords={C SOFTWARE;  SIZE METRICS;  SOFTWARE FAULTS;  SOFTWARE METRICS, COMPUTER SOFTWARE},
references={Kernighan, Ritchie, (1978) The C Programming Language, , Prentice-Hall, Engelwood Cliffs, NJ; Lesk, Lex—A Lexical Analyzer Generator (1975) Computer Science Technical Report No. 39, , 2nd ed., Bell Laboratories, Murray Hill, NJ; McCabe, A Complexity Measure (1976) IEEE Transactions on Software Engineering, 2 SE, pp. 308-320; Halstead, (1979) Elements of Software Science, , Elsevier North-Holland, New York; SCORE82 (Software Counting Rules Workshop) (1982) Performance Evaluation Review, 11. , 2nd ed., (2 & 3); Fitsos, Software Science Counting Rules and Tuning Methodology (1979) Technical Report TR 03.075, , 2nd ed., IBM Santa Teresa Laboratory, San Jose, CA; Elshoff, An Investigation into the Effects of the Counting Method Used on Software Science Measurements (1978) ACM SIGPLAN Notices, 13 (2), pp. 30-45; Becker, Chambers, (1981) S: A Language and System for Data Analysis, , Bell Laboratories, Murray Hill, NJ; Christensen, Fitsos, Smith, A Perspective on Software Science (1981) IBM Systems J., 20 (4), pp. 372-387; Software Engineering Technical Committee (IEEE Computer Society), A Glossary of Software Engineering Terminology (1982) IEEE Standard, 729. , 2nd ed., IEEE, New York, NY; Furnival, Wilson, Regressions by Leaps and Bounds (1974) Technometrics, 16, pp. 499-511; Sayward, Can Statistical Methods Help Solve Problems in Software Measurement? (1981) Computer Science and Statistics: Proc. 13th Symposium on the Interface, pp. 192-198; Sunohara, Akira, Uehara, Ohkawa, Program Complexity Measure for Software Development Management (1981) Proc. 5th International Conference on Software Engineering, pp. 100-106; Smith, A Software Science Analysis of IBM Programming Products (1980) Technical Report TR 03.081, , 2nd ed., IBM Santa Teresa Laboratory, San Jose, CA; Feuer, Fowlkes, Some Results from an Empirical Study of Computer Software (1979) Proc. 4th International Conference on Software Engineering, pp. 351-355; Bulut, Halstead, Bayer, The Experimental Verification of a Structural Property of FORTRAN Programs (1974) Proc. ACM Annual Conference, pp. 207-211; Elshoff, Measuring Commercial PL/I Programs Using Halstead's Criteria (1976) ACM SIGPLAN Notices, 11 (5), pp. 38-46; Henry, Kafura, Harris, On the Relationship Among Three Software Metrics (1981) ACM SIGMETRICS Performance Evaluation Review, 10 (1), pp. 81-88},
correspondence_address1={Crawford, S.G.},
issn={01641212},
coden={JSSOD},
language={English},
abbrev_source_title={J Syst Software},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Vallett1984141,
author={Vallett, David P. and Wilson, Thomas J.},
title={SIGNATURE ANALYSIS TECHNIQUE FOR DEFECT CHARACTERIZATION OF CMOS STATIC RAM SINGLE CELL FAILS.},
year={1984},
pages={141-146},
note={cited By 1; Conference of Proceedings - ISTFA 1984, International Symposium for Testing and Failure Analysis 1984. ;  Conference Code:7301},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0021659113&partnerID=40&md5=f7b044418b1162679a368a1222999282},
affiliation={IBM, Essex Junction, VT, USA, IBM, Essex Junction, VT, USA},
abstract={A signature analysis technique which provides electrical characterization and circuit location data on processing defects in CMOS static RAM (SRAM) cells is presented. The signatures are obtained by forcing a voltage on the defective cell and recording the resulting measured current and response voltage. Interpretation of the signatures results in a hypothesis of both the defect type and its location in the circuit.},
keywords={DATA STORAGE, DIGITAL - Random Access;  FAILURE ANALYSIS, CMOS STATIC RAM;  DEFECT LOCATION;  SIGNATURE ANALYSIS TECHNIQUES, DATA STORAGE, SEMICONDUCTOR},
correspondence_address1={Vallett, David P.; IBM, Essex Junction, VT, USA, IBM, Essex Junction, VT, USA},
sponsors={AFTA, Torrance, CA, USA},
publisher={AFTA Inc, Torrance, CA, USA},
address={Los Angeles, CA, USA},
language={English},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Roda1983822,
author={Roda, V.Obac and Davies, O.J. and Lombardi, F.},
title={ANALYSIS AND IMPLEMENTATION OF STATIC AND DYNAMIC FAULT TOLERANT RING SYSTEMS.},
journal={Proceedings - Annual Allerton Conference on Communication, Control, and Computing},
year={1983},
pages={822-831},
note={cited By 0; Conference of Proceedings - 21st Annual Allerton Conference on Communication, Control, and Computing. ;  Conference Code:5453},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0020985569&partnerID=40&md5=8907c849daf623ad598319e1ef32f900},
keywords={CONTROL CHARACTERISTICS;  FAULT TOLERANCE;  PERFORMABILITY ANALYSIS;  RELIABILITY;  RING SYSTEMS;  SOFTWARE OVERHEAD, COMPUTER SYSTEMS, DIGITAL},
correspondence_address1={Roda, V.Obac},
sponsors={Univ of Illinois at Urbana-Champaign, Dep of Electrical Engineeri; Univ of Illinois at Urbana-Champaign, Coordinated Science Lab, Ur},
publisher={Univ of Illinois at Urbana-Champaign, Urbana, Ill, USA},
address={Monticello, IL, USA},
issn={07326181},
coden={PCCCD},
language={English},
abbrev_source_title={Proceedings - Annual Allerton Conference on Communication, Control, and Computing 21st.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Borri1983391,
author={Borri, A. and Ceccotti, A. and Spinelli, P.},
title={STATISTICAL ANALYSIS OF THE INFLUENCE OF TIMBER DEFECTS ON THE STATIC BEHAVIOR OF GLUE LAMINATED BEAMS.},
year={1983},
volume={1},
pages={391-405},
note={cited By 0; Conference of Proceedings, 4th International Conference - Applications of Statistics and Probability in Soil and Structural Engineering. ;  Conference Code:5091},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0020922592&partnerID=40&md5=c6699eb36cf121b7b302b6995131752d},
keywords={COLLAPSE LOADS;  DYNAMIC BEHAVIOR;  GLUE LAMINATED BEAMS;  PROBABILITY AND STATISTICS FOR SOILS AND STRUCTURES;  STATIC BEHAVIOR;  TIMBER DEFECTS, LAMINATED PRODUCTS},
correspondence_address1={Borri, A.},
sponsors={Int Assoc for Bridge & Structural Engineering, Italian Natl G; Assoc Geotecnica Italiana, Italy; CNR, Natl Group for Geotechnical Engineering, Rome, Italy; CNR, Natl Group for Structural Engineering, Rome, Italy; Univ of Florence, Florence, Italy},
publisher={Pitagora Editrice, Bologna, Italy},
address={Florence, Italy},
isbn={8837102690},
language={English},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Kurihara1979311,
author={Kurihara, I. and Sekine, Y. and Hirai, N.},
title={Analysis of Asymmetrical Faults in the System Compensated by a Static Voltage Stabilizer},
journal={IEEJ Transactions on Power and Energy},
year={1979},
volume={99},
number={5},
pages={311-318},
doi={10.1541/ieejpes1972.99.311},
note={cited By 1},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-85024409580&doi=10.1541%2fieejpes1972.99.311&partnerID=40&md5=ce798184be5ffde8805a338f87c5cc01},
affiliation={University of Tokyo, Japan; Kansai Electric Power Co. Inc., Japan},
references={Ainsworth, J.D., (1974) CIGRE Paper; Reichert, K., (1974) CIGRE, , Paper 31-04; BarthoM, L.O., (1974) CIGRE, , Paper 31-08; Thanawala, H.L., (1976) CIGRE, , Paper 31-09},
issn={03854213},
language={English},
abbrev_source_title={IEEJ Trans. Power Energy},
document_type={Article},
source={Scopus},
}

@ARTICLE{Kurihara197945,
author={Kurihara, I. and Hirai, N. and Sekine, Y.},
title={Analysis of asymmetrical fault on the system compensated by static voltage stabilizer},
journal={Electrical Engineering in Japan},
year={1979},
volume={99},
number={3},
pages={45-54},
doi={10.1002/eej.4390990307},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-0018469439&doi=10.1002%2feej.4390990307&partnerID=40&md5=c74d21be7b7fcbda134494522ef2adbf},
affiliation={University of Tokyo, Japan; Kansai Electric Power Co., Japan; University of Tokyo, Japan},
keywords={ELECTRIC FAULT CURRENTS;  ELECTRONIC CIRCUITS, VOLTAGE STABILIZING - Applications;  SYSTEM STABILITY, ASYMMETRICAL FAULT;  STATIC VOLTAGE STABILIZER, ELECTRIC POWER SYSTEMS},
references={Ainaworth, J.D., (1974), CIGRE Paper 31‐01; Reichert, K., (1974), CIGRE Paper, 31‐04; Barthold, L.O., (1974), CIGRE Paper, 31‐08; Thanawala, H.L., (1976), CIGRE Paper, 31‐09},
correspondence_address1={Kurihara, I.; University of TokyoJapan},
issn={04247760},
language={English},
abbrev_source_title={Electr Eng Jpn},
document_type={Article},
source={Scopus},
}

@ARTICLE{ZINGIRIAN1965185,
author={ZINGIRIAN, M. and RIVARA, A.},
title={ALCOHOL-TOBACCO OPTIC NEUROPATHY: ANALYSIS OF CAMPIMETRIC DEFECTS BY THE STATIC METHOD},
journal={Ophthalmologica. Journal international d'ophtalmologie. International journal of ophthalmology. Zeitschrift fur Augenheilkunde},
year={1965},
volume={149},
pages={185-195},
doi={10.1159/000304762},
note={cited By 1},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-76549204314&doi=10.1159%2f000304762&partnerID=40&md5=40efe4f75b17a514e33737d7f20c6e5b},
author_keywords={ALCOHOLIC BEVERAGES;  OPTIC NEURITIS;  PERIMETRY;  SMOKING},
keywords={alcohol derivative, alcoholic beverage;  human;  optic nerve disease;  optic neuritis;  perimetry;  smoking;  tobacco, ALCOHOLIC BEVERAGES;  OPTIC NEURITIS;  PERIMETRY;  SMOKING, Alcoholic Beverages;  Alcohols;  Humans;  Optic Nerve Diseases;  Optic Neuritis;  Smoking;  Tobacco;  Visual Field Tests},
chemicals_cas={Alcohols},
issn={00303755},
pubmed_id={14315344},
language={English},
abbrev_source_title={Ophthalmologica},
document_type={Article},
source={Scopus},
}

@ARTICLE{ZINGIRIAN1963523,
author={ZINGIRIAN, M. and CARBONE, A.},
title={CIRCULAR STATIC CAMPIMETRY IN THE ANALYSIS OF CENTRAL DEFECTS OF THE VISUAL FIELD. [LA CAMPIMETRIA STATICA CIRCOLARE NELL'ANALISI DEI DIFETTI CENTRALI DEL CAMPO VISIVO.]},
journal={Annali di ottalmologia e clinica oculistica},
year={1963},
volume={89},
pages={523-543},
note={cited By 0},
url={https://www-scopus-com.luisamigo.proxybk.com/inward/record.uri?eid=2-s2.0-75449125358&partnerID=40&md5=042dc1db1ad0e8110d9ce655ae4ce4a2},
keywords={article;  general aspects of disease;  ophthalmology;  optic nerve;  perimetry;  retina, DISEASE;  OPHTHALMOLOGY;  OPTIC NERVE;  PERIMETRY;  RETINA, Disease;  Ophthalmology;  Optic Nerve;  Perimetry;  Retina},
correspondence_address1={ZINGIRIAN, M.},
issn={00034665},
pubmed_id={14095132},
language={Italian},
abbrev_source_title={Ann Ottalmol Clin Ocul},
document_type={Article},
source={Scopus},
}
